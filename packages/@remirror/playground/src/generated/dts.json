{
  "AUTO_GENERATED": "DO NOT EDIT",
  "typeDefinitionMap": {
    "remirror": {
      "packageJson": "{\"name\":\"remirror\",\"types\":\"index.d.ts\"}",
      "id": "remirror"
    },
    "multishift": {
      "packageJson": "{\"name\":\"multishift\",\"types\":\"index.d.ts\"}",
      "id": "multishift"
    },
    "prosemirror-suggest": {
      "packageJson": "{\"name\":\"prosemirror-suggest\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-suggest"
    },
    "@remirror/dev": {
      "packageJson": "{\"name\":\"@remirror/dev\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/dev"
    },
    "@remirror/playground": {
      "packageJson": "{\"name\":\"@remirror/playground\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/playground"
    },
    "@remirror/pm/commands": {
      "packageJson": "{\"name\":\"@remirror/pm/commands\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/commands"
    },
    "@remirror/pm/dropcursor": {
      "packageJson": "{\"name\":\"@remirror/pm/dropcursor\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/dropcursor"
    },
    "@remirror/pm/gapcursor": {
      "packageJson": "{\"name\":\"@remirror/pm/gapcursor\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/gapcursor"
    },
    "@remirror/pm/history": {
      "packageJson": "{\"name\":\"@remirror/pm/history\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/history"
    },
    "@remirror/pm/inputrules": {
      "packageJson": "{\"name\":\"@remirror/pm/inputrules\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/inputrules"
    },
    "@remirror/pm/keymap": {
      "packageJson": "{\"name\":\"@remirror/pm/keymap\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/keymap"
    },
    "@remirror/pm/model": {
      "packageJson": "{\"name\":\"@remirror/pm/model\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/model"
    },
    "@remirror/pm/schema-list": {
      "packageJson": "{\"name\":\"@remirror/pm/schema-list\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/schema-list"
    },
    "@remirror/pm/state": {
      "packageJson": "{\"name\":\"@remirror/pm/state\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/state"
    },
    "@remirror/pm/suggest": {
      "packageJson": "{\"name\":\"@remirror/pm/suggest\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/suggest"
    },
    "@remirror/pm/tables": {
      "packageJson": "{\"name\":\"@remirror/pm/tables\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/tables"
    },
    "@remirror/pm/transform": {
      "packageJson": "{\"name\":\"@remirror/pm/transform\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/transform"
    },
    "@remirror/pm/view": {
      "packageJson": "{\"name\":\"@remirror/pm/view\",\"types\":\"index.d.ts\"}",
      "id": "-@remirror/pm/view"
    },
    "react": {
      "packageJson": "{\"name\":\"react\",\"types\":\"index.d.ts\"}",
      "id": "react"
    },
    "react-dom": {
      "packageJson": "{\"name\":\"react-dom\",\"types\":\"index.d.ts\"}",
      "id": "react-dom"
    },
    "prosemirror-view": {
      "packageJson": "{\"name\":\"prosemirror-view\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-view"
    },
    "prosemirror-commands": {
      "packageJson": "{\"name\":\"prosemirror-commands\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-commands"
    },
    "prosemirror-dropcursor": {
      "packageJson": "{\"name\":\"prosemirror-dropcursor\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-dropcursor"
    },
    "prosemirror-gapcursor": {
      "packageJson": "{\"name\":\"prosemirror-gapcursor\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-gapcursor"
    },
    "prosemirror-history": {
      "packageJson": "{\"name\":\"prosemirror-history\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-history"
    },
    "prosemirror-inputrules": {
      "packageJson": "{\"name\":\"prosemirror-inputrules\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-inputrules"
    },
    "prosemirror-keymap": {
      "packageJson": "{\"name\":\"prosemirror-keymap\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-keymap"
    },
    "prosemirror-model": {
      "packageJson": "{\"name\":\"prosemirror-model\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-model"
    },
    "prosemirror-schema-list": {
      "packageJson": "{\"name\":\"prosemirror-schema-list\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-schema-list"
    },
    "prosemirror-state": {
      "packageJson": "{\"name\":\"prosemirror-state\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-state"
    },
    "prosemirror-transform": {
      "packageJson": "{\"name\":\"prosemirror-transform\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-transform"
    },
    "prosemirror-tables": {
      "packageJson": "{\"name\":\"prosemirror-tables\",\"types\":\"index.d.ts\"}",
      "id": "prosemirror-tables"
    },
    "type-fest": {
      "packageJson": "{\"name\":\"type-fest\",\"types\":\"index.d.ts\"}",
      "id": "type-fest"
    },
    "nanoevents": {
      "packageJson": "{\"name\":\"nanoevents\",\"types\":\"index.d.ts\"}",
      "id": "nanoevents"
    },
    "react-use": {
      "packageJson": "{\"name\":\"react-use\",\"types\":\"index.d.ts\"}",
      "id": "react-use"
    },
    "yjs": {
      "packageJson": "{\"name\":\"yjs\",\"types\":\"index.d.ts\"}",
      "id": "yjs"
    },
    "lib0": {
      "packageJson": "{\"name\":\"lib0\",\"types\":\"index.d.ts\"}",
      "id": "lib0"
    },
    "make-error": {
      "packageJson": "{\"name\":\"make-error\",\"types\":\"index.d.ts\"}",
      "id": "make-error"
    },
    "json.macro": {
      "packageJson": "{\"name\":\"json.macro\",\"types\":\"index.d.ts\"}",
      "id": "json.macro"
    },
    "case-anything": {
      "packageJson": "{\"name\":\"case-anything\",\"types\":\"index.d.ts\"}",
      "id": "case-anything"
    },
    "csstype": {
      "packageJson": "{\"name\":\"csstype\",\"types\":\"index.d.ts\"}",
      "id": "csstype"
    },
    "make-plural": {
      "packageJson": "{\"name\":\"make-plural\",\"types\":\"index.d.ts\"}",
      "id": "make-plural"
    },
    "prismjs": {
      "packageJson": "{\"name\":\"prismjs\",\"types\":\"index.d.ts\"}",
      "id": "prismjs"
    },
    "refractor": {
      "packageJson": "{\"name\":\"refractor\",\"types\":\"index.d.ts\"}",
      "id": "refractor"
    },
    "orderedmap": {
      "packageJson": "{\"name\":\"orderedmap\",\"types\":\"index.d.ts\"}",
      "id": "orderedmap"
    },
    "throttle-debounce": {
      "packageJson": "{\"name\":\"throttle-debounce\",\"types\":\"index.d.ts\"}",
      "id": "throttle-debounce"
    },
    "object.omit": {
      "packageJson": "{\"name\":\"object.omit\",\"types\":\"index.d.ts\"}",
      "id": "object.omit"
    },
    "object.pick": {
      "packageJson": "{\"name\":\"object.pick\",\"types\":\"index.d.ts\"}",
      "id": "object.pick"
    },
    "remirror/core/constants": {
      "packageJson": "{\"name\":\"remirror/core/constants\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/core/constants"
    },
    "@remirror/core-constants": {
      "packageJson": "{\"name\":\"@remirror/core-constants\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/core-constants"
    },
    "remirror/core/helpers": {
      "packageJson": "{\"name\":\"remirror/core/helpers\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/core/helpers"
    },
    "@remirror/core-helpers": {
      "packageJson": "{\"name\":\"@remirror/core-helpers\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/core-helpers"
    },
    "remirror/core": {
      "packageJson": "{\"name\":\"remirror/core\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/core"
    },
    "@remirror/core": {
      "packageJson": "{\"name\":\"@remirror/core\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/core"
    },
    "remirror/core/types": {
      "packageJson": "{\"name\":\"remirror/core/types\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/core/types"
    },
    "@remirror/core-types": {
      "packageJson": "{\"name\":\"@remirror/core-types\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/core-types"
    },
    "remirror/core/utils": {
      "packageJson": "{\"name\":\"remirror/core/utils\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/core/utils"
    },
    "@remirror/core-utils": {
      "packageJson": "{\"name\":\"@remirror/core-utils\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/core-utils"
    },
    "remirror/extension/annotation": {
      "packageJson": "{\"name\":\"remirror/extension/annotation\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/annotation"
    },
    "@remirror/extension-annotation": {
      "packageJson": "{\"name\":\"@remirror/extension-annotation\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-annotation"
    },
    "remirror/extension/auto-link": {
      "packageJson": "{\"name\":\"remirror/extension/auto-link\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/auto-link"
    },
    "@remirror/extension-auto-link": {
      "packageJson": "{\"name\":\"@remirror/extension-auto-link\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-auto-link"
    },
    "remirror/extension/bidi": {
      "packageJson": "{\"name\":\"remirror/extension/bidi\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/bidi"
    },
    "@remirror/extension-bidi": {
      "packageJson": "{\"name\":\"@remirror/extension-bidi\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-bidi"
    },
    "remirror/extension/blockquote": {
      "packageJson": "{\"name\":\"remirror/extension/blockquote\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/blockquote"
    },
    "@remirror/extension-blockquote": {
      "packageJson": "{\"name\":\"@remirror/extension-blockquote\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-blockquote"
    },
    "remirror/extension/bold": {
      "packageJson": "{\"name\":\"remirror/extension/bold\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/bold"
    },
    "@remirror/extension-bold": {
      "packageJson": "{\"name\":\"@remirror/extension-bold\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-bold"
    },
    "remirror/extension/code": {
      "packageJson": "{\"name\":\"remirror/extension/code\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/code"
    },
    "@remirror/extension-code": {
      "packageJson": "{\"name\":\"@remirror/extension-code\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-code"
    },
    "remirror/extension/code-block": {
      "packageJson": "{\"name\":\"remirror/extension/code-block\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/code-block"
    },
    "@remirror/extension-code-block": {
      "packageJson": "{\"name\":\"@remirror/extension-code-block\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-code-block"
    },
    "remirror/extension/collaboration": {
      "packageJson": "{\"name\":\"remirror/extension/collaboration\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/collaboration"
    },
    "@remirror/extension-collaboration": {
      "packageJson": "{\"name\":\"@remirror/extension-collaboration\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-collaboration"
    },
    "remirror/extension/diff": {
      "packageJson": "{\"name\":\"remirror/extension/diff\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/diff"
    },
    "@remirror/extension-diff": {
      "packageJson": "{\"name\":\"@remirror/extension-diff\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-diff"
    },
    "remirror/extension/doc": {
      "packageJson": "{\"name\":\"remirror/extension/doc\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/doc"
    },
    "@remirror/extension-doc": {
      "packageJson": "{\"name\":\"@remirror/extension-doc\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-doc"
    },
    "remirror/extension/drop-cursor": {
      "packageJson": "{\"name\":\"remirror/extension/drop-cursor\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/drop-cursor"
    },
    "@remirror/extension-drop-cursor": {
      "packageJson": "{\"name\":\"@remirror/extension-drop-cursor\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-drop-cursor"
    },
    "remirror/extension/emoji": {
      "packageJson": "{\"name\":\"remirror/extension/emoji\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/emoji"
    },
    "@remirror/extension-emoji": {
      "packageJson": "{\"name\":\"@remirror/extension-emoji\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-emoji"
    },
    "remirror/extension/epic-mode": {
      "packageJson": "{\"name\":\"remirror/extension/epic-mode\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/epic-mode"
    },
    "@remirror/extension-epic-mode": {
      "packageJson": "{\"name\":\"@remirror/extension-epic-mode\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-epic-mode"
    },
    "remirror/extension/events": {
      "packageJson": "{\"name\":\"remirror/extension/events\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/events"
    },
    "@remirror/extension-events": {
      "packageJson": "{\"name\":\"@remirror/extension-events\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-events"
    },
    "remirror/extension/gap-cursor": {
      "packageJson": "{\"name\":\"remirror/extension/gap-cursor\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/gap-cursor"
    },
    "@remirror/extension-gap-cursor": {
      "packageJson": "{\"name\":\"@remirror/extension-gap-cursor\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-gap-cursor"
    },
    "remirror/extension/hard-break": {
      "packageJson": "{\"name\":\"remirror/extension/hard-break\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/hard-break"
    },
    "@remirror/extension-hard-break": {
      "packageJson": "{\"name\":\"@remirror/extension-hard-break\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-hard-break"
    },
    "remirror/extension/heading": {
      "packageJson": "{\"name\":\"remirror/extension/heading\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/heading"
    },
    "@remirror/extension-heading": {
      "packageJson": "{\"name\":\"@remirror/extension-heading\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-heading"
    },
    "remirror/extension/history": {
      "packageJson": "{\"name\":\"remirror/extension/history\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/history"
    },
    "@remirror/extension-history": {
      "packageJson": "{\"name\":\"@remirror/extension-history\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-history"
    },
    "remirror/extension/horizontal-rule": {
      "packageJson": "{\"name\":\"remirror/extension/horizontal-rule\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/horizontal-rule"
    },
    "@remirror/extension-horizontal-rule": {
      "packageJson": "{\"name\":\"@remirror/extension-horizontal-rule\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-horizontal-rule"
    },
    "remirror/extension/image": {
      "packageJson": "{\"name\":\"remirror/extension/image\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/image"
    },
    "@remirror/extension-image": {
      "packageJson": "{\"name\":\"@remirror/extension-image\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-image"
    },
    "remirror/extension/italic": {
      "packageJson": "{\"name\":\"remirror/extension/italic\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/italic"
    },
    "@remirror/extension-italic": {
      "packageJson": "{\"name\":\"@remirror/extension-italic\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-italic"
    },
    "remirror/extension/link": {
      "packageJson": "{\"name\":\"remirror/extension/link\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/link"
    },
    "@remirror/extension-link": {
      "packageJson": "{\"name\":\"@remirror/extension-link\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-link"
    },
    "remirror/extension/mention": {
      "packageJson": "{\"name\":\"remirror/extension/mention\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/mention"
    },
    "@remirror/extension-mention": {
      "packageJson": "{\"name\":\"@remirror/extension-mention\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-mention"
    },
    "remirror/extension/paragraph": {
      "packageJson": "{\"name\":\"remirror/extension/paragraph\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/paragraph"
    },
    "@remirror/extension-paragraph": {
      "packageJson": "{\"name\":\"@remirror/extension-paragraph\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-paragraph"
    },
    "remirror/extension/placeholder": {
      "packageJson": "{\"name\":\"remirror/extension/placeholder\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/placeholder"
    },
    "@remirror/extension-placeholder": {
      "packageJson": "{\"name\":\"@remirror/extension-placeholder\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-placeholder"
    },
    "remirror/extension/position-tracker": {
      "packageJson": "{\"name\":\"remirror/extension/position-tracker\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/position-tracker"
    },
    "@remirror/extension-position-tracker": {
      "packageJson": "{\"name\":\"@remirror/extension-position-tracker\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-position-tracker"
    },
    "remirror/extension/positioner": {
      "packageJson": "{\"name\":\"remirror/extension/positioner\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/positioner"
    },
    "@remirror/extension-positioner": {
      "packageJson": "{\"name\":\"@remirror/extension-positioner\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-positioner"
    },
    "remirror/extension/react-component": {
      "packageJson": "{\"name\":\"remirror/extension/react-component\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/react-component"
    },
    "@remirror/extension-react-component": {
      "packageJson": "{\"name\":\"@remirror/extension-react-component\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-react-component"
    },
    "remirror/extension/react-ssr": {
      "packageJson": "{\"name\":\"remirror/extension/react-ssr\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/react-ssr"
    },
    "@remirror/extension-react-ssr": {
      "packageJson": "{\"name\":\"@remirror/extension-react-ssr\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-react-ssr"
    },
    "remirror/extension/search": {
      "packageJson": "{\"name\":\"remirror/extension/search\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/search"
    },
    "@remirror/extension-search": {
      "packageJson": "{\"name\":\"@remirror/extension-search\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-search"
    },
    "remirror/extension/strike": {
      "packageJson": "{\"name\":\"remirror/extension/strike\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/strike"
    },
    "@remirror/extension-strike": {
      "packageJson": "{\"name\":\"@remirror/extension-strike\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-strike"
    },
    "remirror/extension/text": {
      "packageJson": "{\"name\":\"remirror/extension/text\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/text"
    },
    "@remirror/extension-text": {
      "packageJson": "{\"name\":\"@remirror/extension-text\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-text"
    },
    "remirror/extension/trailing-node": {
      "packageJson": "{\"name\":\"remirror/extension/trailing-node\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/trailing-node"
    },
    "@remirror/extension-trailing-node": {
      "packageJson": "{\"name\":\"@remirror/extension-trailing-node\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-trailing-node"
    },
    "remirror/extension/underline": {
      "packageJson": "{\"name\":\"remirror/extension/underline\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/underline"
    },
    "@remirror/extension-underline": {
      "packageJson": "{\"name\":\"@remirror/extension-underline\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-underline"
    },
    "remirror/extension/yjs": {
      "packageJson": "{\"name\":\"remirror/extension/yjs\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/extension/yjs"
    },
    "@remirror/extension-yjs": {
      "packageJson": "{\"name\":\"@remirror/extension-yjs\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/extension-yjs"
    },
    "remirror/preset/core": {
      "packageJson": "{\"name\":\"remirror/preset/core\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/preset/core"
    },
    "@remirror/preset-core": {
      "packageJson": "{\"name\":\"@remirror/preset-core\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/preset-core"
    },
    "remirror/preset/embed": {
      "packageJson": "{\"name\":\"remirror/preset/embed\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/preset/embed"
    },
    "@remirror/preset-embed": {
      "packageJson": "{\"name\":\"@remirror/preset-embed\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/preset-embed"
    },
    "remirror/preset/list": {
      "packageJson": "{\"name\":\"remirror/preset/list\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/preset/list"
    },
    "@remirror/preset-list": {
      "packageJson": "{\"name\":\"@remirror/preset-list\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/preset-list"
    },
    "remirror/preset/react": {
      "packageJson": "{\"name\":\"remirror/preset/react\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/preset/react"
    },
    "@remirror/preset-react": {
      "packageJson": "{\"name\":\"@remirror/preset-react\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/preset-react"
    },
    "remirror/preset/social": {
      "packageJson": "{\"name\":\"remirror/preset/social\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/preset/social"
    },
    "@remirror/preset-social": {
      "packageJson": "{\"name\":\"@remirror/preset-social\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/preset-social"
    },
    "remirror/preset/table": {
      "packageJson": "{\"name\":\"remirror/preset/table\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/preset/table"
    },
    "@remirror/preset-table": {
      "packageJson": "{\"name\":\"@remirror/preset-table\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/preset-table"
    },
    "remirror/preset/wysiwyg": {
      "packageJson": "{\"name\":\"remirror/preset/wysiwyg\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/preset/wysiwyg"
    },
    "@remirror/preset-wysiwyg": {
      "packageJson": "{\"name\":\"@remirror/preset-wysiwyg\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/preset-wysiwyg"
    },
    "remirror/react": {
      "packageJson": "{\"name\":\"remirror/react\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/react"
    },
    "@remirror/react": {
      "packageJson": "{\"name\":\"@remirror/react\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/react"
    },
    "remirror/react/utils": {
      "packageJson": "{\"name\":\"remirror/react/utils\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/react/utils"
    },
    "@remirror/react-utils": {
      "packageJson": "{\"name\":\"@remirror/react-utils\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/react-utils"
    },
    "remirror/react/social": {
      "packageJson": "{\"name\":\"remirror/react/social\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/react/social"
    },
    "@remirror/react-social": {
      "packageJson": "{\"name\":\"@remirror/react-social\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/react-social"
    },
    "remirror/react/wysiwyg": {
      "packageJson": "{\"name\":\"remirror/react/wysiwyg\",\"types\":\"index.d.ts\"}",
      "id": "-remirror/react/wysiwyg"
    },
    "@remirror/react-wysiwyg": {
      "packageJson": "{\"name\":\"@remirror/react-wysiwyg\",\"types\":\"index.d.ts\"}",
      "id": "@remirror/react-wysiwyg"
    }
  },
  "dtsCache": {
    "remirror": {
      "index.d.ts": "import type { SemanticVersion } from 'json.macro/types';\r\nexport declare const VERSION: SemanticVersion;\r\n"
    },
    "multishift": {
      "index.d.ts": "export type { SpecialKey, DropdownType } from './multishift-constants';\r\nexport { Type, MultishiftActionTypes } from './multishift-constants';\r\nexport { useMultishift } from './multishift';\r\nexport type { A11yStatusMessageParameter, Action, ActionCreator, ActionCreatorMapToDispatch, ActionCreatorsMapObject, ActionWithPayload, AllMultishiftActions, AllMultishiftDispatchActions, CreateMultishiftAction, Direction, GetA11yStatusMessage, GetComboBoxPropsOptions, GetComboBoxPropsReturn, GetItemId, GetItemPropsOptions, GetLabelPropsWithRefReturn, GetPropsWithRefOptions, GetPropsWithRefReturn, GetRemoveButtonOptions, GetRemoveButtonReturn, IgnoredElementOptions, ItemClickPayload, ItemToString, ItemsToString, Modifier, MultishiftA11yIdProps, MultishiftBaseProps, MultishiftBehaviorProps, MultishiftChangeHandlerProps, MultishiftDefaultValueProps, MultishiftDispatchActions, MultishiftFocusHelpers, MultishiftHelpers, MultishiftInitialValueProps, MultishiftItemsChangeset, MultishiftPropGetters, MultishiftProps, MultishiftReturn, MultishiftRootActions, MultishiftState, MultishiftStateChangeset, MultishiftStateHelpers, MultishiftStateProps, RefParameter, SpecialKeyDownPayload, } from './multishift-types';\r\n",
      "multishift-action-creators.d.ts": "import { MultishiftActionTypes } from './multishift-constants';\r\nimport type { CreateMultishiftAction, ItemClickPayload, MultishiftStateProps, SpecialKeyDownPayload } from './multishift-types';\r\nexport interface ItemsPayload<Item = any> {\r\n    items: Item[];\r\n    /**\r\n     * By default whenever a selection is made the highlights are reset.\r\n     * Set this to true to hold onto the highlights\r\n     */\r\n    keepHighlights?: boolean;\r\n}\r\n/**\r\n * Select the provided items.\r\n */\r\nexport declare const selectItems: <Item = any>(items: Item[], keepHighlights?: boolean) => {\r\n    type: \"$$__SELECT_ITEMS__\";\r\n    payload: {\r\n        items: Item[];\r\n        keepHighlights: boolean;\r\n    };\r\n};\r\n/**\r\n * Select the provided item.\r\n */\r\nexport declare const selectItem: <Item = any>(item: Item, keepHighlights?: boolean) => {\r\n    type: \"$$__SELECT_ITEM__\";\r\n    payload: {\r\n        items: Item[];\r\n        keepHighlights: boolean;\r\n    };\r\n};\r\n/**\r\n * Remove the provided items from the current selection.\r\n */\r\nexport declare const removeSelectedItems: <Item = any>(items: Item[], keepHighlights?: boolean) => {\r\n    type: \"$$_REMOVE__SELECTED_ITEMS__\";\r\n    payload: {\r\n        items: Item[];\r\n        keepHighlights: boolean;\r\n    };\r\n};\r\n/**\r\n * Remove the provided item from the current selection.\r\n */\r\nexport declare const removeSelectedItem: <Item = any>(item: Item, keepHighlights?: boolean) => {\r\n    type: \"$$__REMOVE_SELECTED_ITEM__\";\r\n    payload: {\r\n        items: Item[];\r\n        keepHighlights: boolean;\r\n    };\r\n};\r\n/**\r\n * Remove the provided item from the current selection.\r\n */\r\nexport declare const clearSelection: () => {\r\n    type: \"$$__CLEAR_SELECTION__\";\r\n};\r\n/**\r\n * Set the `hoverIndex` to a certain value.\r\n */\r\nexport declare const setHoverItemIndex: (payload: number) => {\r\n    type: \"$$__SET_HOVER_ITEM_INDEX__\";\r\n    payload: number;\r\n};\r\n/**\r\n * Toggle the `isOpen` status of the menu.\r\n */\r\nexport declare const toggleMenu: () => {\r\n    type: \"$$__TOGGLE_MENU__\";\r\n};\r\n/**\r\n * Set isOpen to false (closing the menu).\r\n */\r\nexport declare const closeMenu: () => {\r\n    type: \"$$__CLOSE_MENU__\";\r\n};\r\n/**\r\n * Set `isOpen` to true (opening the menu).\r\n */\r\nexport declare const openMenu: () => {\r\n    type: \"$$__OPEN_MENU__\";\r\n};\r\n/**\r\n * Set the highlighted item indexes.\r\n */\r\nexport declare const setHighlightedIndexes: (payload: number[]) => {\r\n    type: \"$$__SET_HIGHLIGHTED_INDEXES__\";\r\n    payload: number[];\r\n};\r\n/**\r\n * Set the highlighted item index.\r\n */\r\nexport declare const setHighlightedIndex: (index: number) => {\r\n    type: \"$$__SET_HIGHLIGHTED_INDEX__\";\r\n    payload: number[];\r\n};\r\n/**\r\n * Removes all the highlighted items including the hover.\r\n */\r\nexport declare const clearHighlighted: () => {\r\n    type: \"$$__CLEAR_HIGHLIGHTED__\";\r\n};\r\n/**\r\n * Reset the state of the reducer.\r\n */\r\nexport declare const reset: () => {\r\n    type: \"$$__RESET__\";\r\n};\r\n/**\r\n * Dispatched when the mouse hovers over an item\r\n */\r\nexport declare const itemMouseMove: (payload: number) => {\r\n    type: \"$$__ITEM_MOUSE_MOVE__\";\r\n    payload: number;\r\n};\r\nexport declare const itemMouseLeave: (payload: number) => {\r\n    type: \"$$__ITEM_MOUSE_LEAVE__\";\r\n    payload: number;\r\n};\r\n/**\r\n * Reports when a user has clicked on an item's element.\r\n */\r\nexport declare const itemClick: (payload: ItemClickPayload) => {\r\n    type: \"$$__ITEM_CLICK__\";\r\n    payload: ItemClickPayload;\r\n};\r\n/**\r\n * Called when the menu is blurred.\r\n */\r\nexport declare const menuBlur: () => {\r\n    type: \"$$__MENU_BLUR__\";\r\n};\r\nexport declare const inputBlur: () => {\r\n    type: \"$$__INPUT_BLUR__\";\r\n};\r\nexport declare const toggleButtonBlur: () => {\r\n    type: \"$$__TOGGLE_BUTTON_BLUR__\";\r\n};\r\n/**\r\n * Clears the jump text value.\r\n */\r\nexport declare const clearJumpText: () => {\r\n    type: \"$$__CLEAR_JUMP_TEXT__\";\r\n};\r\nexport declare const clearInputValue: () => {\r\n    type: \"$$__CLEAR_INPUT_VALUE__\";\r\n};\r\n/**\r\n * Dispatches the action for clicking the toggle button\r\n */\r\nexport declare const toggleButtonClick: () => {\r\n    type: \"$$__TOGGLE_BUTTON_CLICK__\";\r\n};\r\nexport declare const outerTouchEnd: () => {\r\n    type: \"$$__OUTER_TOUCH_END__\";\r\n};\r\nexport declare const outerMouseUp: () => {\r\n    type: \"$$__OUTER_MOUSE_UP__\";\r\n};\r\n/**\r\n * Handle the menu key down event.\r\n */\r\nexport declare const menuSpecialKeyDown: (payload: SpecialKeyDownPayload) => {\r\n    type: \"$$__MENU_SPECIAL_KEY_DOWN__\";\r\n    payload: SpecialKeyDownPayload;\r\n};\r\nexport declare const toggleButtonSpecialKeyDown: (payload: SpecialKeyDownPayload) => {\r\n    type: \"$$__TOGGLE_BUTTON_SPECIAL_KEY_DOWN__\";\r\n    payload: SpecialKeyDownPayload;\r\n};\r\nexport declare const inputSpecialKeyDown: (payload: SpecialKeyDownPayload) => {\r\n    type: \"$$__INPUT_SPECIAL_KEY_DOWN__\";\r\n    payload: SpecialKeyDownPayload;\r\n};\r\nexport declare const menuCharacterKeyDown: (payload: string) => {\r\n    type: \"$$__MENU_CHARACTER_KEY_DOWN__\";\r\n    payload: string;\r\n};\r\nexport declare const inputValueChange: (payload: string) => {\r\n    type: \"$$__INPUT_VALUE_CHANGE__\";\r\n    payload: string;\r\n};\r\nexport declare const setState: <Item = any>(payload: Partial<import(\"./multishift-types\").MultishiftState<Item>>) => {\r\n    type: \"$$__SET_STATE__\";\r\n    payload: Partial<import(\"./multishift-types\").MultishiftState<Item>>;\r\n};\r\ndeclare global {\r\n    namespace Multishift {\r\n        /**\r\n         * This is an interface of actions available. Use declaration merging to\r\n         * extend it with your own custom actions.\r\n         */\r\n        interface Actions<Item = any> {\r\n            itemMouseMove: typeof itemMouseMove;\r\n            itemMouseLeave: typeof itemMouseLeave;\r\n            itemClick: typeof itemClick;\r\n            menuBlur: typeof menuBlur;\r\n            toggleButtonBlur: typeof toggleButtonBlur;\r\n            inputBlur: typeof inputBlur;\r\n            toggleButtonClick: typeof toggleButtonClick;\r\n            menuSpecialKeyDown: typeof menuSpecialKeyDown;\r\n            toggleButtonSpecialKeyDown: typeof toggleButtonSpecialKeyDown;\r\n            inputSpecialKeyDown: typeof inputSpecialKeyDown;\r\n            menuCharacterKeyDown: typeof menuCharacterKeyDown;\r\n            outerTouchEnd: typeof outerTouchEnd;\r\n            outerMouseUp: typeof outerMouseUp;\r\n        }\r\n        interface CoreActions<Item = any> {\r\n            selectItems: CreateMultishiftAction<typeof MultishiftActionTypes.SelectItems, ItemsPayload<Item>, [Item[], boolean?]>;\r\n            selectItem: CreateMultishiftAction<typeof MultishiftActionTypes.SelectItem, ItemsPayload<Item>, [Item, boolean?]>;\r\n            removeSelectedItems: CreateMultishiftAction<typeof MultishiftActionTypes.RemoveSelectedItems, ItemsPayload<Item>, [Item[], boolean?]>;\r\n            removeSelectedItem: CreateMultishiftAction<typeof MultishiftActionTypes.RemoveSelectedItem, ItemsPayload<Item>, [Item, boolean?]>;\r\n            setState: CreateMultishiftAction<typeof MultishiftActionTypes.SetState, MultishiftStateProps<Item>>;\r\n            clearSelection: typeof clearSelection;\r\n            setHoverItemIndex: typeof setHoverItemIndex;\r\n            inputValueChange: typeof inputValueChange;\r\n            clearInputValue: typeof clearInputValue;\r\n            toggleMenu: typeof toggleMenu;\r\n            closeMenu: typeof closeMenu;\r\n            openMenu: typeof openMenu;\r\n            setHighlightedIndexes: typeof setHighlightedIndexes;\r\n            setHighlightedIndex: typeof setHighlightedIndex;\r\n            clearHighlighted: typeof clearHighlighted;\r\n            reset: typeof reset;\r\n            clearJumpText: typeof clearJumpText;\r\n        }\r\n    }\r\n}\r\n",
      "multishift-constants.d.ts": "import type { Value } from '@remirror/core-types';\r\nexport declare const SPECIAL_KEYS: readonly [\"Tab\", \"Space\", \"Enter\", \"Escape\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Home\", \"End\", \"PageUp\", \"PageDown\", \"SelectAll\"];\r\nexport declare type SpecialKey = typeof SPECIAL_KEYS[number];\r\nexport declare const SPECIAL_INPUT_KEYS: readonly [\"ArrowDown\", \"ArrowUp\", \"Enter\", \"Escape\"];\r\nexport declare const SPECIAL_MENU_KEYS: readonly [\"ArrowDown\", \"ArrowUp\", \"Space\", \"Tab\", \"Enter\", \"Escape\", \"Home\", \"End\", \"SelectAll\"];\r\nexport declare const SPECIAL_TOGGLE_BUTTON_KEYS: readonly [\"ArrowDown\", \"ArrowUp\", \"Space\"];\r\nexport declare const Type: {\r\n    /**\r\n     * Describes a selection only drop down. There is no input for filtering\r\n     * longer lists.\r\n     */\r\n    readonly Select: \"select\";\r\n    /**\r\n     * Describes the combination of a selection drop down with an input for\r\n     * filtering potential options.\r\n     */\r\n    readonly ComboBox: \"combobox\";\r\n    /**\r\n     * A menu rendered without a toggleButton, combobox or input element. It is up\r\n     * to you to provide the input value and manage the focus.\r\n     */\r\n    readonly ControlledMenu: \"controlled-menu\";\r\n};\r\nexport declare type DropdownType = Value<typeof Type>;\r\nexport declare const MultishiftActionTypes: {\r\n    readonly SelectItems: \"$$__SELECT_ITEMS__\";\r\n    readonly SelectItem: \"$$__SELECT_ITEM__\";\r\n    readonly RemoveSelectedItems: \"$$_REMOVE__SELECTED_ITEMS__\";\r\n    readonly RemoveSelectedItem: \"$$__REMOVE_SELECTED_ITEM__\";\r\n    readonly ClearSelection: \"$$__CLEAR_SELECTION__\";\r\n    readonly SetHoverItemIndex: \"$$__SET_HOVER_ITEM_INDEX__\";\r\n    readonly ToggleMenu: \"$$__TOGGLE_MENU__\";\r\n    readonly CloseMenu: \"$$__CLOSE_MENU__\";\r\n    readonly OpenMenu: \"$$__OPEN_MENU__\";\r\n    readonly SetHighlightedIndexes: \"$$__SET_HIGHLIGHTED_INDEXES__\";\r\n    readonly SetHighlightedIndex: \"$$__SET_HIGHLIGHTED_INDEX__\";\r\n    readonly ClearHighlighted: \"$$__CLEAR_HIGHLIGHTED__\";\r\n    readonly ClearHover: \"$$__CLEAR_HOVER__\";\r\n    readonly Reset: \"$$__RESET__\";\r\n    readonly SetState: \"$$__SET_STATE__\";\r\n    readonly ItemMouseMove: \"$$__ITEM_MOUSE_MOVE__\";\r\n    readonly ItemMouseLeave: \"$$__ITEM_MOUSE_LEAVE__\";\r\n    readonly ItemClick: \"$$__ITEM_CLICK__\";\r\n    readonly ToggleButtonClick: \"$$__TOGGLE_BUTTON_CLICK__\";\r\n    readonly ToggleButtonBlur: \"$$__TOGGLE_BUTTON_BLUR__\";\r\n    readonly ToggleButtonSpecialKeyDown: \"$$__TOGGLE_BUTTON_SPECIAL_KEY_DOWN__\";\r\n    readonly MenuBlur: \"$$__MENU_BLUR__\";\r\n    readonly MenuSpecialKeyDown: \"$$__MENU_SPECIAL_KEY_DOWN__\";\r\n    readonly MenuCharacterKeyDown: \"$$__MENU_CHARACTER_KEY_DOWN__\";\r\n    readonly InputBlur: \"$$__INPUT_BLUR__\";\r\n    readonly InputSpecialKeyDown: \"$$__INPUT_SPECIAL_KEY_DOWN__\";\r\n    readonly ClearJumpText: \"$$__CLEAR_JUMP_TEXT__\";\r\n    readonly InputValueChange: \"$$__INPUT_VALUE_CHANGE__\";\r\n    readonly ClearInputValue: \"$$__CLEAR_INPUT_VALUE__\";\r\n    readonly OuterMouseUp: \"$$__OUTER_MOUSE_UP__\";\r\n    readonly OuterTouchEnd: \"$$__OUTER_TOUCH_END__\";\r\n};\r\ndeclare type MultishiftActionTypes = typeof MultishiftActionTypes;\r\ndeclare type MultishiftTypesInterface = {\r\n    [P in Value<MultishiftActionTypes>]: any;\r\n};\r\ndeclare global {\r\n    namespace Multishift {\r\n        /**\r\n         * This is an interface of all the actionTypes available. Use declaration merging to\r\n         * extend it with your own custom actionTypes.\r\n         */\r\n        interface ActionTypes extends MultishiftTypesInterface {\r\n        }\r\n    }\r\n}\r\nexport {};\r\n",
      "multishift-hooks.d.ts": "import type { DependencyList, EffectCallback } from 'react';\r\nimport type { GetA11yStatusMessage, ItemsToString, MultishiftA11yIdProps, MultishiftProps, MultishiftState } from './multishift-types';\r\n/**\r\n * Creates the reducer for managing the multishift internal state.\r\n */\r\nexport declare function useMultishiftReducer<Item = any>(parameter: MultishiftProps<Item>): any;\r\n/**\r\n * Creates the ids for identifying the elements in the app.\r\n */\r\nexport declare function useElementIds(props: MultishiftA11yIdProps): {\r\n    labelId: string;\r\n    inputId: string;\r\n    menuId: string;\r\n    getItemA11yId: (index?: number) => string;\r\n    toggleButtonId: string;\r\n};\r\n/**\r\n * Get the element references.\r\n */\r\nexport declare function useElementRefs(): {\r\n    toggleButton: import(\"react\").MutableRefObject<HTMLElement>;\r\n    input: import(\"react\").MutableRefObject<HTMLElement>;\r\n    menu: import(\"react\").MutableRefObject<HTMLElement>;\r\n    comboBox: import(\"react\").MutableRefObject<HTMLElement>;\r\n    items: import(\"react\").MutableRefObject<HTMLElement[]>;\r\n    ignored: import(\"react\").MutableRefObject<HTMLElement[]>;\r\n};\r\ninterface UseSetA11yProps<Item = any> {\r\n    state: MultishiftState<Item>;\r\n    items: Item[];\r\n    itemsToString?: ItemsToString<Item>;\r\n    getA11yStatusMessage?: GetA11yStatusMessage<Item>;\r\n    customA11yStatusMessage?: string;\r\n}\r\nexport declare function useSetA11y<Item = any>(props: UseSetA11yProps<Item>): void;\r\n/**\r\n * This is a hook that listens for events mouse and touch events.\r\n *\r\n * When something does occur outside of the registered elements it will dispatch\r\n * the relevant action.\r\n */\r\nexport declare function useOuterEventListener<Item = any>(refs: ReturnType<typeof useElementRefs>, state: MultishiftState<Item>, { outerMouseUp, outerTouchEnd }: {\r\n    outerMouseUp: () => void;\r\n    outerTouchEnd: () => void;\r\n}): import(\"react\").MutableRefObject<{\r\n    isMouseDown: boolean;\r\n    isTouchMove: boolean;\r\n    lastBlurred: HTMLElement;\r\n}>;\r\n/**\r\n * A hook for managing multiple timeouts.\r\n *\r\n * @remarks\r\n *\r\n * All timeouts are automatically cleared when un-mounting.\r\n */\r\nexport declare function useTimeouts(): readonly [(fn: () => void, time?: number) => void, () => void];\r\n/**\r\n * React effect hook that ignores the first invocation (e.g. on mount).\r\n *\r\n * @remarks\r\n *\r\n * The signature is exactly the same as the useEffect hook.\r\n *\r\n * ```tsx\r\n * import React from 'react'\r\n * import { useEffectOnUpdate } from 'react-use';\r\n *\r\n * const Demo = () => {\r\n *   const [count, setCount] = React.useState(0);\r\n *\r\n *   React.useEffect(() => {\r\n *     const interval = setInterval(() => {\r\n *       setCount(count => count + 1)\r\n *     }, 1000)\r\n *\r\n *     return () => {\r\n *       clearInterval(interval)\r\n *     }\r\n *   }, [])\r\n *\r\n *   useEffectOnUpdate(() => {\r\n *     log('count', count) // will only show 1 and beyond\r\n *\r\n *     return () => { // *OPTIONAL*\r\n *       // do something on unmount\r\n *     }\r\n *   }) // you can include deps array if necessary\r\n *\r\n *   return <div>Count: {count}</div>\r\n * };\r\n * ```\r\n */\r\nexport declare function useEffectOnUpdate(effect: EffectCallback, dependencies: DependencyList): void;\r\n/**\r\n * React lifecycle hook that calls a function when the component will unmount.\r\n *\r\n * @remarks\r\n *\r\n * Try `useEffectOnce` if you need both a mount and unmount function.\r\n *\r\n * ```jsx\r\n * import {useUnmount} from 'react-use';\r\n *\r\n * const Demo = () => {\r\n *   useUnmount(() => log('UNMOUNTED'));\r\n *   return null;\r\n * };\r\n * ```\r\n */\r\nexport declare function useUnmount(fn: () => void | undefined): void;\r\nexport {};\r\n",
      "multishift-reducer.d.ts": "import type { MultishiftProps, MultishiftRootActions, MultishiftState, MultishiftStateProps } from './multishift-types';\r\nexport declare const multishiftReducer: any;\r\n",
      "multishift-types.d.ts": "import type { DetailedHTMLProps, Dispatch, HTMLAttributes, HTMLProps, KeyboardEvent, MouseEvent, Ref } from 'react';\r\nimport type { DropdownType, SpecialKey } from './multishift-constants';\r\nexport interface MultishiftState<Item = any> {\r\n    /**\r\n     * Contains all the selected items.\r\n     *\r\n     * When `multiple` selection is enabled this can contain more than one item.\r\n     *\r\n     * @defaultValue []\r\n     */\r\n    selectedItems: Item[];\r\n    /**\r\n     * This tracks the text typed when no input is available for filtering.\r\n     *\r\n     * It allows the implementation of quick jump to item functionality.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    jumpText: string;\r\n    /**\r\n     * Determines whether or not the menu items should be displayed.\r\n     *\r\n     * @defaultValue false\r\n     */\r\n    isOpen: boolean;\r\n    /**\r\n     * This tracks the input value when filtering the items to insert.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    inputValue: string;\r\n    /**\r\n     * Each index represents a position that is highlighted. This is to allow the\r\n     * selection of multiple items in one sweep.\r\n     *\r\n     * Examples are\r\n     * - Ctrl / Cmd click - toggle one position / or start a new highlight group\r\n     * - Shift click - add start or complete a new highlighted group\r\n     * - Click and drag - drag over multiple items to select each one\r\n     * - ArrowKey shift - Select multiple highlighted items\r\n     *\r\n     * @defaultValue []\r\n     */\r\n    highlightedIndexes: number[];\r\n    /**\r\n     * Marks the position as the starting point for a new highlighted group.\r\n     *\r\n     * @defaultValue -1\r\n     */\r\n    highlightedGroupStartIndex: number;\r\n    /**\r\n     * Marks the position as the end point for a new highlighted group.\r\n     *\r\n     * @defaultValue undefined\r\n     */\r\n    highlightedGroupEndIndex: number | undefined;\r\n    /**\r\n     * Marks the index of the currently hovered item.\r\n     *\r\n     * @defaultValue -1\r\n     */\r\n    hoveredIndex: number;\r\n}\r\n/**\r\n * Modifiers that are used to determine the behaviour of the click or key down\r\n * action.\r\n */\r\nexport declare type Modifier = 'shiftKey' | 'altKey' | 'metaKey' | 'ctrlKey';\r\n/**\r\n * Type representing Generic Action\r\n */\r\nexport interface Action<Type extends string = string> {\r\n    type: Type;\r\n}\r\n/**\r\n * Type representing an Action with Payload\r\n */\r\nexport interface ActionWithPayload<Type extends string = string, Payload = any> {\r\n    type: Type;\r\n    payload: Payload;\r\n}\r\n/**\r\n * An *action creator* is, quite simply, a function that creates an action. Do\r\n * not confuse the two terms—again, an action is a payload of information, and\r\n * an action creator is a factory that creates an action.\r\n *\r\n * Calling an action creator only produces an action, but does not dispatch it.\r\n * You need to call the store's `dispatch` function to actually cause the\r\n * mutation. Sometimes we say *bound action creators* to mean functions that\r\n * call an action creator and immediately dispatch its result to a specific\r\n * store instance.\r\n *\r\n * If an action creator needs to read the current state, perform an API call, or\r\n * cause a side effect, like a routing transition, it should return an async\r\n * action instead of an action.\r\n *\r\n * @template A Returned action type.\r\n */\r\nexport declare type ActionCreator<A> = (...args: any[]) => A;\r\n/**\r\n * Object whose values are action creator functions.\r\n */\r\nexport interface ActionCreatorsMapObject<A = any> {\r\n    [key: string]: ActionCreator<A>;\r\n}\r\nexport declare type ActionCreatorMapToDispatch<GCreatorMap extends ActionCreatorsMapObject> = {\r\n    [P in keyof GCreatorMap]: (...args: Parameters<GCreatorMap[P]>) => void;\r\n};\r\n/**\r\n * Infers Action union-type from action-creator map object\r\n */\r\ndeclare type ActionType<ActionCreatorMap extends any> = ActionCreatorMap extends ActionCreator<any> ? ReturnType<ActionCreatorMap> : ActionCreatorMap extends Record<any, any> ? {\r\n    [K in keyof ActionCreatorMap]: ActionType<ActionCreatorMap[K]>;\r\n}[keyof ActionCreatorMap] : never;\r\nexport declare type AllMultishiftActions<Item = any> = Multishift.Actions<Item> & Multishift.CoreActions<Item>;\r\nexport declare type MultishiftRootActions<Item = any> = ActionType<AllMultishiftActions<Item>>;\r\nexport interface MultishiftInitialValueProps<Item = any> {\r\n    initialSelectedItems?: Item[];\r\n    initialJumpText?: string;\r\n    initialIsOpen?: boolean;\r\n    initialInputValue?: string;\r\n    initialHoveredIndex?: number;\r\n    initialHighlightedIndexes?: number[];\r\n    initialHighlightedGroupStartIndex?: number;\r\n    initialHighlightedGroupEndIndex?: number;\r\n}\r\nexport interface MultishiftDefaultValueProps<Item = any> {\r\n    defaultSelectedItems?: Item[];\r\n    defaultJumpText?: string;\r\n    defaultIsOpen?: boolean;\r\n    defaultInputValue?: string;\r\n    defaultHoveredIndex?: number;\r\n    defaultHighlightedIndexes?: number[];\r\n    defaultHighlightedGroupStartIndex?: number;\r\n    defaultHighlightedGroupEndIndex?: number;\r\n}\r\nexport interface MultishiftChangeHandlerProps<Item = any> {\r\n    /**\r\n     * This function is called anytime the internal state changes. This can be\r\n     * useful if you're using multishift as a \"controlled\" component, where you\r\n     * manage some or all of the state (e.g. isOpen, selectedItems,\r\n     * highlightedIndexes, etc) and then pass it as props, rather than letting\r\n     * multishift control all its state itself.\r\n     *\r\n     * The parameters both take the shape of internal state ({highlightedIndex:\r\n     * number, inputValue: string, isOpen: boolean, selectedItem: any}) but differ\r\n     * slightly.\r\n     *\r\n     * @param changes - These are the properties that actually have changed since\r\n     * the last state change. This also has a type property which you can learn\r\n     * more about in the stateChangeTypes section.\r\n     * @param state - This is the full state object.\r\n     *\r\n     * Tip: This function will be called any time any state is changed.\r\n     *\r\n     * NOTE: This is only called when state actually changes. You should not\r\n     * attempt to use this to handle events. If you wish to handle events, put\r\n     * your event handlers directly on the elements (make sure to use the prop\r\n     * getters though!\r\n     *\r\n     * For example: `<input onBlur={handleBlur} />` should be `<input\r\n     * {...getInputProps({onBlur: handleBlur})} />`).\r\n     */\r\n    onStateChange?: (changes: MultishiftStateProps<Item>, state: MultishiftState<Item>) => void;\r\n    /**\r\n     * Called when the selected items change, either by the user selecting an item\r\n     * or the user clearing the selection. Called with the items that were\r\n     * selected or an empty array when removed\r\n     *\r\n     * @param selectedItems - The currently selected items if an empty array then\r\n     * the selection was cleared.\r\n     * @param state - the list of all currently selected items.\r\n     */\r\n    onSelectedItemsChange?: (selectedItems: Item[], state: MultishiftState<Item>) => void;\r\n    onOuterClick?: (state: MultishiftState<Item>) => void;\r\n    onJumpTextChange?: (jumpText: string, state: MultishiftState<Item>) => void;\r\n    onIsOpenChange?: (isOpen: boolean, state: MultishiftState<Item>) => void;\r\n    onInputValueChange?: (inputValue: string, state: MultishiftState<Item>) => void;\r\n    onHoveredIndexChange?: (hoveredIndex: number, state: MultishiftState<Item>) => void;\r\n    onHighlightedIndexesChange?: (highlightedIndexes: number[], state: MultishiftState<Item>) => void;\r\n    onHighlightedGroupStartIndexChange?: (highlightedGroupStartIndex: number, state: MultishiftState<Item>) => void;\r\n    onHighlightedGroupEndIndexChange?: (highlightedGroupEndIndex: number | undefined, state: MultishiftState<Item>) => void;\r\n}\r\nexport interface MultishiftA11yIdProps {\r\n    id?: string;\r\n    inputId?: string;\r\n    labelId?: string;\r\n    menuId?: string;\r\n    toggleButtonId?: string;\r\n    /**\r\n     * Get the item id which will be used to identifying the item in the dom for\r\n     * accessibility purposes.\r\n     */\r\n    getItemA11yId?: (index?: number) => string;\r\n}\r\nexport declare type Direction = 'horizontal' | 'vertical';\r\nexport interface MultishiftBehaviorProps {\r\n    /**\r\n     * The dropdown type affects how the dropdown should be set up.\r\n     *\r\n     * ### `select`\r\n     *\r\n     * Use this to implement a selection drop down. With a toggle button and\r\n     * items. There is no autocomplete functionality and items typically don't\r\n     * change.\r\n     *\r\n     * ```tsx\r\n     * const items ['a', 'b', 'c'];\r\n     * const { getToggleButtonProps, getMenuProps, getItemProps, getLabelProps } = useMultishift({ type: 'select', items });\r\n     *\r\n     * return (\r\n     *   <div>\r\n     *     <label {...getLabelProps()}>Choose an element:</label>\r\n     *     <button {...getToggleButtonProps()}>{selectedItems[0] || 'Names'}</button>\r\n     *     <button onClick={() => clearSelection()}>Clear</button>\r\n     *     <ul {...getMenuProps()}>\r\n     *     {isOpen &&\r\n     *       items.map((option, index) => (\r\n     *         <li\r\n     *           style={{\r\n     *             userSelect:'none',\r\n     *             fontWeight: selectedItems.includes(option) ? 'bold' : 'normal',\r\n     *             ...(itemHighlightedAtIndex(index) || hoveredIndex === index\r\n     *               ? { backgroundColor: '#bde4ff' }\r\n     *               : {}),\r\n     *           }}\r\n     *           key={`${option}${index}`}\r\n     *           {...getItemProps({ item: option, index })}\r\n     *         >\r\n     *           {option}\r\n     *         </li>\r\n     *       ))}\r\n     *     </ul>\r\n     *   </div>\r\n     * )\r\n     * ```\r\n     *\r\n     * ### `combobox`\r\n     *\r\n     * The combination of a select dropdown paired with an input for filtering the\r\n     * results.\r\n     *\r\n     * The combobox usually will include both a toggle button and input box.\r\n     *\r\n     * ```tsx\r\n     * const items ['a', 'b', 'c'];\r\n     * const {\r\n     *   getToggleButtonProps,\r\n     *   getMenuProps,\r\n     *   getItemProps,\r\n     *   getLabelProps,\r\n     *   getComboBoxProps,\r\n     *   getInputProps\r\n     * } = useMultishift({ type: 'autocomplete', items });\r\n     *\r\n     * return (\r\n     *   <div {...getComboBoxProps()}>\r\n     *     <label {...getLabelProps()}>Choose an element:</label>\r\n     *     <button {...getToggleButtonProps()}>{selectedItems[0] || 'Names'}</button>\r\n     *     <input {...getInputProps()}\r\n     *     <button onClick={() => clearSelection()}>Clear</button>\r\n     *     <ul {...getMenuProps()}>\r\n     *     {isOpen &&\r\n     *       items.map((item, index) => (\r\n     *         <li\r\n     *           key={`${item}${index}`}\r\n     *           {...getItemProps({ item: item, index })}\r\n     *         >\r\n     *           {item}\r\n     *         </li>\r\n     *       ))}\r\n     *     </ul>\r\n     *   </div>\r\n     * )\r\n     * ```\r\n     */\r\n    type: DropdownType;\r\n    /**\r\n     * Set to true to allow multiple items to be selected in the list. When not\r\n     * specified (or set to false) only one item can be selected (and only one at\r\n     * a time.\r\n     */\r\n    multiple?: boolean;\r\n    /**\r\n     * The direction which drop down should be rendered.\r\n     *\r\n     * - When `vertical` the `ArrowUp` and `ArrowDown` keyDown handlers are used.\r\n     * - When `horizontal` the `ArrowLeft` and `ArrowRight` handlers are used.\r\n     *\r\n     * @defaultValue 'vertical'\r\n     */\r\n    direction?: 'horizontal' | 'vertical';\r\n    /**\r\n     * Whether the input should be closed when a selection is made. This default\r\n     * to false when `multiple=true`.\r\n     */\r\n    closeOnSelection?: boolean;\r\n    /**\r\n     * When true will automatically selected the higlightedIndexes on blur.\r\n     *\r\n     * @defaultValue true\r\n     */\r\n    autoSelectOnBlur?: boolean;\r\n    /**\r\n     * By default typing into non text input combo-box will jump to the closest\r\n     * index.\r\n     *\r\n     * Setting this to false will ignore this behaviour\r\n     */\r\n    ignoreJumpText?: boolean;\r\n    /**\r\n     * Controls the circular keyboard navigation between items. If set to true,\r\n     * when first item is highlighted, the `ArrowUp` will move highlight to the\r\n     * last item, and vice versa using `ArrowDown`.\r\n     */\r\n    circularNavigation?: boolean;\r\n    /**\r\n     * Set a custom message to render for the duration provided by the timeout.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    customA11yStatusMessage?: string;\r\n    /**\r\n     * When true will include the hovered index in the next selection (whether on\r\n     * blur) or active selection.\r\n     *\r\n     * @defaultValue false\r\n     */\r\n    includeHoveredIndexInSelection?: boolean;\r\n}\r\nexport interface MultishiftBaseProps<Item = any> {\r\n    /**\r\n     * The list ot items which are visible in menu.\r\n     *\r\n     * This can be changed via filtering.\r\n     */\r\n    items: Item[];\r\n    /**\r\n     * A unique id for the item which is used to compare between two items.\r\n     *\r\n     * This defaults to just returning the item directly which means items are\r\n     * identical when `item === item`.\r\n     *\r\n     * The primary use case is when items are objects and the equality check above\r\n     * is always false even for objects with the same values. In that case you can\r\n     * define the `getItemId` prop.\r\n     *\r\n     * ```ts\r\n     * const items = [{value: 'A', id: 'a'}, {value: 'B', id: 'b'}];\r\n     * const getItemId = (item: typeof items[0]) => item.id;\r\n     * ```\r\n     *\r\n     * This is very useful when an item is selected. By default multishift will\r\n     * run a uniqueness check and use the function provided above to prevent\r\n     * duplication.\r\n     */\r\n    getItemId?: GetItemId<Item>;\r\n    /**\r\n     * This function will be called each time multishift sets its internal state\r\n     * (or calls the onStateChange handler for controlled props). It allows you to\r\n     * modify the state change that will take place which can give you fine\r\n     * grained control over how the component interacts with user updates without\r\n     * having to use controlled Props. It gives you the current state and the\r\n     * state that will be set, and you return the state that you want to set.\r\n     *\r\n     * @param changeSet - An object with the `prevState` before any changes, the\r\n     * `changes`. created by the built in reducer and the current `state` it\r\n     * produced.\r\n     * @param action - The action that was dispatched.\r\n     * @param props - The latest props passed into the hook.\r\n     *\r\n     */\r\n    stateReducer?: (changesAndState: MultishiftStateChangeset<Item>, action: MultishiftRootActions<Item>, props: MultishiftProps<Item>) => MultishiftState<Item>;\r\n    /**\r\n     * Takes a list of items and transforms them into a string.\r\n     *\r\n     * This defaults to a comma separated list of the values.\r\n     */\r\n    itemsToString?: ItemsToString<Item>;\r\n    itemToString?: ItemToString<Item>;\r\n    /**\r\n     * This function is passed as props to a status component nested within and\r\n     * allows you to create your own assertive ARIA statuses.\r\n     *\r\n     * A default getA11yStatusMessage function is provided that will check\r\n     * `items.current.length` and return \"No results.\" or if there are results but\r\n     * no item is highlighted, \"resultCount results are available, use up and down\r\n     * arrow keys to navigate.\" If items are highlighted it will run\r\n     * `itemToString(highlightedItem)` and display the value of the\r\n     * `highlightedItem`.\r\n     */\r\n    getA11yStatusMessage?: GetA11yStatusMessage;\r\n}\r\nexport declare type MultishiftStateProps<Item = any> = Partial<MultishiftState<Item>>;\r\nexport interface MultishiftProps<Item = any> extends MultishiftA11yIdProps, MultishiftBehaviorProps, MultishiftBaseProps<Item>, MultishiftStateProps<Item>, MultishiftDefaultValueProps<Item>, MultishiftInitialValueProps<Item>, MultishiftChangeHandlerProps<Item> {\r\n}\r\nexport declare type ItemsToString<Item = any> = (items: Item[], itemToString?: (item: Item) => string) => string;\r\nexport declare type GetItemId<Item = any> = (items: Item) => any;\r\nexport declare type ItemToString<Item = any> = (item: Item) => string;\r\nexport declare type GetA11yStatusMessage<Item = any> = (options: A11yStatusMessageParameter<Item>) => string;\r\nexport interface A11yStatusMessageParameter<Item = any> {\r\n    state: MultishiftState<Item>;\r\n    items: Item[];\r\n    itemsToString: (items: Item[], itemToString?: (item: Item) => string) => string;\r\n}\r\nexport interface MultishiftItemsChangeset<Item = any> {\r\n    previous: Item[];\r\n    current: Item[];\r\n}\r\nexport interface MultishiftStateChangeset<Item = any> {\r\n    /**\r\n     * The changes accumulated so far.\r\n     */\r\n    changes: MultishiftStateProps<Item>;\r\n    /**\r\n     * The current state object\r\n     */\r\n    state: MultishiftState<Item>;\r\n    /**\r\n     * The previous state object.\r\n     */\r\n    prevState: MultishiftState<Item>;\r\n}\r\nexport declare type CreateMultishiftAction<Type extends string, Payload = any, GArgs extends any[] = [Payload]> = (...args: GArgs) => ActionWithPayload<Type, Payload>;\r\nexport interface GetRemoveButtonOptions<Element extends HTMLElement = any, Item = any> extends HTMLProps<Element> {\r\n    /**\r\n     * You must provide the selectedItem property.\r\n     */\r\n    item: Item;\r\n    /**\r\n     * Prevents this from being selected.\r\n     */\r\n    disabled?: boolean;\r\n}\r\nexport interface GetRemoveButtonReturn<Element extends HTMLElement = any> extends DetailedHTMLProps<HTMLAttributes<Element>, Element> {\r\n    /**\r\n     * The aria role for the button. This can be overridden in the options.\r\n     *\r\n     * @defaultValue 'button'\r\n     */\r\n    role: string;\r\n}\r\nexport interface GetComboBoxPropsOptions<Element extends HTMLElement = any, RefKey extends string = 'ref'> extends RefParameter<RefKey>, HTMLProps<Element> {\r\n}\r\nexport declare type GetComboBoxPropsReturn<Element extends HTMLElement = any, RefKey extends string = 'ref'> = DetailedHTMLProps<HTMLAttributes<Element>, Element> & {\r\n    [P in RefKey]: Ref<any>;\r\n} & {\r\n    /**\r\n     * @defaultValue 'combobox'\r\n     */\r\n    role: string;\r\n    'aria-expanded': boolean;\r\n    'aria-haspopup': boolean | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';\r\n    'aria-owns': string | undefined;\r\n    'aria-labelledby': string;\r\n};\r\nexport interface GetPropsWithRefOptions<Element extends HTMLElement = any, RefKey extends string = 'ref'> extends RefParameter<RefKey>, HTMLProps<Element> {\r\n    /**\r\n     * Determine whether or not the item can be highlighted and selected.\r\n     */\r\n    disabled?: boolean;\r\n}\r\nexport declare type GetPropsWithRefReturn<Element extends HTMLElement = any, RefKey extends string = 'ref'> = {\r\n    [P in Exclude<RefKey, 'key'>]: Ref<any>;\r\n} & DetailedHTMLProps<HTMLAttributes<Element>, Element>;\r\nexport declare type GetLabelPropsWithRefReturn<Element extends HTMLElement = any, RefKey extends string = 'ref'> = {\r\n    [P in Exclude<RefKey, 'key'>]: Ref<any>;\r\n} & DetailedHTMLProps<HTMLAttributes<Element>, Element> & {\r\n    htmlFor?: string;\r\n};\r\nexport interface GetItemPropsOptions<Element extends HTMLElement = any, RefKey extends string = 'ref', Item = any> extends GetPropsWithRefOptions<Element, RefKey> {\r\n    /**\r\n     * This is the item data that will be selected when the user selects a\r\n     * particular item.\r\n     */\r\n    item: Item;\r\n    /**\r\n     * This is how downshift keeps track of your item when updating the\r\n     * highlightedIndex as the user keys around. By default, downshift will assume\r\n     * the index is the order in which you're calling getItemProps. This is often\r\n     * good enough, but if you find odd behavior, try setting this explicitly.\r\n     * It's probably best to be explicit about index when using a windowing\r\n     * library like react-virtualized.\r\n     */\r\n    index: number;\r\n}\r\n/**\r\n * These functions are used to apply props to the elements that you render. This\r\n * gives you maximum flexibility to render what, when, and wherever you like.\r\n *\r\n * @remarks\r\n *\r\n * You call these on the element in question For example:\r\n *\r\n * ```tsx\r\n * <input {...getInputProps()} />\r\n * ```\r\n *\r\n * It's advisable to pass all your props to that function rather than applying\r\n * them on the element yourself to avoid your props being overridden (or\r\n * overriding the props returned). For example:\r\n *\r\n * ```tsx\r\n * // Good\r\n * <input getInputProps({\r\n *   onKeyUp(event) {\r\n *    log(event);\r\n *   }\r\n * }) />\r\n *\r\n * // Bad\r\n * <input getInputProps() onKeyUp={event => {\r\n *   log(event);\r\n * } />\r\n * ```\r\n */\r\nexport interface MultishiftPropGetters<Item = any> {\r\n    /**\r\n     * Get the augmented props that will be used in the wrapper element on\r\n     * autocomplete dropdowns.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Return the props to be applied to the root element that is rendered. This\r\n     * should always be used for `autocomplete` dropdowns but will throw an error\r\n     * if used within a `select` dropdown.\r\n     */\r\n    getComboBoxProps: <Element extends HTMLElement = any, RefKey extends string = 'ref'>(options?: GetComboBoxPropsOptions<Element, RefKey>) => GetComboBoxPropsReturn<Element, RefKey>;\r\n    /**\r\n     * Get the augmented props for the toggle button which typically opens and\r\n     * closes the menu.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Returns the props you should apply to any menu toggle button element you\r\n     * render.\r\n     */\r\n    getToggleButtonProps: <Element extends HTMLElement = any, RefKey extends string = 'ref'>(options?: GetPropsWithRefOptions<Element, RefKey>) => GetPropsWithRefReturn<Element, RefKey>;\r\n    /**\r\n     * Get the augmented props for your menu dropdown container element.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This method should be applied to the element which contains your list of\r\n     * items. Typically, this will be a <div> or a <ul> that surrounds a map\r\n     * expression. This handles the proper ARIA roles and attributes.\r\n     *\r\n     * refKey: if you're rendering a composite component, that component will need\r\n     * to accept a prop which it forwards to the root DOM element. Commonly, folks\r\n     * call this innerRef. So you'd call: getMenuProps({refKey: 'innerRef'}) and\r\n     * your composite component would forward like: <ul ref={props.innerRef} />.\r\n     * However, if you are just rendering a primitive component like <div>, there\r\n     * is no need to specify this property. Please keep in mind that menus, for\r\n     * accessiblity purposes, should always be rendered, regardless of whether you\r\n     * hide it or not. Otherwise, getMenuProps may throw error if you unmount and\r\n     * remount the menu.\r\n     *\r\n     * aria-label: By default the menu will add an aria-labelledby that refers to\r\n     * the <label> rendered with getLabelProps. However, if you provide aria-label\r\n     * to give a more specific label that describes the options available, then\r\n     * aria-labelledby will not be provided and screen readers can use your\r\n     * aria-label instead. In some cases, you might want to completely bypass the\r\n     * refKey check. Then you can provide the object {suppressRefError : true} as\r\n     * the second argument to getMenuProps. Please use it with extreme care and\r\n     * only if you are absolutely sure that the ref is correctly forwarded\r\n     * otherwise Downshift will unexpectedly fail.\r\n     *\r\n     * ```tsx\r\n     * const {getMenuProps} = useMultishift({items})\r\n     * const ui = (\r\n     *   <ul {...getMenuProps()}>\r\n     *     {!isOpen\r\n     *       ? null\r\n     *       : items.map((item, index) => (\r\n     *           <li {...getItemProps({item, index, key: item.id})}>{item.name}</li>\r\n     *         ))}\r\n     *   </ul>\r\n     * )\r\n     * ```\r\n     *\r\n     * > Note that for accessibility reasons it's best if you always render this\r\n     * > element whether or not downshift is in an isOpen state.\r\n     */\r\n    getMenuProps: <Element extends HTMLElement = any, RefKey extends string = 'ref'>(options?: GetPropsWithRefOptions<Element, RefKey>) => GetPropsWithRefReturn<Element, RefKey>;\r\n    /**\r\n     * Get the augmented props for each item being rendered.\r\n     *\r\n     * @remarks\r\n     *\r\n     * The props returned from calling this function should be applied to any menu\r\n     * items you render.\r\n     *\r\n     * This is an impure function, so it should only be called when you will\r\n     * actually be applying the props to an item.\r\n     */\r\n    getItemProps: <Element extends HTMLElement = any, RefKey extends string = 'ref'>(options: GetItemPropsOptions<Element, RefKey, Item>) => GetPropsWithRefReturn<Element, RefKey>;\r\n    /**\r\n     * Get the augmented props for the autocomplete input element.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This method should be applied to the input you render. It is recommended\r\n     * that you pass all props as an object to this method which will compose\r\n     * together any of the event handlers you need to apply to the input while\r\n     * preserving the ones that downshift needs to apply to make the input behave.\r\n     *\r\n     * There are no required properties for this method.\r\n     *\r\n     * Optional properties:\r\n     *\r\n     * disabled: If this is set to true, then no event handlers will be returned\r\n     * from getInputProps and a disabled prop will be returned (effectively\r\n     * disabling the input).\r\n     *\r\n     */\r\n    getInputProps: <Element extends HTMLInputElement = any, RefKey extends string = 'ref'>(options?: GetPropsWithRefOptions<Element, RefKey>) => GetPropsWithRefReturn<Element, RefKey>;\r\n    /**\r\n     * Gets the props to attach to a button that removes a selected item.\r\n     */\r\n    getRemoveButtonProps: <Element extends HTMLElement = any>(options: GetRemoveButtonOptions<Element, Item>) => GetRemoveButtonReturn<Element>;\r\n    /**\r\n     * This method should be applied to the label you render. It will generate an\r\n     * id that will be used to label the toggle button and the menu.\r\n     *\r\n     * @remarks\r\n     *\r\n     * There are no required properties for this method.\r\n     *\r\n     * > Note: For accessibility purposes, calling this method is highly\r\n     * recommended.\r\n     */\r\n    getLabelProps: <Element extends HTMLElement = any, RefKey extends string = 'ref'>(options?: IgnoredElementOptions<Element, RefKey>) => GetLabelPropsWithRefReturn<Element, RefKey>;\r\n    /**\r\n     * Adds a ref to an element which will prevent blurring from happening when\r\n     * the element is in focus.\r\n     *\r\n     * @remarks\r\n     *\r\n     * - Allows for autofocusing the input / toggle button or items when [a\r\n     *   specific one] when focused.\r\n     */\r\n    getIgnoredElementProps: <Element extends HTMLElement = any, RefKey extends string = 'ref'>(options?: IgnoredElementOptions<Element, RefKey>) => GetPropsWithRefReturn<Element, RefKey>;\r\n}\r\nexport interface IgnoredElementOptions<Element extends HTMLElement = any, RefKey extends string = 'ref'> extends GetPropsWithRefOptions<Element, RefKey> {\r\n}\r\nexport interface MultishiftHelpers<Item = any> {\r\n    /**\r\n     * Check if the item at the given index is highlighted.\r\n     *\r\n     * @remarks\r\n     *\r\n     * The highlight includes the current highlight (caused by hovers and the\r\n     * arrow keys> as well as multi selection highlighting when the shift key is\r\n     * pressed.\r\n     */\r\n    itemHighlightedAtIndex: (index: number) => boolean;\r\n    /**\r\n     * Return true when the provided item is selected.\r\n     */\r\n    itemIsSelected: (item: Item) => boolean;\r\n    /**\r\n     * Return the index of the provided item within the list of items.\r\n     *\r\n     * @remarks\r\n     *\r\n     * `-1` when not found\r\n     */\r\n    indexOfItem: (item: Item) => number;\r\n    /**\r\n     * The most recently highlighted index which can be used when making a\r\n     * multiple selection.\r\n     *\r\n     * When none is found it will return `-1`\r\n     */\r\n    mostRecentHighlightedIndex: number;\r\n}\r\nexport declare type AllMultishiftDispatchActions<Item = any> = {\r\n    [P in keyof AllMultishiftActions<Item>]: (...args: Parameters<AllMultishiftActions<Item>[P]>) => void;\r\n};\r\nexport declare type MultishiftDispatchActions<Item = any> = {\r\n    [P in keyof Multishift.CoreActions<Item>]: (...args: Parameters<Multishift.CoreActions<Item>[P]>) => void;\r\n};\r\nexport interface MultishiftFocusHelpers {\r\n    /**\r\n     * Focus on the menu.\r\n     */\r\n    focusMenu: () => void;\r\n    /**\r\n     * Focus on a menu item by the provided index.\r\n     */\r\n    focusMenuItem: (index: number) => void;\r\n    /**\r\n     * Focus on the input element when defined.\r\n     */\r\n    focusInput: () => void;\r\n    /**\r\n     * Focus on the toggle button.\r\n     */\r\n    focusToggleButton: () => void;\r\n}\r\n/**\r\n * This provides utility methods which make updating the state for\r\n * _uncontrolled_ components a bit simpler.\r\n *\r\n * @typeParam Item = the underlying item type.\r\n */\r\nexport interface MultishiftStateHelpers<Item = any> {\r\n    /**\r\n     * Add multiple items to the `selectedItems`.\r\n     *\r\n     * @param items - the items array to be added to the selection. When multiple\r\n     * is not true only the first item will be used and replace any current\r\n     * `selectedItems`.\r\n     */\r\n    addItems: (items: Item[]) => any[];\r\n    /**\r\n     * Add one item to the `selectedItems`.\r\n     *\r\n     * @param item - the item to be added to the selection. When multiple is not\r\n     * true this will replace the current selected item.\r\n     */\r\n    addItem: (item: Item) => any[];\r\n    /**\r\n     * Remove items from the `selectedItems`.\r\n     *\r\n     * @param items - the items to be removed.\r\n     */\r\n    removeItems: (items: Item[]) => Item[];\r\n    /**\r\n     * Remove one item from the `selectedItems`\r\n     *\r\n     * @param item - the item to remove\r\n     */\r\n    removeItem: (item: Item) => Item[];\r\n    /**\r\n     * Toggle item selection\r\n     */\r\n    toggleItems: (items: Item[]) => Item[];\r\n    toggleItem: (item: Item) => Item[];\r\n}\r\nexport interface MultishiftReturn<Item = any> extends MultishiftState<Item>, MultishiftPropGetters<Item>, MultishiftDispatchActions<Item>, MultishiftStateHelpers<Item>, MultishiftHelpers, MultishiftFocusHelpers {\r\n    /**\r\n     * Manually dispatch an action into the state reducer.\r\n     */\r\n    dispatch: Dispatch<MultishiftRootActions<Item>>;\r\n}\r\nexport interface RefParameter<RefKey extends string = 'ref'> {\r\n    /**\r\n     * A custom ref key which allows a reference to be obtained from non standard\r\n     * components.\r\n     *\r\n     * @defaultValue 'ref'\r\n     */\r\n    refKey?: RefKey;\r\n}\r\nexport interface ItemClickPayload {\r\n    index: number;\r\n    modifiers: Modifier[];\r\n    /**\r\n     * This is provided so that the state reducer has access to the event. It\r\n     * should not be stored.\r\n     */\r\n    event: MouseEvent<any>;\r\n}\r\nexport interface SpecialKeyDownPayload {\r\n    modifiers: Modifier[];\r\n    key: SpecialKey;\r\n    /**\r\n     * This is provided so that the state reducer has access to the event. It\r\n     * should not be stored.\r\n     */\r\n    event: KeyboardEvent<any>;\r\n    /**\r\n     * The indexes of disabled items.\r\n     */\r\n    disabled: number[];\r\n}\r\nexport {};\r\n",
      "multishift-utils.d.ts": "import type { Dispatch, KeyboardEvent, SyntheticEvent } from 'react';\r\nimport type { AnyFunction, Nullable } from '@remirror/core-types';\r\nimport { SpecialKey } from './multishift-constants';\r\nimport type { ActionCreatorMapToDispatch, ActionCreatorsMapObject, GetItemId, ItemClickPayload, ItemToString, Modifier, MultishiftA11yIdProps, MultishiftBehaviorProps, MultishiftChangeHandlerProps, MultishiftDefaultValueProps, MultishiftInitialValueProps, MultishiftProps, MultishiftState, MultishiftStateChangeset, MultishiftStateProps, SpecialKeyDownPayload } from './multishift-types';\r\n/**\r\n * The default unique identifier getter function.\r\n */\r\nexport declare const defaultGetItemId: (item: any) => any;\r\n/**\r\n * The default itemToString implementation.\r\n */\r\nexport declare const defaultItemToString: <Item = any>(item: Item) => string;\r\n/**\r\n * The default itemsToString function.\r\n *\r\n * Creates a comma separated string of the item string values.\r\n *\r\n * @param items - the list of all selected items\r\n * @param itemToString - retrieve the string from an individual\r\n */\r\nexport declare const defaultItemsToString: <Item = any>(selectedItems: Item[], itemToString?: ItemToString<any>) => string;\r\nexport interface GetInitialPropsParameter<Item = any> extends MultishiftBehaviorProps, MultishiftStateProps<Item>, MultishiftDefaultValueProps<Item>, MultishiftInitialValueProps<Item> {\r\n}\r\nexport declare const DEFAULT_STATE: MultishiftState;\r\n/**\r\n * Get all the default state values.\r\n */\r\nexport declare const getDefaultState: <Item = any>({ defaultSelectedItems, defaultJumpText, defaultIsOpen, defaultInputValue, defaultHoveredIndex, defaultHighlightedIndexes, defaultHighlightedGroupStartIndex, defaultHighlightedGroupEndIndex, }: GetDefaultStateParameter<Item>) => {\r\n    selectedItems: any[];\r\n    jumpText: string;\r\n    isOpen: boolean;\r\n    inputValue: string;\r\n    hoveredIndex: number;\r\n    highlightedIndexes: number[];\r\n    highlightedGroupStartIndex: number;\r\n    highlightedGroupEndIndex: number;\r\n};\r\n/**\r\n * Get the initial state or props when provided.\r\n */\r\nexport declare const getInitialStateProps: <Item = any>({ initialSelectedItems, initialJumpText, initialIsOpen, initialInputValue, initialHoveredIndex, initialHighlightedIndexes, initialHighlightedGroupStartIndex, initialHighlightedGroupEndIndex, selectedItems, jumpText, isOpen, inputValue, hoveredIndex, highlightedIndexes, highlightedGroupStartIndex, highlightedGroupEndIndex, ...props }: GetInitialPropsParameter) => MultishiftState<Item>;\r\nexport interface GetDefaultStateParameter<Item = any> extends MultishiftDefaultValueProps<Item>, MultishiftBehaviorProps {\r\n}\r\n/**\r\n * The state that corresponds to the default highlight state. Useful when the\r\n * highlighted values need to be reset.\r\n */\r\nexport declare const getHighlightReset: <Item = any>(defaultState: MultishiftState<Item>) => {\r\n    highlightedGroupEndIndex: number;\r\n    highlightedGroupStartIndex: number;\r\n    highlightedIndexes: number[];\r\n    hoveredIndex: number;\r\n};\r\n/**\r\n * Uses controlled props where available otherwise fallbacks back to internal\r\n * state.\r\n */\r\nexport declare const getState: <Item = any>(state: MultishiftState<Item>, props: Partial<MultishiftState<Item>>) => MultishiftState<Item>;\r\n/**\r\n * Call all relevant change handlers.\r\n */\r\nexport declare const callChangeHandlers: <Item = any>(handlers: MultishiftChangeHandlerProps<Item>, { changes, state, prevState }: MultishiftStateChangeset<Item>) => void;\r\n/**\r\n * Get the ids for each element.\r\n */\r\nexport declare const getElementIds: (defaultId: string | number, { id, labelId, menuId, getItemA11yId, toggleButtonId, inputId, }?: MultishiftA11yIdProps) => {\r\n    labelId: string;\r\n    inputId: string;\r\n    menuId: string;\r\n    getItemA11yId: (index?: number) => string;\r\n    toggleButtonId: string;\r\n};\r\ninterface GetNextWrappingIndexParameter {\r\n    steps: number;\r\n    start: number;\r\n    size: number;\r\n    circular: boolean;\r\n}\r\nexport declare const getNextWrappingIndex: ({ start, steps, size, circular, }: GetNextWrappingIndexParameter) => number | undefined;\r\n/**\r\n * Check whether the provided value is a valid index.\r\n */\r\nexport declare const isValidIndex: (index: number | undefined | null) => index is number;\r\n/**\r\n * Get the next index when navigating with arrow keys.\r\n */\r\nexport declare const getNextWrappingIndexes: (params: GetNextWrappingIndexParameter) => [number] | [];\r\nexport declare const isValidIndexAndNotDisabled: (index: number | undefined, disabled: number[]) => index is number;\r\ninterface GetItemIndexByJumpTextParameter<Item = any> {\r\n    text: string;\r\n    highlightedIndexes: number[];\r\n    items: Item[];\r\n    itemToString?: ItemToString;\r\n}\r\n/**\r\n * Finds the nearest match when typing into a non input dropdown.\r\n */\r\nexport declare const getItemIndexesByJumpText: <Item = any>({ text, highlightedIndexes, items, itemToString, }: GetItemIndexByJumpTextParameter<Item>) => [number] | [];\r\n/**\r\n * Determines which highlighted indexes should be available on first open.\r\n */\r\nexport declare const getHighlightedIndexOnOpen: <Item = any>(props: Pick<MultishiftProps<Item>, \"items\" | \"initialHighlightedIndexes\" | \"defaultHighlightedIndexes\">, state: MultishiftState<Item>, offset: number, getItemId: GetItemId<Item>) => number[];\r\n/**\r\n * Get the item index from the items prop.\r\n */\r\nexport declare const getItemIndex: <Item = any>(index: number, item: Item, items: Item[]) => number;\r\ndeclare type GetLastHighlightParameter = Pick<MultishiftState, 'highlightedIndexes' | 'highlightedGroupEndIndex' | 'highlightedGroupStartIndex'>;\r\n/**\r\n * Get the most recently updated highlighted index.\r\n *\r\n * Returns -1 when no highlighted index is found.\r\n */\r\nexport declare const getMostRecentHighlightIndex: ({ highlightedGroupEndIndex, highlightedGroupStartIndex, highlightedIndexes, }: GetLastHighlightParameter) => number;\r\n/**\r\n * Check if the browser is running on a mac.\r\n */\r\nexport declare const isMac: () => boolean;\r\ninterface GetChangesFromItemClickParameter<Item = any> {\r\n    modifiers: Modifier[];\r\n    index: number;\r\n    items: Item[];\r\n    props: MultishiftBehaviorProps;\r\n    defaultState: MultishiftState<Item>;\r\n    state: MultishiftState<Item>;\r\n    getItemId: GetItemId<Item>;\r\n}\r\n/**\r\n * Returns true when all items are selected within the list.\r\n */\r\nexport declare const allItemsSelected: <Item = any>(currentItems: Item[], newItems: Item[], getItemId: GetItemId<Item>) => boolean;\r\n/**\r\n * Adds the list of `newItems` to the list of `prevItems`. If `multiple` is\r\n * false (or undefined) then simply replace the array with the first item from\r\n * the `newItems` list.\r\n */\r\nexport declare const addItems: <Item = any>(currentItems: Item[], newItems: Item[], getItemId: GetItemId<Item>, multiple?: boolean) => any[];\r\n/**\r\n * Remove all `removalItems` from the `prevItems` array.\r\n */\r\nexport declare const removeItems: <Item = any>(currentItems: Item[], removalItems: Item[], getItemId: GetItemId<Item>) => Item[];\r\n/**\r\n * Toggles the selected items.\r\n *\r\n * Firstly check whether all the items provided are already part of the current\r\n * items\r\n *  - If this is the case then remove all the toggleItems.\r\n *  - If this is not the case then add all the items (without duplication)\r\n *\r\n * When multiple is false or undefined it will only return one element.\r\n */\r\nexport declare const toggleSelectedItems: <Item = any>(currentItems: Item[], toggleItems: Item[], getItemId: GetItemId<Item>, multiple?: boolean) => any[];\r\n/**\r\n * Get an array of all the highlighted items Including any from the currently\r\n * incomplete group.\r\n */\r\nexport declare const getHighlightedIndexes: <Item = any>({ start, end, indexes, items, hoveredIndex, }: GetHighlightedIndexesParameter<Item>) => any[];\r\n/**\r\n * Checks whether the an index is highlighted within a set of indexes and a\r\n * highlighted group.\r\n */\r\nexport declare const checkItemHighlighted: (index: number, { start, end, indexes }: Omit<GetHighlightedIndexesParameter, 'items'>) => boolean;\r\n/**\r\n * Removes any unchanged values from the changes object so that only the correct\r\n * callbacks are triggered.\r\n */\r\nexport declare const omitUnchangedState: <Item = any>(changes: Partial<MultishiftState<Item>>, { state, getItemId }: OmitUnchangedParameter<Item>) => Partial<MultishiftState<Item>>;\r\n/**\r\n * Create the desired change object when an item is clicked.\r\n */\r\nexport declare const getChangesFromItemClick: <Item = any>({ modifiers, items, defaultState, state, index, props, getItemId, }: GetChangesFromItemClickParameter<Item>) => Partial<MultishiftState<Item>>;\r\ninterface GetHighlightedIndexesParameter<Item = any> {\r\n    /**\r\n     * The current highlighted indexes\r\n     */\r\n    indexes: number[];\r\n    /**\r\n     * The start of the new highlight grouping.\r\n     */\r\n    start: number;\r\n    /**\r\n     * The end of the new highlight grouping.\r\n     */\r\n    end?: number;\r\n    /**\r\n     * The items being rendered right now.\r\n     */\r\n    items: Item[];\r\n    /**\r\n     * If included will also include the hovered index.\r\n     */\r\n    hoveredIndex?: number;\r\n}\r\n/**\r\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\r\n *\r\n * @param event - the keyboard event\r\n */\r\nexport declare function getKeyName(event: KeyboardEvent<HTMLElement>): string;\r\n/**\r\n * Log a warning when using in an internal type that doesn't get resolved.\r\n */\r\nexport declare const warnIfInternalType: (type: string, message?: string) => void;\r\ninterface CreateChangesFromKeyDownParameter<Item = any> {\r\n    state: MultishiftState<Item>;\r\n    modifiers: Modifier[];\r\n    defaultState: MultishiftState<Item>;\r\n    key: SpecialKey;\r\n    props: MultishiftProps<Item>;\r\n    items: Item[];\r\n    getItemId: GetItemId<Item>;\r\n    disabled: number[];\r\n}\r\n/**\r\n * Get the changes that have happened when a menu key is pressed.\r\n */\r\nexport declare function getChangesFromMenuKeyDown<Item = any>(parameter: CreateChangesFromKeyDownParameter<Item>): MultishiftStateProps<Item>;\r\nexport declare const getChangesFromToggleButtonKeyDown: <Item = any>({ key, defaultState, props, getItemId, state, }: CreateChangesFromKeyDownParameter<Item>) => Partial<MultishiftState<Item>>;\r\nexport declare const getChangesFromInputKeyDown: <Item = any>(params: CreateChangesFromKeyDownParameter<Item>) => Partial<MultishiftState<Item>>;\r\n/**\r\n * Get an array of the event modifiers\r\n */\r\nexport declare const getModifiers: any;\r\n/**\r\n * This is intended to be used to compose event handlers. They are executed in\r\n * order until one of them returns a truthy value.\r\n */\r\nexport declare function callAllEventHandlers<Type extends Event = any, Node extends Element = any, Synth extends SyntheticEvent<Element, Type> = SyntheticEvent<Node, Type>, Method extends (event: Synth, ...args: any[]) => void | undefined | false | true = AnyFunction>(...fns: Array<Method | undefined | null | false>): (event: Synth, ...args: any[]) => void;\r\n/**\r\n * Turns an object whose values are action creators, into an object with the\r\n * same keys, but with every function wrapped into a `dispatch` call so they may\r\n * be invoked directly.\r\n */\r\nexport declare const bindActionCreators: <Action, CreatorMap extends ActionCreatorsMapObject<Action>, ActionDispatch extends Dispatch<any>>(actionCreators: CreatorMap, dispatch: ActionDispatch) => ActionCreatorMapToDispatch<CreatorMap>;\r\n/**\r\n * Create a payload for the keydown event.\r\n */\r\nexport declare function createKeyDownPayload(event: KeyboardEvent, key: SpecialKey, disabled: number[]): SpecialKeyDownPayload;\r\n/**\r\n * Create a payload for the item click event.\r\n */\r\nexport declare function createItemClickPayload(event: any, index: number): ItemClickPayload;\r\n/**\r\n * Check that the character is valid for jumpText.\r\n */\r\nexport declare function isValidCharacterKey(key: string): boolean;\r\n/**\r\n * Scroll node into view if necessary\r\n * @param element - the element that should scroll into view\r\n * @param menuElement - the menu element of the component\r\n */\r\nexport declare function scrollIntoView(element: Nullable<HTMLElement> | null | undefined, menuElement: Nullable<HTMLElement>): void;\r\n/**\r\n * Checks whether the passed value is a valid dom node\r\n *\r\n * @param domNode - the dom node\r\n */\r\nexport declare function isNode(domNode: unknown): domNode is Node;\r\n/**\r\n * Checks for an element node like `<p>` or `<div>`.\r\n *\r\n * @param domNode - the dom node\r\n */\r\nexport declare const isHTMLElement: (domNode: unknown) => domNode is HTMLElement;\r\n/**\r\n * Checks that this is a browser environment.\r\n */\r\nexport declare const isBrowser: () => string;\r\n/**\r\n * Checks whether the parent contains (or is the same as) the child node.\r\n */\r\nexport declare const isOrContainsNode: (parent: Node, child: Node | null) => child is Node;\r\ninterface OmitUnchangedParameter<Item = any> {\r\n    state: MultishiftState<Item>;\r\n    getItemId: GetItemId<Item>;\r\n}\r\n/**\r\n * Helpers for transforming the state object.\r\n */\r\nexport declare const createStateHelpers: <Item = any>({ getItemId, multiple }: MultishiftProps<Item>, state: MultishiftState<Item>) => {\r\n    addItems: (itemsToAdd: Item[]) => any[];\r\n    addItem: (itemToAdd: Item) => any[];\r\n    removeItems: (itemsToRemove: Item[]) => Item[];\r\n    removeItem: (itemToRemove: Item) => Item[];\r\n    toggleItems: (itemsToToggle: Item[]) => Item[];\r\n    toggleItem: (itemToToggle: Item) => Item[];\r\n};\r\nexport {};\r\n",
      "multishift.d.ts": "import type { MultishiftProps, MultishiftReturn } from './multishift-types';\r\n/**\r\n * Multishift is a hook that provides all the necessary tools for building\r\n * accessible dropdown components.\r\n *\r\n * @remarks\r\n *\r\n * It supports `select` and `autocomplete` drop down experiences with built in\r\n * support for multi-selection.\r\n *\r\n * The library borrows (and steals) heavily from `downshift` but also adds some\r\n * features which are really important for the `remirror` project.\r\n *\r\n * - Focus on typescript support\r\n * - No React Native support\r\n * - Multi selection support\r\n * - Render with **only** menu support (fully controlled)\r\n *\r\n * Eventually some of the code will be contributed back to the downshift\r\n * library.\r\n */\r\nexport declare const useMultishift: <Item = any>(props: MultishiftProps<Item>) => MultishiftReturn<Item>;\r\n"
    },
    "prosemirror-suggest": {
      "index.d.ts": "/**\r\n * Primitives for building your prosemirror suggestion and autocomplete functionality.\r\n *\r\n * @remarks\r\n *\r\n * ## The problem\r\n *\r\n * You want to create a plugin for your prosemirror editor that responds to an\r\n * activation character to create suggesters or options or actions for the\r\n * user. Doing this from scratch can be difficult.\r\n *\r\n * ## This solution\r\n *\r\n * `prosemirror-suggest` provides the suggestion primitives needed for building\r\n * this functionality into your editor. You might be building user mentions,\r\n * emoji search, an actions dropdown or anything that extracts a query from the\r\n * editor after the activation character(s).\r\n *\r\n * This implementation doesn't attempt to be magical. There's still a lot of\r\n * work that goes into setting up your configuration. However, with this\r\n * toolkit, you you will be building on a well-tested foundation with a\r\n * structured API.\r\n *\r\n * ## Installation\r\n *\r\n * `prosemirror-view` is a peer dependency of `prosemirror-suggest` and needs to\r\n * be installed as well.\r\n *\r\n * ```bash\r\n * yarn add prosemirror-suggest prosemirror-view # yarn\r\n * pnpm add prosemirror-suggest prosemirror-view # pnpm\r\n * npm install prosemirror-suggest prosemirror-view # npm\r\n *  ```\r\n *\r\n * ## Getting Started\r\n *\r\n * `prosemirror-suggest` uses configuration objects called `Suggester`'s to\r\n * define the behaviour of the suggesters you create. By calling the exported\r\n * `suggest` method with all required `Suggester`'s the functionality is added\r\n * to the editor in one plugin.\r\n *\r\n * In the following example we're creating an emoji suggestion plugin that\r\n * responds to the colon character with a query and presents a list of matching\r\n * emojis based on the query typed so far.\r\n *\r\n * ```ts\r\n * import { Suggester, suggest } from 'prosemirror-suggest';\r\n *\r\n * const maxResults = 10;\r\n * let selectedIndex = 0;\r\n * let emojiList: string[] = [];\r\n * let showSuggestions = false;\r\n *\r\n * const suggestEmojis: Suggester = {\r\n *   // By default decorations are used to highlight the currently matched\r\n *   // suggestion in the dom.\r\n *   // In this example we don't need decorations (in fact they cause problems when the\r\n *   // emoji string replaces the query text in the dom).\r\n *   noDecorations: true,\r\n *   char: ':', // The character to match against\r\n *   name: 'emoji-suggestion', // a unique name\r\n *   appendText: '', // Text to append to the created match\r\n *\r\n *   // Keybindings are similar to prosemirror keymaps with a few extra niceties.\r\n *   // The key identifier can also include modifiers (e.g.) `Cmd-Space: () => false`\r\n *   // Return true to prevent any further keyboard handlers from running.\r\n *   keyBindings: {\r\n *     ArrowUp: () => {\r\n *       selectedIndex = rotateSelectionBackwards(selectedIndex, emojiList.length);\r\n *     },\r\n *     ArrowDown: () => {\r\n *       selectedIndex = rotateSelectionForwards(selectedIndex, emojiList.length);\r\n *     },\r\n *     Enter: ({ command }) => {\r\n *       if (showSuggestions) {\r\n *         command(emojiList[selectedIndex]);\r\n *       }\r\n *     },\r\n *     Esc: () => {\r\n *       showSuggestions = false;\r\n *     },\r\n *   },\r\n *\r\n *   onChange: params => {\r\n *     const query = params.query.full;\r\n *     emojiList = sortEmojiMatches({ query, maxResults });\r\n *     selectedIndex = 0;\r\n *     showSuggestions = true;\r\n *   },\r\n *\r\n *   onExit: () => {\r\n *     showSuggestions = false;\r\n *     emojiList = [];\r\n *     selectedIndex = 0;\r\n *   },\r\n *\r\n *   // Create a  function that is passed into the change, exit and keybinding handlers.\r\n *   // This is useful when these handlers are called in a different part of the app.\r\n *   createCommand: ({ match, view }) => {\r\n *     return (emoji,skinVariation) => {\r\n *       if (!emoji) {\r\n *         throw new Error('An emoji is required when calling the emoji suggesters command');\r\n *       }\r\n *\r\n *       const tr = view.state.tr; const { from, end: to } = match.range;\r\n *       tr.insertText(emoji, from, to); view.dispatch(tr);\r\n *     };\r\n *   },\r\n * };\r\n *\r\n *  // Create the plugin with the above configuration. It also supports multiple plugins being added.\r\n * const suggestPlugin = suggest(suggestEmojis);\r\n *\r\n *  // Include the plugin in the created editor state.\r\n * const state = EditorState.create({schema,\r\n *   plugins: [suggestPlugin],\r\n * });\r\n * ```\r\n *\r\n * You can see this example brought to life in the `remirror` codebase under the\r\n * `@remirror/extension-emoji` and the `@remirror/extension-mention` packages.\r\n *\r\n * The following examples are available for you to try out\r\n * [https://remirror.io/showcase/social]\r\n *\r\n * **Search emoji on `:` key**\r\n *\r\n * The emojis are inserted as plain text. It’s up to you whether you insert the\r\n * emoji as a node, mark or plaintext.\r\n *\r\n * ![A gif showing emoji being inserted after typing the colon (:) key. First a\r\n * laughing emoji then a heart and finally the poop\r\n * emoji](https://media.githubusercontent.com/media/ifiokjr/assets/master/remirror/emoji.gif\r\n * \"A gif showing emoji being inserted after typing the colon (:) key. First a\r\n * laughing emoji then a heart and finally the poop emoji\")\r\n *\r\n * **Editable mention on `@` key**\r\n *\r\n * Each mention is a mark that wraps the mentioned text with a spec property of\r\n * `inclusive: false`\r\n *\r\n * ![A gif showing mentions being suggested as the user types with editing supported](https://media.githubusercontent.com/media/ifiokjr/assets/master/remirror/mentions.gif\r\n * \"A gif showing mentions being suggested as the user types with editing supported\")\r\n *\r\n * @packageDocumentation\r\n */\r\nexport type { SuggestState } from './suggest-plugin';\r\nexport { addSuggester, getSuggestPluginState, removeSuggester, suggest } from './suggest-plugin';\r\nexport type { AddIgnoredParameter, CompareMatchParameter, CreateSuggestCommandParameter, DocChangedParameter, FromToEndParameter, KeyboardEventParameter, MatchValue, OnKeyDownParameter, ReasonMatchParameter, ReasonParameter, RemoveIgnoredParameter, SuggestCallbackParameter, SuggestChangeHandlerMethod, SuggestChangeHandlerParameter, SuggestCharacterEntryMethod, SuggestCharacterEntryParameter, SuggestCommandParameter, SuggestExitHandlerMethod, SuggestExitHandlerParameter, SuggestIgnoreParameter, SuggestKeyBinding, SuggestKeyBindingMap, SuggestKeyBindingParameter, SuggestMarkParameter, SuggestReasonMap, SuggestReplacementType, SuggestStateMatch, SuggestStateMatchParameter, SuggestStateMatchReason, Suggester, SuggesterParameter, } from './suggest-types';\r\nexport { ChangeReason, ExitReason, DEFAULT_SUGGESTER } from './suggest-constants';\r\nexport { isChange, isChangeReason, isEntry, isExit, isExitReason, isInvalidSplitReason, isJump, isJumpReason, isMove, isRemovedReason, isSelectionExitReason, isSplitReason, isValidMatch, selectionOutsideMatch, } from './suggest-predicates';\r\nexport { createRegexFromSuggester, escapeChar, getRegexPrefix, regexToString, } from './suggest-helpers';\r\n",
      "suggest-constants.d.ts": "import { noop } from '@remirror/core-helpers';\r\nexport declare const DEFAULT_SUGGEST_ACTIONS: {\r\n    command: typeof noop;\r\n    create: typeof noop;\r\n    remove: typeof noop;\r\n    update: typeof noop;\r\n};\r\nexport declare const DEFAULT_SUGGESTER: {\r\n    appendText: string;\r\n    createCommand: () => typeof noop;\r\n    ignoredClassName: any;\r\n    ignoredTag: string;\r\n    invalidPrefixCharacters: any;\r\n    keyBindings: {};\r\n    matchOffset: number;\r\n    noDecorations: boolean;\r\n    onChange: () => boolean;\r\n    onCharacterEntry: () => boolean;\r\n    onExit: () => boolean;\r\n    startOfLine: boolean;\r\n    suggestClassName: string;\r\n    suggestTag: string;\r\n    supportedCharacters: RegExp;\r\n    validPrefixCharacters: RegExp;\r\n};\r\n/**\r\n * The potential reasons for an exit of a mention.\r\n */\r\nexport declare enum ExitReason {\r\n    /**\r\n     * The user has pasted some text with multiple characters or run a command\r\n     * that adds multiple characters.\r\n     *\r\n     * `onExit` should be called but the previous match should be retested as it's\r\n     * possible that it's been extended.\r\n     */\r\n    End = \"exit-end\",\r\n    /**\r\n     * The suggestion has been removed.\r\n     */\r\n    Removed = \"delete\",\r\n    /**\r\n     * The user has pasted some text with multiple characters or run a command\r\n     * that adds multiple characters somewhere within the active suggestion. e.g.\r\n     * `@abc` -> `@ab123 asdf aiti c`\r\n     *\r\n     * `onExit` should be called but the previous match should be retested as it's\r\n     * possible that it's been extended.\r\n     */\r\n    Split = \"exit-split\",\r\n    /**\r\n     * The user has pasted some text with multiple characters or run a command\r\n     * that adds multiple characters right after the initial multi-character. e.g.\r\n     * `@abc` -> `@ this is newabc`\r\n     *\r\n     * In this case it is best to remove the mention completely.\r\n     */\r\n    InvalidSplit = \"invalid-exit-split\",\r\n    /**\r\n     * User has moved out of the suggestion at the end. This can happen via using\r\n     * arrow keys, but can also be via the suggestion no longer matching as the\r\n     * user types, a mouse click or custom command. All that has changed is the\r\n     * cursor position.\r\n     */\r\n    MoveEnd = \"move-end\",\r\n    /**\r\n     * User has moved out of the suggestion but from the beginning. This can be\r\n     * via the arrow keys but can also be via a mouse click or custom command. All\r\n     * that changed is the cursor position.\r\n     */\r\n    MoveStart = \"move-start\",\r\n    /**\r\n     * The user has jumped to another suggestion which occurs afterwards in the\r\n     * editor. This can be via a click, a keyboard jump or custom commands. In\r\n     * this case since there is still an active suggestion it will trigger both an\r\n     * `onExit` and `onChange` call.\r\n     */\r\n    JumpForward = \"jump-forward-exit\",\r\n    /**\r\n     * The user has jumped to another suggestion which occurs before the previous\r\n     * suggestion in the editor. This can happen via a click, a keyboard jump\r\n     * (END) or a custom command. In this case since there is still an active\r\n     * suggestion it will trigger both an `onExit` and `onChange` call.\r\n     */\r\n    JumpBackward = \"jump-backward-exit\",\r\n    /**\r\n     * The user has selected some text outside the current selection, this can\r\n     * trigger an exit. This can be from a triple click to select the line or\r\n     * Ctrl-A to select all.\r\n     */\r\n    SelectionOutside = \"selection-outside\"\r\n}\r\n/**\r\n * The potential reason for changes\r\n */\r\nexport declare enum ChangeReason {\r\n    /**\r\n     * The user has entered or started a new suggestion.\r\n     */\r\n    Start = \"start\",\r\n    /**\r\n     * A changed happened to the character. This can be addition, deletion or\r\n     * replacement.\r\n     */\r\n    Text = \"change-character\",\r\n    /**\r\n     * A change happened to the selection status which was not purely a move. The\r\n     * selection area may have been increased.\r\n     */\r\n    SelectionInside = \"selection-inside\",\r\n    /**\r\n     * The cursor was moved.\r\n     */\r\n    Move = \"move\",\r\n    /**\r\n     * The user has moved from one suggestion to another suggestion earlier in the\r\n     * document.\r\n     */\r\n    JumpBackward = \"jump-backward-change\",\r\n    /**\r\n     * The user has moved from one suggestion to another suggestion further along\r\n     * in the document.\r\n     */\r\n    JumpForward = \"jump-forward-change\"\r\n}\r\n",
      "suggest-helpers.d.ts": "import type { Suggester } from './suggest-types';\r\nexport declare const escapeChar: (char: string) => any;\r\n/**\r\n * Convert a RegExp into a string\r\n *\r\n * @param regexOrString\r\n */\r\nexport declare const regexToString: (regexOrString: string | RegExp) => string;\r\n/**\r\n * Find regex prefix when depending on whether the mention only supports the\r\n * start of a line or not\r\n *\r\n * @param onlyStartOfLine\r\n */\r\nexport declare const getRegexPrefix: (onlyStartOfLine: boolean) => \"\" | \"^\";\r\n/**\r\n * Create a regex expression to evaluate matches directly from the suggester properties.\r\n */\r\nexport declare const createRegexFromSuggester: ({ char, matchOffset, startOfLine, supportedCharacters, }: Pick<Required<Suggester>, 'startOfLine' | 'char' | 'supportedCharacters' | 'matchOffset'>, flags?: string) => RegExp;\r\n",
      "suggest-plugin.d.ts": "import { Plugin } from 'prosemirror-state';\r\nimport type { EditorSchema, EditorState } from '@remirror/core-types';\r\nimport { SuggestState } from './suggest-state';\r\nimport type { Suggester } from './suggest-types';\r\n/**\r\n * Get the state of the suggest plugin.\r\n *\r\n * @param state - the editor state.\r\n */\r\nexport declare function getSuggestPluginState(state: EditorState): SuggestState;\r\n/**\r\n * Add a new suggester or replace it if the name already exists in the existing\r\n * configuration.\r\n *\r\n * Will return a function for disposing of the added suggester.\r\n */\r\nexport declare function addSuggester<Schema extends EditorSchema = any>(state: EditorState<Schema>, suggester: Suggester): () => void;\r\n/**\r\n * Remove a suggester if it exists. Pass in the name or the full suggester\r\n * object.\r\n */\r\nexport declare function removeSuggester<Schema extends EditorSchema = any>(state: EditorState<Schema>, suggester: Suggester | string): void;\r\n/**\r\n * This creates a suggest plugin with all the suggesters provided.\r\n *\r\n * @remarks\r\n *\r\n * In the following example we're creating an emoji suggest plugin that\r\n * responds to the colon character with a query and presents a list of matching\r\n * emojis based on the query typed so far.\r\n *\r\n * ```ts\r\n * import { Suggester, suggest } from 'prosemirror-suggest';\r\n *\r\n * const maxResults = 10;\r\n * let selectedIndex = 0;\r\n * let emojiList: string[] = [];\r\n * let showSuggestions = false;\r\n *\r\n * const suggestEmojis: Suggester = {\r\n *   // By default decorations are used to highlight the currently matched\r\n *   // suggestion in the dom.\r\n *   // In this example we don't need decorations (in fact they cause problems when the\r\n *   // emoji string replaces the query text in the dom).\r\n *   noDecorations: true,\r\n *   char: ':', // The character to match against\r\n *   name: 'emoji-suggestion', // a unique name\r\n *   appendText: '', // Text to append to the created match\r\n *\r\n *   // Keybindings are similar to prosemirror keymaps with a few extra niceties.\r\n *   // The key identifier can also include modifiers (e.g.) `Cmd-Space: () => false`\r\n *   // Return true to prevent any further keyboard handlers from running.\r\n *   keyBindings: {\r\n *     ArrowUp: () => {\r\n *       selectedIndex = rotateSelectionBackwards(selectedIndex, emojiList.length);\r\n *     },\r\n *     ArrowDown: () => {\r\n *       selectedIndex = rotateSelectionForwards(selectedIndex, emojiList.length);\r\n *     },\r\n *     Enter: ({ command }) => {\r\n *       if (showSuggestions) {\r\n *         command(emojiList[selectedIndex]);\r\n *       }\r\n *     },\r\n *     Esc: () => {\r\n *       showSuggestions = false;\r\n *     },\r\n *   },\r\n *\r\n *   onChange: params => {\r\n *     const query = params.query.full;\r\n *     emojiList = sortEmojiMatches({ query, maxResults });\r\n *     selectedIndex = 0;\r\n *     showSuggestions = true;\r\n *   },\r\n *\r\n *   onExit: () => {\r\n *     showSuggestions = false;\r\n *     emojiList = [];\r\n *     selectedIndex = 0;\r\n *   },\r\n *\r\n *   // Create a  function that is passed into the change, exit and keybinding handlers.\r\n *   // This is useful when these handlers are called in a different part of the app.\r\n *   createCommand: ({ match, view }) => {\r\n *     return (emoji,skinVariation) => {\r\n *       if (!emoji) {\r\n *         throw new Error('An emoji is required when calling the emoji suggesters command');\r\n *       }\r\n *\r\n *       const tr = view.state.tr; const { from, end: to } = match.range;\r\n *       tr.insertText(emoji, from, to); view.dispatch(tr);\r\n *     };\r\n *   },\r\n * };\r\n *\r\n *  // Create the plugin with the above configuration. It also supports multiple plugins being added.\r\n * const suggesterPlugin = suggest(suggestEmojis);\r\n *\r\n *  // Include the plugin in the created editor state.\r\n * const state = EditorState.create({schema,\r\n *   plugins: [suggesterPlugin],\r\n * });\r\n * ```\r\n *\r\n * The priority of the suggesters is the order in which they are passed into\r\n * this function.\r\n *\r\n * - `const plugin = suggest(two, one, three)` - Here `two` will be checked\r\n *   first, then `one` and then `three`.\r\n *\r\n * Only one suggester can match at any given time. The order and specificity of\r\n * the regex parameters help determines which suggester will be active.\r\n *\r\n * @param suggesters - a list of suggesters in the order they should be\r\n * evaluated.\r\n */\r\nexport declare function suggest<Schema extends EditorSchema = any>(...suggesters: Suggester[]): Plugin<SuggestState, Schema>;\r\nexport type { SuggestState };\r\n",
      "suggest-predicates.d.ts": "import type { SelectionParameter } from '@remirror/core-types';\r\nimport { ChangeReason, ExitReason } from './suggest-constants';\r\nimport type { CompareMatchParameter, SuggestReasonMap, SuggestStateMatch, SuggestStateMatchParameter } from './suggest-types';\r\n/**\r\n * Is this a change in the current suggestion (added or deleted characters)?\r\n */\r\nexport declare const isChange: (compare: Partial<CompareMatchParameter>) => compare is CompareMatchParameter;\r\n/**\r\n * Has the cursor moved within the current suggestion (added or deleted\r\n * characters)?\r\n */\r\nexport declare const isMove: (compare: Partial<CompareMatchParameter>) => compare is CompareMatchParameter;\r\n/**\r\n * Are we entering a new suggestion?\r\n */\r\nexport declare const isEntry: (compare: Partial<CompareMatchParameter>) => compare is Pick<CompareMatchParameter, \"next\">;\r\n/**\r\n * Are we exiting a suggestion?\r\n */\r\nexport declare const isExit: (compare: Partial<CompareMatchParameter>) => compare is Pick<CompareMatchParameter, \"prev\">;\r\n/**\r\n * Is this a jump from one suggestion to another?\r\n */\r\nexport declare const isJump: (compare: Partial<CompareMatchParameter>) => compare is CompareMatchParameter;\r\n/**\r\n * Check that the passed in value is an ExitReason\r\n */\r\nexport declare const isExitReason: (value: unknown) => value is ExitReason;\r\nexport declare const isChangeReason: (value: unknown) => value is ChangeReason;\r\n/**\r\n * An exit which is caused by a changed in the selection and no other change in the document.\r\n */\r\nexport declare function isSelectionExitReason(value: unknown): boolean;\r\n/**\r\n * Checks that the reason passed is a split reason. This typically means that we\r\n * should default to a partial update / creation of the mention.\r\n */\r\nexport declare const isSplitReason: (value?: unknown) => value is ExitReason.Split;\r\n/**\r\n * Checks that the reason was caused by a split at a point where there is no\r\n * query.\r\n */\r\nexport declare const isInvalidSplitReason: (value?: unknown) => value is ExitReason.InvalidSplit;\r\n/**\r\n * Checks that the reason was caused by a deletion.\r\n */\r\nexport declare const isRemovedReason: (value?: unknown) => value is ExitReason.Removed;\r\n/**\r\n * Checks to see if this is a jump reason.\r\n */\r\nexport declare const isJumpReason: (map: SuggestReasonMap) => map is Required<SuggestReasonMap>;\r\n/**\r\n * True when the match is currently active (i.e. it's query has a value)\r\n */\r\nexport declare const isValidMatch: (match: SuggestStateMatch | undefined) => match is SuggestStateMatch<import(\"@remirror/core-types\").AnyFunction<void>>;\r\n/**\r\n * True when the current selection is outside the match.\r\n */\r\nexport declare const selectionOutsideMatch: ({ match, selection, }: Partial<SuggestStateMatchParameter> & SelectionParameter) => boolean;\r\n",
      "suggest-state.d.ts": "import { DecorationSet, EditorView } from 'prosemirror-view';\r\nimport type { CompareStateParameter, EditorSchema, EditorState, FromToParameter, TextParameter, TransactionParameter } from '@remirror/core-types';\r\nimport type { AddIgnoredParameter, RemoveIgnoredParameter, Suggester, SuggestStateMatch } from './suggest-types';\r\n/**\r\n * The `prosemirror-suggest` state which manages the list of suggesters.\r\n */\r\nexport declare class SuggestState {\r\n    #private;\r\n    /**\r\n     * Create an instance of the SuggestState class.\r\n     */\r\n    static create(suggesters: Suggester[]): SuggestState;\r\n    /**\r\n     * Holds a copy of the view\r\n     */\r\n    private view;\r\n    /**\r\n     * True when the most recent change was to remove a mention.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is needed because sometimes removing a prosemirror `Mark` has no\r\n     * effect. Hence we need to keep track of whether it's removed and then later\r\n     * in the apply step check that a removal has happened and reset the\r\n     * `handlerMatches` to prevent an infinite loop.\r\n     */\r\n    get removed(): boolean;\r\n    /**\r\n     * Returns the current active suggester state field if one exists\r\n     */\r\n    get match(): Readonly<SuggestStateMatch> | undefined;\r\n    /**\r\n     * Create the state for the `prosemirror-suggest` plugin.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Each suggester must provide a name value which is globally unique since it\r\n     * acts as the identifier.\r\n     *\r\n     * It is possible to register multiple suggesters with identical `char`\r\n     * properties. The matched suggester is based on the specificity of the\r\n     * `regex` and the order in which they are passed in. Earlier suggesters are\r\n     * prioritized.\r\n     */\r\n    constructor(suggesters: Suggester[]);\r\n    /**\r\n     * Initialize the SuggestState with a view which is stored for use later.\r\n     */\r\n    init(view: EditorView): this;\r\n    /**\r\n     * Sets the removed property to be true. This is passed as a property to the\r\n     * `createCommand` option.\r\n     */\r\n    readonly setMarkRemoved: () => void;\r\n    /**\r\n     * The actions created by the extension.\r\n     */\r\n    private getCommand;\r\n    /**\r\n     * Create the props which should be passed into each action handler\r\n     */\r\n    private createParameter;\r\n    /**\r\n     * Create the prop to be passed into the `onChange` or `onExit` handler.\r\n     */\r\n    private createReasonParameter;\r\n    /**\r\n     * Check whether the exit callback is valid at this time.\r\n     */\r\n    private shouldRunExit;\r\n    /**\r\n     * Manages the view updates.\r\n     */\r\n    private onViewUpdate;\r\n    /**\r\n     * Update the current ignored decorations based on the latest changes to the\r\n     * prosemirror document.\r\n     */\r\n    private mapIgnoredDecorations;\r\n    readonly ignoreNextExit: () => void;\r\n    /**\r\n     * Ignores the match specified. Until the match is deleted no more `onChange`,\r\n     * `onExit` handlers will be triggered. It will be like the match doesn't\r\n     * exist.\r\n     *\r\n     * @remarks\r\n     *\r\n     * All we need to ignore is the match character. This means that any further\r\n     * matches from the activation character will be ignored.\r\n     */\r\n    readonly addIgnored: ({ from, char, name, specific }: AddIgnoredParameter) => void;\r\n    /**\r\n     * Removes a single match character from the ignored decorations.\r\n     *\r\n     * @remarks\r\n     *\r\n     * After this point event handlers will begin to be called again for match\r\n     * character.\r\n     */\r\n    readonly removeIgnored: ({ from, char, name }: RemoveIgnoredParameter) => void;\r\n    /**\r\n     * Removes all the ignored decorations so that suggesters can active their\r\n     * handlers anywhere in the document.\r\n     */\r\n    readonly clearIgnored: (name?: string) => void;\r\n    private shouldIgnoreMatch;\r\n    /**\r\n     * Reset the state.\r\n     */\r\n    private resetState;\r\n    /**\r\n     * Update the next state value.\r\n     */\r\n    private updateReasons;\r\n    /**\r\n     * Add a new suggest or replace it if it already exists.\r\n     */\r\n    addSuggester(suggester: Suggester): () => void;\r\n    /**\r\n     * Remove a suggester if it exists.\r\n     */\r\n    removeSuggester(suggester: Suggester | string): void;\r\n    /**\r\n     * Used to handle the view property of the plugin spec.\r\n     */\r\n    viewHandler(): {\r\n        update: any;\r\n    };\r\n    toJSON(): Readonly<SuggestStateMatch<import(\"@remirror/core-types\").AnyFunction<void>>>;\r\n    /**\r\n     * Applies updates to the state to be used within the plugins apply method.\r\n     *\r\n     * @param - params\r\n     */\r\n    apply({ tr, newState }: TransactionParameter & CompareStateParameter): this;\r\n    /**\r\n     * Manages the keyDown event within the plugin props\r\n     *\r\n     * @param event\r\n     */\r\n    handleKeyDown(event: KeyboardEvent): boolean;\r\n    /**\r\n     * Handle any key presses of non supported characters\r\n     */\r\n    handleTextInput({ text, from, to }: HandleTextInputParameter): boolean;\r\n    /**\r\n     * Handle the decorations which wrap the mention while it is active and not\r\n     * yet complete.\r\n     */\r\n    decorations(state: EditorState): DecorationSet<any>;\r\n}\r\ninterface HandleTextInputParameter extends FromToParameter, TextParameter {\r\n}\r\n/**\r\n * The parameter object for the {@link SuggestState.apply} method.\r\n *\r\n * @remarks\r\n *\r\n * **Extends**\r\n *\r\n * -  {@link @remirror/core-types#TransactionParameter}\r\n * -  {@link @remirror/core-types#CompareStateParameter}\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface SuggestStateApplyParameter<Schema extends EditorSchema = any> extends TransactionParameter<Schema>, CompareStateParameter<Schema> {\r\n}\r\nexport {};\r\n",
      "suggest-types.d.ts": "import type { AnyFunction, EditorViewParameter, FromToParameter, TextParameter } from '@remirror/core-types';\r\nimport type { ChangeReason, ExitReason } from './suggest-constants';\r\n/**\r\n * This `Suggester` interface defines all the options required to create a\r\n * suggestion within your editor.\r\n *\r\n * @remarks\r\n *\r\n * The options are passed to the {@link suggest} method which uses them.\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport interface Suggester<Command extends AnyFunction<void> = AnyFunction<void>> {\r\n    /**\r\n     * The activation character(s) to match against.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example if building a mention plugin you might want to set this to `@`.\r\n     * Multi string characters are theoretically supported (although currently\r\n     * untested).\r\n     *\r\n     * The character does not have to be unique amongst the suggesters and the\r\n     * eventually matched suggester will depend on the order in which the\r\n     * suggesters are added to the plugin.\r\n     */\r\n    char: string;\r\n    /**\r\n     * A unique identifier for the suggester.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This should be globally unique amongst all suggesters registered with this\r\n     * plugin. The plugin will through an error if duplicates names are found.\r\n     *\r\n     * Typically this value will be appended to classes.\r\n     */\r\n    name: string;\r\n    /**\r\n     * Whether to only match from the start of the line\r\n     *\r\n     * @defaultValue `false`\r\n     */\r\n    startOfLine?: boolean;\r\n    /**\r\n     * A regex containing all supported characters when within an active suggester.\r\n     *\r\n     * @defaultValue `/[\\w\\d_]+/`\r\n     */\r\n    supportedCharacters?: RegExp | string;\r\n    /**\r\n     * A regex expression used to validate the text directly before the match.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This will be used when {@link Suggester.invalidPrefixCharacters} is not\r\n     * provided.\r\n     *\r\n     * @defaultValue `/^[\\s\\0]?$/` - translation: only space and zero width\r\n     * characters allowed.\r\n     */\r\n    validPrefixCharacters?: RegExp | string;\r\n    /**\r\n     * A regex expression used to invalidate the text directly before the match.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This has preference over the `validPrefixCharacters` option and when it is\r\n     * defined only it will be looked at in determining whether a prefix is valid.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    invalidPrefixCharacters?: RegExp | string;\r\n    /**\r\n     * Sets the characters that need to be present after the initial character\r\n     * match before a match is triggered.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example with `char` = `@` the following is true.\r\n     *\r\n     * - `matchOffset: 0` matches `'@'` immediately\r\n     * - `matchOffset: 1` matches `'@a'` but not `'@'`\r\n     * - `matchOffset: 2` matches `'@ab'` but not `'@a'` or `'@'`\r\n     * - `matchOffset: 3` matches `'@abc'` but not `'@ab'` or `'@a'` or `'@'`\r\n     * - And so on...\r\n     */\r\n    matchOffset?: number;\r\n    /**\r\n     * Text to append after the suggestion has been added.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    appendText?: string;\r\n    /**\r\n     * Class name to use for the decoration while the suggester is active.\r\n     *\r\n     * @defaultValue 'suggest'\r\n     */\r\n    suggestClassName?: string;\r\n    /**\r\n     * Tag for the prosemirror decoration which wraps an active match.\r\n     *\r\n     * @defaultValue 'span'\r\n     */\r\n    suggestTag?: string;\r\n    /**\r\n     * Set a class for the ignored suggester decoration.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    ignoredClassName?: string;\r\n    /**\r\n     * Set a tag for the ignored suggester decoration.\r\n     *\r\n     * @defaultValue 'span'\r\n     */\r\n    ignoredTag?: string;\r\n    /**\r\n     * When true, decorations are not created when this mention is being edited.\r\n     */\r\n    noDecorations?: boolean;\r\n    /**\r\n     * Called whenever a suggester becomes active or changes in any way.\r\n     *\r\n     * @remarks\r\n     *\r\n     * It receives a parameters object with the `reason` for the change for more\r\n     * granular control.\r\n     *\r\n     * @defaultValue `() => void`\r\n     */\r\n    onChange?: SuggestChangeHandlerMethod<Command>;\r\n    /**\r\n     * Called whenever a suggester is exited with the pre-exit match value.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Can be used to force the command to run the command e.g. when no match was\r\n     * found but a tag should still be created. To accomplish this you would call\r\n     * the `command` parameter and trigger whatever action is felt required.\r\n     *\r\n     * @defaultValue `() => void`\r\n     */\r\n    onExit?: SuggestExitHandlerMethod<Command>;\r\n    /**\r\n     * Called for each character entry and can be used to disable certain\r\n     * characters.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example you may want to disable all `@` symbols while the suggester is\r\n     * active. Return `true` to prevent any further character handlers from\r\n     * running.\r\n     *\r\n     * @defaultValue `() => false`\r\n     */\r\n    onCharacterEntry?: SuggestCharacterEntryMethod<Command>;\r\n    /**\r\n     * An object that describes how certain key bindings should be handled.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Return `true` to prevent any further prosemirror actions or return `false`\r\n     * to allow prosemirror to continue.\r\n     */\r\n    keyBindings?: SuggestKeyBindingMap<Command> | (() => SuggestKeyBindingMap<Command>);\r\n    /**\r\n     * Create the suggested actions which are made available to the `onExit` and\r\n     * on`onChange` handlers.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Suggested actions are useful for developing plugins and extensions which\r\n     * provide useful defaults based on changes happening to the suggester.\r\n     */\r\n    createCommand?: (parameter: CreateSuggestCommandParameter) => Command;\r\n}\r\n/**\r\n * The parameters needed for the {@link SuggestIgnoreParameter.addIgnored} action\r\n * method available to the suggest plugin handlers.\r\n *\r\n * @remarks\r\n *\r\n * See:\r\n * - {@link RemoveIgnoredParameter}\r\n */\r\nexport interface AddIgnoredParameter extends RemoveIgnoredParameter {\r\n    /**\r\n     * When `false` this will ignore the range for all matching suggesters. When\r\n     * true the ignored suggesters will only be the one provided by the name.\r\n     */\r\n    specific?: false;\r\n}\r\n/**\r\n * The parameters needed for the {@link SuggestIgnoreParameter.removeIgnored}\r\n * action method available to the suggest plugin handlers.\r\n */\r\nexport interface RemoveIgnoredParameter extends Pick<Suggester, 'char' | 'name'> {\r\n    /**\r\n     * The starting point of the match that should be ignored.\r\n     */\r\n    from: number;\r\n}\r\n/**\r\n * A parameter builder interface describing the ignore methods available to the\r\n * {@link Suggester} handlers.\r\n */\r\nexport interface SuggestIgnoreParameter {\r\n    /**\r\n     * Add a match target to the ignored matches.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Until the activation character is deleted no more `onChange` or `onExit`\r\n     * handlers will be triggered for the matched character. It will be like the\r\n     * match doesn't exist.\r\n     *\r\n     * By ignoring the activation character the plugin ensures that any further\r\n     * matches from the activation character will be ignored.\r\n     *\r\n     * There are a number of use cases for this. You may chose to ignore a match\r\n     * when:\r\n     *\r\n     * - The user presses the `escape` key to exit your suggestion dropdown.\r\n     * - The user continues typing without selecting any of the options for the\r\n     *   selection drop down.\r\n     * - The user clicks outside of the suggesters dropdown.\r\n     *\r\n     * ```ts\r\n     * const suggester = {\r\n     *   onExit: ({ addIgnored, range: { from }, suggester: { char, name } }: SuggestExitHandlerParameter) => {\r\n     *     addIgnored({ from, char, name }); // Ignore this suggester\r\n     *   },\r\n     * }\r\n     * ```\r\n     */\r\n    addIgnored: (parameter: AddIgnoredParameter) => void;\r\n    /**\r\n     * When name is provided remove all ignored decorations which match the named\r\n     * suggester. Otherwise remove **all** ignored decorations from the document.\r\n     */\r\n    clearIgnored: (name?: string) => void;\r\n    /**\r\n     * Use this method to skip the next `onExit` callback.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is useful when you manually call a command which applies the\r\n     * suggestion outside of the `onExit` callback. When that happens `onExit`\r\n     * will still be triggered and if you don't have the logic set\r\n     * up properly it will rerun your exit command. This can lead to mismatched\r\n     * transaction errors since the `onExit` handler is provided the last active\r\n     * range and query and these values no longer valid.\r\n     *\r\n     * This helper method can be applied to make life easier. Call it when running\r\n     * a command in a click handler or key binding and you don't have to worry\r\n     * about your exit handler being called with a mismatched transaction error.\r\n     */\r\n    ignoreNextExit: () => void;\r\n}\r\n/**\r\n * The match value with the full and partial text.\r\n *\r\n * @remarks\r\n *\r\n * For a suggester with a char `@` then the following text `@ab|c` where `|` is\r\n * the current cursor position will create a queryText with the following\r\n * signature.\r\n *\r\n * ```json\r\n * { \"full\": \"abc\", \"partial\": \"ab\" }\r\n * ```\r\n */\r\nexport interface MatchValue {\r\n    /**\r\n     * The complete match independent of the cursor position.\r\n     */\r\n    full: string;\r\n    /**\r\n     * This value is a partial match which ends at the position of the cursor\r\n     * within the matching text.\r\n     */\r\n    partial: string;\r\n}\r\n/**\r\n * A parameter builder interface describing a `from`/`to`/`end` range.\r\n */\r\nexport interface FromToEndParameter extends FromToParameter {\r\n    /**\r\n     * The absolute end of the matching string.\r\n     */\r\n    end: number;\r\n}\r\n/**\r\n * Describes the properties of a match which includes range and the text as well\r\n * as information of the suggester that created the match.\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport interface SuggestStateMatch<Command extends AnyFunction<void> = AnyFunction<void>> extends SuggesterParameter<Command> {\r\n    /**\r\n     * Range of current match; for example `@foo|bar` (where | is the cursor)\r\n     * - `from` is the start (= 0)\r\n     * - `to` is cursor position (= 4)\r\n     * - `end` is the end of the match (= 7)\r\n     */\r\n    range: FromToEndParameter;\r\n    /**\r\n     * Current query of match which doesn't include the activation character.\r\n     */\r\n    queryText: MatchValue;\r\n    /**\r\n     * Full text of match including the activation character\r\n     *\r\n     * @remarks\r\n     *\r\n     * For a `char` of `'@'` and query of `'awesome'` `text.full` would be\r\n     * `'@awesome'`.\r\n     */\r\n    matchText: MatchValue;\r\n}\r\nexport interface DocChangedParameter {\r\n    /**\r\n     * - `true` when there was a changed in the editor content.\r\n     * - `false` when only the selection changed.\r\n     *\r\n     * TODO currently unused. Should be used to differentiate between a cursor\r\n     * exit using the keyboard navigation and a document update change typing\r\n     * invalid character, space, etc...\r\n     */\r\n    docChanged: boolean;\r\n}\r\n/**\r\n * A parameter builder interface describing match found by the suggest plugin.\r\n */\r\nexport interface SuggestStateMatchParameter {\r\n    /**\r\n     * The match that will be triggered.\r\n     */\r\n    match: SuggestStateMatch;\r\n}\r\n/**\r\n * A special parameter needed when creating editable suggester using prosemirror\r\n * `Marks`. The method should be called when removing a suggestion that was\r\n * identified by a prosemirror `Mark`.\r\n */\r\nexport interface SuggestMarkParameter {\r\n    /**\r\n     * When managing suggesters with marks it is possible to remove a mark\r\n     * without the change reflecting in the prosemirror state. This method should\r\n     * be used when removing a suggestion if you are using prosemirror `Marks` to\r\n     * identify the suggestion.\r\n     *\r\n     * When this method is called, `prosemirror-suggest` will handle the removal\r\n     * of the mark in the next state update (during apply).\r\n     */\r\n    setMarkRemoved: () => void;\r\n}\r\n/**\r\n * The parameters passed into the `createSuggest` suggester property.\r\n *\r\n * @remarks\r\n *\r\n * See:\r\n * - {@link ReasonParameter}\r\n * - {@link @remirror/core-types#EditorViewParameter}\r\n * - {@link SuggestStateMatchParameter}\r\n * - {@link SuggestMarkParameter}\r\n * - {@link SuggestIgnoreParameter}\r\n */\r\nexport interface CreateSuggestCommandParameter extends Partial<ReasonParameter>, EditorViewParameter, SuggestStateMatchParameter, SuggestMarkParameter, SuggestIgnoreParameter {\r\n}\r\n/**\r\n * Determines whether to replace the full match or the partial match (up to the\r\n * cursor position).\r\n */\r\nexport declare type SuggestReplacementType = 'full' | 'partial';\r\nexport interface SuggestCallbackParameter<Command extends AnyFunction<void> = AnyFunction<void>> extends SuggestStateMatch, EditorViewParameter, SuggestCommandParameter<Command>, SuggestIgnoreParameter {\r\n}\r\n/**\r\n * The parameters required by the {@link Suggester.onKeyDown}.\r\n *\r\n * @remarks\r\n *\r\n * See:\r\n * - {@link SuggestStateMatch}\r\n * - {@link @remirror/core-types#EditorViewParameter}\r\n * - {@link KeyboardEventParameter}\r\n */\r\nexport interface OnKeyDownParameter extends SuggestStateMatch, EditorViewParameter, KeyboardEventParameter {\r\n}\r\n/**\r\n * A parameter builder interface describing the event which triggers the\r\n * keyboard event handler.\r\n */\r\nexport interface KeyboardEventParameter {\r\n    /**\r\n     * The keyboard event which triggered the call to the event handler.\r\n     */\r\n    event: KeyboardEvent;\r\n}\r\n/**\r\n * A parameter builder interface indicating the reason the handler was called.\r\n *\r\n * @typeParam Reason - Whether this is change or an exit reason.\r\n */\r\nexport interface ReasonParameter<Reason = ExitReason | ChangeReason> {\r\n    /**\r\n     * The reason this callback was triggered. This can be used to determine the\r\n     * action to use in your own code.\r\n     */\r\n    reason: Reason;\r\n}\r\n/**\r\n * The parameters passed to the {@link Suggester.onChange} method.\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport interface SuggestChangeHandlerParameter<Command extends AnyFunction<void> = AnyFunction<void>> extends SuggestCallbackParameter<Command>, ReasonParameter<ChangeReason> {\r\n}\r\nexport declare type SuggestChangeHandlerMethod<Command extends AnyFunction<void> = AnyFunction<void>> = (parameter: SuggestChangeHandlerParameter<Command>) => void;\r\n/**\r\n * The parameters passed to the {@link Suggester.onExit} method.\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport interface SuggestExitHandlerParameter<Command extends AnyFunction<void> = AnyFunction<void>> extends SuggestCallbackParameter<Command>, ReasonParameter<ExitReason> {\r\n}\r\nexport declare type SuggestExitHandlerMethod<Command extends AnyFunction<void> = AnyFunction<void>> = (parameter: SuggestExitHandlerParameter<Command>) => void;\r\n/**\r\n * The parameters passed to the {@link Suggester.onCharacterEntry} method.\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport interface SuggestCharacterEntryParameter<Command extends AnyFunction<void> = AnyFunction<void>> extends SuggestCallbackParameter<Command>, FromToParameter, TextParameter {\r\n}\r\nexport declare type SuggestCharacterEntryMethod<Command extends AnyFunction<void> = AnyFunction<void>> = (parameter: SuggestCharacterEntryParameter<Command>) => boolean;\r\n/**\r\n * The parameters required by the {@link SuggestKeyBinding} method.\r\n *\r\n * @remarks\r\n *\r\n * See:\r\n * - {@link SuggestCallbackParameter}\r\n * - {@link SuggestMarkParameter}\r\n * - {@link KeyboardEventParameter}\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport interface SuggestKeyBindingParameter<Command extends AnyFunction<void> = AnyFunction<void>> extends SuggestCallbackParameter<Command>, SuggestMarkParameter, KeyboardEventParameter {\r\n}\r\n/**\r\n * A method for performing actions when a certain key / pattern is pressed.\r\n *\r\n * @remarks\r\n *\r\n * Return true to prevent any further bubbling of the key event and to stop\r\n * other handlers from also processing the event.\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport declare type SuggestKeyBinding<Command extends AnyFunction<void> = AnyFunction<void>> = (parameter: SuggestKeyBindingParameter<Command>) => boolean | void;\r\n/**\r\n * The keybindings shape for the {@link Suggester.keyBindings} property.\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport declare type SuggestKeyBindingMap<Command extends AnyFunction<void> = AnyFunction<void>> = Partial<Record<'Enter' | 'ArrowDown' | 'ArrowUp' | 'ArrowLeft' | 'ArrowRight' | 'Esc' | 'Delete' | 'Backspace', SuggestKeyBinding<Command>>> & Record<string, SuggestKeyBinding<Command>>;\r\n/**\r\n * A parameter builder interface which adds the command property.\r\n *\r\n * @typeParam Command - the command method a {@link Suggester} makes available\r\n * to its handlers.\r\n */\r\nexport interface SuggestCommandParameter<Command extends AnyFunction<void> = AnyFunction<void>> {\r\n    /**\r\n     * A command which automatically applies the provided attributes to the\r\n     * command.\r\n     */\r\n    command: Command;\r\n}\r\nexport interface SuggesterParameter<Command extends AnyFunction<void> = AnyFunction<void>> {\r\n    /**\r\n     * The suggester to use for finding matches.\r\n     */\r\n    suggester: Required<Suggester<Command>>;\r\n}\r\nexport interface SuggestStateMatchReason<Reason> extends SuggestStateMatch, ReasonParameter<Reason> {\r\n}\r\n/**\r\n * A mapping of the handler matches with their reasons for occurring within the\r\n * suggest state.\r\n */\r\nexport interface SuggestReasonMap {\r\n    /**\r\n     * Reasons triggering the onChange handler.\r\n     */\r\n    change?: SuggestStateMatchReason<ChangeReason>;\r\n    /**\r\n     * Reasons triggering the `onExit` handler\r\n     */\r\n    exit?: SuggestStateMatchReason<ExitReason>;\r\n}\r\n/**\r\n * A parameter builder interface which adds the match property.\r\n *\r\n * @remarks\r\n *\r\n * This is used to build parameters for {@link Suggester} handler methods.\r\n *\r\n * @typeParam Reason - Whether this is change or an exit reason.\r\n */\r\nexport interface ReasonMatchParameter<Reason> {\r\n    /**\r\n     * The match with its reason property.\r\n     */\r\n    match: SuggestStateMatchReason<Reason>;\r\n}\r\n/**\r\n * A parameter builder interface which compares the previous and next match.\r\n *\r\n * @remarks\r\n *\r\n * It is used within the codebase to determine the kind of change that has\r\n * occurred (i.e. change or exit see {@link SuggestReasonMap}) and the reason\r\n * for that that change. See {@link ExitReason} {@link ChangeReason}\r\n */\r\nexport interface CompareMatchParameter {\r\n    /**\r\n     * The initial match\r\n     */\r\n    prev: SuggestStateMatch;\r\n    /**\r\n     * The current match\r\n     */\r\n    next: SuggestStateMatch;\r\n}\r\n",
      "suggest-utils.d.ts": "import type { EditorStateParameter, ProsemirrorCommandFunction, ResolvedPosParameter } from '@remirror/core-types';\r\nimport type { CompareMatchParameter, DocChangedParameter, Suggester, SuggestKeyBindingMap, SuggestKeyBindingParameter, SuggestReasonMap, SuggestStateMatch } from './suggest-types';\r\ninterface TransformKeyBindingsParameter {\r\n    /**\r\n     * The object where each keys are mapped to corresponding actions.\r\n     */\r\n    bindings: SuggestKeyBindingMap;\r\n    /**\r\n     * The param object which is passed into each method.\r\n     */\r\n    suggestParameter: SuggestKeyBindingParameter;\r\n}\r\n/**\r\n * Transforms the keybindings into an object that can be consumed by the\r\n * prosemirror keydownHandler method.\r\n */\r\nexport declare function transformKeyBindings(parameter: TransformKeyBindingsParameter): Record<string, ProsemirrorCommandFunction>;\r\n/**\r\n * Run the keyBindings when a key is pressed to perform actions.\r\n *\r\n * When return value is `true` no further actions should be taken for this key\r\n * event. When `false` the event will be passed up the chain to the next key\r\n * handler.\r\n *\r\n * This is useful for intercepting events.\r\n */\r\nexport declare function runKeyBindings(bindings: SuggestKeyBindingMap, suggestParameter: SuggestKeyBindingParameter): boolean;\r\ninterface FindFromSuggestersParameter extends ResolvedPosParameter, DocChangedParameter {\r\n    /**\r\n     * The matchers to search through.\r\n     */\r\n    suggesters: Array<Required<Suggester>>;\r\n}\r\ndeclare type FindReasonParameter = EditorStateParameter & ResolvedPosParameter & Partial<CompareMatchParameter>;\r\n/**\r\n * Creates an array of the actions taken based on the current prev and next\r\n * state field\r\n */\r\nexport declare function findReason(parameter: FindReasonParameter): SuggestReasonMap;\r\n/**\r\n * Find a match for the provided matchers\r\n */\r\nexport declare function findFromSuggesters(parameter: FindFromSuggestersParameter): SuggestStateMatch | undefined;\r\nexport {};\r\n"
    },
    "@remirror/dev": {
      "dev.d.ts": "/**\r\n * A component that should be placed within the remirror context and will\r\n * automatically wrap the prosemirror view and create a lovely dev tools\r\n * components.\r\n *\r\n * Make sure not to use this in production as it increase the bundle size quite\r\n * significantly.\r\n *\r\n * Built with https://github.com/d4rkr00t/prosemirror-dev-tools\r\n */\r\nexport declare const ProsemirrorDevTools: () => any;\r\n",
      "index.d.ts": "export { ProsemirrorDevTools } from './dev';\r\n"
    },
    "@remirror/playground": {
      "index.d.ts": "import { AnyCombinedUnion, EditorState, EditorView, RemirrorEventListener, RemirrorManager } from 'remirror/core';\r\ndeclare global {\r\n    interface Window {\r\n        REMIRROR_PLAYGROUND_PERSIST: {\r\n            previousView: EditorView | null;\r\n            lastKnownGoodState: EditorState | null;\r\n        };\r\n    }\r\n}\r\nexport declare function useRemirrorPlayground<Combined extends AnyCombinedUnion>(extensionManager: RemirrorManager<Combined>): {\r\n    value: EditorState;\r\n    onChange: RemirrorEventListener<Combined>;\r\n};\r\n"
    },
    "@remirror/pm/commands": {
      "index.d.ts": "export * from 'prosemirror-commands';\r\n"
    },
    "@remirror/pm/dropcursor": {
      "index.d.ts": "export * from 'prosemirror-dropcursor';\r\n"
    },
    "@remirror/pm/gapcursor": {
      "index.d.ts": "export * from 'prosemirror-gapcursor';\r\n"
    },
    "@remirror/pm/history": {
      "index.d.ts": "export * from 'prosemirror-history';\r\n"
    },
    "@remirror/pm/inputrules": {
      "index.d.ts": "export * from 'prosemirror-inputrules';\r\n"
    },
    "@remirror/pm/keymap": {
      "index.d.ts": "export * from 'prosemirror-keymap';\r\n"
    },
    "@remirror/pm/model": {
      "index.d.ts": "export * from 'prosemirror-model';\r\n"
    },
    "@remirror/pm/schema-list": {
      "index.d.ts": "export * from 'prosemirror-schema-list';\r\n"
    },
    "@remirror/pm/state": {
      "index.d.ts": "export * from 'prosemirror-state';\r\n"
    },
    "@remirror/pm/suggest": {
      "index.d.ts": "export * from 'prosemirror-suggest';\r\n"
    },
    "@remirror/pm/tables": {
      "index.d.ts": "export * from 'prosemirror-tables';\r\n"
    },
    "@remirror/pm/transform": {
      "index.d.ts": "export * from 'prosemirror-transform';\r\n"
    },
    "@remirror/pm/view": {
      "index.d.ts": "export * from 'prosemirror-view';\r\n"
    },
    "react": {
      "experimental.d.ts": "/**\n * These are types for things that are present in the `experimental` builds of React but not yet\n * on a stable build.\n *\n * Once they are promoted to stable they can just be moved to the main index file.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react/experimental\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react/experimental'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react/experimental\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/master/packages/react/src/React.js to see how the exports are declared,\n// and https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js to verify which APIs are\n// flagged experimental or not. Experimental APIs will be tagged with `__EXPERIMENTAL__`.\n//\n// For the inputs of types exported as simply a fiber tag, the `beginWork` function of ReactFiberBeginWork.js\n// is a good place to start looking for details; it generally calls prop validation functions or delegates\n// all tasks done as part of the render phase (the concurrent part of the React update cycle).\n//\n// Suspense-related handling can be found in ReactFiberThrow.js.\n\nimport React = require('.');\n\nexport {};\n\ndeclare module '.' {\n    export type SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together';\n    export type SuspenseListTailMode = 'collapsed' | 'hidden';\n\n    export interface SuspenseListCommonProps {\n        /**\n         * Note that SuspenseList require more than one child;\n         * it is a runtime warning to provide only a single child.\n         *\n         * It does, however, allow those children to be wrapped inside a single\n         * level of `<React.Fragment>`.\n         */\n        children: ReactElement | Iterable<ReactElement>;\n    }\n\n    interface DirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder: 'forwards' | 'backwards';\n        /**\n         * Dictates how unloaded items in a SuspenseList is shown.\n         *\n         * - By default, `SuspenseList` will show all fallbacks in the list.\n         * - `collapsed` shows only the next fallback in the list.\n         * - `hidden` doesn’t show any unloaded items.\n         */\n        tail?: SuspenseListTailMode;\n    }\n\n    interface NonDirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder?: Exclude<SuspenseListRevealOrder, DirectionalSuspenseListProps['revealOrder']>;\n        /**\n         * The tail property is invalid when not using the `forwards` or `backwards` reveal orders.\n         */\n        tail?: never;\n    }\n\n    export type SuspenseListProps = DirectionalSuspenseListProps | NonDirectionalSuspenseListProps;\n\n    /**\n     * `SuspenseList` helps coordinate many components that can suspend by orchestrating the order\n     * in which these components are revealed to the user.\n     *\n     * When multiple components need to fetch data, this data may arrive in an unpredictable order.\n     * However, if you wrap these items in a `SuspenseList`, React will not show an item in the list\n     * until previous items have been displayed (this behavior is adjustable).\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist\n     * @see https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist\n     */\n    export const unstable_SuspenseList: ExoticComponent<SuspenseListProps>;\n\n    export interface SuspenseConfig extends TimeoutConfig {\n        busyDelayMs?: number;\n        busyMinDurationMs?: number;\n    }\n\n    // undocumented, considered for removal\n    export function unstable_withSuspenseConfig(\n        scope: () => void | undefined,\n        config: SuspenseConfig | null | undefined,\n    ): void;\n\n    export interface TimeoutConfig {\n        /**\n         * This timeout (in milliseconds) tells React how long to wait before showing the next state.\n         *\n         * React will always try to use a shorter lag when network and device allows it.\n         *\n         * **NOTE: We recommend that you share Suspense Config between different modules.**\n         */\n        timeoutMs: number;\n    }\n\n    // must be synchronous\n    export type TransitionFunction = () => void | undefined;\n    // strange definition to allow vscode to show documentation on the invocation\n    export interface TransitionStartFunction {\n        /**\n         * State updates caused inside the callback are allowed to be deferred.\n         *\n         * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n         *\n         * @param callback A _synchronous_ function which causes state updates that can be deferred.\n         */\n        (callback: TransitionFunction): void;\n    }\n\n    /**\n     * Returns a deferred version of the value that may “lag behind” it for at most `timeoutMs`.\n     *\n     * This is commonly used to keep the interface responsive when you have something that renders immediately\n     * based on user input and something that needs to wait for a data fetch.\n     *\n     * A good example of this is a text input.\n     *\n     * @param value The value that is going to be deferred\n     * @param config An optional object with `timeoutMs`\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#usedeferredvalue\n     */\n    export function unstable_useDeferredValue<T>(value: T, config?: TimeoutConfig | null): T;\n\n    /**\n     * Allows components to avoid undesirable loading states by waiting for content to load\n     * before transitioning to the next screen. It also allows components to defer slower,\n     * data fetching updates until subsequent renders so that more crucial updates can be\n     * rendered immediately.\n     *\n     * The `useTransition` hook returns two values in an array.\n     *\n     * The first is a function that takes a callback. We can use it to tell React which state we want to defer.\n     * The seconda boolean. It’s React’s way of informing us whether we’re waiting for the transition to finish.\n     *\n     * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n     *\n     * @param config An optional object with `timeoutMs`\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#usetransition\n     */\n    export function unstable_useTransition(config?: SuspenseConfig | null): [TransitionStartFunction, boolean];\n}\n",
      "global.d.ts": "/*\nReact projects that don't include the DOM library need these interfaces to compile.\nReact Native applications use React, but there is no DOM available. The JavaScript runtime\nis ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.\n\nWarning: all of these interfaces are empty. If you want type definitions for various properties\n(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).\n*/\n\ninterface Event { }\ninterface AnimationEvent extends Event { }\ninterface ClipboardEvent extends Event { }\ninterface CompositionEvent extends Event { }\ninterface DragEvent extends Event { }\ninterface FocusEvent extends Event { }\ninterface KeyboardEvent extends Event { }\ninterface MouseEvent extends Event { }\ninterface TouchEvent extends Event { }\ninterface PointerEvent extends Event { }\ninterface TransitionEvent extends Event { }\ninterface UIEvent extends Event { }\ninterface WheelEvent extends Event { }\n\ninterface EventTarget { }\ninterface Document { }\ninterface DataTransfer { }\ninterface StyleMedia { }\n\ninterface Element { }\ninterface DocumentFragment { }\n\ninterface HTMLElement extends Element { }\ninterface HTMLAnchorElement extends HTMLElement { }\ninterface HTMLAreaElement extends HTMLElement { }\ninterface HTMLAudioElement extends HTMLElement { }\ninterface HTMLBaseElement extends HTMLElement { }\ninterface HTMLBodyElement extends HTMLElement { }\ninterface HTMLBRElement extends HTMLElement { }\ninterface HTMLButtonElement extends HTMLElement { }\ninterface HTMLCanvasElement extends HTMLElement { }\ninterface HTMLDataElement extends HTMLElement { }\ninterface HTMLDataListElement extends HTMLElement { }\ninterface HTMLDialogElement extends HTMLElement { }\ninterface HTMLDivElement extends HTMLElement { }\ninterface HTMLDListElement extends HTMLElement { }\ninterface HTMLEmbedElement extends HTMLElement { }\ninterface HTMLFieldSetElement extends HTMLElement { }\ninterface HTMLFormElement extends HTMLElement { }\ninterface HTMLHeadingElement extends HTMLElement { }\ninterface HTMLHeadElement extends HTMLElement { }\ninterface HTMLHRElement extends HTMLElement { }\ninterface HTMLHtmlElement extends HTMLElement { }\ninterface HTMLIFrameElement extends HTMLElement { }\ninterface HTMLImageElement extends HTMLElement { }\ninterface HTMLInputElement extends HTMLElement { }\ninterface HTMLModElement extends HTMLElement { }\ninterface HTMLLabelElement extends HTMLElement { }\ninterface HTMLLegendElement extends HTMLElement { }\ninterface HTMLLIElement extends HTMLElement { }\ninterface HTMLLinkElement extends HTMLElement { }\ninterface HTMLMapElement extends HTMLElement { }\ninterface HTMLMetaElement extends HTMLElement { }\ninterface HTMLObjectElement extends HTMLElement { }\ninterface HTMLOListElement extends HTMLElement { }\ninterface HTMLOptGroupElement extends HTMLElement { }\ninterface HTMLOptionElement extends HTMLElement { }\ninterface HTMLParagraphElement extends HTMLElement { }\ninterface HTMLParamElement extends HTMLElement { }\ninterface HTMLPreElement extends HTMLElement { }\ninterface HTMLProgressElement extends HTMLElement { }\ninterface HTMLQuoteElement extends HTMLElement { }\ninterface HTMLSlotElement extends HTMLElement { }\ninterface HTMLScriptElement extends HTMLElement { }\ninterface HTMLSelectElement extends HTMLElement { }\ninterface HTMLSourceElement extends HTMLElement { }\ninterface HTMLSpanElement extends HTMLElement { }\ninterface HTMLStyleElement extends HTMLElement { }\ninterface HTMLTableElement extends HTMLElement { }\ninterface HTMLTableColElement extends HTMLElement { }\ninterface HTMLTableDataCellElement extends HTMLElement { }\ninterface HTMLTableHeaderCellElement extends HTMLElement { }\ninterface HTMLTableRowElement extends HTMLElement { }\ninterface HTMLTableSectionElement extends HTMLElement { }\ninterface HTMLTemplateElement extends HTMLElement { }\ninterface HTMLTextAreaElement extends HTMLElement { }\ninterface HTMLTitleElement extends HTMLElement { }\ninterface HTMLTrackElement extends HTMLElement { }\ninterface HTMLUListElement extends HTMLElement { }\ninterface HTMLVideoElement extends HTMLElement { }\ninterface HTMLWebViewElement extends HTMLElement { }\n\ninterface SVGElement extends Element { }\ninterface SVGSVGElement extends SVGElement { }\ninterface SVGCircleElement extends SVGElement { }\ninterface SVGClipPathElement extends SVGElement { }\ninterface SVGDefsElement extends SVGElement { }\ninterface SVGDescElement extends SVGElement { }\ninterface SVGEllipseElement extends SVGElement { }\ninterface SVGFEBlendElement extends SVGElement { }\ninterface SVGFEColorMatrixElement extends SVGElement { }\ninterface SVGFEComponentTransferElement extends SVGElement { }\ninterface SVGFECompositeElement extends SVGElement { }\ninterface SVGFEConvolveMatrixElement extends SVGElement { }\ninterface SVGFEDiffuseLightingElement extends SVGElement { }\ninterface SVGFEDisplacementMapElement extends SVGElement { }\ninterface SVGFEDistantLightElement extends SVGElement { }\ninterface SVGFEDropShadowElement extends SVGElement { }\ninterface SVGFEFloodElement extends SVGElement { }\ninterface SVGFEFuncAElement extends SVGElement { }\ninterface SVGFEFuncBElement extends SVGElement { }\ninterface SVGFEFuncGElement extends SVGElement { }\ninterface SVGFEFuncRElement extends SVGElement { }\ninterface SVGFEGaussianBlurElement extends SVGElement { }\ninterface SVGFEImageElement extends SVGElement { }\ninterface SVGFEMergeElement extends SVGElement { }\ninterface SVGFEMergeNodeElement extends SVGElement { }\ninterface SVGFEMorphologyElement extends SVGElement { }\ninterface SVGFEOffsetElement extends SVGElement { }\ninterface SVGFEPointLightElement extends SVGElement { }\ninterface SVGFESpecularLightingElement extends SVGElement { }\ninterface SVGFESpotLightElement extends SVGElement { }\ninterface SVGFETileElement extends SVGElement { }\ninterface SVGFETurbulenceElement extends SVGElement { }\ninterface SVGFilterElement extends SVGElement { }\ninterface SVGForeignObjectElement extends SVGElement { }\ninterface SVGGElement extends SVGElement { }\ninterface SVGImageElement extends SVGElement { }\ninterface SVGLineElement extends SVGElement { }\ninterface SVGLinearGradientElement extends SVGElement { }\ninterface SVGMarkerElement extends SVGElement { }\ninterface SVGMaskElement extends SVGElement { }\ninterface SVGMetadataElement extends SVGElement { }\ninterface SVGPathElement extends SVGElement { }\ninterface SVGPatternElement extends SVGElement { }\ninterface SVGPolygonElement extends SVGElement { }\ninterface SVGPolylineElement extends SVGElement { }\ninterface SVGRadialGradientElement extends SVGElement { }\ninterface SVGRectElement extends SVGElement { }\ninterface SVGStopElement extends SVGElement { }\ninterface SVGSwitchElement extends SVGElement { }\ninterface SVGSymbolElement extends SVGElement { }\ninterface SVGTextElement extends SVGElement { }\ninterface SVGTextPathElement extends SVGElement { }\ninterface SVGTSpanElement extends SVGElement { }\ninterface SVGUseElement extends SVGElement { }\ninterface SVGViewElement extends SVGElement { }\n\ninterface Text { }\ninterface TouchList { }\ninterface WebGLRenderingContext { }\ninterface WebGL2RenderingContext { }\n",
      "index.d.ts": "// Type definitions for React 16.9\n// Project: http://facebook.github.io/react/\n// Definitions by: Asana <https://asana.com>\n//                 AssureSign <http://www.assuresign.com>\n//                 Microsoft <https://microsoft.com>\n//                 John Reilly <https://github.com/johnnyreilly>\n//                 Benoit Benezech <https://github.com/bbenezech>\n//                 Patricio Zavolinsky <https://github.com/pzavolinsky>\n//                 Digiguru <https://github.com/digiguru>\n//                 Eric Anderson <https://github.com/ericanderson>\n//                 Dovydas Navickas <https://github.com/DovydasNavickas>\n//                 Josh Rutherford <https://github.com/theruther4d>\n//                 Guilherme Hübner <https://github.com/guilhermehubner>\n//                 Ferdy Budhidharma <https://github.com/ferdaber>\n//                 Johann Rakotoharisoa <https://github.com/jrakotoharisoa>\n//                 Olivier Pascal <https://github.com/pascaloliv>\n//                 Martin Hochel <https://github.com/hotell>\n//                 Frank Li <https://github.com/franklixuefei>\n//                 Jessica Franco <https://github.com/Jessidhia>\n//                 Saransh Kataria <https://github.com/saranshkataria>\n//                 Kanitkorn Sujautra <https://github.com/lukyth>\n//                 Sebastian Silbermann <https://github.com/eps1lon>\n//                 Kyle Scully <https://github.com/zieka>\n//                 Cong Zhang <https://github.com/dancerphil>\n//                 Dimitri Mitropoulos <https://github.com/dimitropoulos>\n//                 JongChan Choi <https://github.com/disjukr>\n//                 Victor Magalhães <https://github.com/vhfmag>\n//                 Dale Tan <https://github.com/hellatan>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from 'csstype';\nimport * as PropTypes from 'prop-types';\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\ntype Booleanish = boolean | 'true' | 'false';\n\n/**\n * defined in scheduler/tracing\n */\ninterface SchedulerInteraction {\n    id: number;\n    name: string;\n    timestamp: number;\n}\n\n// tslint:disable-next-line:export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    type ElementType<P = any> =\n        {\n            [K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never\n        }[keyof JSX.IntrinsicElements] |\n        ComponentType<P>;\n    /**\n     * @deprecated Please use `ElementType`\n     */\n    type ReactType<P = any> = ElementType<P>;\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    type JSXElementConstructor<P> =\n        | ((props: P) => ReactElement | null)\n        | (new (props: P) => Component<P, any>);\n\n    interface RefObject<T> {\n        readonly current: T | null;\n    }\n    type RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\n    type Ref<T> = RefCallback<T> | RefObject<T> | null;\n    type LegacyRef<T> = string | Ref<T>;\n    /**\n     * Gets the instance type for a React element. The instance will be different for various component types:\n     *\n     * - React class components will be the class instance. So if you had `class Foo extends React.Component<{}> {}`\n     *   and used `React.ElementRef<typeof Foo>` then the type would be the instance of `Foo`.\n     * - React stateless functional components do not have a backing instance and so `React.ElementRef<typeof Bar>`\n     *   (when `Bar` is `function Bar() {}`) will give you the `undefined` type.\n     * - JSX intrinsics like `div` will give you their DOM instance. For `React.ElementRef<'div'>` that would be\n     *   `HTMLDivElement`. For `React.ElementRef<'input'>` that would be `HTMLInputElement`.\n     * - React stateless functional components that forward a `ref` will give you the `ElementRef` of the forwarded\n     *   to component.\n     *\n     * `C` must be the type _of_ a React component so you need to use typeof as in React.ElementRef<typeof MyComponent>.\n     *\n     * @todo In Flow, this works a little different with forwarded refs and the `AbstractComponent` that\n     *       `React.forwardRef()` returns.\n     */\n    type ElementRef<\n        C extends\n            | ForwardRefExoticComponent<any>\n            | { new (props: any): Component<any> }\n            | ((props: any, context?: any) => ReactElement | null)\n            | keyof JSX.IntrinsicElements\n    > =\n        // need to check first if `ref` is a valid prop for ts@3.0\n        // otherwise it will infer `{}` instead of `never`\n        \"ref\" extends keyof ComponentPropsWithRef<C>\n            ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends Ref<\n                infer Instance\n            >\n                ? Instance\n                : never\n            : never;\n\n    type ComponentState = any;\n\n    type Key = string | number;\n\n    /**\n     * @internal You shouldn't need to use this type since you never see these attributes\n     * inside your component or have to validate them.\n     */\n    interface Attributes {\n        key?: Key | null;\n    }\n    interface RefAttributes<T> extends Attributes {\n        ref?: Ref<T>;\n    }\n    interface ClassAttributes<T> extends Attributes {\n        ref?: LegacyRef<T>;\n    }\n\n    interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\n        type: T;\n        props: P;\n        key: Key | null;\n    }\n\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, 'key' | 'ref'>>\n    > extends ReactElement<P, Exclude<T, number>> { }\n\n    /**\n     * @deprecated Please use `FunctionComponentElement`\n     */\n    type SFCElement<P> = FunctionComponentElement<P>;\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: 'ref' extends keyof P ? P extends { ref?: infer R } ? R : never : never;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T>;\n    }\n\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    // tslint:disable-next-line:no-empty-interface\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> { }\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        key: Key | null;\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    /**\n     * @deprecated Please use `FunctionComponentFactory`\n     */\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> =\n        (props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> =\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;\n\n    // tslint:disable-next-line:no-empty-interface\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;\n    }\n\n    //\n    // React Nodes\n    // http://facebook.github.io/react/docs/glossary.html\n    // ----------------------------------------------------------------------\n\n    type ReactText = string | number;\n    type ReactChild = ReactElement | ReactText;\n\n    interface ReactNodeArray extends Array<ReactNode> {}\n    type ReactFragment = {} | ReactNodeArray;\n    type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    // TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function createElement<P extends {}>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>,\n        props?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null,\n        ...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // Context via RenderProps\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode;\n    }\n\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n    }\n\n    // TODO: similar to how Fragment is actually a symbol, the values returned from createContext,\n    // forwardRef and memo are actually objects that are treated specially by the renderer; see:\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31\n    // However, we have no way of telling the JSX parser that it's a JSX element type or its props other than\n    // by pretending to be a normal component.\n    //\n    // We don't just use ComponentType or SFC types because you are not supposed to attach statics to this\n    // object, but rather to the original function.\n    interface ExoticComponent<P = {}> {\n        /**\n         * **NOTE**: Exotic components are not callable.\n         */\n        (props: P): (ReactElement|null);\n        readonly $$typeof: symbol;\n    }\n\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        displayName?: string;\n    }\n\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P>;\n    }\n\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    // NOTE: only the Context object itself can get a displayName\n    // https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        displayName?: string;\n    }\n    function createContext<T>(\n        // If you thought this should be optional, see\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n        defaultValue: T,\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    const Children: ReactChildren;\n    const Fragment: ExoticComponent<{ children?: ReactNode }>;\n    const StrictMode: ExoticComponent<{ children?: ReactNode }>;\n\n    interface SuspenseProps {\n        children?: ReactNode;\n\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback: NonNullable<ReactNode>|null;\n    }\n    /**\n     * This feature is not yet available for server-side rendering.\n     * Suspense support will be added in a later release.\n     */\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * {@link https://github.com/bvaughn/rfcs/blob/profiler/text/0000-profiler.md#detailed-design | API}\n     */\n    type ProfilerOnRenderCallback = (\n        id: string,\n        phase: \"mount\" | \"update\",\n        actualDuration: number,\n        baseDuration: number,\n        startTime: number,\n        commitTime: number,\n        interactions: Set<SchedulerInteraction>,\n    ) => void;\n    interface ProfilerProps {\n        children?: ReactNode;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    // tslint:disable-next-line:no-empty-interface\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> { }\n    class Component<P, S> {\n        // tslint won't let me format the sample code in a way that vscode likes it :(\n        /**\n         * If set, `this.context` will be set at runtime to the current value of the given Context.\n         *\n         * Usage:\n         *\n         * ```ts\n         * type MyContext = number\n         * const Ctx = React.createContext<MyContext>(0)\n         *\n         * class Foo extends React.Component {\n         *   static contextType = Ctx\n         *   context!: React.ContextType<typeof Ctx>\n         *   render () {\n         *     return <>My context's value: {this.context}</>;\n         *   }\n         * }\n         * ```\n         *\n         * @see https://reactjs.org/docs/context.html#classcontexttype\n         */\n        static contextType?: Context<any>;\n\n        /**\n         * If using the new style context, re-declare this in your class to be the\n         * `React.ContextType` of your `static contextType`.\n         * Should be used with type annotation or static contextType.\n         *\n         * ```ts\n         * static contextType = MyContext\n         * // For TS pre-3.7:\n         * context!: React.ContextType<typeof MyContext>\n         * // For TS 3.7 and above:\n         * declare context: React.ContextType<typeof MyContext>\n         * ```\n         *\n         * @see https://reactjs.org/docs/context.html\n         */\n        // TODO (TypeScript 3.0): unknown\n        context: any;\n\n        constructor(props: Readonly<P>);\n        /**\n         * @deprecated\n         * @see https://reactjs.org/docs/legacy-context.html\n         */\n        constructor(props: P, context?: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null),\n            callback?: () => void\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        // React.Props<T> is now deprecated, which means that the `children`\n        // property is not available on `P` by default, even though you can\n        // always pass children as variadic arguments to `createElement`.\n        // In the future, if we can define its call signature conditionally\n        // on the existence of `children` in `P`, then we should remove this.\n        readonly props: Readonly<P> & Readonly<{ children?: ReactNode }>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         * https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n         */\n        refs: {\n            [key: string]: ReactInstance\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> { }\n\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated as of recent React versions, function components can no\n     * longer be considered 'stateless'. Please use `FunctionComponent` instead.\n     *\n     * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n     */\n    type SFC<P = {}> = FunctionComponent<P>;\n\n    /**\n     * @deprecated as of recent React versions, function components can no\n     * longer be considered 'stateless'. Please use `FunctionComponent` instead.\n     *\n     * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n     */\n    type StatelessComponent<P = {}> = FunctionComponent<P>;\n\n    type FC<P = {}> = FunctionComponent<P>;\n\n    interface FunctionComponent<P = {}> {\n        (props: PropsWithChildren<P>, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P>;\n        contextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    interface ForwardRefRenderFunction<T, P = {}> {\n        (props: PropsWithChildren<P>, ref: ((instance: T | null) => void) | MutableRefObject<T | null> | null): ReactElement | null;\n        displayName?: string;\n        // explicit rejected with `never` required due to\n        // https://github.com/microsoft/TypeScript/issues/36826\n        /**\n         * defaultProps are not supported on render functions\n         */\n        defaultProps?: never;\n        /**\n         * propTypes are not supported on render functions\n         */\n        propTypes?: never;\n    }\n\n    /**\n     * @deprecated Use ForwardRefRenderFunction. forwardRef doesn't accept a\n     *             \"real\" component.\n     */\n    interface RefForwardingComponent <T, P = {}> extends ForwardRefRenderFunction<T, P> {}\n\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new (props: P, context?: any): Component<P, S>;\n        propTypes?: WeakValidationMap<P>;\n        contextType?: Context<any>;\n        contextTypes?: ValidationMap<any>;\n        childContextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new (props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * We use an intersection type to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See https://github.com/Microsoft/TypeScript/issues/7234 for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        C &\n        (new (props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n        /**\n         * Called to determine whether the change in props and state should trigger a re-render.\n         *\n         * `Component` always returns true.\n         * `PureComponent` implements a shallow comparison on props and state and returns true if any\n         * props or states have changed.\n         *\n         * If false is returned, `Component#render`, `componentWillUpdate`\n         * and `componentDidUpdate` will not be called.\n         */\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n        /**\n         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n         */\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S>;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S>;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        /**\n         * Runs before React applies the result of `render` to the document, and\n         * returns an object to be given to componentDidUpdate. Useful for saving\n         * things such as scroll position before `render` causes changes to it.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\n         * lifecycle events from running.\n         */\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately before mounting occurs, and before `Component#render`.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillMount?(): void;\n        /**\n         * Called immediately before mounting occurs, and before `Component#render`.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillMount?(): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling `Component#setState` generally does not trigger this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling `Component#setState` generally does not trigger this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call `Component#setState` here.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call `Component#setState` here.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>>;\n        statics?: {\n            [key: string]: any;\n        };\n\n        displayName?: string;\n        propTypes?: ValidationMap<any>;\n        contextTypes?: ValidationMap<any>;\n        childContextTypes?: ValidationMap<any>;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    // will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P>;\n        propTypes?: WeakValidationMap<P>;\n    }\n\n    function forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /** Ensures that the props do not include ref at all */\n    type PropsWithoutRef<P> =\n        // Just Pick would be sufficient for this, but I'm trying to avoid unnecessary mapping over union types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        'ref' extends keyof P\n            ? Pick<P, Exclude<keyof P, 'ref'>>\n            : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        'ref' extends keyof P\n            ? P extends { ref?: infer R }\n                ? string extends R\n                    ? PropsWithoutRef<P> & { ref?: Exclude<R, string> }\n                    : P\n                : P\n            : P;\n\n    type PropsWithChildren<P> = P & { children?: ReactNode };\n\n    /**\n     * NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,\n     * or ComponentPropsWithoutRef when refs are not supported.\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> =\n        T extends JSXElementConstructor<infer P>\n            ? P\n            : T extends keyof JSX.IntrinsicElements\n                ? JSX.IntrinsicElements[T]\n                : {};\n    type ComponentPropsWithRef<T extends ElementType> =\n        T extends ComponentClass<infer P>\n            ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n            : PropsWithRef<ComponentProps<T>>;\n    type ComponentPropsWithoutRef<T extends ElementType> =\n        PropsWithoutRef<ComponentProps<T>>;\n\n    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    function memo<P extends object>(\n        Component: SFC<P>,\n        propsAreEqual?: (prevProps: Readonly<PropsWithChildren<P>>, nextProps: Readonly<PropsWithChildren<P>>) => boolean\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean\n    ): MemoExoticComponent<T>;\n\n    type LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly _result: T;\n    };\n\n    function lazy<T extends ComponentType<any>>(\n        factory: () => Promise<{ default: T }>\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    // based on the code in https://github.com/facebook/react/pull/13968\n\n    // Unlike the class component setState, the updates are not allowed to be partial\n    type SetStateAction<S> = S | ((prevState: S) => S);\n    // this technically does accept a second argument, but it's already under a deprecation warning\n    // and it's not even released so probably better to not define it.\n    type Dispatch<A> = (value: A) => void;\n    // Since action _can_ be undefined, dispatch may be called without any parameters.\n    type DispatchWithoutAction = () => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n    type ReducerWithoutAction<S> = (prevState: S) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> =\n        R extends ReducerWithoutAction<infer S> ? S : never;\n    // TODO (TypeScript 3.0): ReadonlyArray<unknown>\n    type DependencyList = ReadonlyArray<any>;\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    // The destructor is itself only allowed to return void.\n    type EffectCallback = () => (void | (() => void | undefined));\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n    /**\n     * Accepts a context object (the value returned from `React.createContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usecontext\n     */\n    function useContext<T>(context: Context<T>/*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is ommitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerStateWithoutAction<R>\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>>(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction<R>,\n        initializer?: undefined\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be ommitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n     * of the generic argument.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T>(initialValue: T|null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n    /**\n     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n     *\n     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n     *\n     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n     * `componentDidMount` and `componentDidUpdate`.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#uselayouteffect\n     */\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useeffect\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n    /**\n     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n     * `ref`. As always, imperative code using refs should be avoided in most cases.\n     *\n     * `useImperativeHandle` should be used with `React.forwardRef`.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useimperativehandle\n     */\n    function useImperativeHandle<T, R extends T>(ref: Ref<T>|undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n    /**\n     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n     * has changed.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usecallback\n     */\n    // TODO (TypeScript 3.0): <T extends (...args: never[]) => unknown>\n    function useCallback<T extends (...args: any[]) => any>(callback: T, deps: DependencyList): T;\n    /**\n     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n     *\n     * Usage note: if calling `useMemo` with a referentially stable function, also give it as the input in\n     * the second argument.\n     *\n     * ```ts\n     * function expensive () { ... }\n     *\n     * function Component () {\n     *   const expensiveResult = useMemo(expensive, [expensive])\n     *   return ...\n     * }\n     * ```\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usememo\n     */\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n    /**\n     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n     *\n     * NOTE: We don’t recommend adding debug values to every custom hook.\n     * It’s most valuable for custom hooks that are part of shared libraries.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usedebugvalue\n     */\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    /**\n     * currentTarget - a reference to the element on which the event listener is registered.\n     *\n     * target - a reference to the element from which the event was originally dispatched.\n     * This might be a child element to the element on which the event listener is registered.\n     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n     */\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tangentialPressure: number;\n        tiltX: number;\n        tiltY: number;\n        twist: number;\n        width: number;\n        height: number;\n        pointerType: 'mouse' | 'pen' | 'touch';\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<T = Element> extends SyntheticEvent<T, NativeFocusEvent> {\n        relatedTarget: EventTarget | null;\n        target: EventTarget & T;\n    }\n\n    // tslint:disable-next-line:no-empty-interface\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface KeyboardEvent<T = Element> extends SyntheticEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        /** @deprecated */\n        charCode: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        /** @deprecated */\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget | null;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated. This was used to allow clients to pass `ref` and `key`\n     * to `createElement`, which is no longer necessary due to intersection\n     * types. If you need to declare a props object before passing it to\n     * `createElement` or a factory, use `ClassAttributes<T>`:\n     *\n     * ```ts\n     * var b: Button | null;\n     * var props: ButtonProps & ClassAttributes<Button> = {\n     *     ref: b => button = b, // ok!\n     *     label: \"I'm a Button\"\n     * };\n     * ```\n     */\n    interface Props<T> {\n        children?: ReactNode;\n        key?: Key;\n        ref?: LegacyRef<T>;\n    }\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface DOMAttributes<T> {\n        children?: ReactNode;\n        dangerouslySetInnerHTML?: {\n            __html: string;\n        };\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T>;\n        onCopyCapture?: ClipboardEventHandler<T>;\n        onCut?: ClipboardEventHandler<T>;\n        onCutCapture?: ClipboardEventHandler<T>;\n        onPaste?: ClipboardEventHandler<T>;\n        onPasteCapture?: ClipboardEventHandler<T>;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T>;\n        onCompositionEndCapture?: CompositionEventHandler<T>;\n        onCompositionStart?: CompositionEventHandler<T>;\n        onCompositionStartCapture?: CompositionEventHandler<T>;\n        onCompositionUpdate?: CompositionEventHandler<T>;\n        onCompositionUpdateCapture?: CompositionEventHandler<T>;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T>;\n        onFocusCapture?: FocusEventHandler<T>;\n        onBlur?: FocusEventHandler<T>;\n        onBlurCapture?: FocusEventHandler<T>;\n\n        // Form Events\n        onChange?: FormEventHandler<T>;\n        onChangeCapture?: FormEventHandler<T>;\n        onBeforeInput?: FormEventHandler<T>;\n        onBeforeInputCapture?: FormEventHandler<T>;\n        onInput?: FormEventHandler<T>;\n        onInputCapture?: FormEventHandler<T>;\n        onReset?: FormEventHandler<T>;\n        onResetCapture?: FormEventHandler<T>;\n        onSubmit?: FormEventHandler<T>;\n        onSubmitCapture?: FormEventHandler<T>;\n        onInvalid?: FormEventHandler<T>;\n        onInvalidCapture?: FormEventHandler<T>;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T>;\n        onLoadCapture?: ReactEventHandler<T>;\n        onError?: ReactEventHandler<T>; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T>; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T>;\n        onKeyDownCapture?: KeyboardEventHandler<T>;\n        onKeyPress?: KeyboardEventHandler<T>;\n        onKeyPressCapture?: KeyboardEventHandler<T>;\n        onKeyUp?: KeyboardEventHandler<T>;\n        onKeyUpCapture?: KeyboardEventHandler<T>;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T>;\n        onAbortCapture?: ReactEventHandler<T>;\n        onCanPlay?: ReactEventHandler<T>;\n        onCanPlayCapture?: ReactEventHandler<T>;\n        onCanPlayThrough?: ReactEventHandler<T>;\n        onCanPlayThroughCapture?: ReactEventHandler<T>;\n        onDurationChange?: ReactEventHandler<T>;\n        onDurationChangeCapture?: ReactEventHandler<T>;\n        onEmptied?: ReactEventHandler<T>;\n        onEmptiedCapture?: ReactEventHandler<T>;\n        onEncrypted?: ReactEventHandler<T>;\n        onEncryptedCapture?: ReactEventHandler<T>;\n        onEnded?: ReactEventHandler<T>;\n        onEndedCapture?: ReactEventHandler<T>;\n        onLoadedData?: ReactEventHandler<T>;\n        onLoadedDataCapture?: ReactEventHandler<T>;\n        onLoadedMetadata?: ReactEventHandler<T>;\n        onLoadedMetadataCapture?: ReactEventHandler<T>;\n        onLoadStart?: ReactEventHandler<T>;\n        onLoadStartCapture?: ReactEventHandler<T>;\n        onPause?: ReactEventHandler<T>;\n        onPauseCapture?: ReactEventHandler<T>;\n        onPlay?: ReactEventHandler<T>;\n        onPlayCapture?: ReactEventHandler<T>;\n        onPlaying?: ReactEventHandler<T>;\n        onPlayingCapture?: ReactEventHandler<T>;\n        onProgress?: ReactEventHandler<T>;\n        onProgressCapture?: ReactEventHandler<T>;\n        onRateChange?: ReactEventHandler<T>;\n        onRateChangeCapture?: ReactEventHandler<T>;\n        onSeeked?: ReactEventHandler<T>;\n        onSeekedCapture?: ReactEventHandler<T>;\n        onSeeking?: ReactEventHandler<T>;\n        onSeekingCapture?: ReactEventHandler<T>;\n        onStalled?: ReactEventHandler<T>;\n        onStalledCapture?: ReactEventHandler<T>;\n        onSuspend?: ReactEventHandler<T>;\n        onSuspendCapture?: ReactEventHandler<T>;\n        onTimeUpdate?: ReactEventHandler<T>;\n        onTimeUpdateCapture?: ReactEventHandler<T>;\n        onVolumeChange?: ReactEventHandler<T>;\n        onVolumeChangeCapture?: ReactEventHandler<T>;\n        onWaiting?: ReactEventHandler<T>;\n        onWaitingCapture?: ReactEventHandler<T>;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T>;\n        onAuxClickCapture?: MouseEventHandler<T>;\n        onClick?: MouseEventHandler<T>;\n        onClickCapture?: MouseEventHandler<T>;\n        onContextMenu?: MouseEventHandler<T>;\n        onContextMenuCapture?: MouseEventHandler<T>;\n        onDoubleClick?: MouseEventHandler<T>;\n        onDoubleClickCapture?: MouseEventHandler<T>;\n        onDrag?: DragEventHandler<T>;\n        onDragCapture?: DragEventHandler<T>;\n        onDragEnd?: DragEventHandler<T>;\n        onDragEndCapture?: DragEventHandler<T>;\n        onDragEnter?: DragEventHandler<T>;\n        onDragEnterCapture?: DragEventHandler<T>;\n        onDragExit?: DragEventHandler<T>;\n        onDragExitCapture?: DragEventHandler<T>;\n        onDragLeave?: DragEventHandler<T>;\n        onDragLeaveCapture?: DragEventHandler<T>;\n        onDragOver?: DragEventHandler<T>;\n        onDragOverCapture?: DragEventHandler<T>;\n        onDragStart?: DragEventHandler<T>;\n        onDragStartCapture?: DragEventHandler<T>;\n        onDrop?: DragEventHandler<T>;\n        onDropCapture?: DragEventHandler<T>;\n        onMouseDown?: MouseEventHandler<T>;\n        onMouseDownCapture?: MouseEventHandler<T>;\n        onMouseEnter?: MouseEventHandler<T>;\n        onMouseLeave?: MouseEventHandler<T>;\n        onMouseMove?: MouseEventHandler<T>;\n        onMouseMoveCapture?: MouseEventHandler<T>;\n        onMouseOut?: MouseEventHandler<T>;\n        onMouseOutCapture?: MouseEventHandler<T>;\n        onMouseOver?: MouseEventHandler<T>;\n        onMouseOverCapture?: MouseEventHandler<T>;\n        onMouseUp?: MouseEventHandler<T>;\n        onMouseUpCapture?: MouseEventHandler<T>;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T>;\n        onSelectCapture?: ReactEventHandler<T>;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T>;\n        onTouchCancelCapture?: TouchEventHandler<T>;\n        onTouchEnd?: TouchEventHandler<T>;\n        onTouchEndCapture?: TouchEventHandler<T>;\n        onTouchMove?: TouchEventHandler<T>;\n        onTouchMoveCapture?: TouchEventHandler<T>;\n        onTouchStart?: TouchEventHandler<T>;\n        onTouchStartCapture?: TouchEventHandler<T>;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T>;\n        onPointerDownCapture?: PointerEventHandler<T>;\n        onPointerMove?: PointerEventHandler<T>;\n        onPointerMoveCapture?: PointerEventHandler<T>;\n        onPointerUp?: PointerEventHandler<T>;\n        onPointerUpCapture?: PointerEventHandler<T>;\n        onPointerCancel?: PointerEventHandler<T>;\n        onPointerCancelCapture?: PointerEventHandler<T>;\n        onPointerEnter?: PointerEventHandler<T>;\n        onPointerEnterCapture?: PointerEventHandler<T>;\n        onPointerLeave?: PointerEventHandler<T>;\n        onPointerLeaveCapture?: PointerEventHandler<T>;\n        onPointerOver?: PointerEventHandler<T>;\n        onPointerOverCapture?: PointerEventHandler<T>;\n        onPointerOut?: PointerEventHandler<T>;\n        onPointerOutCapture?: PointerEventHandler<T>;\n        onGotPointerCapture?: PointerEventHandler<T>;\n        onGotPointerCaptureCapture?: PointerEventHandler<T>;\n        onLostPointerCapture?: PointerEventHandler<T>;\n        onLostPointerCaptureCapture?: PointerEventHandler<T>;\n\n        // UI Events\n        onScroll?: UIEventHandler<T>;\n        onScrollCapture?: UIEventHandler<T>;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T>;\n        onWheelCapture?: WheelEventHandler<T>;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T>;\n        onAnimationStartCapture?: AnimationEventHandler<T>;\n        onAnimationEnd?: AnimationEventHandler<T>;\n        onAnimationEndCapture?: AnimationEventHandler<T>;\n        onAnimationIteration?: AnimationEventHandler<T>;\n        onAnimationIterationCapture?: AnimationEventHandler<T>;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T>;\n        onTransitionEndCapture?: TransitionEventHandler<T>;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        'aria-activedescendant'?: string;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        'aria-atomic'?: boolean | 'false' | 'true';\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both';\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        'aria-busy'?: boolean | 'false' | 'true';\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        'aria-checked'?: boolean | 'false' | 'mixed' | 'true';\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        'aria-colcount'?: number;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        'aria-colindex'?: number;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        'aria-colspan'?: number;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        'aria-controls'?: string;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time';\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        'aria-describedby'?: string;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        'aria-details'?: string;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        'aria-disabled'?: boolean | 'false' | 'true';\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup';\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        'aria-errormessage'?: string;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        'aria-expanded'?: boolean | 'false' | 'true';\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        'aria-flowto'?: string;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-grabbed'?: boolean | 'false' | 'true';\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        'aria-hidden'?: boolean | 'false' | 'true';\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling';\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        'aria-keyshortcuts'?: string;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        'aria-label'?: string;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        'aria-labelledby'?: string;\n        /** Defines the hierarchical level of an element within a structure. */\n        'aria-level'?: number;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        'aria-live'?: 'off' | 'assertive' | 'polite';\n        /** Indicates whether an element is modal when displayed. */\n        'aria-modal'?: boolean | 'false' | 'true';\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        'aria-multiline'?: boolean | 'false' | 'true';\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        'aria-multiselectable'?: boolean | 'false' | 'true';\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        'aria-orientation'?: 'horizontal' | 'vertical';\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        'aria-owns'?: string;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        'aria-placeholder'?: string;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        'aria-posinset'?: number;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        'aria-pressed'?: boolean | 'false' | 'mixed' | 'true';\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        'aria-readonly'?: boolean | 'false' | 'true';\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        'aria-relevant'?: 'additions' | 'additions text' | 'all' | 'removals' | 'text';\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        'aria-required'?: boolean | 'false' | 'true';\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        'aria-roledescription'?: string;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        'aria-rowcount'?: number;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        'aria-rowindex'?: number;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        'aria-rowspan'?: number;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        'aria-selected'?: boolean | 'false' | 'true';\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        'aria-setsize'?: number;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other';\n        /** Defines the maximum allowed value for a range widget. */\n        'aria-valuemax'?: number;\n        /** Defines the minimum allowed value for a range widget. */\n        'aria-valuemin'?: number;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        'aria-valuenow'?: number;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        'aria-valuetext'?: string;\n    }\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean;\n        defaultValue?: string | number | ReadonlyArray<string>;\n        suppressContentEditableWarning?: boolean;\n        suppressHydrationWarning?: boolean;\n\n        // Standard HTML Attributes\n        accessKey?: string;\n        className?: string;\n        contentEditable?: Booleanish | \"inherit\";\n        contextMenu?: string;\n        dir?: string;\n        draggable?: Booleanish;\n        hidden?: boolean;\n        id?: string;\n        lang?: string;\n        placeholder?: string;\n        slot?: string;\n        spellCheck?: Booleanish;\n        style?: CSSProperties;\n        tabIndex?: number;\n        title?: string;\n        translate?: 'yes' | 'no';\n\n        // Unknown\n        radioGroup?: string; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: string;\n\n        // RDFa Attributes\n        about?: string;\n        datatype?: string;\n        inlist?: any;\n        prefix?: string;\n        property?: string;\n        resource?: string;\n        typeof?: string;\n        vocab?: string;\n\n        // Non-standard Attributes\n        autoCapitalize?: string;\n        autoCorrect?: string;\n        autoSave?: string;\n        color?: string;\n        itemProp?: string;\n        itemScope?: boolean;\n        itemType?: string;\n        itemID?: string;\n        itemRef?: string;\n        results?: number;\n        security?: string;\n        unselectable?: 'on' | 'off';\n\n        // Living Standard\n        /**\n         * Hints at the type of data that might be entered by the user while editing the element or its contents\n         * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n         */\n        inputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n        /**\n         * Specify that a standard HTML element should behave like a defined custom built-in element\n         * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n         */\n        is?: string;\n    }\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string;\n        acceptCharset?: string;\n        action?: string;\n        allowFullScreen?: boolean;\n        allowTransparency?: boolean;\n        alt?: string;\n        as?: string;\n        async?: boolean;\n        autoComplete?: string;\n        autoFocus?: boolean;\n        autoPlay?: boolean;\n        capture?: boolean | string;\n        cellPadding?: number | string;\n        cellSpacing?: number | string;\n        charSet?: string;\n        challenge?: string;\n        checked?: boolean;\n        cite?: string;\n        classID?: string;\n        cols?: number;\n        colSpan?: number;\n        content?: string;\n        controls?: boolean;\n        coords?: string;\n        crossOrigin?: string;\n        data?: string;\n        dateTime?: string;\n        default?: boolean;\n        defer?: boolean;\n        disabled?: boolean;\n        download?: any;\n        encType?: string;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        frameBorder?: number | string;\n        headers?: string;\n        height?: number | string;\n        high?: number;\n        href?: string;\n        hrefLang?: string;\n        htmlFor?: string;\n        httpEquiv?: string;\n        integrity?: string;\n        keyParams?: string;\n        keyType?: string;\n        kind?: string;\n        label?: string;\n        list?: string;\n        loop?: boolean;\n        low?: number;\n        manifest?: string;\n        marginHeight?: number;\n        marginWidth?: number;\n        max?: number | string;\n        maxLength?: number;\n        media?: string;\n        mediaGroup?: string;\n        method?: string;\n        min?: number | string;\n        minLength?: number;\n        multiple?: boolean;\n        muted?: boolean;\n        name?: string;\n        nonce?: string;\n        noValidate?: boolean;\n        open?: boolean;\n        optimum?: number;\n        pattern?: string;\n        placeholder?: string;\n        playsInline?: boolean;\n        poster?: string;\n        preload?: string;\n        readOnly?: boolean;\n        rel?: string;\n        required?: boolean;\n        reversed?: boolean;\n        rows?: number;\n        rowSpan?: number;\n        sandbox?: string;\n        scope?: string;\n        scoped?: boolean;\n        scrolling?: string;\n        seamless?: boolean;\n        selected?: boolean;\n        shape?: string;\n        size?: number;\n        sizes?: string;\n        span?: number;\n        src?: string;\n        srcDoc?: string;\n        srcLang?: string;\n        srcSet?: string;\n        start?: number;\n        step?: number | string;\n        summary?: string;\n        target?: string;\n        type?: string;\n        useMap?: string;\n        value?: string | ReadonlyArray<string> | number;\n        width?: number | string;\n        wmode?: string;\n        wrap?: string;\n    }\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string;\n        hrefLang?: string;\n        media?: string;\n        ping?: string;\n        rel?: string;\n        target?: string;\n        type?: string;\n        referrerPolicy?: string;\n    }\n\n    // tslint:disable-next-line:no-empty-interface\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        coords?: string;\n        download?: any;\n        href?: string;\n        hrefLang?: string;\n        media?: string;\n        rel?: string;\n        shape?: string;\n        target?: string;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string;\n        target?: string;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        name?: string;\n        type?: 'submit' | 'reset' | 'button';\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        width?: number | string;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number;\n        width?: number | string;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n        onToggle?: ReactEventHandler<T>;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        src?: string;\n        type?: string;\n        width?: number | string;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        form?: string;\n        name?: string;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string;\n        action?: string;\n        autoComplete?: string;\n        encType?: string;\n        method?: string;\n        name?: string;\n        noValidate?: boolean;\n        target?: string;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string;\n        allowFullScreen?: boolean;\n        allowTransparency?: boolean;\n        frameBorder?: number | string;\n        height?: number | string;\n        loading?: \"eager\" | \"lazy\";\n        marginHeight?: number;\n        marginWidth?: number;\n        name?: string;\n        referrerPolicy?: string;\n        sandbox?: string;\n        scrolling?: string;\n        seamless?: boolean;\n        src?: string;\n        srcDoc?: string;\n        width?: number | string;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n        decoding?: \"async\" | \"auto\" | \"sync\";\n        height?: number | string;\n        loading?: \"eager\" | \"lazy\";\n        referrerPolicy?: \"no-referrer\" | \"origin\" | \"unsafe-url\";\n        sizes?: string;\n        src?: string;\n        srcSet?: string;\n        useMap?: string;\n        width?: number | string;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string;\n        alt?: string;\n        autoComplete?: string;\n        autoFocus?: boolean;\n        capture?: boolean | string; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean;\n        crossOrigin?: string;\n        disabled?: boolean;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        height?: number | string;\n        list?: string;\n        max?: number | string;\n        maxLength?: number;\n        min?: number | string;\n        minLength?: number;\n        multiple?: boolean;\n        name?: string;\n        pattern?: string;\n        placeholder?: string;\n        readOnly?: boolean;\n        required?: boolean;\n        size?: number;\n        src?: string;\n        step?: number | string;\n        type?: string;\n        value?: string | ReadonlyArray<string> | number;\n        width?: number | string;\n\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean;\n        challenge?: string;\n        disabled?: boolean;\n        form?: string;\n        keyType?: string;\n        keyParams?: string;\n        name?: string;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        htmlFor?: string;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string;\n        crossOrigin?: string;\n        href?: string;\n        hrefLang?: string;\n        integrity?: string;\n        media?: string;\n        rel?: string;\n        sizes?: string;\n        type?: string;\n        charSet?: string;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean;\n        controls?: boolean;\n        controlsList?: string;\n        crossOrigin?: string;\n        loop?: boolean;\n        mediaGroup?: string;\n        muted?: boolean;\n        playsInline?: boolean;\n        preload?: string;\n        src?: string;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string;\n        content?: string;\n        httpEquiv?: string;\n        name?: string;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        high?: number;\n        low?: number;\n        max?: number | string;\n        min?: number | string;\n        optimum?: number;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string;\n        data?: string;\n        form?: string;\n        height?: number | string;\n        name?: string;\n        type?: string;\n        useMap?: string;\n        width?: number | string;\n        wmode?: string;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean;\n        start?: number;\n        type?: '1' | 'a' | 'A' | 'i' | 'I';\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n        selected?: boolean;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        htmlFor?: string;\n        name?: string;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean;\n        charSet?: string;\n        crossOrigin?: string;\n        defer?: boolean;\n        integrity?: string;\n        noModule?: boolean;\n        nonce?: string;\n        src?: string;\n        type?: string;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string;\n        autoFocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        multiple?: boolean;\n        name?: string;\n        required?: boolean;\n        size?: number;\n        value?: string | ReadonlyArray<string> | number;\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        sizes?: string;\n        src?: string;\n        srcSet?: string;\n        type?: string;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        nonce?: string;\n        scoped?: boolean;\n        type?: string;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        cellPadding?: number | string;\n        cellSpacing?: number | string;\n        summary?: string;\n        width?: number | string;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string;\n        autoFocus?: boolean;\n        cols?: number;\n        dirName?: string;\n        disabled?: boolean;\n        form?: string;\n        maxLength?: number;\n        minLength?: number;\n        name?: string;\n        placeholder?: string;\n        readOnly?: boolean;\n        required?: boolean;\n        rows?: number;\n        value?: string | ReadonlyArray<string> | number;\n        wrap?: string;\n\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\n        colSpan?: number;\n        headers?: string;\n        rowSpan?: number;\n        scope?: string;\n        abbr?: string;\n        height?: number | string;\n        width?: number | string;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\";\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\n        colSpan?: number;\n        headers?: string;\n        rowSpan?: number;\n        scope?: string;\n        abbr?: string;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean;\n        kind?: string;\n        label?: string;\n        src?: string;\n        srcLang?: string;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string;\n        playsInline?: boolean;\n        poster?: string;\n        width?: number | string;\n        disablePictureInPicture?: boolean;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string;\n        color?: string;\n        height?: number | string;\n        id?: string;\n        lang?: string;\n        max?: number | string;\n        media?: string;\n        method?: string;\n        min?: number | string;\n        name?: string;\n        style?: CSSProperties;\n        target?: string;\n        type?: string;\n        width?: number | string;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: string;\n        tabIndex?: number;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n\n        // SVG Specific attributes\n        accentHeight?: number | string;\n        accumulate?: \"none\" | \"sum\";\n        additive?: \"replace\" | \"sum\";\n        alignmentBaseline?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" |\n        \"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\";\n        allowReorder?: \"no\" | \"yes\";\n        alphabetic?: number | string;\n        amplitude?: number | string;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\";\n        ascent?: number | string;\n        attributeName?: string;\n        attributeType?: string;\n        autoReverse?: Booleanish;\n        azimuth?: number | string;\n        baseFrequency?: number | string;\n        baselineShift?: number | string;\n        baseProfile?: number | string;\n        bbox?: number | string;\n        begin?: number | string;\n        bias?: number | string;\n        by?: number | string;\n        calcMode?: number | string;\n        capHeight?: number | string;\n        clip?: number | string;\n        clipPath?: string;\n        clipPathUnits?: number | string;\n        clipRule?: number | string;\n        colorInterpolation?: number | string;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\";\n        colorProfile?: number | string;\n        colorRendering?: number | string;\n        contentScriptType?: number | string;\n        contentStyleType?: number | string;\n        cursor?: number | string;\n        cx?: number | string;\n        cy?: number | string;\n        d?: string;\n        decelerate?: number | string;\n        descent?: number | string;\n        diffuseConstant?: number | string;\n        direction?: number | string;\n        display?: number | string;\n        divisor?: number | string;\n        dominantBaseline?: number | string;\n        dur?: number | string;\n        dx?: number | string;\n        dy?: number | string;\n        edgeMode?: number | string;\n        elevation?: number | string;\n        enableBackground?: number | string;\n        end?: number | string;\n        exponent?: number | string;\n        externalResourcesRequired?: Booleanish;\n        fill?: string;\n        fillOpacity?: number | string;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\";\n        filter?: string;\n        filterRes?: number | string;\n        filterUnits?: number | string;\n        floodColor?: number | string;\n        floodOpacity?: number | string;\n        focusable?: Booleanish | \"auto\";\n        fontFamily?: string;\n        fontSize?: number | string;\n        fontSizeAdjust?: number | string;\n        fontStretch?: number | string;\n        fontStyle?: number | string;\n        fontVariant?: number | string;\n        fontWeight?: number | string;\n        format?: number | string;\n        from?: number | string;\n        fx?: number | string;\n        fy?: number | string;\n        g1?: number | string;\n        g2?: number | string;\n        glyphName?: number | string;\n        glyphOrientationHorizontal?: number | string;\n        glyphOrientationVertical?: number | string;\n        glyphRef?: number | string;\n        gradientTransform?: string;\n        gradientUnits?: string;\n        hanging?: number | string;\n        horizAdvX?: number | string;\n        horizOriginX?: number | string;\n        href?: string;\n        ideographic?: number | string;\n        imageRendering?: number | string;\n        in2?: number | string;\n        in?: string;\n        intercept?: number | string;\n        k1?: number | string;\n        k2?: number | string;\n        k3?: number | string;\n        k4?: number | string;\n        k?: number | string;\n        kernelMatrix?: number | string;\n        kernelUnitLength?: number | string;\n        kerning?: number | string;\n        keyPoints?: number | string;\n        keySplines?: number | string;\n        keyTimes?: number | string;\n        lengthAdjust?: number | string;\n        letterSpacing?: number | string;\n        lightingColor?: number | string;\n        limitingConeAngle?: number | string;\n        local?: number | string;\n        markerEnd?: string;\n        markerHeight?: number | string;\n        markerMid?: string;\n        markerStart?: string;\n        markerUnits?: number | string;\n        markerWidth?: number | string;\n        mask?: string;\n        maskContentUnits?: number | string;\n        maskUnits?: number | string;\n        mathematical?: number | string;\n        mode?: number | string;\n        numOctaves?: number | string;\n        offset?: number | string;\n        opacity?: number | string;\n        operator?: number | string;\n        order?: number | string;\n        orient?: number | string;\n        orientation?: number | string;\n        origin?: number | string;\n        overflow?: number | string;\n        overlinePosition?: number | string;\n        overlineThickness?: number | string;\n        paintOrder?: number | string;\n        panose1?: number | string;\n        path?: string;\n        pathLength?: number | string;\n        patternContentUnits?: string;\n        patternTransform?: number | string;\n        patternUnits?: string;\n        pointerEvents?: number | string;\n        points?: string;\n        pointsAtX?: number | string;\n        pointsAtY?: number | string;\n        pointsAtZ?: number | string;\n        preserveAlpha?: Booleanish;\n        preserveAspectRatio?: string;\n        primitiveUnits?: number | string;\n        r?: number | string;\n        radius?: number | string;\n        refX?: number | string;\n        refY?: number | string;\n        renderingIntent?: number | string;\n        repeatCount?: number | string;\n        repeatDur?: number | string;\n        requiredExtensions?: number | string;\n        requiredFeatures?: number | string;\n        restart?: number | string;\n        result?: string;\n        rotate?: number | string;\n        rx?: number | string;\n        ry?: number | string;\n        scale?: number | string;\n        seed?: number | string;\n        shapeRendering?: number | string;\n        slope?: number | string;\n        spacing?: number | string;\n        specularConstant?: number | string;\n        specularExponent?: number | string;\n        speed?: number | string;\n        spreadMethod?: string;\n        startOffset?: number | string;\n        stdDeviation?: number | string;\n        stemh?: number | string;\n        stemv?: number | string;\n        stitchTiles?: number | string;\n        stopColor?: string;\n        stopOpacity?: number | string;\n        strikethroughPosition?: number | string;\n        strikethroughThickness?: number | string;\n        string?: number | string;\n        stroke?: string;\n        strokeDasharray?: string | number;\n        strokeDashoffset?: string | number;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\";\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\";\n        strokeMiterlimit?: number | string;\n        strokeOpacity?: number | string;\n        strokeWidth?: number | string;\n        surfaceScale?: number | string;\n        systemLanguage?: number | string;\n        tableValues?: number | string;\n        targetX?: number | string;\n        targetY?: number | string;\n        textAnchor?: string;\n        textDecoration?: number | string;\n        textLength?: number | string;\n        textRendering?: number | string;\n        to?: number | string;\n        transform?: string;\n        u1?: number | string;\n        u2?: number | string;\n        underlinePosition?: number | string;\n        underlineThickness?: number | string;\n        unicode?: number | string;\n        unicodeBidi?: number | string;\n        unicodeRange?: number | string;\n        unitsPerEm?: number | string;\n        vAlphabetic?: number | string;\n        values?: string;\n        vectorEffect?: number | string;\n        version?: string;\n        vertAdvY?: number | string;\n        vertOriginX?: number | string;\n        vertOriginY?: number | string;\n        vHanging?: number | string;\n        vIdeographic?: number | string;\n        viewBox?: string;\n        viewTarget?: number | string;\n        visibility?: number | string;\n        vMathematical?: number | string;\n        widths?: number | string;\n        wordSpacing?: number | string;\n        writingMode?: number | string;\n        x1?: number | string;\n        x2?: number | string;\n        x?: number | string;\n        xChannelSelector?: string;\n        xHeight?: number | string;\n        xlinkActuate?: string;\n        xlinkArcrole?: string;\n        xlinkHref?: string;\n        xlinkRole?: string;\n        xlinkShow?: string;\n        xlinkTitle?: string;\n        xlinkType?: string;\n        xmlBase?: string;\n        xmlLang?: string;\n        xmlns?: string;\n        xmlnsXlink?: string;\n        xmlSpace?: string;\n        y1?: number | string;\n        y2?: number | string;\n        y?: number | string;\n        yChannelSelector?: string;\n        z?: number | string;\n        zoomAndPan?: string;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean;\n        allowpopups?: boolean;\n        autoFocus?: boolean;\n        autosize?: boolean;\n        blinkfeatures?: string;\n        disableblinkfeatures?: string;\n        disableguestresize?: boolean;\n        disablewebsecurity?: boolean;\n        guestinstance?: string;\n        httpreferrer?: string;\n        nodeintegration?: boolean;\n        partition?: string;\n        plugins?: boolean;\n        preload?: string;\n        src?: string;\n        useragent?: string;\n        webpreferences?: string;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLElement>, HTMLElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLElement>, HTMLElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLElement>, HTMLElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLElement>, HTMLElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG { }\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    type Validator<T> = PropTypes.Validator<T>;\n\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : undefined extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>\n    };\n\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    interface ReactChildren {\n        map<T, C>(children: C | C[], fn: (child: C, index: number) => T):\n            C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack: string;\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T :\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n            string extends keyof P ? P :\n                // Prefer declared types which are not exactly any\n                & Pick<P, NotExactlyAnyPropertyKeys<P>>\n                // For props which are exactly any, use the type inferred from propTypes if present\n                & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n                // Keep leftover props not specified in propTypes\n                & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n    ? string extends keyof P ? P :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & Partial<Pick<P, Extract<keyof P, keyof D>>>\n        & Partial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D; }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T; }\n        ? MergePropTypes<P, PropTypes.InferProps<T>>\n        : C extends { defaultProps: infer D; }\n            ? Defaultize<P, D>\n            : P;\n\ndeclare global {\n    namespace JSX {\n        // tslint:disable-next-line:no-empty-interface\n        interface Element extends React.ReactElement<any, any> { }\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty { props: {}; }\n        interface ElementChildrenAttribute { children: {}; }\n\n        // We can't recurse forever because `type` can't be self-referential;\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n                : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        // tslint:disable-next-line:no-empty-interface\n        interface IntrinsicAttributes extends React.Attributes { }\n        // tslint:disable-next-line:no-empty-interface\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLElement>, HTMLElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLElement>, HTMLElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLElement>, HTMLElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLElement>, HTMLElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGProps<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGProps<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}\n"
    },
    "react-dom": {
      "experimental.d.ts": "/**\n * These are types for things that are present in the `experimental` builds of React but not yet\n * on a stable build.\n *\n * Once they are promoted to stable they can just be moved to the main index file.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react-dom/experimental\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react-dom/experimental'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react-dom/experimental\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOM.js to see how the exports are declared,\n// and https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js to verify which APIs are\n// flagged experimental or not. Experimental APIs will be tagged with `__EXPERIMENTAL__`.\n\nimport React = require('react');\nimport ReactDOM = require('.');\n\nexport {};\n\ndeclare module '.' {\n    // enableSuspenseServerRenderer feature\n    interface HydrationOptions {\n        onHydrated?(suspenseInstance: Comment): void;\n        onDeleted?(suspenseInstance: Comment): void;\n    }\n\n    // exposeConcurrentModeAPIs features\n\n    interface RootOptions {\n        hydrate?: boolean;\n        hydrationOptions?: HydrationOptions;\n    }\n\n    interface Root {\n        render(children: React.ReactChild | React.ReactNodeArray, callback?: () => void): void;\n        unmount(callback?: () => void): void;\n    }\n\n    /**\n     * Replaces `ReactDOM.render` when the `.render` method is called and enables Blocking Mode.\n     *\n     * Opting into Concurrent Mode introduces semantic changes to how React works.\n     * This means that you can’t use Concurrent Mode in just a few components.\n     * Because of this, some apps may not be able to migrate directly to Concurrent Mode.\n     * Blocking Mode only contains a small subset of Concurrent Mode features and is intended\n     * as an intermediary migration step for apps that are unable to migrate directly.\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-adoption.html#migration-step-blocking-mode\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#createblockingroot\n     */\n    function unstable_createBlockingRoot(\n        container: Element | Document | DocumentFragment | Comment,\n        options?: RootOptions,\n    ): Root;\n\n    /**\n     * Replaces `ReactDOM.render` when the `.render` method is called and enables Concurrent Mode.\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#createroot\n     */\n    function unstable_createRoot(container: Element | Document | DocumentFragment | Comment, options?: RootOptions): Root;\n\n    function unstable_discreteUpdates<R>(callback: () => R): R;\n\n    function unstable_discreteUpdates<R, A1>(callback: (a1: A1) => R, a1: A1): R;\n\n    function unstable_discreteUpdates<R, A1, A2>(callback: (a1: A1, a2: A2) => R, a1: A1, a2: A2): R;\n\n    function unstable_discreteUpdates<R, A1, A2, A3>(\n        callback: (a1: A1, a2: A2, a3: A3) => R,\n        a1: A1,\n        a2: A2,\n        a3: A3,\n    ): R;\n\n    function unstable_flushDiscreteUpdates(): void;\n\n    function unstable_flushControlled(callback: () => void): void;\n\n    // enableSelectiveHydration feature\n\n    /**\n     * @see https://github.com/facebook/react/commit/3a2b5f148d450c69aab67f055fc441d294c23518\n     */\n    function unstable_scheduleHydration(target: Element | Document | DocumentFragment | Comment): void;\n}\n",
      "index.d.ts": "// Type definitions for React (react-dom) 16.9\n// Project: https://reactjs.org\n// Definitions by: Asana <https://asana.com>\n//                 AssureSign <http://www.assuresign.com>\n//                 Microsoft <https://microsoft.com>\n//                 MartynasZilinskas <https://github.com/MartynasZilinskas>\n//                 Josh Rutherford <https://github.com/theruther4d>\n//                 Jessica Franco <https://github.com/Jessidhia>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react-dom/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\nexport as namespace ReactDOM;\n\nimport {\n    ReactInstance, Component, ComponentState,\n    ReactElement, SFCElement, CElement,\n    DOMAttributes, DOMElement, ReactNode, ReactPortal\n} from 'react';\n\nexport function findDOMNode(instance: ReactInstance | null | undefined): Element | null | Text;\nexport function unmountComponentAtNode(container: Element | DocumentFragment): boolean;\n\nexport function createPortal(children: ReactNode, container: Element, key?: null | string): ReactPortal;\n\nexport const version: string;\nexport const render: Renderer;\nexport const hydrate: Renderer;\n\nexport function unstable_batchedUpdates<A, B>(callback: (a: A, b: B) => any, a: A, b: B): void;\nexport function unstable_batchedUpdates<A>(callback: (a: A) => any, a: A): void;\nexport function unstable_batchedUpdates(callback: () => any): void;\n\nexport function unstable_renderSubtreeIntoContainer<T extends Element>(\n    parentComponent: Component<any>,\n    element: DOMElement<DOMAttributes<T>, T>,\n    container: Element,\n    callback?: (element: T) => any): T;\nexport function unstable_renderSubtreeIntoContainer<P, T extends Component<P, ComponentState>>(\n    parentComponent: Component<any>,\n    element: CElement<P, T>,\n    container: Element,\n    callback?: (component: T) => any): T;\nexport function unstable_renderSubtreeIntoContainer<P>(\n    parentComponent: Component<any>,\n    element: ReactElement<P>,\n    container: Element,\n    callback?: (component?: Component<P, ComponentState> | Element) => any): Component<P, ComponentState> | Element | void;\n\nexport interface Renderer {\n    // Deprecated(render): The return value is deprecated.\n    // In future releases the render function's return type will be void.\n\n    <T extends Element>(\n        element: DOMElement<DOMAttributes<T>, T>,\n        container: Element | DocumentFragment | null,\n        callback?: () => void\n    ): T;\n\n    (\n        element: Array<DOMElement<DOMAttributes<any>, any>>,\n        container: Element | DocumentFragment | null,\n        callback?: () => void\n    ): Element;\n\n    (\n        element: SFCElement<any> | Array<SFCElement<any>>,\n        container: Element | DocumentFragment | null,\n        callback?: () => void\n    ): void;\n\n    <P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        container: Element | DocumentFragment | null,\n        callback?: () => void\n    ): T;\n\n    (\n        element: Array<CElement<any, Component<any, ComponentState>>>,\n        container: Element | DocumentFragment | null,\n        callback?: () => void\n    ): Component<any, ComponentState>;\n\n    <P>(\n        element: ReactElement<P>,\n        container: Element | DocumentFragment | null,\n        callback?: () => void\n    ): Component<P, ComponentState> | Element | void;\n\n    (\n        element: ReactElement[],\n        container: Element | DocumentFragment | null,\n        callback?: () => void\n    ): Component<any, ComponentState> | Element | void;\n}\n",
      "node-stream/index.d.ts": "import { ReactElement } from 'react';\n\n/**\n * Render a ReactElement to its initial HTML. This should only be used on the\n * server.\n * See https://facebook.github.io/react/docs/react-dom-stream.html#rendertostream\n */\nexport function renderToStream(element: ReactElement): any;\n\n/**\n * Similar to renderToStream, except this doesn't create extra DOM attributes\n * such as data-react-id that React uses internally.\n * See https://facebook.github.io/react/docs/react-dom-stream.html#rendertostaticstream\n */\nexport function renderToStaticStream(element: ReactElement): any;\nexport const version: string;\n\nexport as namespace ReactDOMNodeStream;\n",
      "server/index.d.ts": "// forward declarations\ndeclare global {\n    namespace NodeJS {\n        // tslint:disable-next-line:no-empty-interface\n        interface ReadableStream {}\n    }\n}\n\nimport { ReactElement } from 'react';\n\n/**\n * Render a React element to its initial HTML. This should only be used on the server.\n * React will return an HTML string. You can use this method to generate HTML on the server\n * and send the markup down on the initial request for faster page loads and to allow search\n * engines to crawl your pages for SEO purposes.\n *\n * If you call `ReactDOM.hydrate()` on a node that already has this server-rendered markup,\n * React will preserve it and only attach event handlers, allowing you\n * to have a very performant first-load experience.\n */\nexport function renderToString(element: ReactElement): string;\n\n/**\n * Render a React element to its initial HTML. Returns a Readable stream that outputs\n * an HTML string. The HTML output by this stream is exactly equal to what\n * `ReactDOMServer.renderToString()` would return.\n */\nexport function renderToNodeStream(element: ReactElement): NodeJS.ReadableStream;\n\n/**\n * Similar to `renderToString`, except this doesn't create extra DOM attributes\n * such as `data-reactid`, that React uses internally. This is useful if you want\n * to use React as a simple static page generator, as stripping away the extra\n * attributes can save lots of bytes.\n */\nexport function renderToStaticMarkup(element: ReactElement): string;\n\n/**\n * Similar to `renderToNodeStream`, except this doesn't create extra DOM attributes\n * such as `data-reactid`, that React uses internally. The HTML output by this stream\n * is exactly equal to what `ReactDOMServer.renderToStaticMarkup()` would return.\n */\nexport function renderToStaticNodeStream(element: ReactElement): NodeJS.ReadableStream;\n\nexport const version: string;\n\nexport as namespace ReactDOMServer;\n",
      "test-utils/index.d.ts": "import {\n    AbstractView, Component, ComponentClass,\n    ReactElement, ReactInstance, ClassType,\n    DOMElement, SFCElement, CElement,\n    ReactHTMLElement, DOMAttributes, SFC\n} from 'react';\n\nimport * as ReactTestUtils from \".\";\n\nexport interface OptionalEventProperties {\n    bubbles?: boolean;\n    cancelable?: boolean;\n    currentTarget?: EventTarget;\n    defaultPrevented?: boolean;\n    eventPhase?: number;\n    isTrusted?: boolean;\n    nativeEvent?: Event;\n    preventDefault?(): void;\n    stopPropagation?(): void;\n    target?: EventTarget;\n    timeStamp?: Date;\n    type?: string;\n}\n\nexport interface SyntheticEventData extends OptionalEventProperties {\n    altKey?: boolean;\n    button?: number;\n    buttons?: number;\n    clientX?: number;\n    clientY?: number;\n    changedTouches?: TouchList;\n    charCode?: number;\n    clipboardData?: DataTransfer;\n    ctrlKey?: boolean;\n    deltaMode?: number;\n    deltaX?: number;\n    deltaY?: number;\n    deltaZ?: number;\n    detail?: number;\n    getModifierState?(key: string): boolean;\n    key?: string;\n    keyCode?: number;\n    locale?: string;\n    location?: number;\n    metaKey?: boolean;\n    pageX?: number;\n    pageY?: number;\n    relatedTarget?: EventTarget;\n    repeat?: boolean;\n    screenX?: number;\n    screenY?: number;\n    shiftKey?: boolean;\n    targetTouches?: TouchList;\n    touches?: TouchList;\n    view?: AbstractView;\n    which?: number;\n}\n\nexport type EventSimulator = (element: Element | Component<any>, eventData?: SyntheticEventData) => void;\n\nexport interface MockedComponentClass {\n    new (props: any): any;\n}\n\nexport interface ShallowRenderer {\n    /**\n     * After `shallowRenderer.render()` has been called, returns shallowly rendered output.\n     */\n    getRenderOutput<E extends ReactElement>(): E;\n    /**\n     * Similar to `ReactDOM.render` but it doesn't require DOM and only renders a single level deep.\n     */\n    render(element: ReactElement, context?: any): void;\n    unmount(): void;\n}\n\n/**\n * Simulate an event dispatch on a DOM node with optional `eventData` event data.\n * `Simulate` has a method for every event that React understands.\n */\nexport namespace Simulate {\n    const abort: EventSimulator;\n    const animationEnd: EventSimulator;\n    const animationIteration: EventSimulator;\n    const animationStart: EventSimulator;\n    const blur: EventSimulator;\n    const canPlay: EventSimulator;\n    const canPlayThrough: EventSimulator;\n    const change: EventSimulator;\n    const click: EventSimulator;\n    const compositionEnd: EventSimulator;\n    const compositionStart: EventSimulator;\n    const compositionUpdate: EventSimulator;\n    const contextMenu: EventSimulator;\n    const copy: EventSimulator;\n    const cut: EventSimulator;\n    const doubleClick: EventSimulator;\n    const drag: EventSimulator;\n    const dragEnd: EventSimulator;\n    const dragEnter: EventSimulator;\n    const dragExit: EventSimulator;\n    const dragLeave: EventSimulator;\n    const dragOver: EventSimulator;\n    const dragStart: EventSimulator;\n    const drop: EventSimulator;\n    const durationChange: EventSimulator;\n    const emptied: EventSimulator;\n    const encrypted: EventSimulator;\n    const ended: EventSimulator;\n    const error: EventSimulator;\n    const focus: EventSimulator;\n    const input: EventSimulator;\n    const invalid: EventSimulator;\n    const keyDown: EventSimulator;\n    const keyPress: EventSimulator;\n    const keyUp: EventSimulator;\n    const load: EventSimulator;\n    const loadStart: EventSimulator;\n    const loadedData: EventSimulator;\n    const loadedMetadata: EventSimulator;\n    const mouseDown: EventSimulator;\n    const mouseEnter: EventSimulator;\n    const mouseLeave: EventSimulator;\n    const mouseMove: EventSimulator;\n    const mouseOut: EventSimulator;\n    const mouseOver: EventSimulator;\n    const mouseUp: EventSimulator;\n    const paste: EventSimulator;\n    const pause: EventSimulator;\n    const play: EventSimulator;\n    const playing: EventSimulator;\n    const progress: EventSimulator;\n    const rateChange: EventSimulator;\n    const scroll: EventSimulator;\n    const seeked: EventSimulator;\n    const seeking: EventSimulator;\n    const select: EventSimulator;\n    const stalled: EventSimulator;\n    const submit: EventSimulator;\n    const suspend: EventSimulator;\n    const timeUpdate: EventSimulator;\n    const touchCancel: EventSimulator;\n    const touchEnd: EventSimulator;\n    const touchMove: EventSimulator;\n    const touchStart: EventSimulator;\n    const transitionEnd: EventSimulator;\n    const volumeChange: EventSimulator;\n    const waiting: EventSimulator;\n    const wheel: EventSimulator;\n}\n\n/**\n * Render a React element into a detached DOM node in the document. __This function requires a DOM__.\n */\nexport function renderIntoDocument<T extends Element>(\n    element: DOMElement<any, T>): T;\nexport function renderIntoDocument(\n    element: SFCElement<any>): void;\n// If we replace `P` with `any` in this overload, then some tests fail because\n// calls to `renderIntoDocument` choose the last overload on the\n// subtype-relation pass and get an undesirably broad return type.  Using `P`\n// allows this overload to match on the subtype-relation pass.\nexport function renderIntoDocument<P, T extends Component<P>>(\n    element: CElement<P, T>): T;\nexport function renderIntoDocument<P>(\n    element: ReactElement<P>): Component<P> | Element | void;\n\n/**\n * Pass a mocked component module to this method to augment it with useful methods that allow it to\n * be used as a dummy React component. Instead of rendering as usual, the component will become\n * a simple `<div>` (or other tag if `mockTagName` is provided) containing any provided children.\n */\nexport function mockComponent(\n    mocked: MockedComponentClass, mockTagName?: string): typeof ReactTestUtils;\n\n/**\n * Returns `true` if `element` is any React element.\n */\nexport function isElement(element: any): boolean;\n\n/**\n * Returns `true` if `element` is a React element whose type is of a React `componentClass`.\n */\nexport function isElementOfType<T extends HTMLElement>(\n    element: ReactElement, type: string): element is ReactHTMLElement<T>;\n/**\n * Returns `true` if `element` is a React element whose type is of a React `componentClass`.\n */\nexport function isElementOfType<P extends DOMAttributes<{}>, T extends Element>(\n    element: ReactElement, type: string): element is DOMElement<P, T>;\n/**\n * Returns `true` if `element` is a React element whose type is of a React `componentClass`.\n */\nexport function isElementOfType<P>(\n    element: ReactElement, type: SFC<P>): element is SFCElement<P>;\n/**\n * Returns `true` if `element` is a React element whose type is of a React `componentClass`.\n */\nexport function isElementOfType<P, T extends Component<P>, C extends ComponentClass<P>>(\n    element: ReactElement, type: ClassType<P, T, C>): element is CElement<P, T>;\n\n/**\n * Returns `true` if `instance` is a DOM component (such as a `<div>` or `<span>`).\n */\nexport function isDOMComponent(instance: ReactInstance): instance is Element;\n/**\n * Returns `true` if `instance` is a user-defined component, such as a class or a function.\n */\nexport function isCompositeComponent(instance: ReactInstance): instance is Component<any>;\n/**\n * Returns `true` if `instance` is a component whose type is of a React `componentClass`.\n */\nexport function isCompositeComponentWithType<T extends Component<any>, C extends ComponentClass<any>>(\n    instance: ReactInstance, type: ClassType<any, T, C>): boolean;\n\n/**\n * Traverse all components in `tree` and accumulate all components where\n * `test(component)` is `true`. This is not that useful on its own, but it's used\n * as a primitive for other test utils.\n */\nexport function findAllInRenderedTree(\n    root: Component<any>,\n    fn: (i: ReactInstance) => boolean): ReactInstance[];\n\n/**\n * Finds all DOM elements of components in the rendered tree that are\n * DOM components with the class name matching `className`.\n */\nexport function scryRenderedDOMComponentsWithClass(\n    root: Component<any>,\n    className: string): Element[];\n/**\n * Like `scryRenderedDOMComponentsWithClass()` but expects there to be one result,\n * and returns that one result, or throws exception if there is any other\n * number of matches besides one.\n */\nexport function findRenderedDOMComponentWithClass(\n    root: Component<any>,\n    className: string): Element;\n\n/**\n * Finds all DOM elements of components in the rendered tree that are\n * DOM components with the tag name matching `tagName`.\n */\nexport function scryRenderedDOMComponentsWithTag(\n    root: Component<any>,\n    tagName: string): Element[];\n/**\n * Like `scryRenderedDOMComponentsWithTag()` but expects there to be one result,\n * and returns that one result, or throws exception if there is any other\n * number of matches besides one.\n */\nexport function findRenderedDOMComponentWithTag(\n    root: Component<any>,\n    tagName: string): Element;\n\n/**\n * Finds all instances of components with type equal to `componentClass`.\n */\nexport function scryRenderedComponentsWithType<T extends Component<any>, C extends ComponentClass<any>>(\n    root: Component<any>,\n    type: ClassType<any, T, C>): T[];\n\n/**\n * Same as `scryRenderedComponentsWithType()` but expects there to be one result\n * and returns that one result, or throws exception if there is any other\n * number of matches besides one.\n */\nexport function findRenderedComponentWithType<T extends Component<any>, C extends ComponentClass<any>>(\n    root: Component<any>,\n    type: ClassType<any, T, C>): T;\n\n/**\n * Call this in your tests to create a shallow renderer.\n */\nexport function createRenderer(): ShallowRenderer;\n\n/**\n * Wrap any code rendering and triggering updates to your components into `act()` calls.\n *\n * Ensures that the behavior in your tests matches what happens in the browser\n * more closely by executing pending `useEffect`s before returning. This also\n * reduces the amount of re-renders done.\n *\n * @param callback A synchronous, void callback that will execute as a single, complete React commit.\n *\n * @see https://reactjs.org/blog/2019/02/06/react-v16.8.0.html#testing-hooks\n */\n// NOTES\n// - the order of these signatures matters - typescript will check the signatures in source order.\n//   If the `() => void` signature is first, it'll erroneously match a Promise returning function for users with\n//   `strictNullChecks: false`.\n// - the \"void | undefined\" types are there to forbid any non-void return values for users with `strictNullChecks: true`\n// tslint:disable-next-line: void-return\nexport function act(callback: () => Promise<void | undefined>): Promise<undefined>;\nexport function act(callback: () => void | undefined): void;\n\n// Intentionally doesn't extend PromiseLike<never>.\n// Ideally this should be as hard to accidentally use as possible.\nexport interface DebugPromiseLike {\n    // the actual then() in here is 0-ary, but that doesn't count as a PromiseLike.\n    then(onfulfilled: (value: never) => never, onrejected: (reason: never) => never): never;\n}\n"
    },
    "prosemirror-view": {
      "index.d.ts": "// Type definitions for prosemirror-view 1.15\n// Project: https://github.com/ProseMirror/prosemirror-view\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\n//                 David Hahn <https://github.com/davidka>\n//                 Tim Baumann <https://github.com/timjb>\n//                 Patrick Simmelbauer <https://github.com/patsimm>\n//                 Ifiok Jr. <https://github.com/ifiokjr>\n//                 Mike Morearty <https://github.com/mmorearty>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\nimport {\n  DOMParser,\n  DOMSerializer,\n  Node as ProsemirrorNode,\n  ResolvedPos,\n  Slice,\n  Schema,\n  Mark\n} from 'prosemirror-model';\nimport { EditorState, Selection, Transaction } from 'prosemirror-state';\nimport { Mapping } from 'prosemirror-transform';\n\n// Exported for testing\nexport function __serializeForClipboard<S extends Schema = any>(view: EditorView<S>, slice: Slice<S>): { dom: HTMLElement, text: string };\nexport function __parseFromClipboard<S extends Schema = any>(view: EditorView<S>, text: string, html: string, plainText: boolean, $context: ResolvedPos<S>): Slice<S>;\nexport function __endComposition(view: EditorView, forceUpdate?: boolean): boolean;\n\n/**\n * The `spec` for a widget decoration\n */\nexport interface WidgetDecorationSpec {\n  /**\n   * Controls which side of the document position this widget is\n   * associated with. When negative, it is drawn before a cursor\n   * at its position, and content inserted at that position ends\n   * up after the widget. When zero (the default) or positive, the\n   * widget is drawn after the cursor and content inserted there\n   * ends up before the widget.\n   *\n   * When there are multiple widgets at a given position, their\n   * `side` values determine the order in which they appear. Those\n   * with lower values appear first. The ordering of widgets with\n   * the same `side` value is unspecified.\n   *\n   * When `marks` is null, `side` also determines the marks that\n   * the widget is wrapped in—those of the node before when\n   * negative, those of the node after when positive.\n   */\n  side?: number | null;\n  /**\n   * The precise set of marks to draw around the widget.\n   */\n  marks?: Mark[] | null;\n  /**\n   * Can be used to control which DOM events, when they bubble out\n   * of this widget, the editor view should ignore.\n   */\n  stopEvent?: ((event: Event) => boolean) | null;\n  /**\n   * When comparing decorations of this type (in order to decide\n   * whether it needs to be redrawn), ProseMirror will by default\n   * compare the widget DOM node by identity. If you pass a key,\n   * that key will be compared instead, which can be useful when\n   * you generate decorations on the fly and don't want to store\n   * and reuse DOM nodes. Make sure that any widgets with the same\n   * key are interchangeable—if widgets differ in, for example,\n   * the behavior of some event handler, they should get\n   * different keys.\n   */\n  key?: string | null;\n}\n/**\n * The `spec` for the inline decoration.\n */\nexport interface InlineDecorationSpec {\n  /**\n   * Determines how the left side of the decoration is\n   * [mapped](#transform.Position_Mapping) when content is\n   * inserted directly at that position. By default, the decoration\n   * won't include the new content, but you can set this to `true`\n   * to make it inclusive.\n   */\n  inclusiveStart?: boolean | null;\n  /**\n   * Determines how the right side of the decoration is mapped.\n   */\n  inclusiveEnd?: boolean | null;\n}\n/**\n * Decoration objects can be provided to the view through the\n * [`decorations` prop](#view.EditorProps.decorations). They come in\n * several variants—see the static members of this class for details.\n */\nexport class Decoration<T extends object = { [key: string]: any }> {\n  /**\n   * The start position of the decoration.\n   */\n  from: number;\n  /**\n   * The end position. Will be the same as `from` for [widget\n   * decorations](#view.Decoration^widget).\n   */\n  to: number;\n  /**\n   * The spec provided when creating this decoration. Can be useful\n   * if you've stored extra information in that object.\n   */\n  spec: T;\n  /**\n   * Creates a widget decoration, which is a DOM node that's shown in\n   * the document at the given position. It is recommended that you\n   * delay rendering the widget by passing a function that will be\n   * called when the widget is actually drawn in a view, but you can\n   * also directly pass a DOM node. getPos can be used to find the\n   * widget's current document position.\n   */\n  static widget<T extends object = { [key: string]: any }>(\n    pos: number,\n    toDOM: ((view: EditorView, getPos: () => number) => Node) | Node,\n    spec?: T & WidgetDecorationSpec\n  ): Decoration<T & WidgetDecorationSpec>;\n  /**\n   * Creates an inline decoration, which adds the given attributes to\n   * each inline node between `from` and `to`.\n   */\n  static inline<T extends object = { [key: string]: any }>(\n    from: number,\n    to: number,\n    attrs: DecorationAttrs,\n    spec?: T & InlineDecorationSpec\n  ): Decoration<T & InlineDecorationSpec>;\n  /**\n   * Creates a node decoration. `from` and `to` should point precisely\n   * before and after a node in the document. That node, and only that\n   * node, will receive the given attributes.\n   */\n  static node<T extends object = { [key: string]: any }>(\n    from: number,\n    to: number,\n    attrs: DecorationAttrs,\n    spec?: T\n  ): Decoration<T>;\n}\n/**\n * A set of attributes to add to a decorated node. Most properties\n * simply directly correspond to DOM attributes of the same name,\n * which will be set to the property's value. These are exceptions:\n */\nexport interface DecorationAttrs {\n  /**\n   * A CSS class name or a space-separated set of class names to be\n   * _added_ to the classes that the node already had.\n   */\n  class?: string | null;\n  /**\n   * A string of CSS to be _added_ to the node's existing `style` property.\n   */\n  style?: string | null;\n  /**\n   * When non-null, the target node is wrapped in a DOM element of\n   * this type (and the other attributes are applied to this element).\n   */\n  nodeName?: string | null;\n  /**\n   * Specify additional attrs that will be mapped directly to the\n   * target node's DOM attributes.\n   */\n  [key: string]: string | null | undefined;\n}\n/**\n * A collection of [decorations](#view.Decoration), organized in\n * such a way that the drawing algorithm can efficiently use and\n * compare them. This is a persistent data structure—it is not\n * modified, updates create a new value.\n */\nexport class DecorationSet<S extends Schema = any> {\n  /**\n   * Find all decorations in this set which touch the given range\n   * (including decorations that start or end directly at the\n   * boundaries) and match the given predicate on their spec. When\n   * `start` and `end` are omitted, all decorations in the set are\n   * considered. When `predicate` isn't given, all decorations are\n   * assumed to match.\n   */\n  find(\n    start?: number,\n    end?: number,\n    predicate?: (spec: { [key: string]: any }) => boolean\n  ): Decoration[];\n  /**\n   * Map the set of decorations in response to a change in the\n   * document.\n   */\n  map(\n    mapping: Mapping,\n    doc: ProsemirrorNode<S>,\n    options?: { onRemove?: ((decorationSpec: { [key: string]: any }) => void) | null }\n  ): DecorationSet<S>;\n  /**\n   * Add the given array of decorations to the ones in the set,\n   * producing a new set. Needs access to the current document to\n   * create the appropriate tree structure.\n   */\n  add(doc: ProsemirrorNode<S>, decorations: Decoration[]): DecorationSet<S>;\n  /**\n   * Create a new set that contains the decorations in this set, minus\n   * the ones in the given array.\n   */\n  remove(decorations: Decoration[]): DecorationSet<S>;\n  /**\n   * Create a set of decorations, using the structure of the given\n   * document.\n   */\n  static create<S extends Schema = any>(\n    doc: ProsemirrorNode<S>,\n    decorations: Decoration[]\n  ): DecorationSet<S>;\n  /**\n   * The empty set of decorations.\n   */\n  static empty: DecorationSet;\n}\n/**\n * An editor view manages the DOM structure that represents an\n * editable document. Its state and behavior are determined by its\n * [props](#view.DirectEditorProps).\n */\nexport class EditorView<S extends Schema = any> {\n  /**\n   * Create a view. `place` may be a DOM node that the editor should\n   * be appended to, a function that will place it into the document,\n   * or an object whose `mount` property holds the node to use as the\n   * document container. If it is `null`, the editor will not be added\n   * to the document.\n   */\n  constructor(\n    place: Node | ((p: Node) => void) | { mount: Node } | undefined,\n    props: DirectEditorProps<S>\n  );\n  /**\n   * The view's current [state](#state.EditorState).\n   */\n  state: EditorState<S>;\n  /**\n   * An editable DOM node containing the document. (You probably\n   * should not directly interfere with its content.)\n   */\n  dom: Element;\n  /**\n   * Indicates whether the editor is currently [editable](#view.EditorProps.editable).\n   */\n   editable: boolean;\n  /**\n   * When editor content is being dragged, this object contains\n   * information about the dragged slice and whether it is being\n   * copied or moved. At any other time, it is null.\n   */\n  dragging?: { slice: Slice<S>; move: boolean } | null;\n  /**\n   * Holds true when a composition is active.\n   */\n  composing: boolean;\n  /**\n   * The view's current [props](#view.EditorProps).\n   */\n  props: DirectEditorProps<S>;\n  /**\n   * Update the view's props. Will immediately cause an update to\n   * the DOM.\n   */\n  update(props: DirectEditorProps<S>): void;\n  /**\n   * Update the view by updating existing props object with the object\n   * given as argument. Equivalent to `view.update(Object.assign({},\n   * view.props, props))`.\n   */\n  setProps(props: Partial<DirectEditorProps<S>>): void;\n  /**\n   * Update the editor's `state` prop, without touching any of the\n   * other props.\n   */\n  updateState(state: EditorState<S>): void;\n  /**\n   * Goes over the values of a prop, first those provided directly,\n   * then those from plugins (in order), and calls `f` every time a\n   * non-undefined value is found. When `f` returns a truthy value,\n   * that is immediately returned. When `f` isn't provided, it is\n   * treated as the identity function (the prop value is returned\n   * directly).\n   */\n  someProp(propName: string, f?: (prop: any) => any): any;\n  /**\n   * Query whether the view has focus.\n   */\n  hasFocus(): boolean;\n  /**\n   * Focus the editor.\n   */\n  focus(): void;\n  /**\n   * Get the document root in which the editor exists. This will\n   * usually be the top-level `document`, but might be a [shadow\n   * DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)\n   * root if the editor is inside one.\n   */\n  root: Document | DocumentFragment;\n  /**\n   * Given a pair of viewport coordinates, return the document\n   * position that corresponds to them. May return null if the given\n   * coordinates aren't inside of the editor. When an object is\n   * returned, its `pos` property is the position nearest to the\n   * coordinates, and its `inside` property holds the position of the\n   * inner node that the position falls inside of, or -1 if it is at\n   * the top level, not in any node.\n   */\n  posAtCoords(coords: {\n    left: number;\n    top: number;\n  }): { pos: number; inside: number } | null | undefined;\n  /**\n   * Returns the viewport rectangle at a given document position. `left`\n   * and `right` will be the same number, as this returns a flat\n   * cursor-ish rectangle.\n   */\n  coordsAtPos(pos: number): { left: number; right: number; top: number; bottom: number };\n  /**\n   * Find the DOM position that corresponds to the given document\n   * position. Note that you should **not** mutate the editor's\n   * internal DOM, only inspect it (and even that is usually not\n   * necessary).\n   */\n  domAtPos(pos: number): { node: Node; offset: number };\n  /**\n   * Find the DOM node that represents the document node after the\n   * given position. May return null when the position doesn't point\n   * in front of a node or if the node is inside an opaque node view.\n   *\n   * This is intended to be able to call things like getBoundingClientRect\n   * on that DOM node. Do not mutate the editor DOM directly, or add\n   * styling this way, since that will be immediately overriden by the\n   * editor as it redraws the node.\n   */\n  nodeDOM(pos: number): Node | null | undefined;\n  /**\n   * Find the document position that corresponds to a given DOM position.\n   * (Whenever possible, it is preferable to inspect the document structure\n   * directly, rather than poking around in the DOM, but sometimes—for\n   * example when interpreting an event target—you don't have a choice.)\n   *\n   * The bias (default: -1) parameter can be used to influence which side of\n   * a DOM node to use when the position is inside a leaf node.\n   */\n  posAtDOM(node: Node, offset: number, bias?: number | null): number;\n  /**\n   * Find out whether the selection is at the end of a textblock when\n   * moving in a given direction. When, for example, given `\"left\"`,\n   * it will return true if moving left from the current cursor\n   * position would leave that position's parent textblock. Will apply\n   * to the view's current state by default, but it is possible to\n   * pass a different state.\n   */\n  endOfTextblock(\n    dir: 'up' | 'down' | 'left' | 'right' | 'forward' | 'backward',\n    state?: EditorState<S>\n  ): boolean;\n  /**\n   * Removes the editor from the DOM and destroys all [node\n   * views](#view.NodeView).\n   */\n  destroy(): void;\n  /**\n   * Dispatch a transaction. Will call\n   * [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)\n   * when given, and otherwise defaults to applying the transaction to\n   * the current state and calling\n   * [`updateState`](#view.EditorView.updateState) with the result.\n   * This method is bound to the view instance, so that it can be\n   * easily passed around.\n   */\n  dispatch(tr: Transaction<S>): void;\n}\n/**\n * Props are configuration values that can be passed to an editor view\n * or included in a plugin. This interface lists the supported props.\n *\n * The various event-handling functions may all return `true` to\n * indicate that they handled the given event. The view will then take\n * care to call `preventDefault` on the event, except with\n * `handleDOMEvents`, where the handler itself is responsible for that.\n *\n * How a prop is resolved depends on the prop. Handler functions are\n * called one at a time, starting with the base props and then\n * searching through the plugins (in order of appearance) until one of\n * them returns true. For some props, the first plugin that yields a\n * value gets precedence.\n */\nexport interface EditorProps<ThisT = unknown, S extends Schema = any> {\n  /**\n   * Can be an object mapping DOM event type names to functions that\n   * handle them. Such functions will be called before any handling\n   * ProseMirror does of events fired on the editable DOM element.\n   * Contrary to the other event handling props, when returning true\n   * from such a function, you are responsible for calling\n   * `preventDefault` yourself (or not, if you want to allow the\n   * default behavior).\n   */\n  handleDOMEvents?: { [name: string]: (this: ThisT, view: EditorView<S>, event: Event) => boolean } | null;\n  /**\n   * Called when the editor receives a `keydown` event.\n   */\n  handleKeyDown?: ((this: ThisT, view: EditorView<S>, event: KeyboardEvent) => boolean) | null;\n  /**\n   * Handler for `keypress` events.\n   */\n  handleKeyPress?: ((this: ThisT, view: EditorView<S>, event: KeyboardEvent) => boolean) | null;\n  /**\n   * Whenever the user directly input text, this handler is called\n   * before the input is applied. If it returns `true`, the default\n   * behavior of actually inserting the text is suppressed.\n   */\n  handleTextInput?:\n  | ((this: ThisT, view: EditorView<S>, from: number, to: number, text: string) => boolean)\n  | null;\n  /**\n   * Called for each node around a click, from the inside out. The\n   * `direct` flag will be true for the inner node.\n   */\n  handleClickOn?:\n  | ((\n    this: ThisT,\n    view: EditorView<S>,\n    pos: number,\n    node: ProsemirrorNode<S>,\n    nodePos: number,\n    event: MouseEvent,\n    direct: boolean\n  ) => boolean)\n  | null;\n  /**\n   * Called when the editor is clicked, after `handleClickOn` handlers\n   * have been called.\n   */\n  handleClick?: ((this: ThisT, view: EditorView<S>, pos: number, event: MouseEvent) => boolean) | null;\n  /**\n   * Called for each node around a double click.\n   */\n  handleDoubleClickOn?:\n  | ((\n    this: ThisT,\n    view: EditorView<S>,\n    pos: number,\n    node: ProsemirrorNode<S>,\n    nodePos: number,\n    event: MouseEvent,\n    direct: boolean\n  ) => boolean)\n  | null;\n  /**\n   * Called when the editor is double-clicked, after `handleDoubleClickOn`.\n   */\n  handleDoubleClick?: ((this: ThisT, view: EditorView<S>, pos: number, event: MouseEvent) => boolean) | null;\n  /**\n   * Called for each node around a triple click.\n   */\n  handleTripleClickOn?:\n  | ((\n    this: ThisT,\n    view: EditorView<S>,\n    pos: number,\n    node: ProsemirrorNode<S>,\n    nodePos: number,\n    event: MouseEvent,\n    direct: boolean\n  ) => boolean)\n  | null;\n  /**\n   * Called when the editor is triple-clicked, after `handleTripleClickOn`.\n   */\n  handleTripleClick?: ((this: ThisT, view: EditorView<S>, pos: number, event: MouseEvent) => boolean) | null;\n  /**\n   * Can be used to override the behavior of pasting. `slice` is the\n   * pasted content parsed by the editor, but you can directly access\n   * the event to get at the raw content.\n   */\n  handlePaste?: ((this: ThisT, view: EditorView<S>, event: ClipboardEvent, slice: Slice<S>) => boolean) | null;\n  /**\n   * Called when something is dropped on the editor. `moved` will be\n   * true if this drop moves from the current selection (which should\n   * thus be deleted).\n   */\n  handleDrop?:\n  | ((this: ThisT, view: EditorView<S>, event: Event, slice: Slice<S>, moved: boolean) => boolean)\n  | null;\n  /**\n   * Called when the view, after updating its state, tries to scroll\n   * the selection into view. A handler function may return false to\n   * indicate that it did not handle the scrolling and further\n   * handlers or the default behavior should be tried.\n   */\n  handleScrollToSelection?: ((this: ThisT, view: EditorView<S>) => boolean) | null;\n  /**\n   * Can be used to override the way a selection is created when\n   * reading a DOM selection between the given anchor and head.\n   */\n  createSelectionBetween?:\n  | ((\n    this: ThisT,\n    view: EditorView<S>,\n    anchor: ResolvedPos<S>,\n    head: ResolvedPos<S>\n  ) => Selection<S> | null | undefined)\n  | null;\n  /**\n   * The [parser](#model.DOMParser) to use when reading editor changes\n   * from the DOM. Defaults to calling\n   * [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the\n   * editor's schema.\n   */\n  domParser?: DOMParser<S> | null;\n  /**\n   * Can be used to transform pasted HTML text, _before_ it is parsed,\n   * for example to clean it up.\n   */\n  transformPastedHTML?: ((this: ThisT, html: string) => string) | null;\n  /**\n   * The [parser](#model.DOMParser) to use when reading content from\n   * the clipboard. When not given, the value of the\n   * [`domParser`](#view.EditorProps.domParser) prop is used.\n   */\n  clipboardParser?: DOMParser<S> | null;\n  /**\n   * Transform pasted plain text. The `plain` flag will be true when\n   * the text is pasted as plain text.\n   */\n  transformPastedText?: ((this: ThisT, text: string, plain: boolean) => string) | null;\n  /**\n   * A function to parse text from the clipboard into a document\n   * slice. Called after\n   * [`transformPastedText`](#view.EditorProps.transformPastedText).\n   * The default behavior is to split the text into lines, wrap them\n   * in `<p>` tags, and call\n   * [`clipboardParser`](#view.EditorProps.clipboardParser) on it.\n   * The `plain` flag will be true when the text is pasted as plain\n   * text.\n   */\n  clipboardTextParser?: ((this: ThisT, text: string, $context: ResolvedPos<S>, plain: boolean) => Slice<S>) | null;\n  /**\n   * Can be used to transform pasted content before it is applied to\n   * the document.\n   */\n  transformPasted?: ((this: ThisT, p: Slice<S>) => Slice<S>) | null;\n  /**\n   * Allows you to pass custom rendering and behavior logic for nodes\n   * and marks. Should map node and mark names to constructor\n   * functions that produce a [`NodeView`](#view.NodeView) object\n   * implementing the node's display behavior. For nodes, the third\n   * argument `getPos` is a function that can be called to get the\n   * node's current position, which can be useful when creating\n   * transactions to update it. For marks, the third argument is a\n   * boolean that indicates whether the mark's content is inline.\n   *\n   * `decorations` is an array of node or inline decorations that are\n   * active around the node. They are automatically drawn in the\n   * normal way, and you will usually just want to ignore this, but\n   * they can also be used as a way to provide context information to\n   * the node view without adding it to the document itself.\n   */\n  nodeViews?: {\n    [name: string]: (\n      node: ProsemirrorNode<S>,\n      view: EditorView<S>,\n      getPos: (() => number) | boolean,\n      decorations: Decoration[]\n    ) => NodeView<S>;\n  } | null;\n  /**\n   * The DOM serializer to use when putting content onto the\n   * clipboard. If not given, the result of\n   * [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)\n   * will be used.\n   */\n  clipboardSerializer?: DOMSerializer<S> | null;\n  /**\n   * A function that will be called to get the text for the current\n   * selection when copying text to the clipboard. By default, the\n   * editor will use [`textBetween`](#model.Node.textBetween) on the\n   * selected range.\n   */\n  clipboardTextSerializer?: ((this: ThisT, p: Slice<S>) => string) | null;\n  /**\n   * A set of [document decorations](#view.Decoration) to show in the\n   * view.\n   */\n  decorations?: ((this: ThisT, state: EditorState<S>) => DecorationSet<S> | null | undefined) | null;\n  /**\n   * When this returns false, the content of the view is not directly\n   * editable.\n   */\n  editable?: ((this: ThisT, state: EditorState<S>) => boolean) | null;\n  /**\n   * Control the DOM attributes of the editable element. May be either\n   * an object or a function going from an editor state to an object.\n   * By default, the element will get a class `\"ProseMirror\"`, and\n   * will have its `contentEditable` attribute determined by the\n   * [`editable` prop](#view.EditorProps.editable). Additional classes\n   * provided here will be added to the class. For other attributes,\n   * the value provided first (as in\n   * [`someProp`](#view.EditorView.someProp)) will be used.\n   */\n  attributes?:\n  | { [name: string]: string }\n  | ((this: ThisT, p: EditorState<S>) => { [name: string]: string } | null | undefined | void)\n  | null;\n  /**\n   * Determines the distance (in pixels) between the cursor and the\n   * end of the visible viewport at which point, when scrolling the\n   * cursor into view, scrolling takes place. Defaults to 0.\n   */\n  scrollThreshold?: number | { top: number, right: number, bottom: number, left: number } | null;\n  /**\n   * Determines the extra space (in pixels) that is left above or\n   * below the cursor when it is scrolled into view. Defaults to 5.\n   */\n  scrollMargin?: number | { top: number, right: number, bottom: number, left: number } | null;\n}\n/**\n * The props object given directly to the editor view supports two\n * fields that can't be used in plugins:\n */\nexport interface DirectEditorProps<S extends Schema = any> extends EditorProps<unknown, S> {\n  /**\n   * The current state of the editor.\n   */\n  state: EditorState<S>;\n  /**\n   * The callback over which to send transactions (state updates)\n   * produced by the view. If you specify this, you probably want to\n   * make sure this ends up calling the view's\n   * [`updateState`](#view.EditorView.updateState) method with a new\n   * state that has the transaction\n   * [applied](#state.EditorState.apply). The callback will be bound to have\n   * the view instance as its `this` binding.\n   */\n  dispatchTransaction?: ((this: EditorView<S>, tr: Transaction<S>) => void) | null;\n}\n/**\n * By default, document nodes are rendered using the result of the\n * [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed\n * entirely by the editor. For some use cases, such as embedded\n * node-specific editing interfaces, you want more control over\n * the behavior of a node's in-editor representation, and need to\n * [define](#view.EditorProps.nodeViews) a custom node view.\n *\n * Objects returned as node views must conform to this interface.\n */\nexport interface NodeView<S extends Schema = any> {\n  /**\n   * The outer DOM node that represents the document node. When not\n   * given, the default strategy is used to create a DOM node.\n   */\n  dom?: Node | null;\n  /**\n   * The DOM node that should hold the node's content. Only meaningful\n   * if the node view also defines a `dom` property and if its node\n   * type is not a leaf node type. When this is present, ProseMirror\n   * will take care of rendering the node's children into it. When it\n   * is not present, the node view itself is responsible for rendering\n   * (or deciding not to render) its child nodes.\n   */\n  contentDOM?: Node | null;\n  /**\n   * When given, this will be called when the view is updating itself.\n   * It will be given a node (possibly of a different type), and an\n   * array of active decorations (which are automatically drawn, and\n   * the node view may ignore if it isn't interested in them), and\n   * should return true if it was able to update to that node, and\n   * false otherwise. If the node view has a `contentDOM` property (or\n   * no `dom` property), updating its child nodes will be handled by\n   * ProseMirror.\n   */\n  update?: ((node: ProsemirrorNode<S>, decorations: Decoration[]) => boolean) | null;\n  /**\n   * Can be used to override the way the node's selected status (as a\n   * node selection) is displayed.\n   */\n  selectNode?: (() => void) | null;\n  /**\n   * When defining a `selectNode` method, you should also provide a\n   * `deselectNode` method to remove the effect again.\n   */\n  deselectNode?: (() => void) | null;\n  /**\n   * This will be called to handle setting the selection inside the\n   * node. The `anchor` and `head` positions are relative to the start\n   * of the node. By default, a DOM selection will be created between\n   * the DOM positions corresponding to those positions, but if you\n   * override it you can do something else.\n   */\n  setSelection?: ((anchor: number, head: number, root: Document) => void) | null;\n  /**\n   * Can be used to prevent the editor view from trying to handle some\n   * or all DOM events that bubble up from the node view. Events for\n   * which this returns true are not handled by the editor.\n   */\n  stopEvent?: ((event: Event) => boolean) | null;\n  /**\n   * Called when a DOM\n   * [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)\n   * or a selection change happens within the view. When the change is\n   * a selection change, the record will have a `type` property of\n   * `\"selection\"` (which doesn't occur for native mutation records).\n   * Return false if the editor should re-read the selection or\n   * re-parse the range around the mutation, true if it can safely be\n   * ignored.\n   */\n  ignoreMutation?: ((p: MutationRecord | {\n    type: 'selection';\n    target: Element;\n  }) => boolean) | null;\n  /**\n   * Called when the node view is removed from the editor or the whole\n   * editor is destroyed.\n   */\n  destroy?: (() => void) | null;\n}\n"
    },
    "prosemirror-commands": {
      "index.d.ts": "// Type definitions for prosemirror-commands 1.0\n// Project: https://github.com/ProseMirror/prosemirror-commands\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\n//                 David Hahn <https://github.com/davidka>\n//                 Tim Baumann <https://github.com/timjb>\n//                 Patrick Simmelbauer <https://github.com/patsimm>\n//                 Mike Morearty <https://github.com/mmorearty>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\nimport { MarkType, Node as ProsemirrorNode, NodeType, Schema } from 'prosemirror-model';\nimport { EditorState, Transaction } from 'prosemirror-state';\nimport { EditorView } from 'prosemirror-view';\n\n/**\n * A command function takes an editor state, *optionally* a `dispatch`\n * function that it can use to dispatch a transaction and optionally\n * an `EditorView` instance. It should return a boolean that indicates\n * whether it could perform any action. When no `dispatch` callback is\n * passed, the command should do a 'dry run', determining whether it is\n * applicable, but not actually doing anything.\n */\nexport interface Command<S extends Schema = any> {\n  (\n    state: EditorState<S>,\n    dispatch?: (tr: Transaction<S>) => void,\n    view?: EditorView<S>\n  ): boolean;\n}\n\nexport interface Keymap<S extends Schema = any> {\n  [key: string]: Command<S>;\n}\n\n/**\n * Delete the selection, if there is one.\n */\nexport function deleteSelection<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * If the selection is empty and at the start of a textblock, try to\n * reduce the distance between that block and the one before it—if\n * there's a block directly before it that can be joined, join them.\n * If not, try to move the selected block closer to the next one in\n * the document structure by lifting it out of its parent or moving it\n * into a parent of the previous block. Will use the view for accurate\n * (bidi-aware) start-of-textblock detection if given.\n */\nexport function joinBackward<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void,\n  view?: EditorView<S>\n): boolean;\n/**\n * When the selection is empty and at the start of a textblock, select\n * the node before that textblock, if possible. This is intended to be\n * bound to keys like backspace, after\n * [`joinBackward`](#commands.joinBackward) or other deleting\n * commands, as a fall-back behavior when the schema doesn't allow\n * deletion at the selected point.\n */\nexport function selectNodeBackward<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void,\n  view?: EditorView<S>\n): boolean;\n/**\n * If the selection is empty and the cursor is at the end of a\n * textblock, try to reduce or remove the boundary between that block\n * and the one after it, either by joining them or by moving the other\n * block closer to this one in the tree structure. Will use the view\n * for accurate start-of-textblock detection if given.\n */\nexport function joinForward<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void,\n  view?: EditorView<S>\n): boolean;\n/**\n * When the selection is empty and at the end of a textblock, select\n * the node coming after that textblock, if possible. This is intended\n * to be bound to keys like delete, after\n * [`joinForward`](#commands.joinForward) and similar deleting\n * commands, to provide a fall-back behavior when the schema doesn't\n * allow deletion at the selected point.\n */\nexport function selectNodeForward<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void,\n  view?: EditorView<S>\n): boolean;\n/**\n * Join the selected block or, if there is a text selection, the\n * closest ancestor block of the selection that can be joined, with\n * the sibling above it.\n */\nexport function joinUp<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * Join the selected block, or the closest ancestor of the selection\n * that can be joined, with the sibling after it.\n */\nexport function joinDown<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * Lift the selected block, or the closest ancestor block of the\n * selection that can be lifted, out of its parent node.\n */\nexport function lift<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * If the selection is in a node whose type has a truthy\n * [`code`](#model.NodeSpec.code) property in its spec, replace the\n * selection with a newline character.\n */\nexport function newlineInCode<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * When the selection is in a node with a truthy\n * [`code`](#model.NodeSpec.code) property in its spec, create a\n * default block after the code block, and move the cursor there.\n */\nexport function exitCode<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * If a block node is selected, create an empty paragraph before (if\n * it is its parent's first child) or after it.\n */\nexport function createParagraphNear<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * If the cursor is in an empty textblock that can be lifted, lift the\n * block.\n */\nexport function liftEmptyBlock<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * Split the parent block of the selection. If the selection is a text\n * selection, also delete its content.\n */\nexport function splitBlock<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * Acts like [`splitBlock`](#commands.splitBlock), but without\n * resetting the set of active marks at the cursor.\n */\nexport function splitBlockKeepMarks<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * Move the selection to the node wrapping the current selection, if\n * any. (Will not select the document node.)\n */\nexport function selectParentNode<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * Select the whole document.\n */\nexport function selectAll<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n/**\n * Wrap the selection in a node of the given type with the given\n * attributes.\n */\nexport function wrapIn<S extends Schema = any>(\n  nodeType: NodeType<S>,\n  attrs?: { [key: string]: any }\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\n/**\n * Returns a command that tries to set the textblock around the\n * selection to the given node type with the given attributes.\n */\nexport function setBlockType<S extends Schema = any>(\n  nodeType: NodeType<S>,\n  attrs?: { [key: string]: any }\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\n/**\n * Create a command function that toggles the given mark with the\n * given attributes. Will return `false` when the current selection\n * doesn't support that mark. This will remove the mark if any marks\n * of that type exist in the selection, or add it otherwise. If the\n * selection is empty, this applies to the [stored\n * marks](#state.EditorState.storedMarks) instead of a range of the\n * document.\n */\nexport function toggleMark<S extends Schema = any>(\n  markType: MarkType<S>,\n  attrs?: { [key: string]: any }\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\n/**\n * Wrap a command so that, when it produces a transform that causes\n * two joinable nodes to end up next to each other, those are joined.\n * Nodes are considered joinable when they are of the same type and\n * when the `isJoinable` predicate returns true for them or, if an\n * array of strings was passed, if their node type name is in that\n * array.\n */\nexport function autoJoin<S extends Schema = any>(\n  command: (state: EditorState<S>, p1?: (tr: Transaction<S>) => void) => boolean,\n  isJoinable: ((before: ProsemirrorNode<S>, after: ProsemirrorNode<S>) => boolean) | string[]\n): (state: EditorState<S>, p1?: (tr: Transaction<S>) => void) => boolean;\n/**\n * Combine a number of command functions into a single function (which\n * calls them one by one until one returns true).\n */\nexport function chainCommands<S extends Schema = any>(...commands: Array<Command<S>>): Command<S>;\n/**\n * A basic keymap containing bindings not specific to any schema.\n * Binds the following keys (when multiple commands are listed, they\n * are chained with [`chainCommands`](#commands.chainCommands)):\n *\n * * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n * * **Mod-Enter** to `exitCode`\n * * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n * * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n * * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n * * **Mod-a** to `selectAll`\n */\nexport let pcBaseKeymap: Keymap;\n/**\n * A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n * **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n * **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\n * Ctrl-Delete.\n */\nexport let macBaseKeymap: Keymap;\n/**\n * Depending on the detected platform, this will hold\n * [`pcBasekeymap`](#commands.pcBaseKeymap) or\n * [`macBaseKeymap`](#commands.macBaseKeymap).\n */\nexport let baseKeymap: Keymap;\n"
    },
    "prosemirror-dropcursor": {
      "index.d.ts": "// Type definitions for prosemirror-dropcursor 1.0\r\n// Project: https://github.com/ProseMirror/prosemirror-dropcursor\r\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\r\n//                 David Hahn <https://github.com/davidka>\r\n//                 Daniil Dotsev <https://github.com/dddotsev>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n// TypeScript Version: 2.3\r\n\r\nimport { Plugin } from 'prosemirror-state';\r\n\r\n/**\r\n * Create a plugin that, when added to a ProseMirror instance,\r\n * causes a decoration to show up at the drop position when something\r\n * is dragged over the editor.\r\n *\r\n * @param options These options are supported:\r\n * @param options.color The color of the cursor. Defaults to `black`.\r\n * @param options.width The precise width of the cursor in pixels. Defaults to 1.\r\n */\r\nexport function dropCursor(options?: { color?: string | null, width?: number | null }): Plugin;\r\n"
    },
    "prosemirror-gapcursor": {
      "index.d.ts": "// Type definitions for prosemirror-gapcursor 1.0\r\n// Project: https://github.com/ProseMirror/prosemirror-gapcursor\r\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\r\n//                 David Hahn <https://github.com/davidka>\r\n//                 Tim Baumann <https://github.com/timjb>\r\n//                 Patrick Simmelbauer <https://github.com/patsimm>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n// TypeScript Version: 2.3\r\n\r\nimport { Plugin, Selection } from 'prosemirror-state';\r\n\r\n/**\r\n * Gap cursor selections are represented using this class. Its\r\n * `$anchor` and `$head` properties both point at the cursor position.\r\n */\r\nexport class GapCursor extends Selection { }\r\n/**\r\n * Create a gap cursor plugin. When enabled, this will capture clicks\r\n * near and arrow-key-motion past places that don't have a normally\r\n * selectable position nearby, and create a gap cursor selection for\r\n * them. The cursor is drawn as an element with class\r\n * `ProseMirror-gapcursor`. You can either include\r\n * `style/gapcursor.css` from the package's directory or add your own\r\n * styles to make it visible.\r\n */\r\nexport function gapCursor(): Plugin;\r\n"
    },
    "prosemirror-history": {
      "index.d.ts": "// Type definitions for prosemirror-history 1.0\r\n// Project: https://github.com/ProseMirror/prosemirror-history\r\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\r\n//                 David Hahn <https://github.com/davidka>\r\n//                 Tim Baumann <https://github.com/timjb>\r\n//                 Patrick Simmelbauer <https://github.com/patsimm>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n// TypeScript Version: 2.3\r\n\r\nimport { Schema } from 'prosemirror-model';\r\nimport { EditorState, Plugin, Transaction } from 'prosemirror-state';\r\n\r\n/**\r\n * Set a flag on the given transaction that will prevent further steps\r\n * from being appended to an existing history event (so that they\r\n * require a separate undo command to undo).\r\n */\r\nexport function closeHistory<S extends Schema = any>(tr: Transaction<S>): Transaction<S>;\r\n/**\r\n * Returns a plugin that enables the undo history for an editor. The\r\n * plugin will track undo and redo stacks, which can be used with the\r\n * [`undo`](#history.undo) and [`redo`](#history.redo) commands.\r\n *\r\n * You can set an `\"addToHistory\"` [metadata\r\n * property](#state.Transaction.setMeta) of `false` on a transaction\r\n * to prevent it from being rolled back by undo.\r\n */\r\nexport function history(config?: { depth?: number | null; newGroupDelay?: number | null }): Plugin;\r\n/**\r\n * A command function that undoes the last change, if any.\r\n */\r\nexport function undo<S extends Schema = any>(\r\n  state: EditorState<S>,\r\n  dispatch?: (tr: Transaction<S>) => void\r\n): boolean;\r\n/**\r\n * A command function that redoes the last undone change, if any.\r\n */\r\nexport function redo<S extends Schema = any>(\r\n  state: EditorState<S>,\r\n  dispatch?: (tr: Transaction<S>) => void\r\n): boolean;\r\n/**\r\n * The amount of undoable events available in a given state.\r\n */\r\nexport function undoDepth(state: EditorState): number;\r\n/**\r\n * The amount of redoable events available in a given editor state.\r\n */\r\nexport function redoDepth(state: EditorState): number;\r\n"
    },
    "prosemirror-inputrules": {
      "index.d.ts": "// Type definitions for prosemirror-inputrules 1.0\n// Project: https://github.com/ProseMirror/prosemirror-inputrules\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\n//                 David Hahn <https://github.com/davidka>\n//                 Tim Baumann <https://github.com/timjb>\n//                 Patrick Simmelbauer <https://github.com/patsimm>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\n\nimport { Node as ProsemirrorNode, NodeType, Schema } from 'prosemirror-model';\nimport { EditorState, Plugin, Transaction } from 'prosemirror-state';\n\n/**\n * Input rules are regular expressions describing a piece of text\n * that, when typed, causes something to happen. This might be\n * changing two dashes into an emdash, wrapping a paragraph starting\n * with `\"> \"` into a blockquote, or something entirely different.\n */\nexport class InputRule<S extends Schema = any> {\n  /**\n   * Create an input rule. The rule applies when the user typed\n   * something and the text directly in front of the cursor matches\n   * `match`, which should probably end with `$`.\n   *\n   * The `handler` can be a string, in which case the matched text, or\n   * the first matched group in the regexp, is replaced by that\n   * string.\n   *\n   * Or a it can be a function, which will be called with the match\n   * array produced by\n   * [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec),\n   * as well as the start and end of the matched range, and which can\n   * return a [transaction](#state.Transaction) that describes the\n   * rule's effect, or null to indicate the input was not handled.\n   */\n  constructor(\n    match: RegExp,\n    handler:\n      | string\n      | ((\n        state: EditorState<S>,\n        match: string[],\n        start: number,\n        end: number\n      ) => Transaction<S> | null)\n  );\n}\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule's\n * action.\n */\nexport function inputRules<S extends Schema = any>(config: {\n  rules: Array<InputRule<S>>;\n}): Plugin<S>;\n/**\n * This is a command that will undo an input rule, if applying such a\n * rule was the last thing that the user did.\n */\nexport function undoInputRule<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (p: Transaction<S>) => void\n): boolean;\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. The `regexp` argument is\n * directly passed through to the `InputRule` constructor. You'll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `nodeType` is the type of node to wrap in. If it needs attributes,\n * you can either pass them directly, or pass a function that will\n * compute them from the regular expression match.\n *\n * By default, if there's a node with the same type above the newly\n * wrapped node, the rule will try to [join](#transform.Transform.join) those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n */\nexport function wrappingInputRule<S extends Schema = any>(\n  regexp: RegExp,\n  nodeType: NodeType<S>,\n  getAttrs?: { [key: string]: any } | ((p: string[]) => { [key: string]: any } | null | undefined),\n  joinPredicate?: (p1: string[], p2: ProsemirrorNode<S>) => boolean\n): InputRule<S>;\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. You'll usually want to start your\n * regexp with `^` to that it is only matched at the start of a\n * textblock. The optional `getAttrs` parameter can be used to compute\n * the new node's attributes, and works the same as in the\n * `wrappingInputRule` function.\n */\nexport function textblockTypeInputRule<S extends Schema = any>(\n  regexp: RegExp,\n  nodeType: NodeType<S>,\n  getAttrs?: { [key: string]: any } | ((p: string[]) => { [key: string]: any } | null | undefined)\n): InputRule<S>;\n/**\n * Converts double dashes to an emdash.\n */\nexport let emDash: InputRule;\n/**\n * Converts three dots to an ellipsis character.\n */\nexport let ellipsis: InputRule;\n/**\n * “Smart” opening double quotes.\n */\nexport let openDoubleQuote: InputRule;\n/**\n * “Smart” closing double quotes.\n */\nexport let closeDoubleQuote: InputRule;\n/**\n * “Smart” opening single quotes.\n */\nexport let openSingleQuote: InputRule;\n/**\n * “Smart” closing single quotes.\n */\nexport let closeSingleQuote: InputRule;\n/**\n * Smart-quote related input rules.\n */\nexport let smartQuotes: InputRule[];\n"
    },
    "prosemirror-keymap": {
      "index.d.ts": "// Type definitions for prosemirror-keymap 1.0\n// Project: https://github.com/ProseMirror/prosemirror-keymap\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\n//                 David Hahn <https://github.com/davidka>\n//                 Tim Baumann <https://github.com/timjb>\n//                 Patrick Simmelbauer <https://github.com/patsimm>\n//                 Mike Morearty <https://github.com/mmorearty>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\nimport { Keymap } from 'prosemirror-commands';\nimport { Schema } from 'prosemirror-model';\nimport { Plugin } from 'prosemirror-state';\nimport { EditorView } from 'prosemirror-view';\n\n/**\n * Create a keymap plugin for the given set of bindings.\n *\n * Bindings should map key names to [command](#commands)-style\n * functions, which will be called with `(EditorState, dispatch,\n * EditorView)` arguments, and should return true when they've handled\n * the key. Note that the view argument isn't part of the command\n * protocol, but can be used as an escape hatch if a binding needs to\n * directly interact with the UI.\n *\n * Key names may be strings like `\"Shift-Ctrl-Enter\"`—a key\n * identifier prefixed with zero or more modifiers. Key identifiers\n * are based on the strings that can appear in\n * [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\n * Use lowercase letters to refer to letter keys (or uppercase letters\n * if you want shift to be held). You may use `\"Space\"` as an alias\n * for the `\" \"` name.\n *\n * Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n * `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n * `Meta-`) are recognized. For characters that are created by holding\n * shift, the `Shift-` prefix is implied, and should not be added\n * explicitly.\n *\n * You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\n * other platforms.\n *\n * You can add multiple keymap plugins to an editor. The order in\n * which they appear determines their precedence (the ones early in\n * the array get to dispatch first).\n */\nexport function keymap<S extends Schema = any>(bindings: Keymap<S>): Plugin;\n\n/**\n * Given a set of bindings (using the same format as\n * [`keymap`](#keymap.keymap), return a [keydown\n * handler](#view.EditorProps.handleKeyDown) handles them.\n */\nexport function keydownHandler<S extends Schema = any>(\n  bindings: Keymap<S>,\n): (view: EditorView, event: KeyboardEvent) => boolean;\n"
    },
    "prosemirror-model": {
      "index.d.ts": "// Type definitions for prosemirror-model 1.7\n// Project: https://github.com/ProseMirror/prosemirror-model\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\n//                 David Hahn <https://github.com/davidka>\n//                 Tim Baumann <https://github.com/timjb>\n//                 Malte Blanken <https://github.com/neknalb>\n//                 Patrick Simmelbauer <https://github.com/patsimm>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\n\nimport OrderedMap = require('orderedmap');\n\n/**\n * Instances of this class represent a match state of a node\n * type's [content expression](#model.NodeSpec.content), and can be\n * used to find out whether further content matches here, and whether\n * a given position is a valid end of the node.\n */\nexport class ContentMatch<S extends Schema = any> {\n  /**\n   * Get the first matching node type at this match position that can\n   * be generated.\n   */\n  defaultType?: NodeType;\n  /**\n   * The number of outgoing edges this node has in the finite automaton\n   * that describes the content expression.\n   */\n  edgeCount: number;\n  /**\n   * True when this match state represents a valid end of the node.\n   */\n  validEnd: boolean;\n  /**\n   * Match a node type and marks, returning a match after that node\n   * if successful.\n   */\n  matchType(type: NodeType<S>): ContentMatch<S> | null | undefined;\n  /**\n   * Try to match a fragment. Returns the resulting match when\n   * successful.\n   */\n  matchFragment(frag: Fragment<S>, start?: number, end?: number): ContentMatch<S> | null | undefined;\n  /**\n   * Try to match the given fragment, and if that fails, see if it can\n   * be made to match by inserting nodes in front of it. When\n   * successful, return a fragment of inserted nodes (which may be\n   * empty if nothing had to be inserted). When `toEnd` is true, only\n   * return a fragment if the resulting match goes to the end of the\n   * content expression.\n   */\n  fillBefore(after: Fragment<S>, toEnd?: boolean, startIndex?: number): Fragment<S> | null | undefined;\n  /**\n   * Find a set of wrapping node types that would allow a node of the\n   * given type to appear at this position. The result may be empty\n   * (when it fits directly) and will be null when no such wrapping\n   * exists.\n   */\n  findWrapping(target: NodeType<S>): Array<NodeType<S>> | null | undefined;\n  /**\n   * Get the _n_th outgoing edge from this node in the finite automaton\n   * that describes the content expression.\n   */\n  edge(n: number): { type: NodeType; next: ContentMatch };\n}\n/**\n * A fragment represents a node's collection of child nodes.\n *\n * Like nodes, fragments are persistent data structures, and you\n * should not mutate them or their content. Rather, you create new\n * instances whenever needed. The API tries to make this easy.\n */\nexport class Fragment<S extends Schema = any> {\n  /**\n   * The size of the fragment, which is the total of the size of its\n   * content nodes.\n   */\n  size: number;\n  /**\n   * Invoke a callback for all descendant nodes between the given two\n   * positions (relative to start of this fragment). Doesn't descend\n   * into a node when the callback returns `false`.\n   */\n  nodesBetween(\n    from: number,\n    to: number,\n    f: (\n      node: ProsemirrorNode<S>,\n      start: number,\n      parent: ProsemirrorNode<S>,\n      index: number\n    ) => boolean | null | undefined | void,\n    startPos?: number\n  ): void;\n  /**\n   * Call the given callback for every descendant node. The callback\n   * may return `false` to prevent traversal of a given node's children.\n   */\n  descendants(\n    f: (\n      node: ProsemirrorNode<S>,\n      pos: number,\n      parent: ProsemirrorNode<S>\n    ) => boolean | null | undefined | void\n  ): void;\n  /**\n   * Create a new fragment containing the combined content of this\n   * fragment and the other.\n   */\n  append(other: Fragment<S>): Fragment<S>;\n  /**\n   * Cut out the sub-fragment between the two given positions.\n   */\n  cut(from: number, to?: number): Fragment<S>;\n  /**\n   * Create a new fragment in which the node at the given index is\n   * replaced by the given node.\n   */\n  replaceChild(index: number, node: ProsemirrorNode<S>): Fragment<S>;\n  /**\n   * Compare this fragment to another one.\n   */\n  eq(other: Fragment<S>): boolean;\n  /**\n   * The first child of the fragment, or `null` if it is empty.\n   */\n  firstChild?: ProsemirrorNode<S> | null;\n  /**\n   * The last child of the fragment, or `null` if it is empty.\n   */\n  lastChild?: ProsemirrorNode<S> | null;\n  /**\n   * The number of child nodes in this fragment.\n   */\n  childCount: number;\n  /**\n   * Get the child node at the given index. Raise an error when the\n   * index is out of range.\n   */\n  child(index: number): ProsemirrorNode<S>;\n  /**\n   * Get the child node at the given index, if it exists.\n   */\n  maybeChild(index: number): ProsemirrorNode<S> | null | undefined;\n  /**\n   * Call `f` for every child node, passing the node, its offset\n   * into this parent node, and its index.\n   */\n  forEach(f: (node: ProsemirrorNode<S>, offset: number, index: number) => void): void;\n  /**\n   * Find the first position at which this fragment and another\n   * fragment differ, or `null` if they are the same.\n   */\n  findDiffStart(other: Fragment<S>): number | null | undefined;\n  /**\n   * Find the first position, searching from the end, at which this\n   * fragment and the given fragment differ, or `null` if they are the\n   * same. Since this position will not be the same in both nodes, an\n   * object with two separate positions is returned.\n   */\n  findDiffEnd(other: ProsemirrorNode<S>): { a: number; b: number } | null | undefined;\n  /**\n   * Return a debugging string that describes this fragment.\n   */\n  toString(): string;\n  /**\n   * Create a JSON-serializeable representation of this fragment.\n   */\n  toJSON(): { [key: string]: any } | null | undefined;\n  /**\n   * Deserialize a fragment from its JSON representation.\n   */\n  static fromJSON<S extends Schema = any>(\n    schema: S,\n    value?: { [key: string]: any }\n  ): Fragment<S>;\n  /**\n   * Build a fragment from an array of nodes. Ensures that adjacent\n   * text nodes with the same marks are joined together.\n   */\n  static fromArray<S extends Schema = any>(array: Array<ProsemirrorNode<S>>): Fragment<S>;\n  /**\n   * Create a fragment from something that can be interpreted as a set\n   * of nodes. For `null`, it returns the empty fragment. For a\n   * fragment, the fragment itself. For a node or array of nodes, a\n   * fragment containing those nodes.\n   */\n  static from<S extends Schema = any>(\n    nodes?: Fragment<S> | ProsemirrorNode<S> | Array<ProsemirrorNode<S>>\n  ): Fragment<S>;\n  /**\n   * An empty fragment. Intended to be reused whenever a node doesn't\n   * contain anything (rather than allocating a new empty fragment for\n   * each leaf node).\n   */\n  static empty: Fragment;\n}\n/**\n * These are the options recognized by the\n * [`parse`](#model.DOMParser.parse) and\n * [`parseSlice`](#model.DOMParser.parseSlice) methods.\n */\nexport interface ParseOptions<S extends Schema = any> {\n  /**\n   * By default, whitespace is collapsed as per HTML's rules. Pass\n   * `true` to preserve whitespace, but normalize newlines to\n   * spaces, and `\"full\"` to preserve whitespace entirely.\n   */\n  preserveWhitespace?: boolean | 'full' | null;\n  /**\n   * When given, the parser will, beside parsing the content,\n   * record the document positions of the given DOM positions. It\n   * will do so by writing to the objects, adding a `pos` property\n   * that holds the document position. DOM positions that are not\n   * in the parsed content will not be written to.\n   */\n  findPositions?: Array<{ node: Node; offset: number }> | null;\n  /**\n   * The child node index to start parsing from.\n   */\n  from?: number | null;\n  /**\n   * The child node index to stop parsing at.\n   */\n  to?: number | null;\n  /**\n   * By default, the content is parsed into the schema's default\n   * [top node type](#model.Schema.topNodeType). You can pass this\n   * option to use the type and attributes from a different node\n   * as the top container.\n   */\n  topNode?: ProsemirrorNode<S> | null;\n  /**\n   * Provide the starting content match that content parsed into the\n   * top node is matched against.\n   */\n  topMatch?: ContentMatch | null;\n  /**\n   * A set of additional nodes to count as\n   * [context](#model.ParseRule.context) when parsing, above the\n   * given [top node](#model.ParseOptions.topNode).\n   */\n  context?: ResolvedPos<S> | null;\n}\n/**\n * A value that describes how to parse a given DOM node or inline\n * style as a ProseMirror node or mark.\n */\nexport interface ParseRule {\n  /**\n   * A CSS selector describing the kind of DOM elements to match. A\n   * single rule should have _either_ a `tag` or a `style` property.\n   */\n  tag?: string | null;\n  /**\n   * The namespace to match. This should be used with `tag`.\n   * Nodes are only matched when the namespace matches or this property\n   * is null.\n   */\n  namespace?: string | null;\n  /**\n   * A CSS property name to match. When given, this rule matches\n   * inline styles that list that property. May also have the form\n   * `\"property=value\"`, in which case the rule only matches if the\n   * propery's value exactly matches the given value. (For more\n   * complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n   * and return undefined to indicate that the match failed.)\n   */\n  style?: string | null;\n  /**\n   * Can be used to change the order in which the parse rules in a\n   * schema are tried. Those with higher priority come first. Rules\n   * without a priority are counted as having priority 50. This\n   * property is only meaningful in a schema—when directly\n   * constructing a parser, the order of the rule array is used.\n   */\n  priority?: number | null;\n  /**\n   * When given, restricts this rule to only match when the current\n   * context—the parent nodes into which the content is being\n   * parsed—matches this expression. Should contain one or more node\n   * names or node group names followed by single or double slashes.\n   * For example `\"paragraph/\"` means the rule only matches when the\n   * parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n   * it to be in a paragraph that is inside a blockquote, and\n   * `\"section//\"` matches any position inside a section—a double\n   * slash matches any sequence of ancestor nodes. To allow multiple\n   * different contexts, they can be separated by a pipe (`|`)\n   * character, as in `\"blockquote/|list_item/\"`.\n   */\n  context?: string | null;\n  /**\n   * The name of the node type to create when this rule matches. Only\n   * valid for rules with a `tag` property, not for style rules. Each\n   * rule should have one of a `node`, `mark`, or `ignore` property\n   * (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n   * [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n   * or `mark` property will be derived from its position).\n   */\n  node?: string | null;\n  /**\n   * The name of the mark type to wrap the matched content in.\n   */\n  mark?: string | null;\n  /**\n   * When true, ignore content that matches this rule.\n   */\n  ignore?: boolean | null;\n  /**\n   * When true, ignore the node that matches this rule, but do parse\n   * its content.\n   */\n  skip?: boolean | null;\n  /**\n   * Attributes for the node or mark created by this rule. When\n   * `getAttrs` is provided, it takes precedence.\n   */\n  attrs?: { [key: string]: any } | null;\n  /**\n   * A function used to compute the attributes for the node or mark\n   * created by this rule. Can also be used to describe further\n   * conditions the DOM element or style must match. When it returns\n   * `false`, the rule won't match. When it returns null or undefined,\n   * that is interpreted as an empty/default set of attributes.\n   *\n   * Called with a DOM Element for `tag` rules, and with a string (the\n   * style's value) for `style` rules.\n   */\n  getAttrs?: ((p: Node | string) => { [key: string]: any } | false | null | undefined) | null;\n  /**\n   * For `tag` rules that produce non-leaf nodes or marks, by default\n   * the content of the DOM element is parsed as content of the mark\n   * or node. If the child nodes are in a descendent node, this may be\n   * a CSS selector string that the parser must use to find the actual\n   * content element, or a function that returns the actual content\n   * element to the parser.\n   */\n  contentElement?: string | ((p: Node) => Node) | null;\n  /**\n   * Can be used to override the content of a matched node. When\n   * present, instead of parsing the node's child nodes, the result of\n   * this function is used.\n   */\n  getContent?: (<S extends Schema = any>(p: Node, schema: S) => Fragment<S>) | null;\n  /**\n   * Controls whether whitespace should be preserved when parsing the\n   * content inside the matched element. `false` means whitespace may\n   * be collapsed, `true` means that whitespace should be preserved\n   * but newlines normalized to spaces, and `\"full\"` means that\n   * newlines should also be preserved.\n   */\n  preserveWhitespace?: boolean | 'full' | null;\n}\n/**\n * A DOM parser represents a strategy for parsing DOM content into\n * a ProseMirror document conforming to a given schema. Its behavior\n * is defined by an array of [rules](#model.ParseRule).\n */\nexport class DOMParser<S extends Schema = any> {\n  /**\n   * Create a parser that targets the given schema, using the given\n   * parsing rules.\n   */\n  constructor(schema: S, rules: ParseRule[]);\n  /**\n   * The schema into which the parser parses.\n   */\n  schema: S;\n  /**\n   * The set of [parse rules](#model.ParseRule) that the parser\n   * uses, in order of precedence.\n   */\n  rules: ParseRule[];\n  /**\n   * Parse a document from the content of a DOM node.\n   */\n  parse(dom: Node, options?: ParseOptions<S>): ProsemirrorNode<S>;\n  /**\n   * Parses the content of the given DOM node, like\n   * [`parse`](#model.DOMParser.parse), and takes the same set of\n   * options. But unlike that method, which produces a whole node,\n   * this one returns a slice that is open at the sides, meaning that\n   * the schema constraints aren't applied to the start of nodes to\n   * the left of the input and the end of nodes at the end.\n   */\n  parseSlice(dom: Node, options?: ParseOptions<S>): Slice<S>;\n  /**\n   * Construct a DOM parser using the parsing rules listed in a\n   * schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n   * [priority](#model.ParseRule.priority).\n   */\n  static fromSchema<S extends Schema = any>(schema: S): DOMParser<S>;\n}\n/**\n * A mark is a piece of information that can be attached to a node,\n * such as it being emphasized, in code font, or a link. It has a type\n * and optionally a set of attributes that provide further information\n * (such as the target of the link). Marks are created through a\n * `Schema`, which controls which types exist and which\n * attributes they have.\n */\nexport class Mark<S extends Schema = any> {\n  /**\n   * The type of this mark.\n   */\n  type: MarkType<S>;\n  /**\n   * The attributes associated with this mark.\n   */\n  attrs: { [key: string]: any };\n  /**\n   * Given a set of marks, create a new set which contains this one as\n   * well, in the right position. If this mark is already in the set,\n   * the set itself is returned. If any marks that are set to be\n   * [exclusive](#model.MarkSpec.excludes) with this mark are present,\n   * those are replaced by this one.\n   */\n  addToSet(set: Array<Mark<S>>): Array<Mark<S>>;\n  /**\n   * Remove this mark from the given set, returning a new set. If this\n   * mark is not in the set, the set itself is returned.\n   */\n  removeFromSet(set: Array<Mark<S>>): Array<Mark<S>>;\n  /**\n   * Test whether this mark is in the given set of marks.\n   */\n  isInSet(set: Array<Mark<S>>): boolean;\n  /**\n   * Test whether this mark has the same type and attributes as\n   * another mark.\n   */\n  eq(other: Mark<S>): boolean;\n  /**\n   * Convert this mark to a JSON-serializeable representation.\n   */\n  toJSON(): { [key: string]: any };\n  static fromJSON<S extends Schema = any>(schema: S, json: { [key: string]: any }): Mark<S>;\n  /**\n   * Test whether two sets of marks are identical.\n   */\n  static sameSet<S extends Schema = any>(a: Array<Mark<S>>, b: Array<Mark<S>>): boolean;\n  /**\n   * Create a properly sorted mark set from null, a single mark, or an\n   * unsorted array of marks.\n   */\n  static setFrom<S extends Schema = any>(marks?: Mark<S> | Array<Mark<S>>): Array<Mark<S>>;\n  /**\n   * The empty set of marks.\n   */\n  static none: Mark[];\n}\n/**\n * This class represents a node in the tree that makes up a\n * ProseMirror document. So a document is an instance of `Node`, with\n * children that are also instances of `Node`.\n *\n * Nodes are persistent data structures. Instead of changing them, you\n * create new ones with the content you want. Old ones keep pointing\n * at the old document shape. This is made cheaper by sharing\n * structure between the old and new data as much as possible, which a\n * tree shape like this (without back pointers) makes easy.\n *\n * **Do not** directly mutate the properties of a `Node` object. See\n * [the guide](/docs/guide/#doc) for more information.\n */\ndeclare class ProsemirrorNode<S extends Schema = any> {\n  /**\n   * The type of node that this is.\n   */\n  type: NodeType<S>;\n  /**\n   * An object mapping attribute names to values. The kind of\n   * attributes allowed and required are\n   * [determined](#model.NodeSpec.attrs) by the node type.\n   */\n  attrs: { [key: string]: any };\n  /**\n   * A container holding the node's children.\n   */\n  content: Fragment<S>;\n  /**\n   * The marks (things like whether it is emphasized or part of a\n   * link) applied to this node.\n   */\n  marks: Array<Mark<S>>;\n  /**\n   * For text nodes, this contains the node's text content.\n   */\n  text?: string | null;\n  /**\n   * The size of this node, as defined by the integer-based [indexing\n   * scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n   * amount of characters. For other leaf nodes, it is one. For\n   * non-leaf nodes, it is the size of the content plus two (the start\n   * and end token).\n   */\n  nodeSize: number;\n  /**\n   * The number of children that the node has.\n   */\n  childCount: number;\n  /**\n   * Get the child node at the given index. Raises an error when the\n   * index is out of range.\n   */\n  child(index: number): ProsemirrorNode<S>;\n  /**\n   * Get the child node at the given index, if it exists.\n   */\n  maybeChild(index: number): ProsemirrorNode<S> | null | undefined;\n  /**\n   * Call `f` for every child node, passing the node, its offset\n   * into this parent node, and its index.\n   */\n  forEach(f: (node: ProsemirrorNode<S>, offset: number, index: number) => void): void;\n  /**\n   * Invoke a callback for all descendant nodes recursively between\n   * the given two positions that are relative to start of this node's\n   * content. The callback is invoked with the node, its\n   * parent-relative position, its parent node, and its child index.\n   * When the callback returns false for a given node, that node's\n   * children will not be recursed over.\n   */\n  nodesBetween(\n    from: number,\n    to: number,\n    f: (\n      node: ProsemirrorNode<S>,\n      pos: number,\n      parent: ProsemirrorNode<S>,\n      index: number\n    ) => boolean | null | undefined | void,\n    startPos?: number\n  ): void;\n  /**\n   * Call the given callback for every descendant node. Doesn't\n   * descend into a node when the callback returns `false`.\n   */\n  descendants(\n    f: (\n      node: ProsemirrorNode<S>,\n      pos: number,\n      parent: ProsemirrorNode<S>\n    ) => boolean | null | undefined | void\n  ): void;\n  /**\n   * Concatenates all the text nodes found in this fragment and its\n   * children.\n   */\n  textContent: string;\n  /**\n   * Get all text between positions `from` and `to`. When\n   * `blockSeparator` is given, it will be inserted whenever a new\n   * block node is started. When `leafText` is given, it'll be\n   * inserted for every non-text leaf node encountered.\n   */\n  textBetween(from: number, to: number, blockSeparator?: string, leafText?: string): string;\n  /**\n   * Returns this node's first child, or `null` if there are no\n   * children.\n   */\n  firstChild?: ProsemirrorNode<S> | null;\n  /**\n   * Returns this node's last child, or `null` if there are no\n   * children.\n   */\n  lastChild?: ProsemirrorNode<S> | null;\n  /**\n   * Test whether two nodes represent the same piece of document.\n   */\n  eq(other: ProsemirrorNode<S>): boolean;\n  /**\n   * Compare the markup (type, attributes, and marks) of this node to\n   * those of another. Returns `true` if both have the same markup.\n   */\n  sameMarkup(other: ProsemirrorNode<S>): boolean;\n  /**\n   * Check whether this node's markup correspond to the given type,\n   * attributes, and marks.\n   */\n  hasMarkup(type: NodeType<S>, attrs?: { [key: string]: any }, marks?: Array<Mark<S>>): boolean;\n  /**\n   * Create a new node with the same markup as this node, containing\n   * the given content (or empty, if no content is given).\n   */\n  copy(content?: Fragment<S>): ProsemirrorNode<S>;\n  /**\n   * Create a copy of this node, with the given set of marks instead\n   * of the node's own marks.\n   */\n  mark(marks: Array<Mark<S>>): ProsemirrorNode<S>;\n  /**\n   * Create a copy of this node with only the content between the\n   * given positions. If `to` is not given, it defaults to the end of\n   * the node.\n   */\n  cut(from: number, to?: number): ProsemirrorNode<S>;\n  /**\n   * Cut out the part of the document between the given positions, and\n   * return it as a `Slice` object.\n   */\n  slice(from: number, to?: number): Slice<S>;\n  /**\n   * Replace the part of the document between the given positions with\n   * the given slice. The slice must 'fit', meaning its open sides\n   * must be able to connect to the surrounding content, and its\n   * content nodes must be valid children for the node they are placed\n   * into. If any of this is violated, an error of type\n   * [`ReplaceError`](#model.ReplaceError) is thrown.\n   */\n  replace(from: number, to: number, slice: Slice<S>): ProsemirrorNode<S>;\n  /**\n   * Find the node starting at the given position.\n   */\n  nodeAt(pos: number): ProsemirrorNode<S> | null | undefined;\n  /**\n   * Find the (direct) child node after the given offset, if any,\n   * and return it along with its index and offset relative to this\n   * node.\n   */\n  childAfter(pos: number): { node?: ProsemirrorNode<S> | null; index: number; offset: number };\n  /**\n   * Find the (direct) child node before the given offset, if any,\n   * and return it along with its index and offset relative to this\n   * node.\n   */\n  childBefore(pos: number): { node?: ProsemirrorNode<S> | null; index: number; offset: number };\n  /**\n   * Resolve the given position in the document, returning an\n   * [object](#model.ResolvedPos) with information about its context.\n   */\n  resolve(pos: number): ResolvedPos<S>;\n  /**\n   * Test whether a mark of the given type occurs in this document\n   * between the two given positions.\n   */\n  rangeHasMark(from: number, to: number, type: MarkType<S>): boolean;\n  /**\n   * True when this is a block (non-inline node)\n   */\n  isBlock: boolean;\n  /**\n   * True when this is a textblock node, a block node with inline\n   * content.\n   */\n  isTextblock: boolean;\n  /**\n   * True when this node has inline content.\n   */\n  inlineContent: boolean;\n  /**\n   * True when this is an inline node (a text node or a node that can\n   * appear among text).\n   */\n  isInline: boolean;\n  /**\n   * True when this is a text node.\n   */\n  isText: boolean;\n  /**\n   * True when this is a leaf node.\n   */\n  isLeaf: boolean;\n  /**\n   * True when this is an atom, i.e. when it does not have directly\n   * editable content. This is usually the same as `isLeaf`, but can\n   * be configured with the [`atom` property](#model.NodeSpec.atom) on\n   * a node's spec (typically used when the node is displayed as an\n   * uneditable [node view](#view.NodeView)).\n   */\n  isAtom: boolean;\n  /**\n   * Return a string representation of this node for debugging\n   * purposes.\n   */\n  toString(): string;\n  /**\n   * Get the content match in this node at the given index.\n   */\n  contentMatchAt(index: number): ContentMatch<S>;\n  /**\n   * Test whether replacing the range between `from` and `to` (by\n   * child index) with the given replacement fragment (which defaults\n   * to the empty fragment) would leave the node's content valid. You\n   * can optionally pass `start` and `end` indices into the\n   * replacement fragment.\n   */\n  canReplace(\n    from: number,\n    to: number,\n    replacement?: Fragment<S>,\n    start?: number,\n    end?: number\n  ): boolean;\n  /**\n   * Test whether replacing the range `from` to `to` (by index) with a\n   * node of the given type.\n   */\n  canReplaceWith(from: number, to: number, type: NodeType<S>, marks?: Array<Mark<S>>): boolean;\n  /**\n   * Test whether the given node's content could be appended to this\n   * node. If that node is empty, this will only return true if there\n   * is at least one node type that can appear in both nodes (to avoid\n   * merging completely incompatible nodes).\n   */\n  canAppend(other: ProsemirrorNode<S>): boolean;\n  /**\n   * Check whether this node and its descendants conform to the\n   * schema, and raise error when they do not.\n   */\n  check(): void;\n  /**\n   * Return a JSON-serializeable representation of this node.\n   */\n  toJSON(): { [key: string]: any };\n  /**\n   * Deserialize a node from its JSON representation.\n   */\n  static fromJSON<S extends Schema = any>(\n    schema: S,\n    json: { [key: string]: any }\n  ): ProsemirrorNode<S>;\n}\nexport { ProsemirrorNode as Node };\n/**\n * Error type raised by [`Node.replace`](#model.Node.replace) when\n * given an invalid replacement.\n */\nexport class ReplaceError extends Error { }\n/**\n * A slice represents a piece cut out of a larger document. It\n * stores not only a fragment, but also the depth up to which nodes on\n * both side are ‘open’ (cut through).\n */\nexport class Slice<S extends Schema = any> {\n  /**\n   * Create a slice. When specifying a non-zero open depth, you must\n   * make sure that there are nodes of at least that depth at the\n   * appropriate side of the fragment—i.e. if the fragment is an empty\n   * paragraph node, `openStart` and `openEnd` can't be greater than\n   * 1.\n   *\n   * It is not necessary for the content of open nodes to conform to\n   * the schema's content constraints, though it should be a valid\n   * start/end/middle for such a node, depending on which sides are\n   * open.\n   */\n  constructor(content: Fragment<S>, openStart: number, openEnd: number);\n  /**\n   * The slice's content.\n   */\n  content: Fragment<S>;\n  /**\n   * The open depth at the start.\n   */\n  openStart: number;\n  /**\n   * The open depth at the end.\n   */\n  openEnd: number;\n  /**\n   * The size this slice would add when inserted into a document.\n   */\n  size: number;\n  /**\n   * Tests whether this slice is equal to another slice.\n   */\n  eq(other: Slice<S>): boolean;\n  /**\n   * Convert a slice to a JSON-serializable representation.\n   */\n  toJSON(): { [key: string]: any } | null | undefined;\n  /**\n   * Deserialize a slice from its JSON representation.\n   */\n  static fromJSON<S extends Schema = any>(schema: S, json?: { [key: string]: any }): Slice<S>;\n  /**\n   * Create a slice from a fragment by taking the maximum possible\n   * open value on both side of the fragment.\n   */\n  static maxOpen<S extends Schema = any>(\n    fragment: Fragment<S>,\n    openIsolating?: boolean\n  ): Slice<S>;\n  /**\n   * The empty slice.\n   */\n  static empty: Slice;\n}\n/**\n * You can [_resolve_](#model.Node.resolve) a position to get more\n * information about it. Objects of this class represent such a\n * resolved position, providing various pieces of context information,\n * and some helper methods.\n *\n * Throughout this interface, methods that take an optional `depth`\n * parameter will interpret undefined as `this.depth` and negative\n * numbers as `this.depth + value`.\n */\nexport class ResolvedPos<S extends Schema = any> {\n  /**\n   * The position that was resolved.\n   */\n  pos: number;\n  /**\n   * The number of levels the parent node is from the root. If this\n   * position points directly into the root node, it is 0. If it\n   * points into a top-level paragraph, 1, and so on.\n   */\n  depth: number;\n  /**\n   * The offset this position has into its parent node.\n   */\n  parentOffset: number;\n  /**\n   * The parent node that the position points into. Note that even if\n   * a position points into a text node, that node is not considered\n   * the parent—text nodes are ‘flat’ in this model, and have no content.\n   */\n  parent: ProsemirrorNode<S>;\n  /**\n   * The root node in which the position was resolved.\n   */\n  doc: ProsemirrorNode<S>;\n  /**\n   * The ancestor node at the given level. `p.node(p.depth)` is the\n   * same as `p.parent`.\n   */\n  node(depth?: number): ProsemirrorNode<S>;\n  /**\n   * The index into the ancestor at the given level. If this points at\n   * the 3rd node in the 2nd paragraph on the top level, for example,\n   * `p.index(0)` is 2 and `p.index(1)` is 3.\n   */\n  index(depth?: number): number;\n  /**\n   * The index pointing after this position into the ancestor at the\n   * given level.\n   */\n  indexAfter(depth?: number): number;\n  /**\n   * The (absolute) position at the start of the node at the given\n   * level.\n   */\n  start(depth?: number): number;\n  /**\n   * The (absolute) position at the end of the node at the given\n   * level.\n   */\n  end(depth?: number): number;\n  /**\n   * The (absolute) position directly before the wrapping node at the\n   * given level, or, when `level` is `this.depth + 1`, the original\n   * position.\n   */\n  before(depth?: number): number;\n  /**\n   * The (absolute) position directly after the wrapping node at the\n   * given level, or the original position when `level` is `this.depth + 1`.\n   */\n  after(depth?: number): number;\n  /**\n   * When this position points into a text node, this returns the\n   * distance between the position and the start of the text node.\n   * Will be zero for positions that point between nodes.\n   */\n  textOffset: number;\n  /**\n   * Get the node directly after the position, if any. If the position\n   * points into a text node, only the part of that node after the\n   * position is returned.\n   */\n  nodeAfter?: ProsemirrorNode<S> | null;\n  /**\n   * Get the node directly before the position, if any. If the\n   * position points into a text node, only the part of that node\n   * before the position is returned.\n   */\n  nodeBefore?: ProsemirrorNode<S> | null;\n  /**\n   * Get the marks at this position, factoring in the surrounding\n   * marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n   * position is at the start of a non-empty node, the marks of the\n   * node after it (if any) are returned.\n   */\n  marks(): Array<Mark<S>>;\n  /**\n   * Get the marks after the current position, if any, except those\n   * that are non-inclusive and not present at position `$end`. This\n   * is mostly useful for getting the set of marks to preserve after a\n   * deletion. Will return `null` if this position is at the end of\n   * its parent node or its parent node isn't a textblock (in which\n   * case no marks should be preserved).\n   */\n  marksAcross($end: ResolvedPos<S>): Array<Mark<S>> | null | undefined;\n  /**\n   * The depth up to which this position and the given (non-resolved)\n   * position share the same parent nodes.\n   */\n  sharedDepth(pos: number): number;\n  /**\n   * Returns a range based on the place where this position and the\n   * given position diverge around block content. If both point into\n   * the same textblock, for example, a range around that textblock\n   * will be returned. If they point into different blocks, the range\n   * around those blocks in their shared ancestor is returned. You can\n   * pass in an optional predicate that will be called with a parent\n   * node to see if a range into that parent is acceptable.\n   */\n  blockRange(\n    other?: ResolvedPos<S>,\n    pred?: (p: ProsemirrorNode<S>) => boolean\n  ): NodeRange<S> | null | undefined;\n  /**\n   * Query whether the given position shares the same parent node.\n   */\n  sameParent(other: ResolvedPos<S>): boolean;\n  /**\n   * Return the greater of this and the given position.\n   */\n  max(other: ResolvedPos<S>): ResolvedPos<S>;\n  /**\n   * Return the smaller of this and the given position.\n   */\n  min(other: ResolvedPos<S>): ResolvedPos<S>;\n}\n/**\n * Represents a flat range of content, i.e. one that starts and\n * ends in the same node.\n */\nexport class NodeRange<S extends Schema = any> {\n  /**\n   * Construct a node range. `$from` and `$to` should point into the\n   * same node until at least the given `depth`, since a node range\n   * denotes an adjacent set of nodes in a single parent node.\n   */\n  constructor($from: ResolvedPos<S>, $to: ResolvedPos<S>, depth: number);\n  /**\n   * A resolved position along the start of the\n   * content. May have a `depth` greater than this object's `depth`\n   * property, since these are the positions that were used to\n   * compute the range, not re-resolved positions directly at its\n   * boundaries.\n   */\n  $from: ResolvedPos<S>;\n  /**\n   * A position along the end of the content. See\n   * caveat for [`$from`](#model.NodeRange.$from).\n   */\n  $to: ResolvedPos<S>;\n  /**\n   * The depth of the node that this range points into.\n   */\n  depth: number;\n  /**\n   * The position at the start of the range.\n   */\n  start: number;\n  /**\n   * The position at the end of the range.\n   */\n  end: number;\n  /**\n   * The parent node that the range points into.\n   */\n  parent: ProsemirrorNode<S>;\n  /**\n   * The start index of the range in the parent node.\n   */\n  startIndex: number;\n  /**\n   * The end index of the range in the parent node.\n   */\n  endIndex: number;\n}\n/**\n * Node types are objects allocated once per `Schema` and used to\n * [tag](#model.Node.type) `Node` instances. They contain information\n * about the node type, such as its name and what kind of node it\n * represents.\n */\nexport class NodeType<S extends Schema = any> {\n  /**\n   * The name the node type has in this schema.\n   */\n  name: string;\n  /**\n   * A link back to the `Schema` the node type belongs to.\n   */\n  schema: S;\n  /**\n   * The spec that this type is based on\n   */\n  spec: NodeSpec;\n  /**\n   * The starting match of the node type's content expression.\n   */\n  contentMatch: ContentMatch<S>;\n  /**\n   * True if this node type has inline content.\n   */\n  inlineContent: boolean;\n  /**\n   * True if this is a block type\n   */\n  isBlock: boolean;\n  /**\n   * True if this is the text node type.\n   */\n  isText: boolean;\n  /**\n   * True if this is an inline type.\n   */\n  isInline: boolean;\n  /**\n   * True if this is a textblock type, a block that contains inline\n   * content.\n   */\n  isTextblock: boolean;\n  /**\n   * True for node types that allow no content.\n   */\n  isLeaf: boolean;\n  /**\n   * True when this node is an atom, i.e. when it does not have\n   * directly editable content.\n   */\n  isAtom: boolean;\n  /**\n   * Create a `Node` of this type. The given attributes are\n   * checked and defaulted (you can pass `null` to use the type's\n   * defaults entirely, if no required attributes exist). `content`\n   * may be a `Fragment`, a node, an array of nodes, or\n   * `null`. Similarly `marks` may be `null` to default to the empty\n   * set of marks.\n   */\n  create(\n    attrs?: { [key: string]: any } | null,\n    content?: Fragment<S> | ProsemirrorNode<S> | Array<ProsemirrorNode<S>>,\n    marks?: Array<Mark<S>>\n  ): ProsemirrorNode<S>;\n  /**\n   * Like [`create`](#model.NodeType.create), but check the given content\n   * against the node type's content restrictions, and throw an error\n   * if it doesn't match.\n   */\n  createChecked(\n    attrs?: { [key: string]: any } | null,\n    content?: Fragment<S> | ProsemirrorNode<S> | Array<ProsemirrorNode<S>>,\n    marks?: Array<Mark<S>>\n  ): ProsemirrorNode<S>;\n  /**\n   * Like [`create`](#model.NodeType.create), but see if it is necessary to\n   * add nodes to the start or end of the given fragment to make it\n   * fit the node. If no fitting wrapping can be found, return null.\n   * Note that, due to the fact that required nodes can always be\n   * created, this will always succeed if you pass null or\n   * `Fragment.empty` as content.\n   */\n  createAndFill(\n    attrs?: { [key: string]: any } | null,\n    content?: Fragment<S> | ProsemirrorNode<S> | Array<ProsemirrorNode<S>>,\n    marks?: Array<Mark<S>>\n  ): ProsemirrorNode<S> | null | undefined;\n  /**\n   * Returns true if the given fragment is valid content for this node\n   * type with the given attributes.\n   */\n  validContent(content: Fragment<S>): boolean;\n  /**\n   * Check whether the given mark type is allowed in this node.\n   */\n  allowsMarkType(markType: MarkType<S>): boolean;\n  /**\n   * Test whether the given set of marks are allowed in this node.\n   */\n  allowsMarks(marks: Array<Mark<S>>): boolean;\n  /**\n   * Removes the marks that are not allowed in this node from the given set.\n   */\n  allowedMarks(marks: Array<Mark<S>>): Array<Mark<S>>;\n}\n/**\n * Like nodes, marks (which are associated with nodes to signify\n * things like emphasis or being part of a link) are\n * [tagged](#model.Mark.type) with type objects, which are\n * instantiated once per `Schema`.\n */\nexport class MarkType<S extends Schema = any> {\n  /**\n   * The name of the mark type.\n   */\n  name: string;\n  /**\n   * The schema that this mark type instance is part of.\n   */\n  schema: S;\n  /**\n   * The spec on which the type is based.\n   */\n  spec: MarkSpec;\n  /**\n   * Create a mark of this type. `attrs` may be `null` or an object\n   * containing only some of the mark's attributes. The others, if\n   * they have defaults, will be added.\n   */\n  create(attrs?: { [key: string]: any }): Mark<S>;\n  /**\n   * When there is a mark of this type in the given set, a new set\n   * without it is returned. Otherwise, the input set is returned.\n   */\n  removeFromSet(set: Array<Mark<S>>): Array<Mark<S>>;\n  /**\n   * Tests whether there is a mark of this type in the given set.\n   */\n  isInSet(set: Array<Mark<S>>): Mark<S> | null | undefined;\n  /**\n   * Queries whether a given mark type is\n   * [excluded](#model.MarkSpec.excludes) by this one.\n   */\n  excludes(other: MarkType<S>): boolean;\n}\n/**\n * An object describing a schema, as passed to the [`Schema`](#model.Schema)\n * constructor.\n */\nexport interface SchemaSpec<N extends string = any, M extends string = any> {\n  /**\n   * The node types in this schema. Maps names to\n   * [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n   * associated with that name. Their order is significant—it\n   * determines which [parse rules](#model.NodeSpec.parseDOM) take\n   * precedence by default, and which nodes come first in a given\n   * [group](#model.NodeSpec.group).\n   */\n  nodes: { [name in N]: NodeSpec } | OrderedMap<NodeSpec>;\n  /**\n   * The mark types that exist in this schema. The order in which they\n   * are provided determines the order in which [mark\n   * sets](#model.Mark.addToSet) are sorted and in which [parse\n   * rules](#model.MarkSpec.parseDOM) are tried.\n   */\n  marks?: { [name in M]: MarkSpec } | OrderedMap<MarkSpec> | null;\n  /**\n   * The name of the default top-level node for the schema. Defaults\n   * to `\"doc\"`.\n   */\n  topNode?: string | null;\n}\nexport interface NodeSpec {\n  /**\n   * The content expression for this node, as described in the [schema\n   * guide](/docs/guide/#schema.content_expressions). When not given,\n   * the node does not allow any content.\n   */\n  content?: string | null;\n  /**\n   * The marks that are allowed inside of this node. May be a\n   * space-separated string referring to mark names or groups, `\"_\"`\n   * to explicitly allow all marks, or `\"\"` to disallow marks. When\n   * not given, nodes with inline content default to allowing all\n   * marks, other nodes default to not allowing marks.\n   */\n  marks?: string | null;\n  /**\n   * The group or space-separated groups to which this node belongs,\n   * which can be referred to in the content expressions for the\n   * schema.\n   */\n  group?: string | null;\n  /**\n   * Should be set to true for inline nodes. (Implied for text nodes.)\n   */\n  inline?: boolean | null;\n  /**\n   * Can be set to true to indicate that, though this isn't a [leaf\n   * node](#model.NodeType.isLeaf), it doesn't have directly editable\n   * content and should be treated as a single unit in the view.\n   */\n  atom?: boolean | null;\n  /**\n   * The attributes that nodes of this type get.\n   */\n  attrs?: { [name: string]: AttributeSpec } | null;\n  /**\n   * Controls whether nodes of this type can be selected as a [node\n   * selection](#state.NodeSelection). Defaults to true for non-text\n   * nodes.\n   */\n  selectable?: boolean | null;\n  /**\n   * Determines whether nodes of this type can be dragged without\n   * being selected. Defaults to false.\n   */\n  draggable?: boolean | null;\n  /**\n   * Can be used to indicate that this node contains code, which\n   * causes some commands to behave differently.\n   */\n  code?: boolean | null;\n  /**\n   * Determines whether this node is considered an important parent\n   * node during replace operations (such as paste). Non-defining (the\n   * default) nodes get dropped when their entire content is replaced,\n   * whereas defining nodes persist and wrap the inserted content.\n   * Likewise, in _inserted_ content the defining parents of the\n   * content are preserved when possible. Typically,\n   * non-default-paragraph textblock types, and possibly list items,\n   * are marked as defining.\n   */\n  defining?: boolean | null;\n  /**\n   * When enabled (default is false), the sides of nodes of this type\n   * count as boundaries that regular editing operations, like\n   * backspacing or lifting, won't cross. An example of a node that\n   * should probably have this enabled is a table cell.\n   */\n  isolating?: boolean | null;\n  /**\n   * Defines the default way a node of this type should be serialized\n   * to DOM/HTML (as used by\n   * [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n   * Should return a DOM node or an [array\n   * structure](#model.DOMOutputSpec) that describes one, with an\n   * optional number zero (“hole”) in it to indicate where the node's\n   * content should be inserted.\n   *\n   * For text nodes, the default is to create a text DOM node. Though\n   * it is possible to create a serializer where text is rendered\n   * differently, this is not supported inside the editor, so you\n   * shouldn't override that in your text node spec.\n   */\n  toDOM?: ((node: ProsemirrorNode) => DOMOutputSpec) | null;\n  /**\n   * Associates DOM parser information with this node, which can be\n   * used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n   * automatically derive a parser. The `node` field in the rules is\n   * implied (the name of this node will be filled in automatically).\n   * If you supply your own parser, you do not need to also specify\n   * parsing rules in your schema.\n   */\n  parseDOM?: ParseRule[] | null;\n  /**\n   * Defines the default way a node of this type should be serialized\n   * to a string representation for debugging (e.g. in error messages).\n   */\n  toDebugString?: ((node: ProsemirrorNode) => string) | null;\n  /**\n   * Allow specifying arbitrary fields on a NodeSpec.\n   */\n  [key: string]: any;\n}\nexport interface MarkSpec {\n  /**\n   * The attributes that marks of this type get.\n   */\n  attrs?: { [name: string]: AttributeSpec } | null;\n  /**\n   * Whether this mark should be active when the cursor is positioned\n   * at its end (or at its start when that is also the start of the\n   * parent node). Defaults to true.\n   */\n  inclusive?: boolean | null;\n  /**\n   * Determines which other marks this mark can coexist with. Should\n   * be a space-separated strings naming other marks or groups of marks.\n   * When a mark is [added](#model.Mark.addToSet) to a set, all marks\n   * that it excludes are removed in the process. If the set contains\n   * any mark that excludes the new mark but is not, itself, excluded\n   * by the new mark, the mark can not be added an the set. You can\n   * use the value `\"_\"` to indicate that the mark excludes all\n   * marks in the schema.\n   *\n   * Defaults to only being exclusive with marks of the same type. You\n   * can set it to an empty string (or any string not containing the\n   * mark's own name) to allow multiple marks of a given type to\n   * coexist (as long as they have different attributes).\n   */\n  excludes?: string | null;\n  /**\n   * The group or space-separated groups to which this mark belongs.\n   */\n  group?: string | null;\n  /**\n   * Determines whether marks of this type can span multiple adjacent\n   * nodes when serialized to DOM/HTML. Defaults to true.\n   */\n  spanning?: boolean | null;\n  /**\n   * Defines the default way marks of this type should be serialized\n   * to DOM/HTML.\n   */\n  toDOM?: ((mark: Mark, inline: boolean) => DOMOutputSpec) | null;\n  /**\n   * Associates DOM parser information with this mark (see the\n   * corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n   * `mark` field in the rules is implied.\n   */\n  parseDOM?: ParseRule[] | null;\n  /**\n   * Allow specifying arbitrary fields on a MarkSpec.\n   */\n  [key: string]: any;\n}\n/**\n * Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n * marks.\n */\nexport interface AttributeSpec {\n  /**\n   * The default value for this attribute, to use when no explicit\n   * value is provided. Attributes that have no default must be\n   * provided whenever a node or mark of a type that has them is\n   * created.\n   */\n  default?: any;\n}\n/**\n * A document schema. Holds [node](#model.NodeType) and [mark\n * type](#model.MarkType) objects for the nodes and marks that may\n * occur in conforming documents, and provides functionality for\n * creating and deserializing such documents.\n */\nexport class Schema<N extends string = any, M extends string = any> {\n  /**\n   * Construct a schema from a schema [specification](#model.SchemaSpec).\n   */\n  constructor(spec: SchemaSpec<N, M>);\n  /**\n   * The [spec](#model.SchemaSpec) on which the schema is based,\n   * with the added guarantee that its `nodes` and `marks`\n   * properties are\n   * [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n   * (not raw objects).\n   */\n  spec: SchemaSpec<N, M>;\n  /**\n   * An object mapping the schema's node names to node type objects.\n   */\n  nodes: { [name in N]: NodeType<Schema<N, M>> } & { [key: string]: NodeType<Schema<N, M>> };\n  /**\n   * A map from mark names to mark type objects.\n   */\n  marks: { [name in M]: MarkType<Schema<N, M>> } & { [key: string]: MarkType<Schema<N, M>> };\n  /**\n   * The type of the [default top node](#model.SchemaSpec.topNode)\n   * for this schema.\n   */\n  topNodeType: NodeType<Schema<N, M>>;\n  /**\n   * An object for storing whatever values modules may want to\n   * compute and cache per schema. (If you want to store something\n   * in it, try to use property names unlikely to clash.)\n   */\n  cached: { [key: string]: any };\n  /**\n   * Create a node in this schema. The `type` may be a string or a\n   * `NodeType` instance. Attributes will be extended\n   * with defaults, `content` may be a `Fragment`,\n   * `null`, a `Node`, or an array of nodes.\n   */\n  node(\n    type: string | NodeType<Schema<N, M>>,\n    attrs?: { [key: string]: any },\n    content?:\n      | Fragment<Schema<N, M>>\n      | ProsemirrorNode<Schema<N, M>>\n      | Array<ProsemirrorNode<Schema<N, M>>>,\n    marks?: Array<Mark<Schema<N, M>>>\n  ): ProsemirrorNode<Schema<N, M>>;\n  /**\n   * Create a text node in the schema. Empty text nodes are not\n   * allowed.\n   */\n  text(text: string, marks?: Array<Mark<Schema<N, M>>>): ProsemirrorNode<Schema<N, M>>;\n  /**\n   * Create a mark with the given type and attributes.\n   */\n  mark(type: string | MarkType<Schema<N, M>>, attrs?: { [key: string]: any }): Mark<Schema<N, M>>;\n  /**\n   * Deserialize a node from its JSON representation. This method is\n   * bound.\n   */\n  nodeFromJSON(json: { [key: string]: any }): ProsemirrorNode<Schema<N, M>>;\n  /**\n   * Deserialize a mark from its JSON representation. This method is\n   * bound.\n   */\n  markFromJSON(json: { [key: string]: any }): Mark<Schema<N, M>>;\n}\nexport interface DOMOutputSpecArray {\n  0: string;\n  1?: DOMOutputSpec | 0 | { [attr: string]: string };\n  2?: DOMOutputSpec | 0;\n  3?: DOMOutputSpec | 0;\n  4?: DOMOutputSpec | 0;\n  5?: DOMOutputSpec | 0;\n  6?: DOMOutputSpec | 0;\n  7?: DOMOutputSpec | 0;\n  8?: DOMOutputSpec | 0;\n  9?: DOMOutputSpec | 0;\n}\nexport type DOMOutputSpec = string | Node | DOMOutputSpecArray;\n/**\n * A DOM serializer knows how to convert ProseMirror nodes and\n * marks of various types to DOM nodes.\n */\nexport class DOMSerializer<S extends Schema = any> {\n  /**\n   * Create a serializer. `nodes` should map node names to functions\n   * that take a node and return a description of the corresponding\n   * DOM. `marks` does the same for mark names, but also gets an\n   * argument that tells it whether the mark's content is block or\n   * inline content (for typical use, it'll always be inline). A mark\n   * serializer may be `null` to indicate that marks of that type\n   * should not be serialized.\n   */\n  constructor(\n    nodes: { [name: string]: (node: ProsemirrorNode<S>) => DOMOutputSpec },\n    marks: { [name: string]: (mark: Mark<S>, inline: boolean) => DOMOutputSpec }\n  );\n  /**\n   * The node serialization functions.\n   */\n  nodes: { [name: string]: (node: ProsemirrorNode<S>) => DOMOutputSpec };\n  /**\n   * The mark serialization functions.\n   */\n  marks: { [name: string]: (mark: Mark<S>, inline: boolean) => DOMOutputSpec };\n  /**\n   * Serialize the content of this fragment to a DOM fragment. When\n   * not in the browser, the `document` option, containing a DOM\n   * document, should be passed so that the serializer can create\n   * nodes.\n   */\n  serializeFragment(fragment: Fragment<S>, options?: { [key: string]: any }): DocumentFragment;\n  /**\n   * Serialize this node to a DOM node. This can be useful when you\n   * need to serialize a part of a document, as opposed to the whole\n   * document. To serialize a whole document, use\n   * [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n   * its [content](#model.Node.content).\n   */\n  serializeNode(node: ProsemirrorNode<S>, options?: { [key: string]: any }): Node;\n  /**\n   * Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n   * the spec has a hole (zero) in it, `contentDOM` will point at the\n   * node with the hole.\n   */\n  static renderSpec(\n    doc: Document,\n    structure: DOMOutputSpec\n  ): { dom: Node; contentDOM?: Node | null };\n  /**\n   * Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n   * properties in a schema's node and mark specs.\n   */\n  static fromSchema<S extends Schema = any>(schema: S): DOMSerializer<S>;\n}\n"
    },
    "prosemirror-schema-list": {
      "index.d.ts": "// Type definitions for prosemirror-schema-list 1.0\r\n// Project: https://github.com/ProseMirror/prosemirror-schema-list\r\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\r\n//                 David Hahn <https://github.com/davidka>\r\n//                 Tim Baumann <https://github.com/timjb>\r\n//                 Patrick Simmelbauer <https://github.com/patsimm>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n// TypeScript Version: 2.3\r\n\r\nimport OrderedMap = require('orderedmap');\r\nimport { NodeSpec, NodeType, Schema } from 'prosemirror-model';\r\nimport { EditorState, Transaction } from 'prosemirror-state';\r\n\r\n/**\r\n * An ordered list [node spec](#model.NodeSpec). Has a single\r\n * attribute, `order`, which determines the number at which the list\r\n * starts counting, and defaults to 1. Represented as an `<ol>`\r\n * element.\r\n */\r\nexport let orderedList: NodeSpec;\r\n/**\r\n * A bullet list node spec, represented in the DOM as `<ul>`.\r\n */\r\nexport let bulletList: NodeSpec;\r\n/**\r\n * A list item (`<li>`) spec.\r\n */\r\nexport let listItem: NodeSpec;\r\n/**\r\n * Convenience function for adding list-related node types to a map\r\n * specifying the nodes for a schema. Adds\r\n * [`orderedList`](#schema-list.orderedList) as `\"ordered_list\"`,\r\n * [`bulletList`](#schema-list.bulletList) as `\"bullet_list\"`, and\r\n * [`listItem`](#schema-list.listItem) as `\"list_item\"`.\r\n *\r\n * `itemContent` determines the content expression for the list items.\r\n * If you want the commands defined in this module to apply to your\r\n * list structure, it should have a shape like `\"paragraph block*\"` or\r\n * `\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\r\n * given to assign a group name to the list node types, for example\r\n * `\"block\"`.\r\n */\r\nexport function addListNodes(\r\n  nodes: OrderedMap<NodeSpec>,\r\n  itemContent: string,\r\n  listGroup?: string\r\n): OrderedMap<NodeSpec>;\r\n/**\r\n * Returns a command function that wraps the selection in a list with\r\n * the given type an attributes. If `dispatch` is null, only return a\r\n * value to indicate whether this is possible, but don't actually\r\n * perform the change.\r\n */\r\nexport function wrapInList<S extends Schema = any>(\r\n  listType: NodeType<S>,\r\n  attrs?: { [key: string]: any }\r\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\r\n/**\r\n * Build a command that splits a non-empty textblock at the top level\r\n * of a list item by also splitting that list item.\r\n */\r\nexport function splitListItem<S extends Schema = any>(\r\n  itemType: NodeType<S>\r\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\r\n/**\r\n * Create a command to lift the list item around the selection up into\r\n * a wrapping list.\r\n */\r\nexport function liftListItem<S extends Schema = any>(\r\n  itemType: NodeType<S>\r\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\r\n/**\r\n * Create a command to sink the list item around the selection down\r\n * into an inner list.\r\n */\r\nexport function sinkListItem<S extends Schema = any>(\r\n  itemType: NodeType<S>\r\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\r\n"
    },
    "prosemirror-state": {
      "index.d.ts": "// Type definitions for prosemirror-state 1.2\n// Project: https://github.com/ProseMirror/prosemirror-state, https://github.com/prosemirror/prosemirror\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\n//                 David Hahn <https://github.com/davidka>\n//                 Tim Baumann <https://github.com/timjb>\n//                 Patrick Simmelbauer <https://github.com/patsimm>\n//                 Mike Morearty <https://github.com/mmorearty>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\nimport {\n  Mark,\n  MarkType,\n  Node as ProsemirrorNode,\n  ResolvedPos,\n  Schema,\n  Slice\n} from 'prosemirror-model';\nimport { Mappable, Mapping, Transform } from 'prosemirror-transform';\nimport { EditorProps, EditorView } from 'prosemirror-view';\n\n/**\n * This is the type passed to the [`Plugin`](#state.Plugin)\n * constructor. It provides a definition for a plugin.\n */\nexport interface PluginSpec<T = any, S extends Schema = any> {\n  /**\n   * The [view props](#view.EditorProps) added by this plugin. Props\n   * that are functions will be bound to have the plugin instance as\n   * their `this` binding.\n   */\n  props?: EditorProps<Plugin<T, S>, S> | null;\n  /**\n   * Allows a plugin to define a [state field](#state.StateField), an\n   * extra slot in the state object in which it can keep its own data.\n   */\n  state?: StateField<T, S> | null;\n  /**\n   * Can be used to make this a keyed plugin. You can have only one\n   * plugin with a given key in a given state, but it is possible to\n   * access the plugin's configuration and state through the key,\n   * without having access to the plugin instance object.\n   */\n  key?: PluginKey<T, S> | null;\n  /**\n   * When the plugin needs to interact with the editor view, or\n   * set something up in the DOM, use this field. The function\n   * will be called when the plugin's state is associated with an\n   * editor view.\n   */\n  view?:\n  | ((\n    p: EditorView<S>\n  ) => {\n      update?: ((view: EditorView<S>, prevState: EditorState<S>) => void) | null;\n      destroy?: (() => void) | null;\n    })\n  | null;\n  /**\n   * When present, this will be called before a transaction is\n   * applied by the state, allowing the plugin to cancel it (by\n   * returning false).\n   */\n  filterTransaction?: ((p1: Transaction<S>, p2: EditorState<S>) => boolean) | null;\n  /**\n   * Allows the plugin to append another transaction to be applied\n   * after the given array of transactions. When another plugin\n   * appends a transaction after this was called, it is called again\n   * with the new state and new transactions—but only the new\n   * transactions, i.e. it won't be passed transactions that it\n   * already saw.\n   */\n  appendTransaction?:\n  | ((\n    transactions: Array<Transaction<S>>,\n    oldState: EditorState<S>,\n    newState: EditorState<S>\n  ) => Transaction<S> | null | undefined | void)\n  | null;\n}\n/**\n * Plugins bundle functionality that can be added to an editor.\n * They are part of the [editor state](#state.EditorState) and\n * may influence that state and the view that contains it.\n */\nexport class Plugin<T = any, S extends Schema = any> {\n  /**\n   * Create a plugin.\n   */\n  constructor(spec: PluginSpec<T, S>);\n  /**\n   * The [props](#view.EditorProps) exported by this plugin.\n   */\n  props: EditorProps<Plugin<T, S>, S>;\n  /**\n   * The plugin's [spec object](#state.PluginSpec).\n   */\n  spec: PluginSpec<T, S>;\n  /**\n   * Extract the plugin's state field from an editor state.\n   */\n  getState(state: EditorState<S>): T;\n}\n/**\n * A plugin spec may provide a state field (under its\n * [`state`](#state.PluginSpec.state) property) of this type, which\n * describes the state it wants to keep. Functions provided here are\n * always called with the plugin instance as their `this` binding.\n */\nexport interface StateField<T = any, S extends Schema = Schema> {\n  /**\n   * Initialize the value of the field. `config` will be the object\n   * passed to [`EditorState.create`](#state.EditorState^create). Note\n   * that `instance` is a half-initialized state instance, and will\n   * not have values for plugin fields initialized after this one.\n   */\n  init(this: Plugin<T, S>, config: { [key: string]: any }, instance: EditorState<S>): T;\n  /**\n   * Apply the given transaction to this state field, producing a new\n   * field value. Note that the `newState` argument is again a partially\n   * constructed state does not yet contain the state from plugins\n   * coming after this one.\n   */\n  apply(this: Plugin<T, S>, tr: Transaction<S>, value: T, oldState: EditorState<S>, newState: EditorState<S>): T;\n  /**\n   * Convert this field to JSON. Optional, can be left off to disable\n   * JSON serialization for the field.\n   */\n  toJSON?: ((this: Plugin<T, S>, value: T) => any) | null;\n  /**\n   * Deserialize the JSON representation of this field. Note that the\n   * `state` argument is again a half-initialized state.\n   */\n  fromJSON?: ((this: Plugin<T, S>, config: { [key: string]: any }, value: any, state: EditorState<S>) => T) | null;\n}\n/**\n * A key is used to [tag](#state.PluginSpec.key)\n * plugins in a way that makes it possible to find them, given an\n * editor state. Assigning a key does mean only one plugin of that\n * type can be active in a state.\n */\nexport class PluginKey<T = any, S extends Schema = any> {\n  /**\n   * Create a plugin key.\n   */\n  constructor(name?: string);\n  /**\n   * Get the active plugin with this key, if any, from an editor\n   * state.\n   */\n  get(state: EditorState<S>): Plugin<T, S> | null | undefined;\n  /**\n   * Get the plugin's state from an editor state.\n   */\n  getState(state: EditorState<S>): T | null | undefined;\n}\n/**\n * Superclass for editor selections. Every selection type should\n * extend this. Should not be instantiated directly.\n */\nexport class Selection<S extends Schema = any> {\n  /**\n   * Initialize a selection with the head and anchor and ranges. If no\n   * ranges are given, constructs a single range across `$anchor` and\n   * `$head`.\n   */\n  constructor($anchor: ResolvedPos<S>, $head: ResolvedPos<S>, ranges?: Array<SelectionRange<S>>);\n  /**\n   * The ranges covered by the selection.\n   */\n  ranges: Array<SelectionRange<S>>;\n  /**\n   * The resolved anchor of the selection (the side that stays in\n   * place when the selection is modified).\n   */\n  $anchor: ResolvedPos<S>;\n  /**\n   * The resolved head of the selection (the side that moves when\n   * the selection is modified).\n   */\n  $head: ResolvedPos<S>;\n  /**\n   * The selection's anchor, as an unresolved position.\n   */\n  anchor: number;\n  /**\n   * The selection's head.\n   */\n  head: number;\n  /**\n   * The lower bound of the selection's main range.\n   */\n  from: number;\n  /**\n   * The upper bound of the selection's main range.\n   */\n  to: number;\n  /**\n   * The resolved lower  bound of the selection's main range.\n   */\n  $from: ResolvedPos<S>;\n  /**\n   * The resolved upper bound of the selection's main range.\n   */\n  $to: ResolvedPos<S>;\n  /**\n   * Indicates whether the selection contains any content.\n   */\n  empty: boolean;\n  /**\n   * Test whether the selection is the same as another selection.\n   */\n  eq(p: Selection<S>): boolean;\n  /**\n   * Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n   * should be the new document to which we are mapping.\n   */\n  map(doc: ProsemirrorNode<S>, mapping: Mappable): Selection<S>;\n  /**\n   * Get the content of this selection as a slice.\n   */\n  content(): Slice<S>;\n  /**\n   * Replace the selection with a slice or, if no slice is given,\n   * delete the selection. Will append to the given transaction.\n   */\n  replace(tr: Transaction<S>, content?: Slice<S>): void;\n  /**\n   * Replace the selection with the given node, appending the changes\n   * to the given transaction.\n   */\n  replaceWith(tr: Transaction<S>, node: ProsemirrorNode<S>): void;\n  /**\n   * Convert the selection to a JSON representation. When implementing\n   * this for a custom selection class, make sure to give the object a\n   * `type` property whose value matches the ID under which you\n   * [registered](#state.Selection^jsonID) your class.\n   */\n  toJSON(): { [key: string]: any };\n  /**\n   * Get a [bookmark](#state.SelectionBookmark) for this selection,\n   * which is a value that can be mapped without having access to a\n   * current document, and later resolved to a real selection for a\n   * given document again. (This is used mostly by the history to\n   * track and restore old selections.) The default implementation of\n   * this method just converts the selection to a text selection and\n   * returns the bookmark for that.\n   */\n  getBookmark(): SelectionBookmark<S>;\n  /**\n   * Controls whether, when a selection of this type is active in the\n   * browser, the selected range should be visible to the user. Defaults\n   * to `true`.\n   */\n  visible: boolean;\n  /**\n   * Find a valid cursor or leaf node selection starting at the given\n   * position and searching back if `dir` is negative, and forward if\n   * positive. When `textOnly` is true, only consider cursor\n   * selections. Will return null when no valid selection position is\n   * found.\n   */\n  static findFrom<S extends Schema = any>(\n    $pos: ResolvedPos<S>,\n    dir: number,\n    textOnly?: boolean\n  ): Selection<S> | null | undefined;\n  /**\n   * Find a valid cursor or leaf node selection near the given\n   * position. Searches forward first by default, but if `bias` is\n   * negative, it will search backwards first.\n   */\n  static near<S extends Schema = any>($pos: ResolvedPos<S>, bias?: number): Selection<S>;\n  /**\n   * Find the cursor or leaf node selection closest to the start of\n   * the given document. Will return an\n   * [`AllSelection`](#state.AllSelection) if no valid position\n   * exists.\n   */\n  static atStart<S extends Schema = any>(doc: ProsemirrorNode<S>): Selection<S>;\n  /**\n   * Find the cursor or leaf node selection closest to the end of the\n   * given document.\n   */\n  static atEnd<S extends Schema = any>(doc: ProsemirrorNode<S>): Selection<S>;\n  /**\n   * Deserialize the JSON representation of a selection. Must be\n   * implemented for custom classes (as a static class method).\n   */\n  static fromJSON<S extends Schema = any>(\n    doc: ProsemirrorNode<S>,\n    json: { [key: string]: any }\n  ): Selection<S>;\n  /**\n   * To be able to deserialize selections from JSON, custom selection\n   * classes must register themselves with an ID string, so that they\n   * can be disambiguated. Try to pick something that's unlikely to\n   * clash with classes from other modules.\n   */\n  static jsonID(id: string, selectionClass: { new(...args: any[]): Selection }): void;\n}\n/**\n * A lightweight, document-independent representation of a selection.\n * You can define a custom bookmark type for a custom selection class\n * to make the history handle it well.\n */\nexport interface SelectionBookmark<S extends Schema = any> {\n  /**\n   * Map the bookmark through a set of changes.\n   */\n  map(mapping: Mapping): SelectionBookmark<S>;\n  /**\n   * Resolve the bookmark to a real selection again. This may need to\n   * do some error checking and may fall back to a default (usually\n   * [`TextSelection.between`](#state.TextSelection^between)) if\n   * mapping made the bookmark invalid.\n   */\n  resolve(doc: ProsemirrorNode<S>): Selection<S>;\n}\n/**\n * Represents a selected range in a document.\n */\nexport class SelectionRange<S extends Schema = any> {\n  constructor($from: ResolvedPos<S>, $to: ResolvedPos<S>);\n  /**\n   * The lower bound of the range.\n   */\n  $from: ResolvedPos<S>;\n  /**\n   * The upper bound of the range.\n   */\n  $to: ResolvedPos<S>;\n}\n/**\n * A text selection represents a classical editor selection, with\n * a head (the moving side) and anchor (immobile side), both of which\n * point into textblock nodes. It can be empty (a regular cursor\n * position).\n */\nexport class TextSelection<S extends Schema = any> extends Selection<S> {\n  /**\n   * Construct a text selection between the given points.\n   */\n  constructor($anchor: ResolvedPos<S>, $head?: ResolvedPos<S>);\n  /**\n   * Returns a resolved position if this is a cursor selection (an\n   * empty text selection), and null otherwise.\n   */\n  $cursor?: ResolvedPos<S> | null;\n  /**\n   * Create a text selection from non-resolved positions.\n   */\n  static create<S extends Schema = any>(\n    doc: ProsemirrorNode<S>,\n    anchor: number,\n    head?: number\n  ): TextSelection<S>;\n  /**\n   * Return a text selection that spans the given positions or, if\n   * they aren't text positions, find a text selection near them.\n   * `bias` determines whether the method searches forward (default)\n   * or backwards (negative number) first. Will fall back to calling\n   * [`Selection.near`](#state.Selection^near) when the document\n   * doesn't contain a valid text position.\n   */\n  static between<S extends Schema = any>(\n    $anchor: ResolvedPos<S>,\n    $head: ResolvedPos<S>,\n    bias?: number\n  ): Selection<S>;\n}\n/**\n * A node selection is a selection that points at a single node.\n * All nodes marked [selectable](#model.NodeSpec.selectable) can be\n * the target of a node selection. In such a selection, `from` and\n * `to` point directly before and after the selected node, `anchor`\n * equals `from`, and `head` equals `to`..\n */\nexport class NodeSelection<S extends Schema = any> extends Selection<S> {\n  /**\n   * Create a node selection. Does not verify the validity of its\n   * argument.\n   */\n  constructor($pos: ResolvedPos<S>);\n  /**\n   * The selected node.\n   */\n  node: ProsemirrorNode<S>;\n  /**\n   * Create a node selection from non-resolved positions.\n   */\n  static create<S extends Schema = any>(\n    doc: ProsemirrorNode<S>,\n    from: number\n  ): NodeSelection<S>;\n  /**\n   * Determines whether the given node may be selected as a node\n   * selection.\n   */\n  static isSelectable(node: ProsemirrorNode): boolean;\n}\n/**\n * A selection type that represents selecting the whole document\n * (which can not necessarily be expressed with a text selection, when\n * there are for example leaf block nodes at the start or end of the\n * document).\n */\nexport class AllSelection<S extends Schema = any> extends Selection<S> {\n  /**\n   * Create an all-selection over the given document.\n   */\n  constructor(doc: ProsemirrorNode<S>);\n}\n/**\n * The state of a ProseMirror editor is represented by an object\n * of this type. A state is a persistent data structure—it isn't\n * updated, but rather a new state value is computed from an old one\n * using the [`apply`](#state.EditorState.apply) method.\n *\n * A state holds a number of built-in fields, and plugins can\n * [define](#state.PluginSpec.state) additional fields.\n */\nexport class EditorState<S extends Schema = any> {\n  /**\n   * The current document.\n   */\n  doc: ProsemirrorNode<S>;\n  /**\n   * The selection.\n   */\n  selection: Selection<S>;\n  /**\n   * A set of marks to apply to the next input. Will be null when\n   * no explicit marks have been set.\n   */\n  storedMarks?: Array<Mark<S>> | null;\n  /**\n   * The schema of the state's document.\n   */\n  schema: S;\n  /**\n   * The plugins that are active in this state.\n   */\n  plugins: Array<Plugin<any, S>>;\n  /**\n   * Apply the given transaction to produce a new state.\n   */\n  apply(tr: Transaction<S>): EditorState<S>;\n  /**\n   * Verbose variant of [`apply`](#state.EditorState.apply) that\n   * returns the precise transactions that were applied (which might\n   * be influenced by the [transaction\n   * hooks](#state.PluginSpec.filterTransaction) of\n   * plugins) along with the new state.\n   */\n  applyTransaction(tr: Transaction<S>): { state: EditorState<S>; transactions: Array<Transaction<S>> };\n  /**\n   * Start a [transaction](#state.Transaction) from this state.\n   */\n  tr: Transaction<S>;\n  /**\n   * Create a new state based on this one, but with an adjusted set of\n   * active plugins. State fields that exist in both sets of plugins\n   * are kept unchanged. Those that no longer exist are dropped, and\n   * those that are new are initialized using their\n   * [`init`](#state.StateField.init) method, passing in the new\n   * configuration object..\n   */\n  reconfigure(config: { schema?: S | null; plugins?: Array<Plugin<any, S>> | null }): EditorState<S>;\n  /**\n   * Serialize this state to JSON. If you want to serialize the state\n   * of plugins, pass an object mapping property names to use in the\n   * resulting JSON object to plugin objects.\n   */\n  toJSON(pluginFields?: { [name: string]: Plugin<any, S> } | string | number): { [key: string]: any };\n  /**\n   * Create a new state.\n   */\n  static create<S extends Schema = any>(config: {\n    schema?: S | null;\n    doc?: ProsemirrorNode<S> | null;\n    selection?: Selection<S> | null;\n    storedMarks?: Mark[] | null;\n    plugins?: Array<Plugin<any, S>> | null;\n  }): EditorState<S>;\n  /**\n   * Deserialize a JSON representation of a state. `config` should\n   * have at least a `schema` field, and should contain array of\n   * plugins to initialize the state with. `pluginFields` can be used\n   * to deserialize the state of plugins, by associating plugin\n   * instances with the property names they use in the JSON object.\n   */\n  static fromJSON<S extends Schema = any>(\n    config: { schema: S; plugins?: Array<Plugin<any, S>> | null },\n    json: { [key: string]: any },\n    pluginFields?: { [name: string]: Plugin<any, S> }\n  ): EditorState<S>;\n}\n/**\n * An editor state transaction, which can be applied to a state to\n * create an updated state. Use\n * [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n *\n * Transactions track changes to the document (they are a subclass of\n * [`Transform`](#transform.Transform)), but also other state changes,\n * like selection updates and adjustments of the set of [stored\n * marks](#state.EditorState.storedMarks). In addition, you can store\n * metadata properties in a transaction, which are extra pieces of\n * information that client code or plugins can use to describe what a\n * transacion represents, so that they can update their [own\n * state](#state.StateField) accordingly.\n *\n * The [editor view](#view.EditorView) uses a few metadata properties:\n * it will attach a property `\"pointer\"` with the value `true` to\n * selection transactions directly caused by mouse or touch input, and\n * a `\"paste\"` property of true to transactions caused by a paste..\n */\nexport class Transaction<S extends Schema = any> extends Transform<S> {\n  /**\n   * The timestamp associated with this transaction, in the same\n   * format as `Date.now()`.\n   */\n  time: number;\n  /**\n   * The stored marks set by this transaction, if any.\n   */\n  storedMarks?: Mark[] | null;\n  /**\n   * The transaction's current selection. This defaults to the editor\n   * selection [mapped](#state.Selection.map) through the steps in the\n   * transaction, but can be overwritten with\n   * [`setSelection`](#state.Transaction.setSelection).\n   */\n  selection: Selection;\n  /**\n   * Update the transaction's current selection. Will determine the\n   * selection that the editor gets when the transaction is applied.\n   */\n  setSelection(selection: Selection): Transaction;\n  /**\n   * Whether the selection was explicitly updated by this transaction.\n   */\n  selectionSet: boolean;\n  /**\n   * Set the current stored marks.\n   */\n  setStoredMarks(marks?: Mark[]): Transaction;\n  /**\n   * Make sure the current stored marks or, if that is null, the marks\n   * at the selection, match the given set of marks. Does nothing if\n   * this is already the case.\n   */\n  ensureMarks(marks: Mark[]): Transaction;\n  /**\n   * Add a mark to the set of stored marks.\n   */\n  addStoredMark(mark: Mark): Transaction;\n  /**\n   * Remove a mark or mark type from the set of stored marks.\n   */\n  removeStoredMark(mark: Mark | MarkType): Transaction;\n  /**\n   * Whether the stored marks were explicitly set for this transaction.\n   */\n  storedMarksSet: boolean;\n  /**\n   * Update the timestamp for the transaction.\n   */\n  setTime(time: number): Transaction;\n  /**\n   * Replace the current selection with the given slice.\n   */\n  replaceSelection(slice: Slice): Transaction;\n  /**\n   * Replace the selection with the given node. When `inheritMarks` is\n   * true and the content is inline, it inherits the marks from the\n   * place where it is inserted.\n   */\n  replaceSelectionWith(node: ProsemirrorNode, inheritMarks?: boolean): Transaction;\n  /**\n   * Delete the selection.\n   */\n  deleteSelection(): Transaction;\n  /**\n   * Replace the given range, or the selection if no range is given,\n   * with a text node containing the given string.\n   */\n  insertText(text: string, from?: number, to?: number): Transaction;\n  /**\n   * Store a metadata property in this transaction, keyed either by\n   * name or by plugin.\n   */\n  setMeta(key: string | Plugin<any, S> | PluginKey<any, S>, value: any): Transaction;\n  /**\n   * Retrieve a metadata property for a given name or plugin.\n   */\n  getMeta(key: string | Plugin<any, S> | PluginKey<any, S>): any;\n  /**\n   * Returns true if this transaction doesn't contain any metadata,\n   * and can thus safely be extended.\n   */\n  isGeneric: boolean;\n  /**\n   * Indicate that the editor should scroll the selection into view\n   * when updated to the state produced by this transaction.\n   */\n  scrollIntoView(): Transaction;\n}\n"
    },
    "prosemirror-transform": {
      "index.d.ts": "// Type definitions for prosemirror-transform 1.1\n// Project: https://github.com/ProseMirror/prosemirror-transform\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\n//                 David Hahn <https://github.com/davidka>\n//                 Tim Baumann <https://github.com/timjb>\n//                 Patrick Simmelbauer <https://github.com/patsimm>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\n\nimport {\n  ContentMatch,\n  Fragment,\n  Mark,\n  MarkType,\n  Node as ProsemirrorNode,\n  NodeRange,\n  NodeType,\n  Schema,\n  Slice\n} from 'prosemirror-model';\n\n/**\n * There are several things that positions can be mapped through.\n * Such objects conform to this interface.\n */\nexport interface Mappable {\n  /**\n   * Map a position through this object. When given, `assoc` (should\n   * be -1 or 1, defaults to 1) determines with which side the\n   * position is associated, which determines in which direction to\n   * move when a chunk of content is inserted at the mapped position.\n   */\n  map(pos: number, assoc?: number): number;\n  /**\n   * Map a position, and return an object containing additional\n   * information about the mapping. The result's `deleted` field tells\n   * you whether the position was deleted (completely enclosed in a\n   * replaced range) during the mapping. When content on only one side\n   * is deleted, the position itself is only considered deleted when\n   * `assoc` points in the direction of the deleted content.\n   */\n  mapResult(pos: number, assoc?: number): MapResult;\n}\n/**\n * An object representing a mapped position with extra\n * information.\n */\nexport class MapResult {\n  /**\n   * The mapped version of the position.\n   */\n  pos: number;\n  /**\n   * Tells you whether the position was deleted, that is,\n   * whether the step removed its surroundings from the document.\n   */\n  deleted: boolean;\n}\n/**\n * A map describing the deletions and insertions made by a step, which\n * can be used to find the correspondence between positions in the\n * pre-step version of a document and the same position in the\n * post-step version.\n */\nexport class StepMap implements Mappable {\n  /**\n   * Create a position map. The modifications to the document are\n   * represented as an array of numbers, in which each group of three\n   * represents a modified chunk as `[start, oldSize, newSize]`.\n   */\n  constructor(ranges: number[]);\n  /**\n   * Calls the given function on each of the changed ranges included in\n   * this map.\n   */\n  forEach(f: (oldStart: number, oldEnd: number, newStart: number, newEnd: number) => void): void;\n  /**\n   * Create an inverted version of this map. The result can be used to\n   * map positions in the post-step document to the pre-step document.\n   */\n  invert(): StepMap;\n  /**\n   * Map a position through this object. When given, `assoc` (should\n   * be -1 or 1, defaults to 1) determines with which side the\n   * position is associated, which determines in which direction to\n   * move when a chunk of content is inserted at the mapped position.\n   */\n  map(pos: number, assoc?: number): number;\n  /**\n   * Map a position, and return an object containing additional\n   * information about the mapping. The result's `deleted` field tells\n   * you whether the position was deleted (completely enclosed in a\n   * replaced range) during the mapping. When content on only one side\n   * is deleted, the position itself is only considered deleted when\n   * `assoc` points in the direction of the deleted content.\n   */\n  mapResult(pos: number, assoc?: number): MapResult;\n  /**\n   * Create a map that moves all positions by offset `n` (which may be\n   * negative). This can be useful when applying steps meant for a\n   * sub-document to a larger document, or vice-versa.\n   */\n  static offset(n: number): StepMap;\n}\n/**\n * A mapping represents a pipeline of zero or more [step\n * maps](#transform.StepMap). It has special provisions for losslessly\n * handling mapping positions through a series of steps in which some\n * steps are inverted versions of earlier steps. (This comes up when\n * ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n * collaboration or history management.)\n */\nexport class Mapping implements Mappable {\n  /**\n   * Create a new mapping with the given position maps.\n   */\n  constructor(maps?: StepMap[]);\n  /**\n   * The step maps in this mapping.\n   */\n  maps: StepMap[];\n  /**\n   * The starting position in the `maps` array, used when `map` or\n   * `mapResult` is called.\n   */\n  from: number;\n  /**\n   * The end position in the `maps` array.\n   */\n  to: number;\n  /**\n   * Create a mapping that maps only through a part of this one.\n   */\n  slice(from?: number, to?: number): Mapping;\n  /**\n   * Add a step map to the end of this mapping. If `mirrors` is\n   * given, it should be the index of the step map that is the mirror\n   * image of this one.\n   */\n  appendMap(map: StepMap, mirrors?: number): void;\n  /**\n   * Add all the step maps in a given mapping to this one (preserving\n   * mirroring information).\n   */\n  appendMapping(mapping: Mapping): void;\n  /**\n   * Finds the offset of the step map that mirrors the map at the\n   * given offset, in this mapping (as per the second argument to\n   * appendMap).\n   */\n  getMirror(n: number): number | undefined | null;\n  /**\n   * Append the inverse of the given mapping to this one.\n   */\n  appendMappingInverted(mapping: Mapping): void;\n  /**\n   * Map a position through this object. When given, `assoc` (should\n   * be -1 or 1, defaults to 1) determines with which side the\n   * position is associated, which determines in which direction to\n   * move when a chunk of content is inserted at the mapped position.\n   */\n  map(pos: number, assoc?: number): number;\n  /**\n   * Map a position, and return an object containing additional\n   * information about the mapping. The result's `deleted` field tells\n   * you whether the position was deleted (completely enclosed in a\n   * replaced range) during the mapping. When content on only one side\n   * is deleted, the position itself is only considered deleted when\n   * `assoc` points in the direction of the deleted content.\n   */\n  mapResult(pos: number, assoc?: number): MapResult;\n}\n/**\n * Add a mark to all inline content between two positions.\n */\nexport class AddMarkStep<S extends Schema = any> extends Step<S> {\n  constructor(from: number, to: number, mark: Mark<S>);\n}\n/**\n * Remove a mark from all inline content between two positions.\n */\nexport class RemoveMarkStep<S extends Schema = any> extends Step<S> {\n  constructor(from: number, to: number, mark: Mark<S>);\n}\n/**\n * Abstraction to build up and track an array of\n * [steps](#transform.Step) representing a document transformation.\n *\n * Most transforming methods return the `Transform` object itself, so\n * that they can be chained.\n */\nexport class Transform<S extends Schema = any> {\n  /**\n   * Create a transform that starts with the given document.\n   */\n  constructor(doc: ProsemirrorNode<S>);\n  /**\n   * Add the given mark to the inline content between `from` and `to`.\n   */\n  addMark(from: number, to: number, mark: Mark<S>): this;\n  /**\n   * Remove marks from inline nodes between `from` and `to`. When `mark`\n   * is a single mark, remove precisely that mark. When it is a mark type,\n   * remove all marks of that type. When it is null, remove all marks of\n   * any type.\n   */\n  removeMark(from: number, to: number, mark?: Mark<S> | MarkType<S>): this;\n  /**\n   * Removes all marks and nodes from the content of the node at `pos`\n   * that don't match the given new parent node type. Accepts an\n   * optional starting [content match](#model.ContentMatch) as third\n   * argument.\n   */\n  clearIncompatible(pos: number, parentType: NodeType<S>, match?: ContentMatch<S>): this;\n  /**\n   * Replace the part of the document between `from` and `to` with the\n   * given `slice`.\n   */\n  replace(from: number, to?: number, slice?: Slice<S>): this;\n  /**\n   * Replace the given range with the given content, which may be a\n   * fragment, node, or array of nodes.\n   */\n  replaceWith(\n    from: number,\n    to: number,\n    content: Fragment<S> | ProsemirrorNode<S> | Array<ProsemirrorNode<S>>\n  ): this;\n  /**\n   * Delete the content between the given positions.\n   */\n  delete(from: number, to: number): this;\n  /**\n   * Insert the given content at the given position.\n   */\n  insert(\n    pos: number,\n    content: Fragment<S> | ProsemirrorNode<S> | Array<ProsemirrorNode<S>>\n  ): this;\n  /**\n   * Replace a range of the document with a given slice, using `from`,\n   * `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n   * as hints, rather than fixed start and end points. This method may\n   * grow the replaced area or close open nodes in the slice in order to\n   * get a fit that is more in line with WYSIWYG expectations, by\n   * dropping fully covered parent nodes of the replaced region when\n   * they are marked [non-defining](#model.NodeSpec.defining), or\n   * including an open parent node from the slice that _is_ marked as\n   * [defining](#model.NodeSpec.defining).\n   *\n   * This is the method, for example, to handle paste. The similar\n   * [`replace`](#transform.Transform.replace) method is a more\n   * primitive tool which will _not_ move the start and end of its given\n   * range, and is useful in situations where you need more precise\n   * control over what happens.\n   */\n  replaceRange(from: number, to: number, slice: Slice<S>): this;\n  /**\n   * Replace the given range with a node, but use `from` and `to` as\n   * hints, rather than precise positions. When from and to are the same\n   * and are at the start or end of a parent node in which the given\n   * node doesn't fit, this method may _move_ them out towards a parent\n   * that does allow the given node to be placed. When the given range\n   * completely covers a parent node, this method may completely replace\n   * that parent node.\n   */\n  replaceRangeWith(from: number, to: number, node: ProsemirrorNode<S>): this;\n  /**\n   * Delete the given range, expanding it to cover fully covered\n   * parent nodes until a valid replace is found.\n   */\n  deleteRange(from: number, to: number): this;\n  /**\n   * Split the content in the given range off from its parent, if there\n   * is sibling content before or after it, and move it up the tree to\n   * the depth specified by `target`. You'll probably want to use\n   * [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n   * sure the lift is valid.\n   */\n  lift(range: NodeRange<S>, target: number): this;\n  /**\n   * Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n   * The wrappers are assumed to be valid in this position, and should\n   * probably be computed with [`findWrapping`](#transform.findWrapping).\n   */\n  wrap(\n    range: NodeRange<S>,\n    wrappers: Array<{ type: NodeType<S>; attrs?: { [key: string]: any } | null }>\n  ): this;\n  /**\n   * Set the type of all textblocks (partly) between `from` and `to` to\n   * the given node type with the given attributes.\n   */\n  setBlockType(\n    from: number,\n    to: number | undefined,\n    type: NodeType<S>,\n    attrs?: { [key: string]: any }\n  ): this;\n  /**\n   * Change the type, attributes, and/or marks of the node at `pos`.\n   * When `nodeType` is null, the existing node type is preserved,\n   */\n  setNodeMarkup(\n    pos: number,\n    type?: NodeType<S>,\n    attrs?: { [key: string]: any },\n    marks?: Array<Mark<S>>\n  ): this;\n  /**\n   * Split the node at the given position, and optionally, if `depth` is\n   * greater than one, any number of nodes above that. By default, the\n   * parts split off will inherit the node type of the original node.\n   * This can be changed by passing an array of types and attributes to\n   * use after the split.\n   */\n  split(\n    pos: number,\n    depth?: number,\n    typesAfter?: Array<{ type: NodeType<S>; attrs?: { [key: string]: any } | null }>\n  ): this;\n  /**\n   * Join the blocks around the given position. If depth is 2, their\n   * last and first siblings are also joined, and so on.\n   */\n  join(pos: number, depth?: number, p1?: boolean): this;\n  /**\n   * The current document (the result of applying the steps in the\n   * transform).\n   */\n  doc: ProsemirrorNode<S>;\n  /**\n   * The steps in this transform.\n   */\n  steps: Array<Step<S>>;\n  /**\n   * The documents before each of the steps.\n   */\n  docs: Array<ProsemirrorNode<S>>;\n  /**\n   * A mapping with the maps for each of the steps in this transform.\n   */\n  mapping: Mapping;\n  /**\n   * The starting document.\n   */\n  before: ProsemirrorNode<S>;\n  /**\n   * Apply a new step in this transform, saving the result. Throws an\n   * error when the step fails.\n   */\n  step(step: Step<S>): this;\n  /**\n   * Try to apply a step in this transformation, ignoring it if it\n   * fails. Returns the step result.\n   */\n  maybeStep(step: Step<S>): StepResult<S>;\n  /**\n   * True when the document has been changed (when there are any\n   * steps).\n   */\n  docChanged: boolean;\n}\n/**\n * Replace a part of the document with a slice of new content.\n */\nexport class ReplaceStep<S extends Schema = any> extends Step<S> {\n  /**\n   * The given `slice` should fit the 'gap' between `from` and\n   * `to`—the depths must line up, and the surrounding nodes must be\n   * able to be joined with the open sides of the slice. When\n   * `structure` is true, the step will fail if the content between\n   * from and to is not just a sequence of closing and then opening\n   * tokens (this is to guard against rebased replace steps\n   * overwriting something they weren't supposed to).\n   */\n  constructor(from: number, to: number, slice: Slice<S>, structure?: boolean);\n}\n/**\n * Replace a part of the document with a slice of content, but\n * preserve a range of the replaced content by moving it into the\n * slice.\n */\nexport class ReplaceAroundStep<S extends Schema = any> extends Step<S> {\n  /**\n   * Create a replace-around step with the given range and gap.\n   * `insert` should be the point in the slice into which the content\n   * of the gap should be moved. `structure` has the same meaning as\n   * it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n   */\n  constructor(\n    from: number,\n    to: number,\n    gapFrom: number,\n    gapTo: number,\n    slice: Slice<S>,\n    insert: number,\n    structure?: boolean\n  );\n}\n/**\n * ‘Fit’ a slice into a given position in the document, producing a\n * [step](#transform.Step) that inserts it. Will return null if\n * there's no meaningful way to insert the slice here, or inserting it\n * would be a no-op (an empty slice over an empty range).\n */\nexport function replaceStep<S extends Schema = any>(\n  doc: ProsemirrorNode<S>,\n  from: number,\n  to?: number,\n  slice?: Slice<S>\n): Step<S> | null | undefined;\n/**\n * A step object represents an atomic change. It generally applies\n * only to the document it was created for, since the positions\n * stored in it will only make sense for that document.\n *\n * New steps are defined by creating classes that extend `Step`,\n * overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n * methods, and registering your class with a unique\n * JSON-serialization identifier using\n * [`Step.jsonID`](#transform.Step^jsonID).\n */\nexport class Step<S extends Schema = any> {\n  /**\n   * Applies this step to the given document, returning a result\n   * object that either indicates failure, if the step can not be\n   * applied to this document, or indicates success by containing a\n   * transformed document.\n   */\n  apply(doc: ProsemirrorNode<S>): StepResult<S>;\n  /**\n   * Get the step map that represents the changes made by this step,\n   * and which can be used to transform between positions in the old\n   * and the new document.\n   */\n  getMap(): StepMap;\n  /**\n   * Create an inverted version of this step. Needs the document as it\n   * was before the step as argument.\n   */\n  invert(doc: ProsemirrorNode<S>): Step<S>;\n  /**\n   * Map this step through a mappable thing, returning either a\n   * version of that step with its positions adjusted, or `null` if\n   * the step was entirely deleted by the mapping.\n   */\n  map(mapping: Mappable): Step<S> | null | undefined;\n  /**\n   * Try to merge this step with another one, to be applied directly\n   * after it. Returns the merged step when possible, null if the\n   * steps can't be merged.\n   */\n  merge(other: Step<S>): Step<S> | null | undefined;\n  /**\n   * Create a JSON-serializeable representation of this step. When\n   * defining this for a custom subclass, make sure the result object\n   * includes the step type's [JSON id](#transform.Step^jsonID) under\n   * the `stepType` property.\n   */\n  toJSON(): { [key: string]: any };\n  /**\n   * Deserialize a step from its JSON representation. Will call\n   * through to the step class' own implementation of this method.\n   */\n  static fromJSON<S extends Schema = any>(schema: S, json: { [key: string]: any }): Step<S>;\n  /**\n   * To be able to serialize steps to JSON, each step needs a string\n   * ID to attach to its JSON representation. Use this method to\n   * register an ID for your step classes. Try to pick something\n   * that's unlikely to clash with steps from other modules.\n   */\n  static jsonID(id: string, stepClass: { new(...args: any[]): Step }): void;\n}\n/**\n * The result of [applying](#transform.Step.apply) a step. Contains either a\n * new document or a failure value.\n */\nexport class StepResult<S extends Schema = any> {\n  /**\n   * The transformed document.\n   */\n  doc?: ProsemirrorNode<S> | null;\n  /**\n   * Text providing information about a failed step.\n   */\n  failed?: string | null;\n  /**\n   * Create a successful step result.\n   */\n  static ok<S extends Schema = any>(doc: ProsemirrorNode<S>): StepResult<S>;\n  /**\n   * Create a failed step result.\n   */\n  static fail(message: string): StepResult;\n  /**\n   * Call [`Node.replace`](#model.Node.replace) with the given\n   * arguments. Create a successful result if it succeeds, and a\n   * failed one if it throws a `ReplaceError`.\n   */\n  static fromReplace<S extends Schema = any>(\n    doc: ProsemirrorNode<S>,\n    from: number,\n    to: number,\n    slice: Slice<S>\n  ): StepResult<S>;\n}\n/**\n * Try to find a target depth to which the content in the given range\n * can be lifted. Will not go across\n * [isolating](#model.NodeSpec.isolating) parent nodes.\n */\nexport function liftTarget(range: NodeRange): number | null | undefined;\n/**\n * Try to find a valid way to wrap the content in the given range in a\n * node of the given type. May introduce extra nodes around and inside\n * the wrapper node, if necessary. Returns null if no valid wrapping\n * could be found. When `innerRange` is given, that range's content is\n * used as the content to fit into the wrapping, instead of the\n * content of range.\n */\nexport function findWrapping<S extends Schema = any>(\n  range: NodeRange<S>,\n  nodeType: NodeType<S>,\n  attrs?: { [key: string]: any },\n  innerRange?: NodeRange<S>\n): Array<{ type: NodeType<S>; attrs?: { [key: string]: any } | null }> | null | undefined;\n/**\n * Check whether splitting at the given position is allowed.\n */\nexport function canSplit<S extends Schema = any>(\n  doc: ProsemirrorNode<S>,\n  pos: number,\n  depth?: number,\n  typesAfter?: Array<{ type: NodeType<S>; attrs?: { [key: string]: any } | null } | null | undefined>\n): boolean;\n/**\n * Test whether the blocks before and after a given position can be\n * joined.\n */\nexport function canJoin(doc: ProsemirrorNode, pos: number): boolean;\n/**\n * Find an ancestor of the given position that can be joined to the\n * block before (or after if `dir` is positive). Returns the joinable\n * point, if any.\n */\nexport function joinPoint(doc: ProsemirrorNode, pos: number, dir?: number): number | null | undefined;\n/**\n * Try to find a point where a node of the given type can be inserted\n * near `pos`, by searching up the node hierarchy when `pos` itself\n * isn't a valid place but is at the start or end of a node. Return\n * null if no position was found.\n */\nexport function insertPoint<S extends Schema = any>(\n  doc: ProsemirrorNode<S>,\n  pos: number,\n  nodeType: NodeType<S>\n): number | null | undefined;\n/**\n * Finds a position at or around the given position where the given\n * slice can be inserted. Will look at parent nodes' nearest boundary\n * and try there, even if the original position wasn't directly at\n * the start or end of that node. Returns null when no position was\n * found.\n */\nexport function dropPoint<S extends Schema = any>(\n  doc: ProsemirrorNode<S>,\n  pos: number,\n  slice: Slice<S>\n): number | null | undefined;\n"
    },
    "prosemirror-tables": {
      "index.d.ts": "// Type definitions for prosemirror-tables 0.8\n// Project: https://github.com/ProseMirror/prosemirror-tables\n// Definitions by: Oscar Wallhult <https://github.com/superchu>\n//                 Eduard Shvedai <https://github.com/eshvedai>\n//                 Patrick Simmelbauer <https://github.com/patsimm>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\nimport {\n  EditorState,\n  Plugin,\n  SelectionRange,\n  Transaction,\n  PluginKey,\n  Selection\n} from 'prosemirror-state';\nimport {\n  Node as ProsemirrorNode,\n  NodeSpec,\n  Slice,\n  ResolvedPos,\n  Schema,\n  NodeType\n} from 'prosemirror-model';\nimport { Mappable } from 'prosemirror-transform';\nimport { NodeView } from 'prosemirror-view';\n\nexport interface TableEditingOptions {\n  allowTableNodeSelection?: boolean;\n}\n\nexport interface TableNodesOptions {\n  tableGroup?: string;\n  cellContent: string;\n  cellAttributes: { [key: string]: CellAttributes };\n}\n\nexport type getFromDOM = (dom: Element) => any;\nexport type setDOMAttr = (value: any, attrs: any) => any;\n\nexport interface CellAttributes {\n  default: any;\n  getFromDOM?: getFromDOM;\n  setDOMAttr?: setDOMAttr;\n}\n\nexport interface TableNodes {\n  table: NodeSpec;\n  table_row: NodeSpec;\n  table_cell: NodeSpec;\n  table_header: NodeSpec;\n}\n\nexport function tableNodes(options: TableNodesOptions): TableNodes;\n\nexport interface CellSelectionJSON {\n  type: string;\n  anchor: number;\n  head: number;\n}\n\nexport class CellSelection<S extends Schema = any> {\n  constructor($anchorCell: ResolvedPos<S>, $headCell?: ResolvedPos<S>);\n\n  from: number;\n  to: number;\n  $from: ResolvedPos<S>;\n  $to: ResolvedPos<S>;\n  anchor: number;\n  head: number;\n  $anchor: ResolvedPos<S>;\n  $head: ResolvedPos<S>;\n  $anchorCell: ResolvedPos<S>;\n  $headCell: ResolvedPos<S>;\n  empty: boolean;\n  ranges: Array<SelectionRange<S>>;\n\n  map(doc: ProsemirrorNode<S>, mapping: Mappable): any;\n  content(): Slice<S>;\n  replace(tr: Transaction<S>, content: Slice<S>): void;\n  replaceWith(tr: Transaction<S>, node: ProsemirrorNode<S>): void;\n  forEachCell(f: (node: ProsemirrorNode<S>, pos: number) => void): void;\n  isRowSelection(): boolean;\n  isColSelection(): boolean;\n  eq(other: Selection<S>): boolean;\n  toJSON(): CellSelectionJSON;\n  getBookmark(): { anchor: number; head: number };\n\n  static colSelection<S extends Schema = any>(\n    anchorCell: ResolvedPos<S>,\n    headCell?: ResolvedPos<S>\n  ): CellSelection<S>;\n  static rowSelection<S extends Schema = any>(\n    anchorCell: ResolvedPos<S>,\n    headCell?: ResolvedPos<S>\n  ): CellSelection<S>;\n  static create<S extends Schema = any>(\n    doc: ProsemirrorNode<S>,\n    anchorCell: number,\n    headCell?: number\n  ): CellSelection<S>;\n  static fromJSON<S extends Schema = any>(\n    doc: ProsemirrorNode<S>,\n    json: CellSelectionJSON\n  ): CellSelection<S>;\n}\n\nexport interface Rect {\n  left: number;\n  top: number;\n  right: number;\n  bottom: number;\n}\n\nexport interface TableRect extends Rect {\n  tableStart: number;\n  map: TableMap;\n  table: ProsemirrorNode;\n}\n\nexport class TableMap {\n  width: number;\n  height: number;\n  map: number[];\n  problems?: object[];\n\n  findCell(pos: number): Rect;\n  colCount(pos: number): number;\n  nextCell(pos: number, axis: string, dir: number): number;\n  rectBetween(a: number, b: number): Rect;\n  cellsInRect(rect: Rect): number[];\n  positionAt(row: number, col: number, table: ProsemirrorNode): number;\n\n  static get(table: ProsemirrorNode): TableMap;\n}\n\nexport function tableEditing(options?: TableEditingOptions): Plugin;\n\nexport function deleteTable<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function goToNextCell<S extends Schema = any>(\n  direction: number\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\n\nexport function toggleHeaderCell<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function toggleHeaderColumn<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function toggleHeaderRow<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\n/**\n * Toggles between row/column header and normal cells (Only applies to first row/column).\n * For deprecated behavior pass useDeprecatedLogic in options with true.\n */\nexport function toggleHeader<S extends Schema = any>(\n  type: 'column' | 'row',\n  options?: { useDeprecatedLogic?: boolean }\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\n\nexport function setCellAttr<S extends Schema = any>(\n  name: string,\n  value: any\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\n\nexport function splitCell<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport interface GetCellTypeOptions {\n  node: ProsemirrorNode;\n  row: number;\n  col: number;\n}\n\nexport function splitCellWithType<S extends Schema = any>(\n  getCellType: (options: GetCellTypeOptions) => NodeType<S>\n): (state: EditorState<S>, dispatch?: (tr: Transaction<S>) => void) => boolean;\n\nexport function mergeCells<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function deleteRow<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function selectedRect<S extends Schema = any>(\n  state: EditorState<S>\n): TableRect;\n\nexport function rowIsHeader<S extends Schema = any>(\n  map: TableMap,\n  table: ProsemirrorNode<S>,\n  row: number\n): boolean;\n\nexport function addRowAfter<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function addRowBefore<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function addRow<S extends Schema = any>(\n  transaction: Transaction<S>,\n  rect: TableRect,\n  row: number\n): Transaction<S>;\n\nexport function deleteColumn<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function addColumnAfter<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function addColumnBefore<S extends Schema = any>(\n  state: EditorState<S>,\n  dispatch?: (tr: Transaction<S>) => void\n): boolean;\n\nexport function addColumn<S extends Schema = any>(\n  transaction: Transaction<S>,\n  rect: TableRect,\n  row: number\n): Transaction<S>;\n\nexport function columnResizing<S extends Schema = any>(props: {\n  handleWidth?: number;\n  cellMinWidth?: number;\n  View?: NodeView<S>;\n}): Plugin<S>;\n\nexport const columnResizingPluginKey: PluginKey;\n\nexport const tableEditingKey: PluginKey;\nexport const fixTablesKey: PluginKey;\n\nexport function updateColumnsOnResize(\n  node: ProsemirrorNode,\n  colgroup: Element,\n  table: Element,\n  cellMinWidth: number,\n  overrideCol?: number,\n  overrideValue?: number\n): void;\n\nexport function cellAround<S extends Schema = any>(\n  pos: ResolvedPos<S>\n): ResolvedPos<S> | null;\n\nexport function isInTable(state: EditorState): boolean;\n\nexport function removeColSpan<T extends {}>(attrs: T, pos: number, n?: number):  T;\nexport function addColSpan<T extends {}>(attrs: T, pos: number, n?: number):  T;\n\ntype TableRoles = 'table' | 'row' | 'cell' | 'header_cell';\n\nexport function columnIsHeader(map: TableMap, table: ProsemirrorNode, col: number): boolean;\nexport function tableNodeTypes(schema: Schema): Record<TableRoles, NodeType>;\n\nexport function selectionCell<S extends Schema = any>(\n  state: EditorState<S>\n): ResolvedPos<S> | null | undefined;\n\nexport function moveCellForward<S extends Schema = any>(\n  pos: ResolvedPos<S>\n): ResolvedPos<S>;\n\nexport function inSameTable<S extends Schema = any>(\n  $a: ResolvedPos<S>,\n  $b: ResolvedPos<S>\n): boolean;\n\nexport function findCell(\n  pos: ResolvedPos\n): { top: number; left: number; right: number; buttom: number };\n\nexport function colCount(pos: ResolvedPos): number;\n\nexport function nextCell<S extends Schema = any>(\n  pos: ResolvedPos<S>,\n  axis: string,\n  dir: number\n): null | ResolvedPos<S>;\n\nexport function fixTables<S extends Schema = any>(\n  state: EditorState<S>,\n  oldState?: EditorState<S>\n): null | Transaction<S>;\n"
    },
    "type-fest": {
      "index.d.ts": "// Basic\nexport * from './source/basic';\n\n// Utilities\nexport {Except} from './source/except';\nexport {Mutable} from './source/mutable';\nexport {Merge} from './source/merge';\nexport {MergeExclusive} from './source/merge-exclusive';\nexport {RequireAtLeastOne} from './source/require-at-least-one';\nexport {RequireExactlyOne} from './source/require-exactly-one';\nexport {PartialDeep} from './source/partial-deep';\nexport {ReadonlyDeep} from './source/readonly-deep';\nexport {LiteralUnion} from './source/literal-union';\nexport {Promisable} from './source/promisable';\nexport {Opaque} from './source/opaque';\nexport {SetOptional} from './source/set-optional';\nexport {SetRequired} from './source/set-required';\nexport {ValueOf} from './source/value-of';\nexport {PromiseValue} from './source/promise-value';\nexport {AsyncReturnType} from './source/async-return-type';\nexport {ConditionalExcept} from './source/conditional-except';\nexport {ConditionalKeys} from './source/conditional-keys';\nexport {ConditionalPick} from './source/conditional-pick';\nexport {UnionToIntersection} from './source/union-to-intersection';\nexport {Stringified} from './source/stringified';\nexport {FixedLengthArray} from './source/fixed-length-array';\n\n// Miscellaneous\nexport {PackageJson} from './source/package-json';\nexport {TsConfigJson} from './source/tsconfig-json';\n",
      "source/async-return-type.d.ts": "import {PromiseValue} from './promise-value';\n\ntype AsyncFunction = (...args: any[]) => Promise<unknown>;\n\n/**\nUnwrap the return type of a function that returns a `Promise`.\n\nThere has been [discussion](https://github.com/microsoft/TypeScript/pull/35998) about implementing this type in TypeScript.\n\n@example\n```ts\nimport {AsyncReturnType} from 'type-fest';\nimport {asyncFunction} from 'api';\n\n// This type resolves to the unwrapped return type of `asyncFunction`.\ntype Value = AsyncReturnType<typeof asyncFunction>;\n\nasync function doSomething(value: Value) {}\n\nasyncFunction().then(value => doSomething(value));\n```\n*/\nexport type AsyncReturnType<Target extends AsyncFunction> = PromiseValue<ReturnType<Target>>;\n",
      "source/basic.d.ts": "/// <reference lib=\"esnext\"/>\n\n// TODO: This can just be `export type Primitive = not object` when the `not` keyword is out.\n/**\nMatches any [primitive value](https://developer.mozilla.org/en-US/docs/Glossary/Primitive).\n*/\nexport type Primitive =\n\t| null\n\t| undefined\n\t| string\n\t| number\n\t| boolean\n\t| symbol\n\t| bigint;\n\n// TODO: Remove the `= unknown` sometime  in the future when most users are on TS 3.5 as it's now the default\n/**\nMatches a [`class` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n*/\nexport type Class<T = unknown, Arguments extends any[] = any[]> = new(...arguments_: Arguments) => T;\n\n/**\nMatches any [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), like `Uint8Array` or `Float64Array`.\n*/\nexport type TypedArray =\n\t| Int8Array\n\t| Uint8Array\n\t| Uint8ClampedArray\n\t| Int16Array\n\t| Uint16Array\n\t| Int32Array\n\t| Uint32Array\n\t| Float32Array\n\t| Float64Array\n\t| BigInt64Array\n\t| BigUint64Array;\n\n/**\nMatches a JSON object.\n\nThis type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. Don't use this as a direct return type as the user would have to double-cast it: `jsonObject as unknown as CustomResponse`. Instead, you could extend your CustomResponse type from it to ensure your type only uses JSON-compatible types: `interface CustomResponse extends JsonObject { … }`.\n*/\nexport type JsonObject = {[Key in string]?: JsonValue};\n\n/**\nMatches a JSON array.\n*/\nexport interface JsonArray extends Array<JsonValue> {}\n\n/**\nMatches any valid JSON value.\n*/\nexport type JsonValue = string | number | boolean | null | JsonObject | JsonArray;\n\ndeclare global {\n\tinterface SymbolConstructor {\n\t\treadonly observable: symbol;\n\t}\n}\n\n/**\nMatches a value that is like an [Observable](https://github.com/tc39/proposal-observable).\n*/\nexport interface ObservableLike {\n\tsubscribe(observer: (value: unknown) => void): void;\n\t[Symbol.observable](): ObservableLike;\n}\n",
      "source/conditional-except.d.ts": "import {Except} from './except';\nimport {ConditionalKeys} from './conditional-keys';\n\n/**\nExclude keys from a shape that matches the given `Condition`.\n\nThis is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.\n\n@example\n```\nimport {Primitive, ConditionalExcept} from 'type-fest';\n\nclass Awesome {\n\tname: string;\n\tsuccesses: number;\n\tfailures: bigint;\n\n\trun() {}\n}\n\ntype ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;\n//=> {run: () => void}\n```\n\n@example\n```\nimport {ConditionalExcept} from 'type-fest';\n\ninterface Example {\n\ta: string;\n\tb: string | number;\n\tc: () => void;\n\td: {};\n}\n\ntype NonStringKeysOnly = ConditionalExcept<Example, string>;\n//=> {b: string | number; c: () => void; d: {}}\n```\n*/\nexport type ConditionalExcept<Base, Condition> = Except<\n\tBase,\n\tConditionalKeys<Base, Condition>\n>;\n",
      "source/conditional-keys.d.ts": "/**\nExtract the keys from a type where the value type of the key extends the given `Condition`.\n\nInternally this is used for the `ConditionalPick` and `ConditionalExcept` types.\n\n@example\n```\nimport {ConditionalKeys} from 'type-fest';\n\ninterface Example {\n\ta: string;\n\tb: string | number;\n\tc?: string;\n\td: {};\n}\n\ntype StringKeysOnly = ConditionalKeys<Example, string>;\n//=> 'a'\n```\n\nTo support partial types, make sure your `Condition` is a union of undefined (for example, `string | undefined`) as demonstrated below.\n\n@example\n```\ntype StringKeysAndUndefined = ConditionalKeys<Example, string | undefined>;\n//=> 'a' | 'c'\n```\n*/\nexport type ConditionalKeys<Base, Condition> = NonNullable<\n\t// Wrap in `NonNullable` to strip away the `undefined` type from the produced union.\n\t{\n\t\t// Map through all the keys of the given base type.\n\t\t[Key in keyof Base]:\n\t\t\t// Pick only keys with types extending the given `Condition` type.\n\t\t\tBase[Key] extends Condition\n\t\t\t\t// Retain this key since the condition passes.\n\t\t\t\t? Key\n\t\t\t\t// Discard this key since the condition fails.\n\t\t\t\t: never;\n\n\t// Convert the produced object into a union type of the keys which passed the conditional test.\n\t}[keyof Base]\n>;\n",
      "source/conditional-pick.d.ts": "import {ConditionalKeys} from './conditional-keys';\n\n/**\nPick keys from the shape that matches the given `Condition`.\n\nThis is useful when you want to create a new type from a specific subset of an existing type. For example, you might want to pick all the primitive properties from a class and form a new automatically derived type.\n\n@example\n```\nimport {Primitive, ConditionalPick} from 'type-fest';\n\nclass Awesome {\n\tname: string;\n\tsuccesses: number;\n\tfailures: bigint;\n\n\trun() {}\n}\n\ntype PickPrimitivesFromAwesome = ConditionalPick<Awesome, Primitive>;\n//=> {name: string; successes: number; failures: bigint}\n```\n\n@example\n```\nimport {ConditionalPick} from 'type-fest';\n\ninterface Example {\n\ta: string;\n\tb: string | number;\n\tc: () => void;\n\td: {};\n}\n\ntype StringKeysOnly = ConditionalPick<Example, string>;\n//=> {a: string}\n```\n*/\nexport type ConditionalPick<Base, Condition> = Pick<\n\tBase,\n\tConditionalKeys<Base, Condition>\n>;\n",
      "source/except.d.ts": "/**\nCreate a type from an object type without certain keys.\n\nThis type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.\n\nPlease upvote [this issue](https://github.com/microsoft/TypeScript/issues/30825) if you want to have the stricter version as a built-in in TypeScript.\n\n@example\n```\nimport {Except} from 'type-fest';\n\ntype Foo = {\n\ta: number;\n\tb: string;\n\tc: boolean;\n};\n\ntype FooWithoutA = Except<Foo, 'a' | 'c'>;\n//=> {b: string};\n```\n*/\nexport type Except<ObjectType, KeysType extends keyof ObjectType> = Pick<ObjectType, Exclude<keyof ObjectType, KeysType>>;\n",
      "source/fixed-length-array.d.ts": "/**\nMethods to exclude.\n*/\ntype ArrayLengthMutationKeys = 'splice' | 'push' | 'pop' | 'shift' | 'unshift';\n\n/**\nCreate a type that represents an array of the given type and length. The array's length and the `Array` prototype methods that manipulate its length are excluded in the resulting type.\n\nPlease participate in [this issue](https://github.com/microsoft/TypeScript/issues/26223) if you want to have a similiar type built into TypeScript.\n\nUse-cases:\n- Declaring fixed-length tuples or arrays with a large number of items.\n- Creating a range union (for example, `0 | 1 | 2 | 3 | 4` from the keys of such a type) without having to resort to recursive types.\n- Creating an array of coordinates with a static length, for example, length of 3 for a 3D vector.\n\n@example\n```\nimport {FixedLengthArray} from 'type-fest';\n\ntype FencingTeam = FixedLengthArray<string, 3>;\n\nconst guestFencingTeam: FencingTeam = ['Josh', 'Michael', 'Robert'];\n\nconst homeFencingTeam: FencingTeam = ['George', 'John'];\n//=> error TS2322: Type string[] is not assignable to type 'FencingTeam'\n\nguestFencingTeam.push('Sam');\n//=> error TS2339: Property 'push' does not exist on type 'FencingTeam'\n```\n*/\nexport type FixedLengthArray<Element, Length extends number, ArrayPrototype = [Element, ...Element[]]> = Pick<\n\tArrayPrototype,\n\tExclude<keyof ArrayPrototype, ArrayLengthMutationKeys>\n> & {\n\t[index: number]: Element;\n\t[Symbol.iterator]: () => IterableIterator<Element>;\n\treadonly length: Length;\n};\n",
      "source/literal-union.d.ts": "import {Primitive} from './basic';\n\n/**\nAllows creating a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union.\n\nCurrently, when a union type of a primitive type is combined with literal types, TypeScript loses all information about the combined literals. Thus, when such type is used in an IDE with autocompletion, no suggestions are made for the declared literals.\n\nThis type is a workaround for [Microsoft/TypeScript#29729](https://github.com/Microsoft/TypeScript/issues/29729). It will be removed as soon as it's not needed anymore.\n\n@example\n```\nimport {LiteralUnion} from 'type-fest';\n\n// Before\n\ntype Pet = 'dog' | 'cat' | string;\n\nconst pet: Pet = '';\n// Start typing in your TypeScript-enabled IDE.\n// You **will not** get auto-completion for `dog` and `cat` literals.\n\n// After\n\ntype Pet2 = LiteralUnion<'dog' | 'cat', string>;\n\nconst pet: Pet2 = '';\n// You **will** get auto-completion for `dog` and `cat` literals.\n```\n */\nexport type LiteralUnion<\n\tLiteralType extends BaseType,\n\tBaseType extends Primitive\n> = LiteralType | (BaseType & {_?: never});\n",
      "source/merge-exclusive.d.ts": "// Helper type. Not useful on its own.\ntype Without<FirstType, SecondType> = {[KeyType in Exclude<keyof FirstType, keyof SecondType>]?: never};\n\n/**\nCreate a type that has mutually exclusive keys.\n\nThis type was inspired by [this comment](https://github.com/Microsoft/TypeScript/issues/14094#issuecomment-373782604).\n\nThis type works with a helper type, called `Without`. `Without<FirstType, SecondType>` produces a type that has only keys from `FirstType` which are not present on `SecondType` and sets the value type for these keys to `never`. This helper type is then used in `MergeExclusive` to remove keys from either `FirstType` or `SecondType`.\n\n@example\n```\nimport {MergeExclusive} from 'type-fest';\n\ninterface ExclusiveVariation1 {\n\texclusive1: boolean;\n}\n\ninterface ExclusiveVariation2 {\n\texclusive2: string;\n}\n\ntype ExclusiveOptions = MergeExclusive<ExclusiveVariation1, ExclusiveVariation2>;\n\nlet exclusiveOptions: ExclusiveOptions;\n\nexclusiveOptions = {exclusive1: true};\n//=> Works\nexclusiveOptions = {exclusive2: 'hi'};\n//=> Works\nexclusiveOptions = {exclusive1: true, exclusive2: 'hi'};\n//=> Error\n```\n*/\nexport type MergeExclusive<FirstType, SecondType> =\n\t(FirstType | SecondType) extends object ?\n\t\t(Without<FirstType, SecondType> & SecondType) | (Without<SecondType, FirstType> & FirstType) :\n\t\tFirstType | SecondType;\n\n",
      "source/merge.d.ts": "import {Except} from './except';\n\n/**\nMerge two types into a new type. Keys of the second type overrides keys of the first type.\n\n@example\n```\nimport {Merge} from 'type-fest';\n\ntype Foo = {\n\ta: number;\n\tb: string;\n};\n\ntype Bar = {\n\tb: number;\n};\n\nconst ab: Merge<Foo, Bar> = {a: 1, b: 2};\n```\n*/\nexport type Merge<FirstType, SecondType> = Except<FirstType, Extract<keyof FirstType, keyof SecondType>> & SecondType;\n",
      "source/mutable.d.ts": "/**\nConvert an object with `readonly` keys into a mutable object. Inverse of `Readonly<T>`.\n\nThis can be used to [store and mutate options within a class](https://github.com/sindresorhus/pageres/blob/4a5d05fca19a5fbd2f53842cbf3eb7b1b63bddd2/source/index.ts#L72), [edit `readonly` objects within tests](https://stackoverflow.com/questions/50703834), and [construct a `readonly` object within a function](https://github.com/Microsoft/TypeScript/issues/24509).\n\n@example\n```\nimport {Mutable} from 'type-fest';\n\ntype Foo = {\n\treadonly a: number;\n\treadonly b: string;\n};\n\nconst mutableFoo: Mutable<Foo> = {a: 1, b: '2'};\nmutableFoo.a = 3;\n```\n*/\nexport type Mutable<ObjectType> = {\n\t// For each `Key` in the keys of `ObjectType`, make a mapped type by removing the `readonly` modifier from the key.\n\t-readonly [KeyType in keyof ObjectType]: ObjectType[KeyType];\n};\n",
      "source/opaque.d.ts": "/**\nCreate an opaque type, which hides its internal details from the public, and can only be created by being used explicitly.\n\nThe generic type parameter can be anything. It doesn't have to be an object.\n\n[Read more about opaque types.](https://codemix.com/opaque-types-in-javascript/)\n\nThere have been several discussions about adding this feature to TypeScript via the `opaque type` operator, similar to how Flow does it. Unfortunately, nothing has (yet) moved forward:\n\t- [Microsoft/TypeScript#15408](https://github.com/Microsoft/TypeScript/issues/15408)\n\t- [Microsoft/TypeScript#15807](https://github.com/Microsoft/TypeScript/issues/15807)\n\n@example\n```\nimport {Opaque} from 'type-fest';\n\ntype AccountNumber = Opaque<number, 'AccountNumber'>;\ntype AccountBalance = Opaque<number, 'AccountBalance'>;\n\n// The Token parameter allows the compiler to differentiate between types, whereas \"unknown\" will not. For example, consider the following structures:\ntype ThingOne = Opaque<string>;\ntype ThingTwo = Opaque<string>;\n\n// To the compiler, these types are allowed to be cast to each other as they have the same underlying type. They are both `string & { __opaque__: unknown }`.\n// To avoid this behaviour, you would instead pass the \"Token\" parameter, like so.\ntype NewThingOne = Opaque<string, 'ThingOne'>;\ntype NewThingTwo = Opaque<string, 'ThingTwo'>;\n\n// Now they're completely separate types, so the following will fail to compile.\nfunction createNewThingOne (): NewThingOne {\n\t// As you can see, casting from a string is still allowed. However, you may not cast NewThingOne to NewThingTwo, and vice versa.\n\treturn 'new thing one' as NewThingOne;\n}\n\n// This will fail to compile, as they are fundamentally different types.\nconst thingTwo = createNewThingOne() as NewThingTwo;\n\n// Here's another example of opaque typing.\nfunction createAccountNumber(): AccountNumber {\n\treturn 2 as AccountNumber;\n}\n\nfunction getMoneyForAccount(accountNumber: AccountNumber): AccountBalance {\n\treturn 4 as AccountBalance;\n}\n\n// This will compile successfully.\ngetMoneyForAccount(createAccountNumber());\n\n// But this won't, because it has to be explicitly passed as an `AccountNumber` type.\ngetMoneyForAccount(2);\n\n// You can use opaque values like they aren't opaque too.\nconst accountNumber = createAccountNumber();\n\n// This will not compile successfully.\nconst newAccountNumber = accountNumber + 2;\n\n// As a side note, you can (and should) use recursive types for your opaque types to make them stronger and hopefully easier to type.\ntype Person = {\n\tid: Opaque<number, Person>;\n\tname: string;\n};\n```\n*/\nexport type Opaque<Type, Token = unknown> = Type & {readonly __opaque__: Token};\n",
      "source/package-json.d.ts": "import {LiteralUnion} from './literal-union';\n\ndeclare namespace PackageJson {\n\t/**\n\tA person who has been involved in creating or maintaining the package.\n\t*/\n\texport type Person =\n\t\t| string\n\t\t| {\n\t\t\tname: string;\n\t\t\turl?: string;\n\t\t\temail?: string;\n\t\t};\n\n\texport type BugsLocation =\n\t\t| string\n\t\t| {\n\t\t\t/**\n\t\t\tThe URL to the package's issue tracker.\n\t\t\t*/\n\t\t\turl?: string;\n\n\t\t\t/**\n\t\t\tThe email address to which issues should be reported.\n\t\t\t*/\n\t\t\temail?: string;\n\t\t};\n\n\texport interface DirectoryLocations {\n\t\t[directoryType: string]: unknown;\n\n\t\t/**\n\t\tLocation for executable scripts. Sugar to generate entries in the `bin` property by walking the folder.\n\t\t*/\n\t\tbin?: string;\n\n\t\t/**\n\t\tLocation for Markdown files.\n\t\t*/\n\t\tdoc?: string;\n\n\t\t/**\n\t\tLocation for example scripts.\n\t\t*/\n\t\texample?: string;\n\n\t\t/**\n\t\tLocation for the bulk of the library.\n\t\t*/\n\t\tlib?: string;\n\n\t\t/**\n\t\tLocation for man pages. Sugar to generate a `man` array by walking the folder.\n\t\t*/\n\t\tman?: string;\n\n\t\t/**\n\t\tLocation for test files.\n\t\t*/\n\t\ttest?: string;\n\t}\n\n\texport type Scripts = {\n\t\t/**\n\t\tRun **before** the package is published (Also run on local `npm install` without any arguments).\n\t\t*/\n\t\tprepublish?: string;\n\n\t\t/**\n\t\tRun both **before** the package is packed and published, and on local `npm install` without any arguments. This is run **after** `prepublish`, but **before** `prepublishOnly`.\n\t\t*/\n\t\tprepare?: string;\n\n\t\t/**\n\t\tRun **before** the package is prepared and packed, **only** on `npm publish`.\n\t\t*/\n\t\tprepublishOnly?: string;\n\n\t\t/**\n\t\tRun **before** a tarball is packed (on `npm pack`, `npm publish`, and when installing git dependencies).\n\t\t*/\n\t\tprepack?: string;\n\n\t\t/**\n\t\tRun **after** the tarball has been generated and moved to its final destination.\n\t\t*/\n\t\tpostpack?: string;\n\n\t\t/**\n\t\tRun **after** the package is published.\n\t\t*/\n\t\tpublish?: string;\n\n\t\t/**\n\t\tRun **after** the package is published.\n\t\t*/\n\t\tpostpublish?: string;\n\n\t\t/**\n\t\tRun **before** the package is installed.\n\t\t*/\n\t\tpreinstall?: string;\n\n\t\t/**\n\t\tRun **after** the package is installed.\n\t\t*/\n\t\tinstall?: string;\n\n\t\t/**\n\t\tRun **after** the package is installed and after `install`.\n\t\t*/\n\t\tpostinstall?: string;\n\n\t\t/**\n\t\tRun **before** the package is uninstalled and before `uninstall`.\n\t\t*/\n\t\tpreuninstall?: string;\n\n\t\t/**\n\t\tRun **before** the package is uninstalled.\n\t\t*/\n\t\tuninstall?: string;\n\n\t\t/**\n\t\tRun **after** the package is uninstalled.\n\t\t*/\n\t\tpostuninstall?: string;\n\n\t\t/**\n\t\tRun **before** bump the package version and before `version`.\n\t\t*/\n\t\tpreversion?: string;\n\n\t\t/**\n\t\tRun **before** bump the package version.\n\t\t*/\n\t\tversion?: string;\n\n\t\t/**\n\t\tRun **after** bump the package version.\n\t\t*/\n\t\tpostversion?: string;\n\n\t\t/**\n\t\tRun with the `npm test` command, before `test`.\n\t\t*/\n\t\tpretest?: string;\n\n\t\t/**\n\t\tRun with the `npm test` command.\n\t\t*/\n\t\ttest?: string;\n\n\t\t/**\n\t\tRun with the `npm test` command, after `test`.\n\t\t*/\n\t\tposttest?: string;\n\n\t\t/**\n\t\tRun with the `npm stop` command, before `stop`.\n\t\t*/\n\t\tprestop?: string;\n\n\t\t/**\n\t\tRun with the `npm stop` command.\n\t\t*/\n\t\tstop?: string;\n\n\t\t/**\n\t\tRun with the `npm stop` command, after `stop`.\n\t\t*/\n\t\tpoststop?: string;\n\n\t\t/**\n\t\tRun with the `npm start` command, before `start`.\n\t\t*/\n\t\tprestart?: string;\n\n\t\t/**\n\t\tRun with the `npm start` command.\n\t\t*/\n\t\tstart?: string;\n\n\t\t/**\n\t\tRun with the `npm start` command, after `start`.\n\t\t*/\n\t\tpoststart?: string;\n\n\t\t/**\n\t\tRun with the `npm restart` command, before `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.\n\t\t*/\n\t\tprerestart?: string;\n\n\t\t/**\n\t\tRun with the `npm restart` command. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.\n\t\t*/\n\t\trestart?: string;\n\n\t\t/**\n\t\tRun with the `npm restart` command, after `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.\n\t\t*/\n\t\tpostrestart?: string;\n\t} & {\n\t\t[scriptName: string]: string;\n\t};\n\n\t/**\n\tDependencies of the package. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or Git URL.\n\t*/\n\texport interface Dependency {\n\t\t[packageName: string]: string;\n\t}\n\n\t/**\n\tConditions which provide a way to resolve a package entry point based on the environment.\n\t*/\n\texport type ExportCondition = LiteralUnion<\n\t\t| 'import'\n\t\t| 'require'\n\t\t| 'node'\n\t\t| 'deno'\n\t\t| 'browser'\n\t\t| 'electron'\n\t\t| 'react-native'\n\t\t| 'default',\n\t\tstring\n\t>;\n\n\t/**\n\tEntry points of a module, optionally with conditions and subpath exports.\n\t*/\n\texport type Exports =\n\t| string\n\t| {[key in ExportCondition]: Exports}\n\t| {[key: string]: Exports};\n\n\texport interface NonStandardEntryPoints {\n\t\t/**\n\t\tAn ECMAScript module ID that is the primary entry point to the program.\n\t\t*/\n\t\tmodule?: string;\n\n\t\t/**\n\t\tA module ID with untranspiled code that is the primary entry point to the program.\n\t\t*/\n\t\tesnext?:\n\t\t| string\n\t\t| {\n\t\t\t[moduleName: string]: string | undefined;\n\t\t\tmain?: string;\n\t\t\tbrowser?: string;\n\t\t};\n\n\t\t/**\n\t\tA hint to JavaScript bundlers or component tools when packaging modules for client side use.\n\t\t*/\n\t\tbrowser?:\n\t\t| string\n\t\t| {\n\t\t\t[moduleName: string]: string | false;\n\t\t};\n\n\t\t/**\n\t\tDenote which files in your project are \"pure\" and therefore safe for Webpack to prune if unused.\n\n\t\t[Read more.](https://webpack.js.org/guides/tree-shaking/)\n\t\t*/\n\t\tsideEffects?: boolean | string[];\n\t}\n\n\texport interface TypeScriptConfiguration {\n\t\t/**\n\t\tLocation of the bundled TypeScript declaration file.\n\t\t*/\n\t\ttypes?: string;\n\n\t\t/**\n\t\tLocation of the bundled TypeScript declaration file. Alias of `types`.\n\t\t*/\n\t\ttypings?: string;\n\t}\n\n\t/**\n\tAn alternative configuration for Yarn workspaces.\n\t*/\n\texport interface WorkspaceConfig {\n\t\t/**\n\t\tAn array of workspace pattern strings which contain the workspace packages.\n\t\t*/\n\t\tpackages?: WorkspacePattern[];\n\n\t\t/**\n\t\tDesigned to solve the problem of packages which break when their `node_modules` are moved to the root workspace directory - a process known as hoisting. For these packages, both within your workspace, and also some that have been installed via `node_modules`, it is important to have a mechanism for preventing the default Yarn workspace behavior. By adding workspace pattern strings here, Yarn will resume non-workspace behavior for any package which matches the defined patterns.\n\n\t\t[Read more](https://classic.yarnpkg.com/blog/2018/02/15/nohoist/)\n\t\t*/\n\t\tnohoist?: WorkspacePattern[];\n\t}\n\n\t/**\n\tA workspace pattern points to a directory or group of directories which contain packages that should be included in the workspace installation process.\n\n\tThe patterns are handled with [minimatch](https://github.com/isaacs/minimatch).\n\n\t@example\n\t`docs` → Include the docs directory and install its dependencies.\n\t`packages/*` → Include all nested directories within the packages directory, like `packages/cli` and `packages/core`.\n\t*/\n\ttype WorkspacePattern = string;\n\n\texport interface YarnConfiguration {\n\t\t/**\n\t\tUsed to configure [Yarn workspaces](https://classic.yarnpkg.com/docs/workspaces/).\n\n\t\tWorkspaces allow you to manage multiple packages within the same repository in such a way that you only need to run `yarn install` once to install all of them in a single pass.\n\n\t\tPlease note that the top-level `private` property of `package.json` **must** be set to `true` in order to use workspaces.\n\t\t*/\n\t\tworkspaces?: WorkspacePattern[] | WorkspaceConfig;\n\n\t\t/**\n\t\tIf your package only allows one version of a given dependency, and you’d like to enforce the same behavior as `yarn install --flat` on the command-line, set this to `true`.\n\n\t\tNote that if your `package.json` contains `\"flat\": true` and other packages depend on yours (e.g. you are building a library rather than an app), those other packages will also need `\"flat\": true` in their `package.json` or be installed with `yarn install --flat` on the command-line.\n\t\t*/\n\t\tflat?: boolean;\n\n\t\t/**\n\t\tSelective version resolutions. Allows the definition of custom package versions inside dependencies without manual edits in the `yarn.lock` file.\n\t\t*/\n\t\tresolutions?: Dependency;\n\t}\n\n\texport interface JSPMConfiguration {\n\t\t/**\n\t\tJSPM configuration.\n\t\t*/\n\t\tjspm?: PackageJson;\n\t}\n}\n\n/**\nType for [npm's `package.json` file](https://docs.npmjs.com/creating-a-package-json-file). Also includes types for fields used by other popular projects, like TypeScript and Yarn.\n*/\nexport type PackageJson = {\n\t/**\n\tThe name of the package.\n\t*/\n\tname?: string;\n\n\t/**\n\tPackage version, parseable by [`node-semver`](https://github.com/npm/node-semver).\n\t*/\n\tversion?: string;\n\n\t/**\n\tPackage description, listed in `npm search`.\n\t*/\n\tdescription?: string;\n\n\t/**\n\tKeywords associated with package, listed in `npm search`.\n\t*/\n\tkeywords?: string[];\n\n\t/**\n\tThe URL to the package's homepage.\n\t*/\n\thomepage?: LiteralUnion<'.', string>;\n\n\t/**\n\tThe URL to the package's issue tracker and/or the email address to which issues should be reported.\n\t*/\n\tbugs?: PackageJson.BugsLocation;\n\n\t/**\n\tThe license for the package.\n\t*/\n\tlicense?: string;\n\n\t/**\n\tThe licenses for the package.\n\t*/\n\tlicenses?: Array<{\n\t\ttype?: string;\n\t\turl?: string;\n\t}>;\n\n\tauthor?: PackageJson.Person;\n\n\t/**\n\tA list of people who contributed to the package.\n\t*/\n\tcontributors?: PackageJson.Person[];\n\n\t/**\n\tA list of people who maintain the package.\n\t*/\n\tmaintainers?: PackageJson.Person[];\n\n\t/**\n\tThe files included in the package.\n\t*/\n\tfiles?: string[];\n\n\t/**\n\tResolution algorithm for importing \".js\" files from the package's scope.\n\n\t[Read more.](https://nodejs.org/api/esm.html#esm_package_json_type_field)\n\t*/\n\ttype?: 'module' | 'commonjs';\n\n\t/**\n\tThe module ID that is the primary entry point to the program.\n\t*/\n\tmain?: string;\n\n\t/**\n\tStandard entry points of the package, with enhanced support for ECMAScript Modules.\n\n\t[Read more.](https://nodejs.org/api/esm.html#esm_package_entry_points)\n\t*/\n\texports?: PackageJson.Exports;\n\n\t/**\n\tThe executable files that should be installed into the `PATH`.\n\t*/\n\tbin?:\n\t| string\n\t| {\n\t\t[binary: string]: string;\n\t};\n\n\t/**\n\tFilenames to put in place for the `man` program to find.\n\t*/\n\tman?: string | string[];\n\n\t/**\n\tIndicates the structure of the package.\n\t*/\n\tdirectories?: PackageJson.DirectoryLocations;\n\n\t/**\n\tLocation for the code repository.\n\t*/\n\trepository?:\n\t| string\n\t| {\n\t\ttype: string;\n\t\turl: string;\n\n\t\t/**\n\t\tRelative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n\t\t[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)\n\t\t*/\n\t\tdirectory?: string;\n\t};\n\n\t/**\n\tScript commands that are run at various times in the lifecycle of the package. The key is the lifecycle event, and the value is the command to run at that point.\n\t*/\n\tscripts?: PackageJson.Scripts;\n\n\t/**\n\tIs used to set configuration parameters used in package scripts that persist across upgrades.\n\t*/\n\tconfig?: {\n\t\t[configKey: string]: unknown;\n\t};\n\n\t/**\n\tThe dependencies of the package.\n\t*/\n\tdependencies?: PackageJson.Dependency;\n\n\t/**\n\tAdditional tooling dependencies that are not required for the package to work. Usually test, build, or documentation tooling.\n\t*/\n\tdevDependencies?: PackageJson.Dependency;\n\n\t/**\n\tDependencies that are skipped if they fail to install.\n\t*/\n\toptionalDependencies?: PackageJson.Dependency;\n\n\t/**\n\tDependencies that will usually be required by the package user directly or via another dependency.\n\t*/\n\tpeerDependencies?: PackageJson.Dependency;\n\n\t/**\n\tIndicate peer dependencies that are optional.\n\t*/\n\tpeerDependenciesMeta?: {\n\t\t[packageName: string]: {\n\t\t\toptional: true;\n\t\t};\n\t};\n\n\t/**\n\tPackage names that are bundled when the package is published.\n\t*/\n\tbundledDependencies?: string[];\n\n\t/**\n\tAlias of `bundledDependencies`.\n\t*/\n\tbundleDependencies?: string[];\n\n\t/**\n\tEngines that this package runs on.\n\t*/\n\tengines?: {\n\t\t[EngineName in 'npm' | 'node' | string]: string;\n\t};\n\n\t/**\n\t@deprecated\n\t*/\n\tengineStrict?: boolean;\n\n\t/**\n\tOperating systems the module runs on.\n\t*/\n\tos?: Array<LiteralUnion<\n\t\t| 'aix'\n\t\t| 'darwin'\n\t\t| 'freebsd'\n\t\t| 'linux'\n\t\t| 'openbsd'\n\t\t| 'sunos'\n\t\t| 'win32'\n\t\t| '!aix'\n\t\t| '!darwin'\n\t\t| '!freebsd'\n\t\t| '!linux'\n\t\t| '!openbsd'\n\t\t| '!sunos'\n\t\t| '!win32',\n\t\tstring\n\t>>;\n\n\t/**\n\tCPU architectures the module runs on.\n\t*/\n\tcpu?: Array<LiteralUnion<\n\t\t| 'arm'\n\t\t| 'arm64'\n\t\t| 'ia32'\n\t\t| 'mips'\n\t\t| 'mipsel'\n\t\t| 'ppc'\n\t\t| 'ppc64'\n\t\t| 's390'\n\t\t| 's390x'\n\t\t| 'x32'\n\t\t| 'x64'\n\t\t| '!arm'\n\t\t| '!arm64'\n\t\t| '!ia32'\n\t\t| '!mips'\n\t\t| '!mipsel'\n\t\t| '!ppc'\n\t\t| '!ppc64'\n\t\t| '!s390'\n\t\t| '!s390x'\n\t\t| '!x32'\n\t\t| '!x64',\n\t\tstring\n\t>>;\n\n\t/**\n\tIf set to `true`, a warning will be shown if package is installed locally. Useful if the package is primarily a command-line application that should be installed globally.\n\n\t@deprecated\n\t*/\n\tpreferGlobal?: boolean;\n\n\t/**\n\tIf set to `true`, then npm will refuse to publish it.\n\t*/\n\tprivate?: boolean;\n\n\t/**\n\tA set of config values that will be used at publish-time. It's especially handy to set the tag, registry or access, to ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default.\n\t*/\n\tpublishConfig?: {\n\t\t[config: string]: unknown;\n\t};\n\n\t/**\n\tDescribes and notifies consumers of a package's monetary support information.\n\n\t[Read more.](https://github.com/npm/rfcs/blob/latest/accepted/0017-add-funding-support.md)\n\t*/\n\tfunding?: string | {\n\t\t/**\n\t\tThe type of funding.\n\t\t*/\n\t\ttype?: LiteralUnion<\n\t\t\t| 'github'\n\t\t\t| 'opencollective'\n\t\t\t| 'patreon'\n\t\t\t| 'individual'\n\t\t\t| 'foundation'\n\t\t\t| 'corporation',\n\t\t\tstring\n\t\t>;\n\t\t/**\n\t\tThe URL to the funding page.\n\t\t*/\n\t\turl: string;\n\t};\n} &\nPackageJson.NonStandardEntryPoints &\nPackageJson.TypeScriptConfiguration &\nPackageJson.YarnConfiguration &\nPackageJson.JSPMConfiguration & {\n\t[key: string]: unknown;\n};\n",
      "source/partial-deep.d.ts": "import {Primitive} from './basic';\n\n/**\nCreate a type from another type with all keys and nested keys set to optional.\n\nUse-cases:\n- Merging a default settings/config object with another object, the second object would be a deep partial of the default object.\n- Mocking and testing complex entities, where populating an entire object with its keys would be redundant in terms of the mock or test.\n\n@example\n```\nimport {PartialDeep} from 'type-fest';\n\nconst settings: Settings = {\n\ttextEditor: {\n\t\tfontSize: 14;\n\t\tfontColor: '#000000';\n\t\tfontWeight: 400;\n\t}\n\tautocomplete: false;\n\tautosave: true;\n};\n\nconst applySavedSettings = (savedSettings: PartialDeep<Settings>) => {\n\treturn {...settings, ...savedSettings};\n}\n\nsettings = applySavedSettings({textEditor: {fontWeight: 500}});\n```\n*/\nexport type PartialDeep<T> = T extends Primitive\n\t? Partial<T>\n\t: T extends Map<infer KeyType, infer ValueType>\n\t? PartialMapDeep<KeyType, ValueType>\n\t: T extends Set<infer ItemType>\n\t? PartialSetDeep<ItemType>\n\t: T extends ReadonlyMap<infer KeyType, infer ValueType>\n\t? PartialReadonlyMapDeep<KeyType, ValueType>\n\t: T extends ReadonlySet<infer ItemType>\n\t? PartialReadonlySetDeep<ItemType>\n\t: T extends ((...arguments: any[]) => unknown)\n\t? T | undefined\n\t: T extends object\n\t? PartialObjectDeep<T>\n\t: unknown;\n\n/**\nSame as `PartialDeep`, but accepts only `Map`s and  as inputs. Internal helper for `PartialDeep`.\n*/\ninterface PartialMapDeep<KeyType, ValueType> extends Map<PartialDeep<KeyType>, PartialDeep<ValueType>> {}\n\n/**\nSame as `PartialDeep`, but accepts only `Set`s as inputs. Internal helper for `PartialDeep`.\n*/\ninterface PartialSetDeep<T> extends Set<PartialDeep<T>> {}\n\n/**\nSame as `PartialDeep`, but accepts only `ReadonlyMap`s as inputs. Internal helper for `PartialDeep`.\n*/\ninterface PartialReadonlyMapDeep<KeyType, ValueType> extends ReadonlyMap<PartialDeep<KeyType>, PartialDeep<ValueType>> {}\n\n/**\nSame as `PartialDeep`, but accepts only `ReadonlySet`s as inputs. Internal helper for `PartialDeep`.\n*/\ninterface PartialReadonlySetDeep<T> extends ReadonlySet<PartialDeep<T>> {}\n\n/**\nSame as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.\n*/\ntype PartialObjectDeep<ObjectType extends object> = {\n\t[KeyType in keyof ObjectType]?: PartialDeep<ObjectType[KeyType]>\n};\n",
      "source/promisable.d.ts": "/**\nCreate a type that represents either the value or the value wrapped in `PromiseLike`.\n\nUse-cases:\n- A function accepts a callback that may either return a value synchronously or may return a promised value.\n- This type could be the return type of `Promise#then()`, `Promise#catch()`, and `Promise#finally()` callbacks.\n\nPlease upvote [this issue](https://github.com/microsoft/TypeScript/issues/31394) if you want to have this type as a built-in in TypeScript.\n\n@example\n```\nimport {Promisable} from 'type-fest';\n\nasync function logger(getLogEntry: () => Promisable<string>): Promise<void> {\n    const entry = await getLogEntry();\n    console.log(entry);\n}\n\nlogger(() => 'foo');\nlogger(() => Promise.resolve('bar'));\n```\n*/\nexport type Promisable<T> = T | PromiseLike<T>;\n",
      "source/promise-value.d.ts": "/**\nReturns the type that is wrapped inside a `Promise` type.\nIf the type is a nested Promise, it is unwrapped recursively until a non-Promise type is obtained.\nIf the type is not a `Promise`, the type itself is returned.\n\n@example\n```\nimport {PromiseValue} from 'type-fest';\n\ntype AsyncData = Promise<string>;\nlet asyncData: PromiseValue<AsyncData> = Promise.resolve('ABC');\n\ntype Data = PromiseValue<AsyncData>;\nlet data: Data = await asyncData;\n\n// Here's an example that shows how this type reacts to non-Promise types.\ntype SyncData = PromiseValue<string>;\nlet syncData: SyncData = getSyncData();\n\n// Here's an example that shows how this type reacts to recursive Promise types.\ntype RecursiveAsyncData = Promise<Promise<string> >;\nlet recursiveAsyncData: PromiseValue<RecursiveAsyncData> = Promise.resolve(Promise.resolve('ABC'));\n```\n*/\nexport type PromiseValue<PromiseType, Otherwise = PromiseType> = PromiseType extends Promise<infer Value>\n\t? { 0: PromiseValue<Value>; 1: Value }[PromiseType extends Promise<unknown> ? 0 : 1]\n\t: Otherwise;\n",
      "source/readonly-deep.d.ts": "import {Primitive} from './basic';\n\n/**\nConvert `object`s, `Map`s, `Set`s, and `Array`s and all of their keys/elements into immutable structures recursively.\n\nThis is useful when a deeply nested structure needs to be exposed as completely immutable, for example, an imported JSON module or when receiving an API response that is passed around.\n\nPlease upvote [this issue](https://github.com/microsoft/TypeScript/issues/13923) if you want to have this type as a built-in in TypeScript.\n\n@example\n```\n// data.json\n{\n\t\"foo\": [\"bar\"]\n}\n\n// main.ts\nimport {ReadonlyDeep} from 'type-fest';\nimport dataJson = require('./data.json');\n\nconst data: ReadonlyDeep<typeof dataJson> = dataJson;\n\nexport default data;\n\n// test.ts\nimport data from './main';\n\ndata.foo.push('bar');\n//=> error TS2339: Property 'push' does not exist on type 'readonly string[]'\n```\n*/\nexport type ReadonlyDeep<T> = T extends Primitive | ((...arguments: any[]) => unknown)\n\t? T\n\t: T extends ReadonlyMap<infer KeyType, infer ValueType>\n\t? ReadonlyMapDeep<KeyType, ValueType>\n\t: T extends ReadonlySet<infer ItemType>\n\t? ReadonlySetDeep<ItemType>\n\t: T extends object\n\t? ReadonlyObjectDeep<T>\n\t: unknown;\n\n/**\nSame as `ReadonlyDeep`, but accepts only `ReadonlyMap`s as inputs. Internal helper for `ReadonlyDeep`.\n*/\ninterface ReadonlyMapDeep<KeyType, ValueType>\n\textends ReadonlyMap<ReadonlyDeep<KeyType>, ReadonlyDeep<ValueType>> {}\n\n/**\nSame as `ReadonlyDeep`, but accepts only `ReadonlySet`s as inputs. Internal helper for `ReadonlyDeep`.\n*/\ninterface ReadonlySetDeep<ItemType>\n\textends ReadonlySet<ReadonlyDeep<ItemType>> {}\n\n/**\nSame as `ReadonlyDeep`, but accepts only `object`s as inputs. Internal helper for `ReadonlyDeep`.\n*/\ntype ReadonlyObjectDeep<ObjectType extends object> = {\n\treadonly [KeyType in keyof ObjectType]: ReadonlyDeep<ObjectType[KeyType]>\n};\n",
      "source/require-at-least-one.d.ts": "import {Except} from './except';\n\n/**\nCreate a type that requires at least one of the given keys. The remaining keys are kept as is.\n\n@example\n```\nimport {RequireAtLeastOne} from 'type-fest';\n\ntype Responder = {\n\ttext?: () => string;\n\tjson?: () => string;\n\n\tsecure?: boolean;\n};\n\nconst responder: RequireAtLeastOne<Responder, 'text' | 'json'> = {\n\tjson: () => '{\"message\": \"ok\"}',\n\tsecure: true\n};\n```\n*/\nexport type RequireAtLeastOne<ObjectType, KeysType extends keyof ObjectType = keyof ObjectType> =\n\t{\n\t\t// For each Key in KeysType make a mapped type\n\t\t[Key in KeysType]: (\n\t\t\t// …by picking that Key's type and making it required\n\t\t\tRequired<Pick<ObjectType, Key>>\n\t\t)\n\t}[KeysType]\n\t// …then, make intersection types by adding the remaining keys to each mapped type.\n\t& Except<ObjectType, KeysType>;\n",
      "source/require-exactly-one.d.ts": "// TODO: Remove this when we target TypeScript >=3.5.\ntype _Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\n/**\nCreate a type that requires exactly one of the given keys and disallows more. The remaining keys are kept as is.\n\nUse-cases:\n- Creating interfaces for components that only need one of the keys to display properly.\n- Declaring generic keys in a single place for a single use-case that gets narrowed down via `RequireExactlyOne`.\n\nThe caveat with `RequireExactlyOne` is that TypeScript doesn't always know at compile time every key that will exist at runtime. Therefore `RequireExactlyOne` can't do anything to prevent extra keys it doesn't know about.\n\n@example\n```\nimport {RequireExactlyOne} from 'type-fest';\n\ntype Responder = {\n\ttext: () => string;\n\tjson: () => string;\n\tsecure: boolean;\n};\n\nconst responder: RequireExactlyOne<Responder, 'text' | 'json'> = {\n\t// Adding a `text` key here would cause a compile error.\n\n\tjson: () => '{\"message\": \"ok\"}',\n\tsecure: true\n};\n```\n*/\nexport type RequireExactlyOne<ObjectType, KeysType extends keyof ObjectType = keyof ObjectType> =\n\t{[Key in KeysType]: (\n\t\tRequired<Pick<ObjectType, Key>> &\n\t\tPartial<Record<Exclude<KeysType, Key>, never>>\n\t)}[KeysType] & _Omit<ObjectType, KeysType>;\n",
      "source/set-optional.d.ts": "import {Except} from './except';\n\n/**\nCreate a type that makes the given keys optional. The remaining keys are kept as is. The sister of the `SetRequired` type.\n\nUse-case: You want to define a single model where the only thing that changes is whether or not some of the keys are optional.\n\n@example\n```\nimport {SetOptional} from 'type-fest';\n\ntype Foo = {\n\ta: number;\n\tb?: string;\n\tc: boolean;\n}\n\ntype SomeOptional = SetOptional<Foo, 'b' | 'c'>;\n// type SomeOptional = {\n// \ta: number;\n// \tb?: string; // Was already optional and still is.\n// \tc?: boolean; // Is now optional.\n// }\n```\n*/\nexport type SetOptional<BaseType, Keys extends keyof BaseType = keyof BaseType> =\n\t// Pick just the keys that are not optional from the base type.\n\tExcept<BaseType, Keys> &\n\t// Pick the keys that should be optional from the base type and make them optional.\n\tPartial<Pick<BaseType, Keys>> extends\n\t// If `InferredType` extends the previous, then for each key, use the inferred type key.\n\tinfer InferredType\n\t\t? {[KeyType in keyof InferredType]: InferredType[KeyType]}\n\t\t: never;\n",
      "source/set-required.d.ts": "import {Except} from './except';\n\n/**\nCreate a type that makes the given keys required. The remaining keys are kept as is. The sister of the `SetOptional` type.\n\nUse-case: You want to define a single model where the only thing that changes is whether or not some of the keys are required.\n\n@example\n```\nimport {SetRequired} from 'type-fest';\n\ntype Foo = {\n\ta?: number;\n\tb: string;\n\tc?: boolean;\n}\n\ntype SomeRequired = SetRequired<Foo, 'b' | 'c'>;\n// type SomeRequired = {\n// \ta?: number;\n// \tb: string; // Was already required and still is.\n// \tc: boolean; // Is now required.\n// }\n```\n*/\nexport type SetRequired<BaseType, Keys extends keyof BaseType = keyof BaseType> =\n\t// Pick just the keys that are not required from the base type.\n\tExcept<BaseType, Keys> &\n\t// Pick the keys that should be required from the base type and make them required.\n\tRequired<Pick<BaseType, Keys>> extends\n\t// If `InferredType` extends the previous, then for each key, use the inferred type key.\n\tinfer InferredType\n\t\t? {[KeyType in keyof InferredType]: InferredType[KeyType]}\n\t\t: never;\n",
      "source/stringified.d.ts": "/**\nCreate a type with the keys of the given type changed to `string` type.\n\nUse-case: Changing interface values to strings in order to use them in a form model.\n\n@example\n```\nimport {Stringified} from 'type-fest';\n\ntype Car {\n\tmodel: string;\n\tspeed: number;\n}\n\nconst carForm: Stringified<Car> = {\n\tmodel: 'Foo',\n\tspeed: '101'\n};\n```\n*/\nexport type Stringified<ObjectType> = {[KeyType in keyof ObjectType]: string};\n",
      "source/tsconfig-json.d.ts": "declare namespace TsConfigJson {\n\tnamespace CompilerOptions {\n\t\texport type JSX =\n\t\t\t| 'preserve'\n\t\t\t| 'react'\n\t\t\t| 'react-native';\n\n\t\texport type Module =\n\t\t\t| 'CommonJS'\n\t\t\t| 'AMD'\n\t\t\t| 'System'\n\t\t\t| 'UMD'\n\t\t\t| 'ES6'\n\t\t\t| 'ES2015'\n\t\t\t| 'ESNext'\n\t\t\t| 'None'\n\t\t\t// Lowercase alternatives\n\t\t\t| 'commonjs'\n\t\t\t| 'amd'\n\t\t\t| 'system'\n\t\t\t| 'umd'\n\t\t\t| 'es6'\n\t\t\t| 'es2015'\n\t\t\t| 'esnext'\n\t\t\t| 'none';\n\n\t\texport type NewLine =\n\t\t\t| 'CRLF'\n\t\t\t| 'LF'\n\t\t\t// Lowercase alternatives\n\t\t\t| 'crlf'\n\t\t\t| 'lf';\n\n\t\texport type Target =\n\t\t\t| 'ES3'\n\t\t\t| 'ES5'\n\t\t\t| 'ES6'\n\t\t\t| 'ES2015'\n\t\t\t| 'ES2016'\n\t\t\t| 'ES2017'\n\t\t\t| 'ES2018'\n\t\t\t| 'ES2019'\n\t\t\t| 'ES2020'\n\t\t\t| 'ESNext'\n\t\t\t// Lowercase alternatives\n\t\t\t| 'es3'\n\t\t\t| 'es5'\n\t\t\t| 'es6'\n\t\t\t| 'es2015'\n\t\t\t| 'es2016'\n\t\t\t| 'es2017'\n\t\t\t| 'es2018'\n\t\t\t| 'es2019'\n\t\t\t| 'es2020'\n\t\t\t| 'esnext';\n\n\t\texport type Lib =\n\t\t\t| 'ES5'\n\t\t\t| 'ES6'\n\t\t\t| 'ES7'\n\t\t\t| 'ES2015'\n\t\t\t| 'ES2015.Collection'\n\t\t\t| 'ES2015.Core'\n\t\t\t| 'ES2015.Generator'\n\t\t\t| 'ES2015.Iterable'\n\t\t\t| 'ES2015.Promise'\n\t\t\t| 'ES2015.Proxy'\n\t\t\t| 'ES2015.Reflect'\n\t\t\t| 'ES2015.Symbol.WellKnown'\n\t\t\t| 'ES2015.Symbol'\n\t\t\t| 'ES2016'\n\t\t\t| 'ES2016.Array.Include'\n\t\t\t| 'ES2017'\n\t\t\t| 'ES2017.Intl'\n\t\t\t| 'ES2017.Object'\n\t\t\t| 'ES2017.SharedMemory'\n\t\t\t| 'ES2017.String'\n\t\t\t| 'ES2017.TypedArrays'\n\t\t\t| 'ES2018'\n\t\t\t| 'ES2018.AsyncIterable'\n\t\t\t| 'ES2018.Intl'\n\t\t\t| 'ES2018.Promise'\n\t\t\t| 'ES2018.Regexp'\n\t\t\t| 'ES2019'\n\t\t\t| 'ES2019.Array'\n\t\t\t| 'ES2019.Object'\n\t\t\t| 'ES2019.String'\n\t\t\t| 'ES2019.Symbol'\n\t\t\t| 'ES2020'\n\t\t\t| 'ES2020.String'\n\t\t\t| 'ES2020.Symbol.WellKnown'\n\t\t\t| 'ESNext'\n\t\t\t| 'ESNext.Array'\n\t\t\t| 'ESNext.AsyncIterable'\n\t\t\t| 'ESNext.BigInt'\n\t\t\t| 'ESNext.Intl'\n\t\t\t| 'ESNext.Symbol'\n\t\t\t| 'DOM'\n\t\t\t| 'DOM.Iterable'\n\t\t\t| 'ScriptHost'\n\t\t\t| 'WebWorker'\n\t\t\t| 'WebWorker.ImportScripts'\n\t\t\t// Lowercase alternatives\n\t\t\t| 'es5'\n\t\t\t| 'es6'\n\t\t\t| 'es7'\n\t\t\t| 'es2015'\n\t\t\t| 'es2015.collection'\n\t\t\t| 'es2015.core'\n\t\t\t| 'es2015.generator'\n\t\t\t| 'es2015.iterable'\n\t\t\t| 'es2015.promise'\n\t\t\t| 'es2015.proxy'\n\t\t\t| 'es2015.reflect'\n\t\t\t| 'es2015.symbol.wellknown'\n\t\t\t| 'es2015.symbol'\n\t\t\t| 'es2016'\n\t\t\t| 'es2016.array.include'\n\t\t\t| 'es2017'\n\t\t\t| 'es2017.intl'\n\t\t\t| 'es2017.object'\n\t\t\t| 'es2017.sharedmemory'\n\t\t\t| 'es2017.string'\n\t\t\t| 'es2017.typedarrays'\n\t\t\t| 'es2018'\n\t\t\t| 'es2018.asynciterable'\n\t\t\t| 'es2018.intl'\n\t\t\t| 'es2018.promise'\n\t\t\t| 'es2018.regexp'\n\t\t\t| 'es2019'\n\t\t\t| 'es2019.array'\n\t\t\t| 'es2019.object'\n\t\t\t| 'es2019.string'\n\t\t\t| 'es2019.symbol'\n\t\t\t| 'es2020'\n\t\t\t| 'es2020.string'\n\t\t\t| 'es2020.symbol.wellknown'\n\t\t\t| 'esnext'\n\t\t\t| 'esnext.array'\n\t\t\t| 'esnext.asynciterable'\n\t\t\t| 'esnext.bigint'\n\t\t\t| 'esnext.intl'\n\t\t\t| 'esnext.symbol'\n\t\t\t| 'dom'\n\t\t\t| 'dom.iterable'\n\t\t\t| 'scripthost'\n\t\t\t| 'webworker'\n\t\t\t| 'webworker.importscripts';\n\n\t\texport interface Plugin {\n\t\t\t[key: string]: unknown;\n\t\t\t/**\n\t\t\tPlugin name.\n\t\t\t*/\n\t\t\tname?: string;\n\t\t}\n\t}\n\n\texport interface CompilerOptions {\n\t\t/**\n\t\tThe character set of the input files.\n\n\t\t@default 'utf8'\n\t\t*/\n\t\tcharset?: string;\n\n\t\t/**\n\t\tEnables building for project references.\n\n\t\t@default true\n\t\t*/\n\t\tcomposite?: boolean;\n\n\t\t/**\n\t\tGenerates corresponding d.ts files.\n\n\t\t@default false\n\t\t*/\n\t\tdeclaration?: boolean;\n\n\t\t/**\n\t\tSpecify output directory for generated declaration files.\n\n\t\tRequires TypeScript version 2.0 or later.\n\t\t*/\n\t\tdeclarationDir?: string;\n\n\t\t/**\n\t\tShow diagnostic information.\n\n\t\t@default false\n\t\t*/\n\t\tdiagnostics?: boolean;\n\n\t\t/**\n\t\tEmit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\n\n\t\t@default false\n\t\t*/\n\t\temitBOM?: boolean;\n\n\t\t/**\n\t\tOnly emit `.d.ts` declaration files.\n\n\t\t@default false\n\t\t*/\n\t\temitDeclarationOnly?: boolean;\n\n\t\t/**\n\t\tEnable incremental compilation.\n\n\t\t@default `composite`\n\t\t*/\n\t\tincremental?: boolean;\n\n\t\t/**\n\t\tSpecify file to store incremental compilation information.\n\n\t\t@default '.tsbuildinfo'\n\t\t*/\n\t\ttsBuildInfoFile?: string;\n\n\t\t/**\n\t\tEmit a single file with source maps instead of having a separate file.\n\n\t\t@default false\n\t\t*/\n\t\tinlineSourceMap?: boolean;\n\n\t\t/**\n\t\tEmit the source alongside the sourcemaps within a single file.\n\n\t\tRequires `--inlineSourceMap` to be set.\n\n\t\t@default false\n\t\t*/\n\t\tinlineSources?: boolean;\n\n\t\t/**\n\t\tSpecify JSX code generation: `'preserve'`, `'react'`, or `'react-native'`.\n\n\t\t@default 'preserve'\n\t\t*/\n\t\tjsx?: CompilerOptions.JSX;\n\n\t\t/**\n\t\tSpecifies the object invoked for `createElement` and `__spread` when targeting `'react'` JSX emit.\n\n\t\t@default 'React'\n\t\t*/\n\t\treactNamespace?: string;\n\n\t\t/**\n\t\tPrint names of files part of the compilation.\n\n\t\t@default false\n\t\t*/\n\t\tlistFiles?: boolean;\n\n\t\t/**\n\t\tSpecifies the location where debugger should locate map files instead of generated locations.\n\t\t*/\n\t\tmapRoot?: string;\n\n\t\t/**\n\t\tSpecify module code generation: 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6', 'ES2015' or 'ESNext'. Only 'AMD' and 'System' can be used in conjunction with `--outFile`. 'ES6' and 'ES2015' values may be used when targeting 'ES5' or lower.\n\n\t\t@default ['ES3', 'ES5'].includes(target) ? 'CommonJS' : 'ES6'\n\t\t*/\n\t\tmodule?: CompilerOptions.Module;\n\n\t\t/**\n\t\tSpecifies the end of line sequence to be used when emitting files: 'crlf' (Windows) or 'lf' (Unix).\n\n\t\tDefault: Platform specific\n\t\t*/\n\t\tnewLine?: CompilerOptions.NewLine;\n\n\t\t/**\n\t\tDo not emit output.\n\n\t\t@default false\n\t\t*/\n\t\tnoEmit?: boolean;\n\n\t\t/**\n\t\tDo not generate custom helper functions like `__extends` in compiled output.\n\n\t\t@default false\n\t\t*/\n\t\tnoEmitHelpers?: boolean;\n\n\t\t/**\n\t\tDo not emit outputs if any type checking errors were reported.\n\n\t\t@default false\n\t\t*/\n\t\tnoEmitOnError?: boolean;\n\n\t\t/**\n\t\tWarn on expressions and declarations with an implied 'any' type.\n\n\t\t@default false\n\t\t*/\n\t\tnoImplicitAny?: boolean;\n\n\t\t/**\n\t\tRaise error on 'this' expressions with an implied any type.\n\n\t\t@default false\n\t\t*/\n\t\tnoImplicitThis?: boolean;\n\n\t\t/**\n\t\tReport errors on unused locals.\n\n\t\tRequires TypeScript version 2.0 or later.\n\n\t\t@default false\n\t\t*/\n\t\tnoUnusedLocals?: boolean;\n\n\t\t/**\n\t\tReport errors on unused parameters.\n\n\t\tRequires TypeScript version 2.0 or later.\n\n\t\t@default false\n\t\t*/\n\t\tnoUnusedParameters?: boolean;\n\n\t\t/**\n\t\tDo not include the default library file (lib.d.ts).\n\n\t\t@default false\n\t\t*/\n\t\tnoLib?: boolean;\n\n\t\t/**\n\t\tDo not add triple-slash references or module import targets to the list of compiled files.\n\n\t\t@default false\n\t\t*/\n\t\tnoResolve?: boolean;\n\n\t\t/**\n\t\tDisable strict checking of generic signatures in function types.\n\n\t\t@default false\n\t\t*/\n\t\tnoStrictGenericChecks?: boolean;\n\n\t\t/**\n\t\t@deprecated use `skipLibCheck` instead.\n\t\t*/\n\t\tskipDefaultLibCheck?: boolean;\n\n\t\t/**\n\t\tSkip type checking of declaration files.\n\n\t\tRequires TypeScript version 2.0 or later.\n\n\t\t@default false\n\t\t*/\n\t\tskipLibCheck?: boolean;\n\n\t\t/**\n\t\tConcatenate and emit output to single file.\n\t\t*/\n\t\toutFile?: string;\n\n\t\t/**\n\t\tRedirect output structure to the directory.\n\t\t*/\n\t\toutDir?: string;\n\n\t\t/**\n\t\tDo not erase const enum declarations in generated code.\n\n\t\t@default false\n\t\t*/\n\t\tpreserveConstEnums?: boolean;\n\n\t\t/**\n\t\tDo not resolve symlinks to their real path; treat a symlinked file like a real one.\n\n\t\t@default false\n\t\t*/\n\t\tpreserveSymlinks?: boolean;\n\n\t\t/**\n\t\tKeep outdated console output in watch mode instead of clearing the screen.\n\n\t\t@default false\n\t\t*/\n\t\tpreserveWatchOutput?: boolean;\n\n\t\t/**\n\t\tStylize errors and messages using color and context (experimental).\n\n\t\t@default true // Unless piping to another program or redirecting output to a file.\n\t\t*/\n\t\tpretty?: boolean;\n\n\t\t/**\n\t\tDo not emit comments to output.\n\n\t\t@default false\n\t\t*/\n\t\tremoveComments?: boolean;\n\n\t\t/**\n\t\tSpecifies the root directory of input files.\n\n\t\tUse to control the output directory structure with `--outDir`.\n\t\t*/\n\t\trootDir?: string;\n\n\t\t/**\n\t\tUnconditionally emit imports for unresolved files.\n\n\t\t@default false\n\t\t*/\n\t\tisolatedModules?: boolean;\n\n\t\t/**\n\t\tGenerates corresponding '.map' file.\n\n\t\t@default false\n\t\t*/\n\t\tsourceMap?: boolean;\n\n\t\t/**\n\t\tSpecifies the location where debugger should locate TypeScript files instead of source locations.\n\t\t*/\n\t\tsourceRoot?: string;\n\n\t\t/**\n\t\tSuppress excess property checks for object literals.\n\n\t\t@default false\n\t\t*/\n\t\tsuppressExcessPropertyErrors?: boolean;\n\n\t\t/**\n\t\tSuppress noImplicitAny errors for indexing objects lacking index signatures.\n\n\t\t@default false\n\t\t*/\n\t\tsuppressImplicitAnyIndexErrors?: boolean;\n\n\t\t/**\n\t\tDo not emit declarations for code that has an `@internal` annotation.\n\t\t*/\n\t\tstripInternal?: boolean;\n\n\t\t/**\n\t\tSpecify ECMAScript target version.\n\n\t\t@default 'es3'\n\t\t*/\n\t\ttarget?: CompilerOptions.Target;\n\n\t\t/**\n\t\tWatch input files.\n\n\t\t@default false\n\t\t*/\n\t\twatch?: boolean;\n\n\t\t/**\n\t\tEnables experimental support for ES7 decorators.\n\n\t\t@default false\n\t\t*/\n\t\texperimentalDecorators?: boolean;\n\n\t\t/**\n\t\tEmit design-type metadata for decorated declarations in source.\n\n\t\t@default false\n\t\t*/\n\t\temitDecoratorMetadata?: boolean;\n\n\t\t/**\n\t\tSpecifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6).\n\n\t\t@default ['AMD', 'System', 'ES6'].includes(module) ? 'classic' : 'node'\n\t\t*/\n\t\tmoduleResolution?: 'classic' | 'node';\n\n\t\t/**\n\t\tDo not report errors on unused labels.\n\n\t\t@default false\n\t\t*/\n\t\tallowUnusedLabels?: boolean;\n\n\t\t/**\n\t\tReport error when not all code paths in function return a value.\n\n\t\t@default false\n\t\t*/\n\t\tnoImplicitReturns?: boolean;\n\n\t\t/**\n\t\tReport errors for fallthrough cases in switch statement.\n\n\t\t@default false\n\t\t*/\n\t\tnoFallthroughCasesInSwitch?: boolean;\n\n\t\t/**\n\t\tDo not report errors on unreachable code.\n\n\t\t@default false\n\t\t*/\n\t\tallowUnreachableCode?: boolean;\n\n\t\t/**\n\t\tDisallow inconsistently-cased references to the same file.\n\n\t\t@default false\n\t\t*/\n\t\tforceConsistentCasingInFileNames?: boolean;\n\n\t\t/**\n\t\tBase directory to resolve non-relative module names.\n\t\t*/\n\t\tbaseUrl?: string;\n\n\t\t/**\n\t\tSpecify path mapping to be computed relative to baseUrl option.\n\t\t*/\n\t\tpaths?: {\n\t\t\t[key: string]: string[];\n\t\t};\n\n\t\t/**\n\t\tList of TypeScript language server plugins to load.\n\n\t\tRequires TypeScript version 2.3 or later.\n\t\t*/\n\t\tplugins?: CompilerOptions.Plugin[];\n\n\t\t/**\n\t\tSpecify list of root directories to be used when resolving modules.\n\t\t*/\n\t\trootDirs?: string[];\n\n\t\t/**\n\t\tSpecify list of directories for type definition files to be included.\n\n\t\tRequires TypeScript version 2.0 or later.\n\t\t*/\n\t\ttypeRoots?: string[];\n\n\t\t/**\n\t\tType declaration files to be included in compilation.\n\n\t\tRequires TypeScript version 2.0 or later.\n\t\t*/\n\t\ttypes?: string[];\n\n\t\t/**\n\t\tEnable tracing of the name resolution process.\n\n\t\t@default false\n\t\t*/\n\t\ttraceResolution?: boolean;\n\n\t\t/**\n\t\tAllow javascript files to be compiled.\n\n\t\t@default false\n\t\t*/\n\t\tallowJs?: boolean;\n\n\t\t/**\n\t\tDo not truncate error messages.\n\n\t\t@default false\n\t\t*/\n\t\tnoErrorTruncation?: boolean;\n\n\t\t/**\n\t\tAllow default imports from modules with no default export. This does not affect code emit, just typechecking.\n\n\t\t@default module === 'system' || esModuleInterop\n\t\t*/\n\t\tallowSyntheticDefaultImports?: boolean;\n\n\t\t/**\n\t\tDo not emit `'use strict'` directives in module output.\n\n\t\t@default false\n\t\t*/\n\t\tnoImplicitUseStrict?: boolean;\n\n\t\t/**\n\t\tEnable to list all emitted files.\n\n\t\tRequires TypeScript version 2.0 or later.\n\n\t\t@default false\n\t\t*/\n\t\tlistEmittedFiles?: boolean;\n\n\t\t/**\n\t\tDisable size limit for JavaScript project.\n\n\t\tRequires TypeScript version 2.0 or later.\n\n\t\t@default false\n\t\t*/\n\t\tdisableSizeLimit?: boolean;\n\n\t\t/**\n\t\tList of library files to be included in the compilation.\n\n\t\tRequires TypeScript version 2.0 or later.\n\t\t*/\n\t\tlib?: CompilerOptions.Lib[];\n\n\t\t/**\n\t\tEnable strict null checks.\n\n\t\tRequires TypeScript version 2.0 or later.\n\n\t\t@default false\n\t\t*/\n\t\tstrictNullChecks?: boolean;\n\n\t\t/**\n\t\tThe maximum dependency depth to search under `node_modules` and load JavaScript files. Only applicable with `--allowJs`.\n\n\t\t@default 0\n\t\t*/\n\t\tmaxNodeModuleJsDepth?: number;\n\n\t\t/**\n\t\tImport emit helpers (e.g. `__extends`, `__rest`, etc..) from tslib.\n\n\t\tRequires TypeScript version 2.1 or later.\n\n\t\t@default false\n\t\t*/\n\t\timportHelpers?: boolean;\n\n\t\t/**\n\t\tSpecify the JSX factory function to use when targeting React JSX emit, e.g. `React.createElement` or `h`.\n\n\t\tRequires TypeScript version 2.1 or later.\n\n\t\t@default 'React.createElement'\n\t\t*/\n\t\tjsxFactory?: string;\n\n\t\t/**\n\t\tParse in strict mode and emit `'use strict'` for each source file.\n\n\t\tRequires TypeScript version 2.1 or later.\n\n\t\t@default false\n\t\t*/\n\t\talwaysStrict?: boolean;\n\n\t\t/**\n\t\tEnable all strict type checking options.\n\n\t\tRequires TypeScript version 2.3 or later.\n\n\t\t@default false\n\t\t*/\n\t\tstrict?: boolean;\n\n\t\t/**\n\t\tEnable stricter checking of of the `bind`, `call`, and `apply` methods on functions.\n\n\t\t@default false\n\t\t*/\n\t\tstrictBindCallApply?: boolean;\n\n\t\t/**\n\t\tProvide full support for iterables in `for-of`, spread, and destructuring when targeting `ES5` or `ES3`.\n\n\t\tRequires TypeScript version 2.3 or later.\n\n\t\t@default false\n\t\t*/\n\t\tdownlevelIteration?: boolean;\n\n\t\t/**\n\t\tReport errors in `.js` files.\n\n\t\tRequires TypeScript version 2.3 or later.\n\n\t\t@default false\n\t\t*/\n\t\tcheckJs?: boolean;\n\n\t\t/**\n\t\tDisable bivariant parameter checking for function types.\n\n\t\tRequires TypeScript version 2.6 or later.\n\n\t\t@default false\n\t\t*/\n\t\tstrictFunctionTypes?: boolean;\n\n\t\t/**\n\t\tEnsure non-undefined class properties are initialized in the constructor.\n\n\t\tRequires TypeScript version 2.7 or later.\n\n\t\t@default false\n\t\t*/\n\t\tstrictPropertyInitialization?: boolean;\n\n\t\t/**\n\t\tEmit `__importStar` and `__importDefault` helpers for runtime Babel ecosystem compatibility and enable `--allowSyntheticDefaultImports` for typesystem compatibility.\n\n\t\tRequires TypeScript version 2.7 or later.\n\n\t\t@default false\n\t\t*/\n\t\tesModuleInterop?: boolean;\n\n\t\t/**\n\t\tAllow accessing UMD globals from modules.\n\n\t\t@default false\n\t\t*/\n\t\tallowUmdGlobalAccess?: boolean;\n\n\t\t/**\n\t\tResolve `keyof` to string valued property names only (no numbers or symbols).\n\n\t\tRequires TypeScript version 2.9 or later.\n\n\t\t@default false\n\t\t*/\n\t\tkeyofStringsOnly?: boolean;\n\n\t\t/**\n\t\tEmit ECMAScript standard class fields.\n\n\t\tRequires TypeScript version 3.7 or later.\n\n\t\t@default false\n\t\t*/\n\t\tuseDefineForClassFields?: boolean;\n\n\t\t/**\n\t\tGenerates a sourcemap for each corresponding `.d.ts` file.\n\n\t\tRequires TypeScript version 2.9 or later.\n\n\t\t@default false\n\t\t*/\n\t\tdeclarationMap?: boolean;\n\n\t\t/**\n\t\tInclude modules imported with `.json` extension.\n\n\t\tRequires TypeScript version 2.9 or later.\n\n\t\t@default false\n\t\t*/\n\t\tresolveJsonModule?: boolean;\n\t}\n\n\t/**\n\tAuto type (.d.ts) acquisition options for this project.\n\n\tRequires TypeScript version 2.1 or later.\n\t*/\n\texport interface TypeAcquisition {\n\t\t/**\n\t\tEnable auto type acquisition.\n\t\t*/\n\t\tenable?: boolean;\n\n\t\t/**\n\t\tSpecifies a list of type declarations to be included in auto type acquisition. For example, `['jquery', 'lodash']`.\n\t\t*/\n\t\tinclude?: string[];\n\n\t\t/**\n\t\tSpecifies a list of type declarations to be excluded from auto type acquisition. For example, `['jquery', 'lodash']`.\n\t\t*/\n\t\texclude?: string[];\n\t}\n\n\texport interface References {\n\t\t/**\n\t\tA normalized path on disk.\n\t\t*/\n\t\tpath: string;\n\n\t\t/**\n\t\tThe path as the user originally wrote it.\n\t\t*/\n\t\toriginalPath?: string;\n\n\t\t/**\n\t\tTrue if the output of this reference should be prepended to the output of this project.\n\n\t\tOnly valid for `--outFile` compilations.\n\t\t*/\n\t\tprepend?: boolean;\n\n\t\t/**\n\t\tTrue if it is intended that this reference form a circularity.\n\t\t*/\n\t\tcircular?: boolean;\n\t}\n}\n\nexport interface TsConfigJson {\n\t/**\n\tInstructs the TypeScript compiler how to compile `.ts` files.\n\t*/\n\tcompilerOptions?: TsConfigJson.CompilerOptions;\n\n\t/**\n\tAuto type (.d.ts) acquisition options for this project.\n\n\tRequires TypeScript version 2.1 or later.\n\t*/\n\ttypeAcquisition?: TsConfigJson.TypeAcquisition;\n\n\t/**\n\tEnable Compile-on-Save for this project.\n\t*/\n\tcompileOnSave?: boolean;\n\n\t/**\n\tPath to base configuration file to inherit from.\n\n\tRequires TypeScript version 2.1 or later.\n\t*/\n\textends?: string;\n\n\t/**\n\tIf no `files` or `include` property is present in a `tsconfig.json`, the compiler defaults to including all files in the containing directory and subdirectories except those specified by `exclude`. When a `files` property is specified, only those files and those specified by `include` are included.\n\t*/\n\tfiles?: string[];\n\n\t/**\n\tSpecifies a list of files to be excluded from compilation. The `exclude` property only affects the files included via the `include` property and not the `files` property.\n\n\tGlob patterns require TypeScript version 2.0 or later.\n\t*/\n\texclude?: string[];\n\n\t/**\n\tSpecifies a list of glob patterns that match files to be included in compilation.\n\n\tIf no `files` or `include` property is present in a `tsconfig.json`, the compiler defaults to including all files in the containing directory and subdirectories except those specified by `exclude`.\n\n\tRequires TypeScript version 2.0 or later.\n\t*/\n\tinclude?: string[];\n\n\t/**\n\tReferenced projects.\n\n\tRequires TypeScript version 3.0 or later.\n\t*/\n\treferences?: TsConfigJson.References[];\n}\n",
      "source/union-to-intersection.d.ts": "/**\nConvert a union type to an intersection type using [distributive conditional types](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types).\n\nInspired by [this Stack Overflow answer](https://stackoverflow.com/a/50375286/2172153).\n\n@example\n```\nimport {UnionToIntersection} from 'type-fest';\n\ntype Union = {the(): void} | {great(arg: string): void} | {escape: boolean};\n\ntype Intersection = UnionToIntersection<Union>;\n//=> {the(): void; great(arg: string): void; escape: boolean};\n```\n\nA more applicable example which could make its way into your library code follows.\n\n@example\n```\nimport {UnionToIntersection} from 'type-fest';\n\nclass CommandOne {\n\tcommands: {\n\t\ta1: () => undefined,\n\t\tb1: () => undefined,\n\t}\n}\n\nclass CommandTwo {\n\tcommands: {\n\t\ta2: (argA: string) => undefined,\n\t\tb2: (argB: string) => undefined,\n\t}\n}\n\nconst union = [new CommandOne(), new CommandTwo()].map(instance => instance.commands);\ntype Union = typeof union;\n//=> {a1(): void; b1(): void} | {a2(argA: string): void; b2(argB: string): void}\n\ntype Intersection = UnionToIntersection<Union>;\n//=> {a1(): void; b1(): void; a2(argA: string): void; b2(argB: string): void}\n```\n*/\nexport type UnionToIntersection<Union> = (\n\t// `extends unknown` is always going to be the case and is used to convert the\n\t// `Union` into a [distributive conditional\n\t// type](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types).\n\tUnion extends unknown\n\t\t// The union type is used as the only argument to a function since the union\n\t\t// of function arguments is an intersection.\n\t\t? (distributedUnion: Union) => void\n\t\t// This won't happen.\n\t\t: never\n\t\t// Infer the `Intersection` type since TypeScript represents the positional\n\t\t// arguments of unions of functions as an intersection of the union.\n\t) extends ((mergedIntersection: infer Intersection) => void)\n\t\t? Intersection\n\t\t: never;\n",
      "source/value-of.d.ts": "/**\nCreate a union of the given object's values, and optionally specify which keys to get the values from.\n\nPlease upvote [this issue](https://github.com/microsoft/TypeScript/issues/31438) if you want to have this type as a built-in in TypeScript.\n\n@example\n```\n// data.json\n{\n\t'foo': 1,\n\t'bar': 2,\n\t'biz': 3\n}\n\n// main.ts\nimport {ValueOf} from 'type-fest';\nimport data = require('./data.json');\n\nexport function getData(name: string): ValueOf<typeof data> {\n\treturn data[name];\n}\n\nexport function onlyBar(name: string): ValueOf<typeof data, 'bar'> {\n\treturn data[name];\n}\n\n// file.ts\nimport {getData, onlyBar} from './main';\n\ngetData('foo');\n//=> 1\n\nonlyBar('foo');\n//=> TypeError ...\n\nonlyBar('bar');\n//=> 2\n```\n*/\nexport type ValueOf<ObjectType, ValueType extends keyof ObjectType = keyof ObjectType> = ObjectType[ValueType];\n"
    },
    "nanoevents": {
      "index.d.ts": "interface EventsMap {\n  [event: string]: any\n}\n\ninterface DefaultEvents extends EventsMap {\n  [event: string]: (...args: any) => void\n}\n\nexport interface Unsubscribe {\n  (): void\n}\n\nexport declare class Emitter<Events extends EventsMap = DefaultEvents> {\n  /**\n   * Event names in keys and arrays with listeners in values.\n   *\n   * ```js\n   * emitter1.events = emitter2.events\n   * emitter2.events = { }\n   * ```\n   */\n  events: Partial<{ [E in keyof Events]: Events[E][] }>\n\n  /**\n   * Add a listener for a given event.\n   *\n   * ```js\n   * const unbind = ee.on('tick', (tickType, tickDuration) => {\n   *   count += 1\n   * })\n   *\n   * disable () {\n   *   unbind()\n   * }\n   * ```\n   *\n   * @param event The event name.\n   * @param cb The listener function.\n   * @returns Unbind listener from event.\n   */\n  on<K extends keyof Events> (this: this, event: K, cb: Events[K]): Unsubscribe\n\n  /**\n   * Calls each of the listeners registered for a given event.\n   *\n   * ```js\n   * ee.emit('tick', tickType, tickDuration)\n   * ```\n   *\n   * @param event The event name.\n   * @param args The arguments for listeners.\n   */\n  emit<K extends keyof Events> (\n    this: this,\n    event: K,\n    ...args: Parameters<Events[K]>\n  ): void\n}\n\n/**\n * Create event emitter.\n *\n * ```js\n * import { createNanoEvents } from 'nanoevents'\n *\n * class Ticker {\n *   constructor() {\n *     this.emitter = createNanoEvents()\n *   }\n *   on(...args) {\n *     return this.emitter.on(...args)\n *   }\n *   tick() {\n *     this.emitter.emit('tick')\n *   }\n * }\n * ```\n */\nexport function createNanoEvents<\n  Events extends EventsMap = DefaultEvents\n> (): Emitter<Events>\n"
    },
    "react-use": {
      "esm/comps/UseKey.d.ts": "declare const UseKey: (props: any) => any;\nexport default UseKey;\n",
      "esm/createBreakpoint.d.ts": "declare const createBreakpoint: (breakpoints?: {\n    [name: string]: number;\n}) => () => string;\nexport default createBreakpoint;\n",
      "esm/createGlobalState.d.ts": "export declare function createGlobalState<S = any>(initialState?: S): () => [S | undefined, (state: S) => void];\nexport default createGlobalState;\n",
      "esm/createMemo.d.ts": "declare const createMemo: <T extends (...args: any) => any>(fn: T) => (...args: Parameters<T>) => ReturnType<T>;\nexport default createMemo;\n",
      "esm/createReducer.d.ts": "declare type Dispatch<Action> = (action: Action) => void;\ninterface Store<Action, State> {\n    getState: () => State;\n    dispatch: Dispatch<Action>;\n}\ndeclare type Middleware<Action, State> = (store: Store<Action, State>) => (next: Dispatch<Action>) => (action: Action) => void;\ndeclare const createReducer: <Action, State>(...middlewares: Middleware<Action, State>[]) => (reducer: (state: State, action: Action) => State, initialState: State, initializer?: (value: State) => State) => [State, Dispatch<Action>];\nexport default createReducer;\n",
      "esm/createReducerContext.d.ts": "/// <reference types=\"react\" />\ndeclare const createReducerContext: <R extends import(\"react\").Reducer<any, any>>(reducer: R, defaultInitialState: import(\"react\").ReducerState<R>) => readonly [() => [import(\"react\").ReducerState<R>, import(\"react\").Dispatch<import(\"react\").ReducerAction<R>>], import(\"react\").FC<{\n    initialState?: import(\"react\").ReducerState<R> | undefined;\n}>, import(\"react\").Context<[import(\"react\").ReducerState<R>, import(\"react\").Dispatch<import(\"react\").ReducerAction<R>>] | undefined>];\nexport default createReducerContext;\n",
      "esm/createRouter.d.ts": "export interface RouterProviderProps {\n    route: string;\n    fullRoute?: string;\n    parent?: any;\n}\ndeclare const createRouter: () => void;\nexport default createRouter;\n",
      "esm/createStateContext.d.ts": "/// <reference types=\"react\" />\ndeclare const createStateContext: <T>(defaultInitialValue: T) => readonly [() => [T, import(\"react\").Dispatch<import(\"react\").SetStateAction<T>>], import(\"react\").FC<{\n    initialValue?: T | undefined;\n}>, import(\"react\").Context<[T, import(\"react\").Dispatch<import(\"react\").SetStateAction<T>>] | undefined>];\nexport default createStateContext;\n",
      "esm/index.d.ts": "export { default as createMemo } from './createMemo';\nexport { default as createReducerContext } from './createReducerContext';\nexport { default as createReducer } from './createReducer';\nexport { default as createStateContext } from './createStateContext';\nexport { default as useAsync } from './useAsync';\nexport { default as useAsyncFn } from './useAsyncFn';\nexport { default as useAsyncRetry } from './useAsyncRetry';\nexport { default as useAudio } from './useAudio';\nexport { default as useBattery } from './useBattery';\nexport { default as useBeforeUnload } from './useBeforeUnload';\nexport { default as useBoolean } from './useBoolean';\nexport { default as useClickAway } from './useClickAway';\nexport { default as useCookie } from './useCookie';\nexport { default as useCopyToClipboard } from './useCopyToClipboard';\nexport { default as useCounter } from './useCounter';\nexport { default as useCss } from './useCss';\nexport { default as useCustomCompareEffect } from './useCustomCompareEffect';\nexport { default as useDebounce } from './useDebounce';\nexport { default as useDeepCompareEffect } from './useDeepCompareEffect';\nexport { default as useDefault } from './useDefault';\nexport { default as useDrop } from './useDrop';\nexport { default as useDropArea } from './useDropArea';\nexport { default as useEffectOnce } from './useEffectOnce';\nexport { default as useEnsuredForwardedRef, ensuredForwardRef } from './useEnsuredForwardedRef';\nexport { default as useEvent } from './useEvent';\nexport { default as useError } from './useError';\nexport { default as useFavicon } from './useFavicon';\nexport { default as useFullscreen } from './useFullscreen';\nexport { default as useGeolocation } from './useGeolocation';\nexport { default as useGetSet } from './useGetSet';\nexport { default as useGetSetState } from './useGetSetState';\nexport { default as useHarmonicIntervalFn } from './useHarmonicIntervalFn';\nexport { default as useHover } from './useHover';\nexport { default as useHoverDirty } from './useHoverDirty';\nexport { default as useIdle } from './useIdle';\nexport { default as useIntersection } from './useIntersection';\nexport { default as useInterval } from './useInterval';\nexport { default as useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\nexport { default as useKey } from './useKey';\nexport { default as createBreakpoint } from './createBreakpoint';\nexport { default as useKeyPress } from './useKeyPress';\nexport { default as useKeyPressEvent } from './useKeyPressEvent';\nexport { default as useLatest } from './useLatest';\nexport { default as useLifecycles } from './useLifecycles';\nexport { default as useList } from './useList';\nexport { default as useLocalStorage } from './useLocalStorage';\nexport { default as useLocation } from './useLocation';\nexport { default as useLockBodyScroll } from './useLockBodyScroll';\nexport { default as useLogger } from './useLogger';\nexport { default as useLongPress } from './useLongPress';\nexport { default as useMap } from './useMap';\nexport { default as useMedia } from './useMedia';\nexport { default as useMediaDevices } from './useMediaDevices';\nexport { useMediatedState } from './useMediatedState';\nexport { default as useMethods } from './useMethods';\nexport { default as useMotion } from './useMotion';\nexport { default as useMount } from './useMount';\nexport { default as useMountedState } from './useMountedState';\nexport { default as useMouse } from './useMouse';\nexport { default as useMouseHovered } from './useMouseHovered';\nexport { default as useMouseWheel } from './useMouseWheel';\nexport { default as useNetwork } from './useNetwork';\nexport { default as useNumber } from './useNumber';\nexport { default as useObservable } from './useObservable';\nexport { default as useOrientation } from './useOrientation';\nexport { default as usePageLeave } from './usePageLeave';\nexport { default as usePermission } from './usePermission';\nexport { default as usePrevious } from './usePrevious';\nexport { default as usePreviousDistinct } from './usePreviousDistinct';\nexport { default as usePromise } from './usePromise';\nexport { default as useQueue } from './useQueue';\nexport { default as useRaf } from './useRaf';\nexport { default as useRafLoop } from './useRafLoop';\nexport { default as useRafState } from './useRafState';\nexport { default as useSearchParam } from './useSearchParam';\nexport { default as useScratch } from './useScratch';\nexport { default as useScroll } from './useScroll';\nexport { default as useScrolling } from './useScrolling';\nexport { default as useSessionStorage } from './useSessionStorage';\nexport { default as useSetState } from './useSetState';\nexport { default as useShallowCompareEffect } from './useShallowCompareEffect';\nexport { default as useSize } from './useSize';\nexport { default as useSlider } from './useSlider';\nexport { default as useSpeech } from './useSpeech';\nexport { default as useStartTyping } from './useStartTyping';\nexport { useStateWithHistory } from './useStateWithHistory';\nexport { default as useStateList } from './useStateList';\nexport { default as useThrottle } from './useThrottle';\nexport { default as useThrottleFn } from './useThrottleFn';\nexport { default as useTimeout } from './useTimeout';\nexport { default as useTimeoutFn } from './useTimeoutFn';\nexport { default as useTitle } from './useTitle';\nexport { default as useToggle } from './useToggle';\nexport { default as useTween } from './useTween';\nexport { default as useUnmount } from './useUnmount';\nexport { default as useUnmountPromise } from './useUnmountPromise';\nexport { default as useUpdate } from './useUpdate';\nexport { default as useUpdateEffect } from './useUpdateEffect';\nexport { default as useUpsert } from './useUpsert';\nexport { default as useVibrate } from './useVibrate';\nexport { default as useVideo } from './useVideo';\nexport { default as useStateValidator } from './useStateValidator';\nexport { useScrollbarWidth } from './useScrollbarWidth';\nexport { useMultiStateValidator } from './useMultiStateValidator';\nexport { default as useWindowScroll } from './useWindowScroll';\nexport { default as useWindowSize } from './useWindowSize';\nexport { default as useMeasure } from './useMeasure';\nexport { useRendersCount } from './useRendersCount';\nexport { useFirstMountState } from './useFirstMountState';\nexport { default as useSet } from './useSet';\nexport { createGlobalState } from './createGlobalState';\nexport { useHash } from './useHash';\n",
      "esm/useAsync.d.ts": "import { DependencyList } from 'react';\nimport { FnReturningPromise } from './util';\nexport { AsyncState, AsyncFnReturn } from './useAsyncFn';\nexport default function useAsync<T extends FnReturningPromise>(fn: T, deps?: DependencyList): import(\"./useAsyncFn\").AsyncState<import(\"./util\").PromiseType<ReturnType<T>>>;\n",
      "esm/useAsyncFn.d.ts": "import { DependencyList } from 'react';\nimport { FnReturningPromise, PromiseType } from './util';\nexport declare type AsyncState<T> = {\n    loading: boolean;\n    error?: undefined;\n    value?: undefined;\n} | {\n    loading: true;\n    error?: Error | undefined;\n    value?: T;\n} | {\n    loading: false;\n    error: Error;\n    value?: undefined;\n} | {\n    loading: false;\n    error?: undefined;\n    value: T;\n};\ndeclare type StateFromFnReturningPromise<T extends FnReturningPromise> = AsyncState<PromiseType<ReturnType<T>>>;\nexport declare type AsyncFnReturn<T extends FnReturningPromise = FnReturningPromise> = [StateFromFnReturningPromise<T>, T];\nexport default function useAsyncFn<T extends FnReturningPromise>(fn: T, deps?: DependencyList, initialState?: StateFromFnReturningPromise<T>): AsyncFnReturn<T>;\nexport {};\n",
      "esm/useAsyncRetry.d.ts": "import { DependencyList } from 'react';\nimport { AsyncState } from './useAsync';\nexport declare type AsyncStateRetry<T> = AsyncState<T> & {\n    retry(): void;\n};\ndeclare const useAsyncRetry: <T>(fn: () => Promise<T>, deps?: DependencyList) => {\n    retry: () => void;\n    loading: boolean;\n    error?: undefined;\n    value?: undefined;\n} | {\n    retry: () => void;\n    loading: false;\n    error: Error;\n    value?: undefined;\n} | {\n    retry: () => void;\n    loading: true;\n    error?: Error | undefined;\n    value?: T | undefined;\n} | {\n    retry: () => void;\n    loading: false;\n    error?: undefined;\n    value: T;\n};\nexport default useAsyncRetry;\n",
      "esm/useAudio.d.ts": "/// <reference types=\"react\" />\ndeclare const useAudio: (elOrProps: import(\"./util/createHTMLMediaHook\").HTMLMediaProps | import(\"react\").ReactElement<import(\"./util/createHTMLMediaHook\").HTMLMediaProps, string | ((props: any) => import(\"react\").ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)> | null) | (new (props: any) => import(\"react\").Component<any, any, any>)>) => [import(\"react\").ReactElement<import(\"./util/createHTMLMediaHook\").HTMLMediaProps, string | ((props: any) => import(\"react\").ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)> | null) | (new (props: any) => import(\"react\").Component<any, any, any>)>, import(\"./util/createHTMLMediaHook\").HTMLMediaState, import(\"./util/createHTMLMediaHook\").HTMLMediaControls, {\n    current: HTMLAudioElement | null;\n}];\nexport default useAudio;\n",
      "esm/useBattery.d.ts": "export interface BatteryState {\n    charging: boolean;\n    chargingTime: number;\n    dischargingTime: number;\n    level: number;\n}\ndeclare type UseBatteryState = {\n    isSupported: false;\n} | {\n    isSupported: true;\n    fetched: false;\n} | (BatteryState & {\n    isSupported: true;\n    fetched: true;\n});\ndeclare function useBattery(): UseBatteryState;\ndeclare const _default: typeof useBattery;\nexport default _default;\n",
      "esm/useBeforeUnload.d.ts": "declare const useBeforeUnload: (enabled?: boolean | (() => boolean), message?: string | undefined) => void;\nexport default useBeforeUnload;\n",
      "esm/useBoolean.d.ts": "import useBoolean from './useToggle';\nexport default useBoolean;\n",
      "esm/useClickAway.d.ts": "import { RefObject } from 'react';\ndeclare const useClickAway: <E extends Event = Event>(ref: RefObject<HTMLElement | null>, onClickAway: (event: E) => void, events?: string[]) => void;\nexport default useClickAway;\n",
      "esm/useCookie.d.ts": "import Cookies from 'js-cookie';\ndeclare const useCookie: (cookieName: string) => [string | null, (newValue: string, options?: Cookies.CookieAttributes | undefined) => void, () => void];\nexport default useCookie;\n",
      "esm/useCopyToClipboard.d.ts": "export interface CopyToClipboardState {\n    value?: string;\n    noUserInteraction: boolean;\n    error?: Error;\n}\ndeclare const useCopyToClipboard: () => [CopyToClipboardState, (value: string) => void];\nexport default useCopyToClipboard;\n",
      "esm/useCounter.d.ts": "import { HookState, InitialHookState } from './util/resolveHookState';\nexport interface CounterActions {\n    inc: (delta?: number) => void;\n    dec: (delta?: number) => void;\n    get: () => number;\n    set: (value: HookState<number>) => void;\n    reset: (value?: HookState<number>) => void;\n}\nexport default function useCounter(initialValue?: InitialHookState<number>, max?: number | null, min?: number | null): [number, CounterActions];\n",
      "esm/useCss.d.ts": "declare const useCss: (css: object) => string;\nexport default useCss;\n",
      "esm/useCustomCompareEffect.d.ts": "import { DependencyList, EffectCallback } from 'react';\ndeclare type DepsEqualFnType<TDeps extends DependencyList> = (prevDeps: TDeps, nextDeps: TDeps) => boolean;\ndeclare const useCustomCompareEffect: <TDeps extends DependencyList>(effect: EffectCallback, deps: TDeps, depsEqual: DepsEqualFnType<TDeps>) => void;\nexport default useCustomCompareEffect;\n",
      "esm/useDebounce.d.ts": "import { DependencyList } from 'react';\nexport declare type UseDebounceReturn = [() => boolean | null, () => void];\nexport default function useDebounce(fn: Function, ms?: number, deps?: DependencyList): UseDebounceReturn;\n",
      "esm/useDeepCompareEffect.d.ts": "import { DependencyList, EffectCallback } from 'react';\ndeclare const useDeepCompareEffect: (effect: EffectCallback, deps: DependencyList) => void;\nexport default useDeepCompareEffect;\n",
      "esm/useDefault.d.ts": "/// <reference types=\"react\" />\ndeclare const useDefault: <TStateType>(defaultValue: TStateType, initialValue: TStateType | (() => TStateType)) => readonly [TStateType, import(\"react\").Dispatch<import(\"react\").SetStateAction<TStateType | null | undefined>>];\nexport default useDefault;\n",
      "esm/useDrop.d.ts": "import * as React from 'react';\nexport interface DropAreaState {\n    over: boolean;\n}\nexport interface DropAreaBond {\n    onDragOver: React.DragEventHandler;\n    onDragEnter: React.DragEventHandler;\n    onDragLeave: React.DragEventHandler;\n    onDrop: React.DragEventHandler;\n    onPaste: React.ClipboardEventHandler;\n}\nexport interface DropAreaOptions {\n    onFiles?: (files: File[], event?: any) => void;\n    onText?: (text: string, event?: any) => void;\n    onUri?: (url: string, event?: any) => void;\n}\ndeclare const useDrop: (options?: DropAreaOptions, args?: never[]) => DropAreaState;\nexport default useDrop;\n",
      "esm/useDropArea.d.ts": "/// <reference types=\"react\" />\nexport interface DropAreaState {\n    over: boolean;\n}\nexport interface DropAreaBond {\n    onDragOver: React.DragEventHandler;\n    onDragEnter: React.DragEventHandler;\n    onDragLeave: React.DragEventHandler;\n    onDrop: React.DragEventHandler;\n    onPaste: React.ClipboardEventHandler;\n}\nexport interface DropAreaOptions {\n    onFiles?: (files: File[], event?: any) => void;\n    onText?: (text: string, event?: any) => void;\n    onUri?: (url: string, event?: any) => void;\n}\ndeclare const useDropArea: (options?: DropAreaOptions) => [DropAreaBond, DropAreaState];\nexport default useDropArea;\n",
      "esm/useEffectOnce.d.ts": "import { EffectCallback } from 'react';\ndeclare const useEffectOnce: (effect: EffectCallback) => void;\nexport default useEffectOnce;\n",
      "esm/useEnsuredForwardedRef.d.ts": "import { MutableRefObject, ForwardRefExoticComponent, PropsWithoutRef, RefAttributes, RefForwardingComponent } from 'react';\nexport default function useEnsuredForwardedRef<T>(forwardedRef: MutableRefObject<T>): MutableRefObject<T>;\nexport declare function ensuredForwardRef<T, P = {}>(Component: RefForwardingComponent<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n",
      "esm/useError.d.ts": "declare const useError: () => (err: Error) => void;\nexport default useError;\n",
      "esm/useEvent.d.ts": "export interface ListenerType1 {\n    addEventListener(name: string, handler: (event?: any) => void, ...args: any[]): any;\n    removeEventListener(name: string, handler: (event?: any) => void, ...args: any[]): any;\n}\nexport interface ListenerType2 {\n    on(name: string, handler: (event?: any) => void, ...args: any[]): any;\n    off(name: string, handler: (event?: any) => void, ...args: any[]): any;\n}\nexport declare type UseEventTarget = ListenerType1 | ListenerType2;\ndeclare type AddEventListener<T> = T extends ListenerType1 ? T['addEventListener'] : T extends ListenerType2 ? T['on'] : never;\ndeclare const useEvent: <T extends UseEventTarget>(name: Parameters<AddEventListener<T>>[0], handler?: Parameters<AddEventListener<T>>[1] | null | undefined, target?: Window | T | null, options?: Parameters<AddEventListener<T>>[2] | undefined) => void;\nexport default useEvent;\n",
      "esm/useFavicon.d.ts": "declare const useFavicon: (href: string) => void;\nexport default useFavicon;\n",
      "esm/useFirstMountState.d.ts": "export declare function useFirstMountState(): boolean;\n",
      "esm/useFullscreen.d.ts": "import { RefObject } from 'react';\nexport interface FullScreenOptions {\n    video?: RefObject<HTMLVideoElement & {\n        webkitEnterFullscreen?: () => void;\n        webkitExitFullscreen?: () => void;\n    }>;\n    onClose?: (error?: Error) => void;\n}\ndeclare const useFullscreen: (ref: RefObject<Element>, on: boolean, options?: FullScreenOptions) => boolean;\nexport default useFullscreen;\n",
      "esm/useGeolocation.d.ts": "export interface GeoLocationSensorState {\n    loading: boolean;\n    accuracy: number | null;\n    altitude: number | null;\n    altitudeAccuracy: number | null;\n    heading: number | null;\n    latitude: number | null;\n    longitude: number | null;\n    speed: number | null;\n    timestamp: number | null;\n    error?: Error | PositionError;\n}\ndeclare const useGeolocation: (options?: PositionOptions | undefined) => GeoLocationSensorState;\nexport default useGeolocation;\n",
      "esm/useGetSet.d.ts": "import { Dispatch } from 'react';\nimport { HookState, InitialHookState } from './util/resolveHookState';\nexport default function useGetSet<S>(initialState: InitialHookState<S>): [() => S, Dispatch<HookState<S>>];\n",
      "esm/useGetSetState.d.ts": "declare const useGetSetState: <T extends object>(initialState?: T) => [() => T, (patch: Partial<T>) => void];\nexport default useGetSetState;\n",
      "esm/useHarmonicIntervalFn.d.ts": "declare const useHarmonicIntervalFn: (fn: Function, delay?: number | null) => void;\nexport default useHarmonicIntervalFn;\n",
      "esm/useHash.d.ts": "/**\n * read and write url hash, response to url hash change\n */\nexport declare const useHash: () => readonly [string, (newHash: string) => void];\n",
      "esm/useHover.d.ts": "import * as React from 'react';\nexport declare type Element = ((state: boolean) => React.ReactElement<any>) | React.ReactElement<any>;\ndeclare const useHover: (element: Element) => [React.ReactElement<any>, boolean];\nexport default useHover;\n",
      "esm/useHoverDirty.d.ts": "import { RefObject } from 'react';\ndeclare const useHoverDirty: (ref: RefObject<Element>, enabled?: boolean) => boolean;\nexport default useHoverDirty;\n",
      "esm/useIdle.d.ts": "declare const useIdle: (ms?: number, initialState?: boolean, events?: string[]) => boolean;\nexport default useIdle;\n",
      "esm/useIntersection.d.ts": "import { RefObject } from 'react';\ndeclare const useIntersection: (ref: RefObject<HTMLElement>, options: IntersectionObserverInit) => IntersectionObserverEntry | null;\nexport default useIntersection;\n",
      "esm/useInterval.d.ts": "declare const useInterval: (callback: Function, delay?: number | null | undefined) => void;\nexport default useInterval;\n",
      "esm/useIsomorphicLayoutEffect.d.ts": "import { useEffect } from 'react';\ndeclare const useIsomorphicLayoutEffect: typeof useEffect;\nexport default useIsomorphicLayoutEffect;\n",
      "esm/useKey.d.ts": "import { DependencyList } from 'react';\nimport { UseEventTarget } from './useEvent';\nexport declare type KeyPredicate = (event: KeyboardEvent) => boolean;\nexport declare type KeyFilter = null | undefined | string | ((event: KeyboardEvent) => boolean);\nexport declare type Handler = (event: KeyboardEvent) => void;\nexport interface UseKeyOptions {\n    event?: 'keydown' | 'keypress' | 'keyup';\n    target?: UseEventTarget;\n    options?: any;\n}\ndeclare const useKey: (key: KeyFilter, fn?: Handler, opts?: UseKeyOptions, deps?: DependencyList) => void;\nexport default useKey;\n",
      "esm/useKeyPress.d.ts": "import { KeyFilter } from './useKey';\ndeclare const useKeyPress: (keyFilter: KeyFilter) => [boolean, KeyboardEvent | null];\nexport default useKeyPress;\n",
      "esm/useKeyPressEvent.d.ts": "import { Handler, KeyFilter } from './useKey';\ndeclare const useKeyPressEvent: (key: string | KeyFilter, keydown?: Handler | null | undefined, keyup?: Handler | null | undefined, useKeyPress?: (keyFilter: KeyFilter) => [boolean, KeyboardEvent | null]) => void;\nexport default useKeyPressEvent;\n",
      "esm/useKeyboardJs.d.ts": "declare const useKeyboardJs: (combination: string | string[]) => [boolean, KeyboardEvent | null];\nexport default useKeyboardJs;\n",
      "esm/useLatest.d.ts": "declare const useLatest: <T>(value: T) => {\n    readonly current: T;\n};\nexport default useLatest;\n",
      "esm/useLifecycles.d.ts": "declare const useLifecycles: (mount: any, unmount?: any) => void;\nexport default useLifecycles;\n",
      "esm/useList.d.ts": "import { InitialHookState, ResolvableHookState } from './util/resolveHookState';\nexport interface ListActions<T> {\n    /**\n     * @description Set new list instead old one\n     */\n    set: (newList: ResolvableHookState<T[]>) => void;\n    /**\n     * @description Add item(s) at the end of list\n     */\n    push: (...items: T[]) => void;\n    /**\n     * @description Replace item at given position. If item at given position not exists it will be set.\n     */\n    updateAt: (index: number, item: T) => void;\n    /**\n     * @description Insert item at given position, all items to the right will be shifted.\n     */\n    insertAt: (index: number, item: T) => void;\n    /**\n     * @description Replace all items that matches predicate with given one.\n     */\n    update: (predicate: (a: T, b: T) => boolean, newItem: T) => void;\n    /**\n     * @description Replace first item matching predicate with given one.\n     */\n    updateFirst: (predicate: (a: T, b: T) => boolean, newItem: T) => void;\n    /**\n     * @description Like `updateFirst` bit in case of predicate miss - pushes item to the list\n     */\n    upsert: (predicate: (a: T, b: T) => boolean, newItem: T) => void;\n    /**\n     * @description Sort list with given sorting function\n     */\n    sort: (compareFn?: (a: T, b: T) => number) => void;\n    /**\n     * @description Same as native Array's method\n     */\n    filter: (callbackFn: (value: T, index?: number, array?: T[]) => boolean, thisArg?: any) => void;\n    /**\n     * @description Removes item at given position. All items to the right from removed will be shifted.\n     */\n    removeAt: (index: number) => void;\n    /**\n     * @deprecated Use removeAt method instead\n     */\n    remove: (index: number) => void;\n    /**\n     * @description Make the list empty\n     */\n    clear: () => void;\n    /**\n     * @description Reset list to initial value\n     */\n    reset: () => void;\n}\ndeclare function useList<T>(initialList?: InitialHookState<T[]>): [T[], ListActions<T>];\nexport default useList;\n",
      "esm/useLocalStorage.d.ts": "import { Dispatch, SetStateAction } from 'react';\ndeclare const useLocalStorage: <T>(key: string, initialValue?: T | undefined, options?: {\n    raw: true;\n} | {\n    raw: false;\n    serializer: (value: T) => string;\n    deserializer: (value: string) => T;\n} | undefined) => [T | undefined, Dispatch<SetStateAction<T | undefined>>, () => void];\nexport default useLocalStorage;\n",
      "esm/useLocation.d.ts": "export interface LocationSensorState {\n    trigger: string;\n    state?: any;\n    length?: number;\n    hash?: string;\n    host?: string;\n    hostname?: string;\n    href?: string;\n    origin?: string;\n    pathname?: string;\n    port?: string;\n    protocol?: string;\n    search?: string;\n}\ndeclare const _default: () => LocationSensorState;\nexport default _default;\n",
      "esm/useLockBodyScroll.d.ts": "import { RefObject } from 'react';\nexport declare function getClosestBody(el: Element | HTMLElement | HTMLIFrameElement | null): HTMLElement | null;\nexport interface BodyInfoItem {\n    counter: number;\n    initialOverflow: CSSStyleDeclaration['overflow'];\n}\ndeclare const _default: (_locked?: boolean, _elementRef?: RefObject<HTMLElement> | undefined) => void;\nexport default _default;\n",
      "esm/useLogger.d.ts": "declare const useLogger: (componentName: string, ...rest: any[]) => void;\nexport default useLogger;\n",
      "esm/useLongPress.d.ts": "interface Options {\n    isPreventDefault?: boolean;\n    delay?: number;\n}\ndeclare const useLongPress: (callback: (e: TouchEvent | MouseEvent) => void, { isPreventDefault, delay }?: Options) => {\n    readonly onMouseDown: (e: any) => void;\n    readonly onTouchStart: (e: any) => void;\n    readonly onMouseUp: () => void;\n    readonly onMouseLeave: () => void;\n    readonly onTouchEnd: () => void;\n};\nexport default useLongPress;\n",
      "esm/useMap.d.ts": "export interface StableActions<T extends object> {\n    set: <K extends keyof T>(key: K, value: T[K]) => void;\n    setAll: (newMap: T) => void;\n    remove: <K extends keyof T>(key: K) => void;\n    reset: () => void;\n}\nexport interface Actions<T extends object> extends StableActions<T> {\n    get: <K extends keyof T>(key: K) => T[K];\n}\ndeclare const useMap: <T extends object = any>(initialMap?: T) => [T, Actions<T>];\nexport default useMap;\n",
      "esm/useMeasure.d.ts": "export declare type UseMeasureRect = Pick<DOMRectReadOnly, 'x' | 'y' | 'top' | 'left' | 'right' | 'bottom' | 'height' | 'width'>;\nexport declare type UseMeasureRef<E extends HTMLElement = HTMLElement> = (element: E) => void;\nexport declare type UseMeasureResult<E extends HTMLElement = HTMLElement> = [UseMeasureRef<E>, UseMeasureRect];\ndeclare const _default: <E extends HTMLElement = HTMLElement>() => UseMeasureResult<E>;\nexport default _default;\n",
      "esm/useMeasureDirty.d.ts": "import { RefObject } from 'react';\nexport interface ContentRect {\n    width: number;\n    height: number;\n    top: number;\n    right: number;\n    left: number;\n    bottom: number;\n}\ndeclare const useMeasureDirty: (ref: RefObject<HTMLElement>) => ContentRect;\nexport default useMeasureDirty;\n",
      "esm/useMedia.d.ts": "declare const useMedia: (query: string, defaultState?: boolean) => boolean;\nexport default useMedia;\n",
      "esm/useMediaDevices.d.ts": "declare const _default: () => {};\nexport default _default;\n",
      "esm/useMediatedState.d.ts": "import { Dispatch, SetStateAction } from 'react';\nexport interface StateMediator<S = any> {\n    (newState: any): S;\n    (newState: any, dispatch: Dispatch<SetStateAction<S>>): void;\n}\nexport declare type UseMediatedStateReturn<S = any> = [S, Dispatch<SetStateAction<S>>];\nexport declare function useMediatedState<S = undefined>(mediator: StateMediator<S | undefined>): UseMediatedStateReturn<S | undefined>;\nexport declare function useMediatedState<S = any>(mediator: StateMediator<S>, initialState: S): UseMediatedStateReturn<S>;\n",
      "esm/useMethods.d.ts": "declare type CreateMethods<M, T> = (state: T) => {\n    [P in keyof M]: (payload?: any) => T;\n};\ndeclare type WrappedMethods<M> = {\n    [P in keyof M]: (...payload: any) => void;\n};\ndeclare const useMethods: <M, T>(createMethods: CreateMethods<M, T>, initialState: T) => [T, WrappedMethods<M>];\nexport default useMethods;\n",
      "esm/useMotion.d.ts": "export interface MotionSensorState {\n    acceleration: {\n        x: number | null;\n        y: number | null;\n        z: number | null;\n    };\n    accelerationIncludingGravity: {\n        x: number | null;\n        y: number | null;\n        z: number | null;\n    };\n    rotationRate: {\n        alpha: number | null;\n        beta: number | null;\n        gamma: number | null;\n    };\n    interval: number | null;\n}\ndeclare const useMotion: (initialState?: MotionSensorState) => MotionSensorState;\nexport default useMotion;\n",
      "esm/useMount.d.ts": "declare const useMount: (fn: () => void) => void;\nexport default useMount;\n",
      "esm/useMountedState.d.ts": "export default function useMountedState(): () => boolean;\n",
      "esm/useMouse.d.ts": "import { RefObject } from 'react';\nexport interface State {\n    docX: number;\n    docY: number;\n    posX: number;\n    posY: number;\n    elX: number;\n    elY: number;\n    elH: number;\n    elW: number;\n}\ndeclare const useMouse: (ref: RefObject<Element>) => State;\nexport default useMouse;\n",
      "esm/useMouseHovered.d.ts": "import { RefObject } from 'react';\nimport { State } from './useMouse';\nexport interface UseMouseHoveredOptions {\n    whenHovered?: boolean;\n    bound?: boolean;\n}\ndeclare const useMouseHovered: (ref: RefObject<Element>, options?: UseMouseHoveredOptions) => State;\nexport default useMouseHovered;\n",
      "esm/useMouseWheel.d.ts": "declare const _default: () => number;\nexport default _default;\n",
      "esm/useMultiStateValidator.d.ts": "import { StateValidator, UseStateValidatorReturn, ValidityState } from './useStateValidator';\nexport declare type MultiStateValidatorStates = any[] | {\n    [p: string]: any;\n} | {\n    [p: number]: any;\n};\nexport declare type MultiStateValidator<V extends ValidityState, S extends MultiStateValidatorStates> = StateValidator<V, S>;\nexport declare function useMultiStateValidator<V extends ValidityState, S extends MultiStateValidatorStates, I extends V>(states: S, validator: MultiStateValidator<V, S>, initialValidity?: I): UseStateValidatorReturn<V>;\n",
      "esm/useNetwork.d.ts": "export interface NetworkState {\n    online?: boolean;\n    since?: Date;\n    downlink?: number;\n    downlinkMax?: number;\n    effectiveType?: string;\n    rtt?: number;\n    type?: string;\n}\ndeclare const useNetwork: (initialState?: NetworkState) => NetworkState;\nexport default useNetwork;\n",
      "esm/useNumber.d.ts": "import useNumber from './useCounter';\nexport default useNumber;\n",
      "esm/useObservable.d.ts": "export interface Observable<T> {\n    subscribe: (listener: (value: T) => void) => {\n        unsubscribe: () => void;\n    };\n}\ndeclare function useObservable<T>(observable$: Observable<T>): T | undefined;\ndeclare function useObservable<T>(observable$: Observable<T>, initialValue: T): T;\nexport default useObservable;\n",
      "esm/useOrientation.d.ts": "export interface OrientationState {\n    angle: number;\n    type: string;\n}\ndeclare const useOrientation: (initialState?: OrientationState) => OrientationState;\nexport default useOrientation;\n",
      "esm/usePageLeave.d.ts": "declare const usePageLeave: (onPageLeave: any, args?: never[]) => void;\nexport default usePageLeave;\n",
      "esm/usePermission.d.ts": "declare type PermissionDesc = PermissionDescriptor | DevicePermissionDescriptor | MidiPermissionDescriptor | PushPermissionDescriptor;\ndeclare type State = PermissionState | '';\ndeclare const usePermission: (permissionDesc: PermissionDesc) => State;\nexport default usePermission;\n",
      "esm/usePrevious.d.ts": "export default function usePrevious<T>(state: T): T | undefined;\n",
      "esm/usePreviousDistinct.d.ts": "export declare type Predicate<T> = (prev: T | undefined, next: T) => boolean;\nexport default function usePreviousDistinct<T>(value: T, compare?: Predicate<T>): T | undefined;\n",
      "esm/usePromise.d.ts": "export declare type UsePromise = () => <T>(promise: Promise<T>) => Promise<T>;\ndeclare const usePromise: UsePromise;\nexport default usePromise;\n",
      "esm/useQueue.d.ts": "export interface QueueMethods<T> {\n    add: (item: T) => void;\n    remove: () => T;\n    first: T;\n    last: T;\n    size: number;\n}\ndeclare const useQueue: <T>(initialValue?: T[]) => QueueMethods<T>;\nexport default useQueue;\n",
      "esm/useRaf.d.ts": "declare const useRaf: (ms?: number, delay?: number) => number;\nexport default useRaf;\n",
      "esm/useRafLoop.d.ts": "export declare type RafLoopReturns = [() => void, () => void, () => boolean];\nexport default function useRafLoop(callback: FrameRequestCallback, initiallyActive?: boolean): RafLoopReturns;\n",
      "esm/useRafState.d.ts": "import { Dispatch, SetStateAction } from 'react';\ndeclare const useRafState: <S>(initialState: S | (() => S)) => [S, Dispatch<SetStateAction<S>>];\nexport default useRafState;\n",
      "esm/useRendersCount.d.ts": "export declare function useRendersCount(): number;\n",
      "esm/useScratch.d.ts": "import { FC } from 'react';\nexport interface ScratchSensorParams {\n    disabled?: boolean;\n    onScratch?: (state: ScratchSensorState) => void;\n    onScratchStart?: (state: ScratchSensorState) => void;\n    onScratchEnd?: (state: ScratchSensorState) => void;\n}\nexport interface ScratchSensorState {\n    isScratching: boolean;\n    start?: number;\n    end?: number;\n    x?: number;\n    y?: number;\n    dx?: number;\n    dy?: number;\n    docX?: number;\n    docY?: number;\n    posX?: number;\n    posY?: number;\n    elH?: number;\n    elW?: number;\n    elX?: number;\n    elY?: number;\n}\ndeclare const useScratch: (params?: ScratchSensorParams) => [(el: HTMLElement | null) => void, ScratchSensorState];\nexport interface ScratchSensorProps extends ScratchSensorParams {\n    children: (state: ScratchSensorState, ref: (el: HTMLElement | null) => void) => React.ReactElement<any>;\n}\nexport declare const ScratchSensor: FC<ScratchSensorProps>;\nexport default useScratch;\n",
      "esm/useScroll.d.ts": "import { RefObject } from 'react';\nexport interface State {\n    x: number;\n    y: number;\n}\ndeclare const useScroll: (ref: RefObject<HTMLElement>) => State;\nexport default useScroll;\n",
      "esm/useScrollbarWidth.d.ts": "export declare function useScrollbarWidth(): number | undefined;\n",
      "esm/useScrolling.d.ts": "import { RefObject } from 'react';\ndeclare const useScrolling: (ref: RefObject<HTMLElement>) => boolean;\nexport default useScrolling;\n",
      "esm/useSearchParam.d.ts": "export declare type UseQueryParam = (param: string) => string | null;\ndeclare const _default: UseQueryParam;\nexport default _default;\n",
      "esm/useSessionStorage.d.ts": "declare const useSessionStorage: <T>(key: string, initialValue?: T | undefined, raw?: boolean | undefined) => [T, (value: T) => void];\nexport default useSessionStorage;\n",
      "esm/useSet.d.ts": "export interface StableActions<K> {\n    add: (key: K) => void;\n    remove: (key: K) => void;\n    toggle: (key: K) => void;\n    reset: () => void;\n}\nexport interface Actions<K> extends StableActions<K> {\n    has: (key: K) => boolean;\n}\ndeclare const useSet: <K>(initialSet?: Set<K>) => [Set<K>, Actions<K>];\nexport default useSet;\n",
      "esm/useSetState.d.ts": "declare const useSetState: <T extends object>(initialState?: T) => [T, (patch: Partial<T> | ((prevState: T) => Partial<T>)) => void];\nexport default useSetState;\n",
      "esm/useShallowCompareEffect.d.ts": "import { DependencyList, EffectCallback } from 'react';\ndeclare const useShallowCompareEffect: (effect: EffectCallback, deps: DependencyList) => void;\nexport default useShallowCompareEffect;\n",
      "esm/useSize.d.ts": "import * as React from 'react';\nexport declare type Element = ((state: State) => React.ReactElement<any>) | React.ReactElement<any>;\nexport interface State {\n    width: number;\n    height: number;\n}\ndeclare const useSize: (element: Element, { width, height }?: Partial<State>) => [React.ReactElement<any>, State];\nexport default useSize;\n",
      "esm/useSlider.d.ts": "import { RefObject, CSSProperties } from 'react';\nexport interface State {\n    isSliding: boolean;\n    value: number;\n}\nexport interface Options {\n    onScrub: (value: number) => void;\n    onScrubStart: () => void;\n    onScrubStop: (value: number) => void;\n    reverse: boolean;\n    styles: boolean | CSSProperties;\n    vertical?: boolean;\n}\ndeclare const useSlider: (ref: RefObject<HTMLElement>, options?: Partial<Options>) => State;\nexport default useSlider;\n",
      "esm/useSpeech.d.ts": "export interface SpeechState {\n    isPlaying: boolean;\n    lang: string;\n    voice: SpeechSynthesisVoice;\n    rate: number;\n    pitch: number;\n    volume: number;\n}\nexport interface SpeechOptions {\n    lang?: string;\n    voice?: SpeechSynthesisVoice;\n    rate?: number;\n    pitch?: number;\n    volume?: number;\n}\ndeclare const useSpeech: (text: string, opts?: SpeechOptions) => SpeechState;\nexport default useSpeech;\n",
      "esm/useSpring.d.ts": "declare const useSpring: (targetValue?: number, tension?: number, friction?: number) => number;\nexport default useSpring;\n",
      "esm/useStartTyping.d.ts": "declare const useStartTyping: (onStartTyping: (event: KeyboardEvent) => void) => void;\nexport default useStartTyping;\n",
      "esm/useStateList.d.ts": "export interface UseStateListReturn<T> {\n    state: T;\n    currentIndex: number;\n    setStateAt: (newIndex: number) => void;\n    setState: (state: T) => void;\n    next: () => void;\n    prev: () => void;\n}\nexport default function useStateList<T>(stateSet?: T[]): UseStateListReturn<T>;\n",
      "esm/useStateValidator.d.ts": "import { Dispatch, SetStateAction } from 'react';\nexport declare type ValidityState = [boolean | undefined, ...any[]];\nexport interface StateValidator<V, S> {\n    (state: S): V;\n    (state: S, dispatch: Dispatch<SetStateAction<V>>): void;\n}\nexport declare type UseStateValidatorReturn<V> = [V, () => void];\nexport default function useStateValidator<V extends ValidityState, S, I extends V>(state: S, validator: StateValidator<V, S>, initialState?: I): UseStateValidatorReturn<V>;\n",
      "esm/useStateWithHistory.d.ts": "import { Dispatch } from 'react';\nimport { InitialHookState, ResolvableHookState } from './util/resolveHookState';\ninterface HistoryState<S> {\n    history: S[];\n    position: number;\n    capacity: number;\n    back: (amount?: number) => void;\n    forward: (amount?: number) => void;\n    go: (position: number) => void;\n}\nexport declare type UseStateHistoryReturn<S> = [S, Dispatch<ResolvableHookState<S>>, HistoryState<S>];\nexport declare function useStateWithHistory<S, I extends S>(initialState: InitialHookState<S>, capacity?: number, initialHistory?: I[]): UseStateHistoryReturn<S>;\nexport declare function useStateWithHistory<S = undefined>(): UseStateHistoryReturn<S | undefined>;\nexport {};\n",
      "esm/useThrottle.d.ts": "declare const useThrottle: <T>(value: T, ms?: number) => T;\nexport default useThrottle;\n",
      "esm/useThrottleFn.d.ts": "declare const useThrottleFn: <T, U extends any[]>(fn: (...args: U) => T, ms: number | undefined, args: U) => T | null;\nexport default useThrottleFn;\n",
      "esm/useTimeout.d.ts": "export declare type UseTimeoutReturn = [() => boolean | null, () => void, () => void];\nexport default function useTimeout(ms?: number): UseTimeoutReturn;\n",
      "esm/useTimeoutFn.d.ts": "export declare type UseTimeoutFnReturn = [() => boolean | null, () => void, () => void];\nexport default function useTimeoutFn(fn: Function, ms?: number): UseTimeoutFnReturn;\n",
      "esm/useTitle.d.ts": "export interface UseTitleOptions {\n    restoreOnUnmount?: boolean;\n}\ndeclare function useTitle(title: string, options?: UseTitleOptions): void;\ndeclare const _default: typeof useTitle;\nexport default _default;\n",
      "esm/useToggle.d.ts": "declare const useToggle: (initialValue: boolean) => [boolean, (nextValue?: any) => void];\nexport default useToggle;\n",
      "esm/useTween.d.ts": "export declare type Easing = (t: number) => number;\ndeclare const useTween: (easingName?: string, ms?: number, delay?: number) => number;\nexport default useTween;\n",
      "esm/useUnmount.d.ts": "declare const useUnmount: (fn: () => any) => void;\nexport default useUnmount;\n",
      "esm/useUnmountPromise.d.ts": "export declare type Race = <P extends Promise<any>, E = any>(promise: P, onError?: (error: E) => void) => P;\ndeclare const useUnmountPromise: () => Race;\nexport default useUnmountPromise;\n",
      "esm/useUpdate.d.ts": "declare const useUpdate: () => () => void;\nexport default useUpdate;\n",
      "esm/useUpdateEffect.d.ts": "import { useEffect } from 'react';\ndeclare const useUpdateEffect: typeof useEffect;\nexport default useUpdateEffect;\n",
      "esm/useUpsert.d.ts": "import { ListActions } from './useList';\nimport { InitialHookState } from './util/resolveHookState';\nexport interface UpsertListActions<T> extends Omit<ListActions<T>, 'upsert'> {\n    upsert: (newItem: T) => void;\n}\n/**\n * @deprecated Use `useList` hook's upsert action instead\n */\nexport default function useUpsert<T>(predicate: (a: T, b: T) => boolean, initialList?: InitialHookState<T[]>): [T[], UpsertListActions<T>];\n",
      "esm/useVibrate.d.ts": "export declare type VibrationPattern = number | number[];\ndeclare function useVibrate(enabled?: boolean, pattern?: VibrationPattern, loop?: boolean): void;\ndeclare const _default: typeof useVibrate;\nexport default _default;\n",
      "esm/useVideo.d.ts": "/// <reference types=\"react\" />\ndeclare const useVideo: (elOrProps: import(\"./util/createHTMLMediaHook\").HTMLMediaProps | import(\"react\").ReactElement<import(\"./util/createHTMLMediaHook\").HTMLMediaProps, string | ((props: any) => import(\"react\").ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)> | null) | (new (props: any) => import(\"react\").Component<any, any, any>)>) => [import(\"react\").ReactElement<import(\"./util/createHTMLMediaHook\").HTMLMediaProps, string | ((props: any) => import(\"react\").ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)> | null) | (new (props: any) => import(\"react\").Component<any, any, any>)>, import(\"./util/createHTMLMediaHook\").HTMLMediaState, import(\"./util/createHTMLMediaHook\").HTMLMediaControls, {\n    current: HTMLAudioElement | null;\n}];\nexport default useVideo;\n",
      "esm/useWait.d.ts": "",
      "esm/useWindowScroll.d.ts": "export interface State {\n    x: number;\n    y: number;\n}\ndeclare const useWindowScroll: () => State;\nexport default useWindowScroll;\n",
      "esm/useWindowSize.d.ts": "declare const useWindowSize: (initialWidth?: number, initialHeight?: number) => {\n    width: number;\n    height: number;\n};\nexport default useWindowSize;\n",
      "esm/util/createHTMLMediaHook.d.ts": "import * as React from 'react';\nexport interface HTMLMediaProps extends React.AudioHTMLAttributes<any>, React.VideoHTMLAttributes<any> {\n    src: string;\n}\nexport interface HTMLMediaState {\n    buffered: any[];\n    duration: number;\n    paused: boolean;\n    muted: boolean;\n    time: number;\n    volume: number;\n}\nexport interface HTMLMediaControls {\n    play: () => Promise<void> | void;\n    pause: () => void;\n    mute: () => void;\n    unmute: () => void;\n    volume: (volume: number) => void;\n    seek: (time: number) => void;\n}\ndeclare const createHTMLMediaHook: (tag: 'audio' | 'video') => (elOrProps: HTMLMediaProps | React.ReactElement<HTMLMediaProps>) => [React.ReactElement<HTMLMediaProps>, HTMLMediaState, HTMLMediaControls, {\n    current: HTMLAudioElement | null;\n}];\nexport default createHTMLMediaHook;\n",
      "esm/util/createRenderProp.d.ts": "declare const createRenderProp: (hook: any, mapPropsToArgs?: (props: any) => any[]) => (props: any) => any;\nexport default createRenderProp;\n",
      "esm/util/parseTimeRanges.d.ts": "declare const parseTimeRanges: (ranges: any) => {\n    start: number;\n    end: number;\n}[];\nexport default parseTimeRanges;\n",
      "esm/util/resolveHookState.d.ts": "export declare type StateSetter<S> = (prevState: S) => S;\nexport declare type InitialStateSetter<S> = () => S;\nexport declare type InitialHookState<S> = S | InitialStateSetter<S>;\nexport declare type HookState<S> = S | StateSetter<S>;\nexport declare type ResolvableHookState<S> = S | StateSetter<S> | InitialStateSetter<S>;\nexport declare function resolveHookState<S, C extends S>(newState: InitialStateSetter<S>): S;\nexport declare function resolveHookState<S, C extends S>(newState: StateSetter<S>, currentState: C): S;\nexport declare function resolveHookState<S, C extends S>(newState: ResolvableHookState<S>, currentState?: C): S;\n",
      "esm/util.d.ts": "export declare const isClient: boolean;\nexport declare const on: (obj: any, ...args: any[]) => any;\nexport declare const off: (obj: any, ...args: any[]) => any;\nexport declare type FnReturningPromise = (...args: any[]) => Promise<any>;\nexport declare type PromiseType<P extends Promise<any>> = P extends Promise<infer T> ? T : never;\nexport declare const isDeepEqual: (a: any, b: any) => boolean;\n",
      "lib/comps/UseKey.d.ts": "declare const UseKey: (props: any) => any;\nexport default UseKey;\n",
      "lib/createBreakpoint.d.ts": "declare const createBreakpoint: (breakpoints?: {\n    [name: string]: number;\n}) => () => string;\nexport default createBreakpoint;\n",
      "lib/createGlobalState.d.ts": "export declare function createGlobalState<S = any>(initialState?: S): () => [S | undefined, (state: S) => void];\nexport default createGlobalState;\n",
      "lib/createMemo.d.ts": "declare const createMemo: <T extends (...args: any) => any>(fn: T) => (...args: Parameters<T>) => ReturnType<T>;\nexport default createMemo;\n",
      "lib/createReducer.d.ts": "declare type Dispatch<Action> = (action: Action) => void;\ninterface Store<Action, State> {\n    getState: () => State;\n    dispatch: Dispatch<Action>;\n}\ndeclare type Middleware<Action, State> = (store: Store<Action, State>) => (next: Dispatch<Action>) => (action: Action) => void;\ndeclare const createReducer: <Action, State>(...middlewares: Middleware<Action, State>[]) => (reducer: (state: State, action: Action) => State, initialState: State, initializer?: (value: State) => State) => [State, Dispatch<Action>];\nexport default createReducer;\n",
      "lib/createReducerContext.d.ts": "/// <reference types=\"react\" />\ndeclare const createReducerContext: <R extends import(\"react\").Reducer<any, any>>(reducer: R, defaultInitialState: import(\"react\").ReducerState<R>) => readonly [() => [import(\"react\").ReducerState<R>, import(\"react\").Dispatch<import(\"react\").ReducerAction<R>>], import(\"react\").FC<{\n    initialState?: import(\"react\").ReducerState<R> | undefined;\n}>, import(\"react\").Context<[import(\"react\").ReducerState<R>, import(\"react\").Dispatch<import(\"react\").ReducerAction<R>>] | undefined>];\nexport default createReducerContext;\n",
      "lib/createRouter.d.ts": "export interface RouterProviderProps {\n    route: string;\n    fullRoute?: string;\n    parent?: any;\n}\ndeclare const createRouter: () => void;\nexport default createRouter;\n",
      "lib/createStateContext.d.ts": "/// <reference types=\"react\" />\ndeclare const createStateContext: <T>(defaultInitialValue: T) => readonly [() => [T, import(\"react\").Dispatch<import(\"react\").SetStateAction<T>>], import(\"react\").FC<{\n    initialValue?: T | undefined;\n}>, import(\"react\").Context<[T, import(\"react\").Dispatch<import(\"react\").SetStateAction<T>>] | undefined>];\nexport default createStateContext;\n",
      "lib/index.d.ts": "export { default as createMemo } from './createMemo';\nexport { default as createReducerContext } from './createReducerContext';\nexport { default as createReducer } from './createReducer';\nexport { default as createStateContext } from './createStateContext';\nexport { default as useAsync } from './useAsync';\nexport { default as useAsyncFn } from './useAsyncFn';\nexport { default as useAsyncRetry } from './useAsyncRetry';\nexport { default as useAudio } from './useAudio';\nexport { default as useBattery } from './useBattery';\nexport { default as useBeforeUnload } from './useBeforeUnload';\nexport { default as useBoolean } from './useBoolean';\nexport { default as useClickAway } from './useClickAway';\nexport { default as useCookie } from './useCookie';\nexport { default as useCopyToClipboard } from './useCopyToClipboard';\nexport { default as useCounter } from './useCounter';\nexport { default as useCss } from './useCss';\nexport { default as useCustomCompareEffect } from './useCustomCompareEffect';\nexport { default as useDebounce } from './useDebounce';\nexport { default as useDeepCompareEffect } from './useDeepCompareEffect';\nexport { default as useDefault } from './useDefault';\nexport { default as useDrop } from './useDrop';\nexport { default as useDropArea } from './useDropArea';\nexport { default as useEffectOnce } from './useEffectOnce';\nexport { default as useEnsuredForwardedRef, ensuredForwardRef } from './useEnsuredForwardedRef';\nexport { default as useEvent } from './useEvent';\nexport { default as useError } from './useError';\nexport { default as useFavicon } from './useFavicon';\nexport { default as useFullscreen } from './useFullscreen';\nexport { default as useGeolocation } from './useGeolocation';\nexport { default as useGetSet } from './useGetSet';\nexport { default as useGetSetState } from './useGetSetState';\nexport { default as useHarmonicIntervalFn } from './useHarmonicIntervalFn';\nexport { default as useHover } from './useHover';\nexport { default as useHoverDirty } from './useHoverDirty';\nexport { default as useIdle } from './useIdle';\nexport { default as useIntersection } from './useIntersection';\nexport { default as useInterval } from './useInterval';\nexport { default as useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\nexport { default as useKey } from './useKey';\nexport { default as createBreakpoint } from './createBreakpoint';\nexport { default as useKeyPress } from './useKeyPress';\nexport { default as useKeyPressEvent } from './useKeyPressEvent';\nexport { default as useLatest } from './useLatest';\nexport { default as useLifecycles } from './useLifecycles';\nexport { default as useList } from './useList';\nexport { default as useLocalStorage } from './useLocalStorage';\nexport { default as useLocation } from './useLocation';\nexport { default as useLockBodyScroll } from './useLockBodyScroll';\nexport { default as useLogger } from './useLogger';\nexport { default as useLongPress } from './useLongPress';\nexport { default as useMap } from './useMap';\nexport { default as useMedia } from './useMedia';\nexport { default as useMediaDevices } from './useMediaDevices';\nexport { useMediatedState } from './useMediatedState';\nexport { default as useMethods } from './useMethods';\nexport { default as useMotion } from './useMotion';\nexport { default as useMount } from './useMount';\nexport { default as useMountedState } from './useMountedState';\nexport { default as useMouse } from './useMouse';\nexport { default as useMouseHovered } from './useMouseHovered';\nexport { default as useMouseWheel } from './useMouseWheel';\nexport { default as useNetwork } from './useNetwork';\nexport { default as useNumber } from './useNumber';\nexport { default as useObservable } from './useObservable';\nexport { default as useOrientation } from './useOrientation';\nexport { default as usePageLeave } from './usePageLeave';\nexport { default as usePermission } from './usePermission';\nexport { default as usePrevious } from './usePrevious';\nexport { default as usePreviousDistinct } from './usePreviousDistinct';\nexport { default as usePromise } from './usePromise';\nexport { default as useQueue } from './useQueue';\nexport { default as useRaf } from './useRaf';\nexport { default as useRafLoop } from './useRafLoop';\nexport { default as useRafState } from './useRafState';\nexport { default as useSearchParam } from './useSearchParam';\nexport { default as useScratch } from './useScratch';\nexport { default as useScroll } from './useScroll';\nexport { default as useScrolling } from './useScrolling';\nexport { default as useSessionStorage } from './useSessionStorage';\nexport { default as useSetState } from './useSetState';\nexport { default as useShallowCompareEffect } from './useShallowCompareEffect';\nexport { default as useSize } from './useSize';\nexport { default as useSlider } from './useSlider';\nexport { default as useSpeech } from './useSpeech';\nexport { default as useStartTyping } from './useStartTyping';\nexport { useStateWithHistory } from './useStateWithHistory';\nexport { default as useStateList } from './useStateList';\nexport { default as useThrottle } from './useThrottle';\nexport { default as useThrottleFn } from './useThrottleFn';\nexport { default as useTimeout } from './useTimeout';\nexport { default as useTimeoutFn } from './useTimeoutFn';\nexport { default as useTitle } from './useTitle';\nexport { default as useToggle } from './useToggle';\nexport { default as useTween } from './useTween';\nexport { default as useUnmount } from './useUnmount';\nexport { default as useUnmountPromise } from './useUnmountPromise';\nexport { default as useUpdate } from './useUpdate';\nexport { default as useUpdateEffect } from './useUpdateEffect';\nexport { default as useUpsert } from './useUpsert';\nexport { default as useVibrate } from './useVibrate';\nexport { default as useVideo } from './useVideo';\nexport { default as useStateValidator } from './useStateValidator';\nexport { useScrollbarWidth } from './useScrollbarWidth';\nexport { useMultiStateValidator } from './useMultiStateValidator';\nexport { default as useWindowScroll } from './useWindowScroll';\nexport { default as useWindowSize } from './useWindowSize';\nexport { default as useMeasure } from './useMeasure';\nexport { useRendersCount } from './useRendersCount';\nexport { useFirstMountState } from './useFirstMountState';\nexport { default as useSet } from './useSet';\nexport { createGlobalState } from './createGlobalState';\nexport { useHash } from './useHash';\n",
      "lib/useAsync.d.ts": "import { DependencyList } from 'react';\nimport { FnReturningPromise } from './util';\nexport { AsyncState, AsyncFnReturn } from './useAsyncFn';\nexport default function useAsync<T extends FnReturningPromise>(fn: T, deps?: DependencyList): import(\"./useAsyncFn\").AsyncState<import(\"./util\").PromiseType<ReturnType<T>>>;\n",
      "lib/useAsyncFn.d.ts": "import { DependencyList } from 'react';\nimport { FnReturningPromise, PromiseType } from './util';\nexport declare type AsyncState<T> = {\n    loading: boolean;\n    error?: undefined;\n    value?: undefined;\n} | {\n    loading: true;\n    error?: Error | undefined;\n    value?: T;\n} | {\n    loading: false;\n    error: Error;\n    value?: undefined;\n} | {\n    loading: false;\n    error?: undefined;\n    value: T;\n};\ndeclare type StateFromFnReturningPromise<T extends FnReturningPromise> = AsyncState<PromiseType<ReturnType<T>>>;\nexport declare type AsyncFnReturn<T extends FnReturningPromise = FnReturningPromise> = [StateFromFnReturningPromise<T>, T];\nexport default function useAsyncFn<T extends FnReturningPromise>(fn: T, deps?: DependencyList, initialState?: StateFromFnReturningPromise<T>): AsyncFnReturn<T>;\nexport {};\n",
      "lib/useAsyncRetry.d.ts": "import { DependencyList } from 'react';\nimport { AsyncState } from './useAsync';\nexport declare type AsyncStateRetry<T> = AsyncState<T> & {\n    retry(): void;\n};\ndeclare const useAsyncRetry: <T>(fn: () => Promise<T>, deps?: DependencyList) => {\n    retry: () => void;\n    loading: boolean;\n    error?: undefined;\n    value?: undefined;\n} | {\n    retry: () => void;\n    loading: false;\n    error: Error;\n    value?: undefined;\n} | {\n    retry: () => void;\n    loading: true;\n    error?: Error | undefined;\n    value?: T | undefined;\n} | {\n    retry: () => void;\n    loading: false;\n    error?: undefined;\n    value: T;\n};\nexport default useAsyncRetry;\n",
      "lib/useAudio.d.ts": "/// <reference types=\"react\" />\ndeclare const useAudio: (elOrProps: import(\"./util/createHTMLMediaHook\").HTMLMediaProps | import(\"react\").ReactElement<import(\"./util/createHTMLMediaHook\").HTMLMediaProps, string | ((props: any) => import(\"react\").ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)> | null) | (new (props: any) => import(\"react\").Component<any, any, any>)>) => [import(\"react\").ReactElement<import(\"./util/createHTMLMediaHook\").HTMLMediaProps, string | ((props: any) => import(\"react\").ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)> | null) | (new (props: any) => import(\"react\").Component<any, any, any>)>, import(\"./util/createHTMLMediaHook\").HTMLMediaState, import(\"./util/createHTMLMediaHook\").HTMLMediaControls, {\n    current: HTMLAudioElement | null;\n}];\nexport default useAudio;\n",
      "lib/useBattery.d.ts": "export interface BatteryState {\n    charging: boolean;\n    chargingTime: number;\n    dischargingTime: number;\n    level: number;\n}\ndeclare type UseBatteryState = {\n    isSupported: false;\n} | {\n    isSupported: true;\n    fetched: false;\n} | (BatteryState & {\n    isSupported: true;\n    fetched: true;\n});\ndeclare function useBattery(): UseBatteryState;\ndeclare const _default: typeof useBattery;\nexport default _default;\n",
      "lib/useBeforeUnload.d.ts": "declare const useBeforeUnload: (enabled?: boolean | (() => boolean), message?: string | undefined) => void;\nexport default useBeforeUnload;\n",
      "lib/useBoolean.d.ts": "import useBoolean from './useToggle';\nexport default useBoolean;\n",
      "lib/useClickAway.d.ts": "import { RefObject } from 'react';\ndeclare const useClickAway: <E extends Event = Event>(ref: RefObject<HTMLElement | null>, onClickAway: (event: E) => void, events?: string[]) => void;\nexport default useClickAway;\n",
      "lib/useCookie.d.ts": "import Cookies from 'js-cookie';\ndeclare const useCookie: (cookieName: string) => [string | null, (newValue: string, options?: Cookies.CookieAttributes | undefined) => void, () => void];\nexport default useCookie;\n",
      "lib/useCopyToClipboard.d.ts": "export interface CopyToClipboardState {\n    value?: string;\n    noUserInteraction: boolean;\n    error?: Error;\n}\ndeclare const useCopyToClipboard: () => [CopyToClipboardState, (value: string) => void];\nexport default useCopyToClipboard;\n",
      "lib/useCounter.d.ts": "import { HookState, InitialHookState } from './util/resolveHookState';\nexport interface CounterActions {\n    inc: (delta?: number) => void;\n    dec: (delta?: number) => void;\n    get: () => number;\n    set: (value: HookState<number>) => void;\n    reset: (value?: HookState<number>) => void;\n}\nexport default function useCounter(initialValue?: InitialHookState<number>, max?: number | null, min?: number | null): [number, CounterActions];\n",
      "lib/useCss.d.ts": "declare const useCss: (css: object) => string;\nexport default useCss;\n",
      "lib/useCustomCompareEffect.d.ts": "import { DependencyList, EffectCallback } from 'react';\ndeclare type DepsEqualFnType<TDeps extends DependencyList> = (prevDeps: TDeps, nextDeps: TDeps) => boolean;\ndeclare const useCustomCompareEffect: <TDeps extends DependencyList>(effect: EffectCallback, deps: TDeps, depsEqual: DepsEqualFnType<TDeps>) => void;\nexport default useCustomCompareEffect;\n",
      "lib/useDebounce.d.ts": "import { DependencyList } from 'react';\nexport declare type UseDebounceReturn = [() => boolean | null, () => void];\nexport default function useDebounce(fn: Function, ms?: number, deps?: DependencyList): UseDebounceReturn;\n",
      "lib/useDeepCompareEffect.d.ts": "import { DependencyList, EffectCallback } from 'react';\ndeclare const useDeepCompareEffect: (effect: EffectCallback, deps: DependencyList) => void;\nexport default useDeepCompareEffect;\n",
      "lib/useDefault.d.ts": "/// <reference types=\"react\" />\ndeclare const useDefault: <TStateType>(defaultValue: TStateType, initialValue: TStateType | (() => TStateType)) => readonly [TStateType, import(\"react\").Dispatch<import(\"react\").SetStateAction<TStateType | null | undefined>>];\nexport default useDefault;\n",
      "lib/useDrop.d.ts": "import * as React from 'react';\nexport interface DropAreaState {\n    over: boolean;\n}\nexport interface DropAreaBond {\n    onDragOver: React.DragEventHandler;\n    onDragEnter: React.DragEventHandler;\n    onDragLeave: React.DragEventHandler;\n    onDrop: React.DragEventHandler;\n    onPaste: React.ClipboardEventHandler;\n}\nexport interface DropAreaOptions {\n    onFiles?: (files: File[], event?: any) => void;\n    onText?: (text: string, event?: any) => void;\n    onUri?: (url: string, event?: any) => void;\n}\ndeclare const useDrop: (options?: DropAreaOptions, args?: never[]) => DropAreaState;\nexport default useDrop;\n",
      "lib/useDropArea.d.ts": "/// <reference types=\"react\" />\nexport interface DropAreaState {\n    over: boolean;\n}\nexport interface DropAreaBond {\n    onDragOver: React.DragEventHandler;\n    onDragEnter: React.DragEventHandler;\n    onDragLeave: React.DragEventHandler;\n    onDrop: React.DragEventHandler;\n    onPaste: React.ClipboardEventHandler;\n}\nexport interface DropAreaOptions {\n    onFiles?: (files: File[], event?: any) => void;\n    onText?: (text: string, event?: any) => void;\n    onUri?: (url: string, event?: any) => void;\n}\ndeclare const useDropArea: (options?: DropAreaOptions) => [DropAreaBond, DropAreaState];\nexport default useDropArea;\n",
      "lib/useEffectOnce.d.ts": "import { EffectCallback } from 'react';\ndeclare const useEffectOnce: (effect: EffectCallback) => void;\nexport default useEffectOnce;\n",
      "lib/useEnsuredForwardedRef.d.ts": "import { MutableRefObject, ForwardRefExoticComponent, PropsWithoutRef, RefAttributes, RefForwardingComponent } from 'react';\nexport default function useEnsuredForwardedRef<T>(forwardedRef: MutableRefObject<T>): MutableRefObject<T>;\nexport declare function ensuredForwardRef<T, P = {}>(Component: RefForwardingComponent<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n",
      "lib/useError.d.ts": "declare const useError: () => (err: Error) => void;\nexport default useError;\n",
      "lib/useEvent.d.ts": "export interface ListenerType1 {\n    addEventListener(name: string, handler: (event?: any) => void, ...args: any[]): any;\n    removeEventListener(name: string, handler: (event?: any) => void, ...args: any[]): any;\n}\nexport interface ListenerType2 {\n    on(name: string, handler: (event?: any) => void, ...args: any[]): any;\n    off(name: string, handler: (event?: any) => void, ...args: any[]): any;\n}\nexport declare type UseEventTarget = ListenerType1 | ListenerType2;\ndeclare type AddEventListener<T> = T extends ListenerType1 ? T['addEventListener'] : T extends ListenerType2 ? T['on'] : never;\ndeclare const useEvent: <T extends UseEventTarget>(name: Parameters<AddEventListener<T>>[0], handler?: Parameters<AddEventListener<T>>[1] | null | undefined, target?: Window | T | null, options?: Parameters<AddEventListener<T>>[2] | undefined) => void;\nexport default useEvent;\n",
      "lib/useFavicon.d.ts": "declare const useFavicon: (href: string) => void;\nexport default useFavicon;\n",
      "lib/useFirstMountState.d.ts": "export declare function useFirstMountState(): boolean;\n",
      "lib/useFullscreen.d.ts": "import { RefObject } from 'react';\nexport interface FullScreenOptions {\n    video?: RefObject<HTMLVideoElement & {\n        webkitEnterFullscreen?: () => void;\n        webkitExitFullscreen?: () => void;\n    }>;\n    onClose?: (error?: Error) => void;\n}\ndeclare const useFullscreen: (ref: RefObject<Element>, on: boolean, options?: FullScreenOptions) => boolean;\nexport default useFullscreen;\n",
      "lib/useGeolocation.d.ts": "export interface GeoLocationSensorState {\n    loading: boolean;\n    accuracy: number | null;\n    altitude: number | null;\n    altitudeAccuracy: number | null;\n    heading: number | null;\n    latitude: number | null;\n    longitude: number | null;\n    speed: number | null;\n    timestamp: number | null;\n    error?: Error | PositionError;\n}\ndeclare const useGeolocation: (options?: PositionOptions | undefined) => GeoLocationSensorState;\nexport default useGeolocation;\n",
      "lib/useGetSet.d.ts": "import { Dispatch } from 'react';\nimport { HookState, InitialHookState } from './util/resolveHookState';\nexport default function useGetSet<S>(initialState: InitialHookState<S>): [() => S, Dispatch<HookState<S>>];\n",
      "lib/useGetSetState.d.ts": "declare const useGetSetState: <T extends object>(initialState?: T) => [() => T, (patch: Partial<T>) => void];\nexport default useGetSetState;\n",
      "lib/useHarmonicIntervalFn.d.ts": "declare const useHarmonicIntervalFn: (fn: Function, delay?: number | null) => void;\nexport default useHarmonicIntervalFn;\n",
      "lib/useHash.d.ts": "/**\n * read and write url hash, response to url hash change\n */\nexport declare const useHash: () => readonly [string, (newHash: string) => void];\n",
      "lib/useHover.d.ts": "import * as React from 'react';\nexport declare type Element = ((state: boolean) => React.ReactElement<any>) | React.ReactElement<any>;\ndeclare const useHover: (element: Element) => [React.ReactElement<any>, boolean];\nexport default useHover;\n",
      "lib/useHoverDirty.d.ts": "import { RefObject } from 'react';\ndeclare const useHoverDirty: (ref: RefObject<Element>, enabled?: boolean) => boolean;\nexport default useHoverDirty;\n",
      "lib/useIdle.d.ts": "declare const useIdle: (ms?: number, initialState?: boolean, events?: string[]) => boolean;\nexport default useIdle;\n",
      "lib/useIntersection.d.ts": "import { RefObject } from 'react';\ndeclare const useIntersection: (ref: RefObject<HTMLElement>, options: IntersectionObserverInit) => IntersectionObserverEntry | null;\nexport default useIntersection;\n",
      "lib/useInterval.d.ts": "declare const useInterval: (callback: Function, delay?: number | null | undefined) => void;\nexport default useInterval;\n",
      "lib/useIsomorphicLayoutEffect.d.ts": "import { useEffect } from 'react';\ndeclare const useIsomorphicLayoutEffect: typeof useEffect;\nexport default useIsomorphicLayoutEffect;\n",
      "lib/useKey.d.ts": "import { DependencyList } from 'react';\nimport { UseEventTarget } from './useEvent';\nexport declare type KeyPredicate = (event: KeyboardEvent) => boolean;\nexport declare type KeyFilter = null | undefined | string | ((event: KeyboardEvent) => boolean);\nexport declare type Handler = (event: KeyboardEvent) => void;\nexport interface UseKeyOptions {\n    event?: 'keydown' | 'keypress' | 'keyup';\n    target?: UseEventTarget;\n    options?: any;\n}\ndeclare const useKey: (key: KeyFilter, fn?: Handler, opts?: UseKeyOptions, deps?: DependencyList) => void;\nexport default useKey;\n",
      "lib/useKeyPress.d.ts": "import { KeyFilter } from './useKey';\ndeclare const useKeyPress: (keyFilter: KeyFilter) => [boolean, KeyboardEvent | null];\nexport default useKeyPress;\n",
      "lib/useKeyPressEvent.d.ts": "import { Handler, KeyFilter } from './useKey';\ndeclare const useKeyPressEvent: (key: string | KeyFilter, keydown?: Handler | null | undefined, keyup?: Handler | null | undefined, useKeyPress?: (keyFilter: KeyFilter) => [boolean, KeyboardEvent | null]) => void;\nexport default useKeyPressEvent;\n",
      "lib/useKeyboardJs.d.ts": "declare const useKeyboardJs: (combination: string | string[]) => [boolean, KeyboardEvent | null];\nexport default useKeyboardJs;\n",
      "lib/useLatest.d.ts": "declare const useLatest: <T>(value: T) => {\n    readonly current: T;\n};\nexport default useLatest;\n",
      "lib/useLifecycles.d.ts": "declare const useLifecycles: (mount: any, unmount?: any) => void;\nexport default useLifecycles;\n",
      "lib/useList.d.ts": "import { InitialHookState, ResolvableHookState } from './util/resolveHookState';\nexport interface ListActions<T> {\n    /**\n     * @description Set new list instead old one\n     */\n    set: (newList: ResolvableHookState<T[]>) => void;\n    /**\n     * @description Add item(s) at the end of list\n     */\n    push: (...items: T[]) => void;\n    /**\n     * @description Replace item at given position. If item at given position not exists it will be set.\n     */\n    updateAt: (index: number, item: T) => void;\n    /**\n     * @description Insert item at given position, all items to the right will be shifted.\n     */\n    insertAt: (index: number, item: T) => void;\n    /**\n     * @description Replace all items that matches predicate with given one.\n     */\n    update: (predicate: (a: T, b: T) => boolean, newItem: T) => void;\n    /**\n     * @description Replace first item matching predicate with given one.\n     */\n    updateFirst: (predicate: (a: T, b: T) => boolean, newItem: T) => void;\n    /**\n     * @description Like `updateFirst` bit in case of predicate miss - pushes item to the list\n     */\n    upsert: (predicate: (a: T, b: T) => boolean, newItem: T) => void;\n    /**\n     * @description Sort list with given sorting function\n     */\n    sort: (compareFn?: (a: T, b: T) => number) => void;\n    /**\n     * @description Same as native Array's method\n     */\n    filter: (callbackFn: (value: T, index?: number, array?: T[]) => boolean, thisArg?: any) => void;\n    /**\n     * @description Removes item at given position. All items to the right from removed will be shifted.\n     */\n    removeAt: (index: number) => void;\n    /**\n     * @deprecated Use removeAt method instead\n     */\n    remove: (index: number) => void;\n    /**\n     * @description Make the list empty\n     */\n    clear: () => void;\n    /**\n     * @description Reset list to initial value\n     */\n    reset: () => void;\n}\ndeclare function useList<T>(initialList?: InitialHookState<T[]>): [T[], ListActions<T>];\nexport default useList;\n",
      "lib/useLocalStorage.d.ts": "import { Dispatch, SetStateAction } from 'react';\ndeclare const useLocalStorage: <T>(key: string, initialValue?: T | undefined, options?: {\n    raw: true;\n} | {\n    raw: false;\n    serializer: (value: T) => string;\n    deserializer: (value: string) => T;\n} | undefined) => [T | undefined, Dispatch<SetStateAction<T | undefined>>, () => void];\nexport default useLocalStorage;\n",
      "lib/useLocation.d.ts": "export interface LocationSensorState {\n    trigger: string;\n    state?: any;\n    length?: number;\n    hash?: string;\n    host?: string;\n    hostname?: string;\n    href?: string;\n    origin?: string;\n    pathname?: string;\n    port?: string;\n    protocol?: string;\n    search?: string;\n}\ndeclare const _default: () => LocationSensorState;\nexport default _default;\n",
      "lib/useLockBodyScroll.d.ts": "import { RefObject } from 'react';\nexport declare function getClosestBody(el: Element | HTMLElement | HTMLIFrameElement | null): HTMLElement | null;\nexport interface BodyInfoItem {\n    counter: number;\n    initialOverflow: CSSStyleDeclaration['overflow'];\n}\ndeclare const _default: (_locked?: boolean, _elementRef?: RefObject<HTMLElement> | undefined) => void;\nexport default _default;\n",
      "lib/useLogger.d.ts": "declare const useLogger: (componentName: string, ...rest: any[]) => void;\nexport default useLogger;\n",
      "lib/useLongPress.d.ts": "interface Options {\n    isPreventDefault?: boolean;\n    delay?: number;\n}\ndeclare const useLongPress: (callback: (e: TouchEvent | MouseEvent) => void, { isPreventDefault, delay }?: Options) => {\n    readonly onMouseDown: (e: any) => void;\n    readonly onTouchStart: (e: any) => void;\n    readonly onMouseUp: () => void;\n    readonly onMouseLeave: () => void;\n    readonly onTouchEnd: () => void;\n};\nexport default useLongPress;\n",
      "lib/useMap.d.ts": "export interface StableActions<T extends object> {\n    set: <K extends keyof T>(key: K, value: T[K]) => void;\n    setAll: (newMap: T) => void;\n    remove: <K extends keyof T>(key: K) => void;\n    reset: () => void;\n}\nexport interface Actions<T extends object> extends StableActions<T> {\n    get: <K extends keyof T>(key: K) => T[K];\n}\ndeclare const useMap: <T extends object = any>(initialMap?: T) => [T, Actions<T>];\nexport default useMap;\n",
      "lib/useMeasure.d.ts": "export declare type UseMeasureRect = Pick<DOMRectReadOnly, 'x' | 'y' | 'top' | 'left' | 'right' | 'bottom' | 'height' | 'width'>;\nexport declare type UseMeasureRef<E extends HTMLElement = HTMLElement> = (element: E) => void;\nexport declare type UseMeasureResult<E extends HTMLElement = HTMLElement> = [UseMeasureRef<E>, UseMeasureRect];\ndeclare const _default: <E extends HTMLElement = HTMLElement>() => UseMeasureResult<E>;\nexport default _default;\n",
      "lib/useMeasureDirty.d.ts": "import { RefObject } from 'react';\nexport interface ContentRect {\n    width: number;\n    height: number;\n    top: number;\n    right: number;\n    left: number;\n    bottom: number;\n}\ndeclare const useMeasureDirty: (ref: RefObject<HTMLElement>) => ContentRect;\nexport default useMeasureDirty;\n",
      "lib/useMedia.d.ts": "declare const useMedia: (query: string, defaultState?: boolean) => boolean;\nexport default useMedia;\n",
      "lib/useMediaDevices.d.ts": "declare const _default: () => {};\nexport default _default;\n",
      "lib/useMediatedState.d.ts": "import { Dispatch, SetStateAction } from 'react';\nexport interface StateMediator<S = any> {\n    (newState: any): S;\n    (newState: any, dispatch: Dispatch<SetStateAction<S>>): void;\n}\nexport declare type UseMediatedStateReturn<S = any> = [S, Dispatch<SetStateAction<S>>];\nexport declare function useMediatedState<S = undefined>(mediator: StateMediator<S | undefined>): UseMediatedStateReturn<S | undefined>;\nexport declare function useMediatedState<S = any>(mediator: StateMediator<S>, initialState: S): UseMediatedStateReturn<S>;\n",
      "lib/useMethods.d.ts": "declare type CreateMethods<M, T> = (state: T) => {\n    [P in keyof M]: (payload?: any) => T;\n};\ndeclare type WrappedMethods<M> = {\n    [P in keyof M]: (...payload: any) => void;\n};\ndeclare const useMethods: <M, T>(createMethods: CreateMethods<M, T>, initialState: T) => [T, WrappedMethods<M>];\nexport default useMethods;\n",
      "lib/useMotion.d.ts": "export interface MotionSensorState {\n    acceleration: {\n        x: number | null;\n        y: number | null;\n        z: number | null;\n    };\n    accelerationIncludingGravity: {\n        x: number | null;\n        y: number | null;\n        z: number | null;\n    };\n    rotationRate: {\n        alpha: number | null;\n        beta: number | null;\n        gamma: number | null;\n    };\n    interval: number | null;\n}\ndeclare const useMotion: (initialState?: MotionSensorState) => MotionSensorState;\nexport default useMotion;\n",
      "lib/useMount.d.ts": "declare const useMount: (fn: () => void) => void;\nexport default useMount;\n",
      "lib/useMountedState.d.ts": "export default function useMountedState(): () => boolean;\n",
      "lib/useMouse.d.ts": "import { RefObject } from 'react';\nexport interface State {\n    docX: number;\n    docY: number;\n    posX: number;\n    posY: number;\n    elX: number;\n    elY: number;\n    elH: number;\n    elW: number;\n}\ndeclare const useMouse: (ref: RefObject<Element>) => State;\nexport default useMouse;\n",
      "lib/useMouseHovered.d.ts": "import { RefObject } from 'react';\nimport { State } from './useMouse';\nexport interface UseMouseHoveredOptions {\n    whenHovered?: boolean;\n    bound?: boolean;\n}\ndeclare const useMouseHovered: (ref: RefObject<Element>, options?: UseMouseHoveredOptions) => State;\nexport default useMouseHovered;\n",
      "lib/useMouseWheel.d.ts": "declare const _default: () => number;\nexport default _default;\n",
      "lib/useMultiStateValidator.d.ts": "import { StateValidator, UseStateValidatorReturn, ValidityState } from './useStateValidator';\nexport declare type MultiStateValidatorStates = any[] | {\n    [p: string]: any;\n} | {\n    [p: number]: any;\n};\nexport declare type MultiStateValidator<V extends ValidityState, S extends MultiStateValidatorStates> = StateValidator<V, S>;\nexport declare function useMultiStateValidator<V extends ValidityState, S extends MultiStateValidatorStates, I extends V>(states: S, validator: MultiStateValidator<V, S>, initialValidity?: I): UseStateValidatorReturn<V>;\n",
      "lib/useNetwork.d.ts": "export interface NetworkState {\n    online?: boolean;\n    since?: Date;\n    downlink?: number;\n    downlinkMax?: number;\n    effectiveType?: string;\n    rtt?: number;\n    type?: string;\n}\ndeclare const useNetwork: (initialState?: NetworkState) => NetworkState;\nexport default useNetwork;\n",
      "lib/useNumber.d.ts": "import useNumber from './useCounter';\nexport default useNumber;\n",
      "lib/useObservable.d.ts": "export interface Observable<T> {\n    subscribe: (listener: (value: T) => void) => {\n        unsubscribe: () => void;\n    };\n}\ndeclare function useObservable<T>(observable$: Observable<T>): T | undefined;\ndeclare function useObservable<T>(observable$: Observable<T>, initialValue: T): T;\nexport default useObservable;\n",
      "lib/useOrientation.d.ts": "export interface OrientationState {\n    angle: number;\n    type: string;\n}\ndeclare const useOrientation: (initialState?: OrientationState) => OrientationState;\nexport default useOrientation;\n",
      "lib/usePageLeave.d.ts": "declare const usePageLeave: (onPageLeave: any, args?: never[]) => void;\nexport default usePageLeave;\n",
      "lib/usePermission.d.ts": "declare type PermissionDesc = PermissionDescriptor | DevicePermissionDescriptor | MidiPermissionDescriptor | PushPermissionDescriptor;\ndeclare type State = PermissionState | '';\ndeclare const usePermission: (permissionDesc: PermissionDesc) => State;\nexport default usePermission;\n",
      "lib/usePrevious.d.ts": "export default function usePrevious<T>(state: T): T | undefined;\n",
      "lib/usePreviousDistinct.d.ts": "export declare type Predicate<T> = (prev: T | undefined, next: T) => boolean;\nexport default function usePreviousDistinct<T>(value: T, compare?: Predicate<T>): T | undefined;\n",
      "lib/usePromise.d.ts": "export declare type UsePromise = () => <T>(promise: Promise<T>) => Promise<T>;\ndeclare const usePromise: UsePromise;\nexport default usePromise;\n",
      "lib/useQueue.d.ts": "export interface QueueMethods<T> {\n    add: (item: T) => void;\n    remove: () => T;\n    first: T;\n    last: T;\n    size: number;\n}\ndeclare const useQueue: <T>(initialValue?: T[]) => QueueMethods<T>;\nexport default useQueue;\n",
      "lib/useRaf.d.ts": "declare const useRaf: (ms?: number, delay?: number) => number;\nexport default useRaf;\n",
      "lib/useRafLoop.d.ts": "export declare type RafLoopReturns = [() => void, () => void, () => boolean];\nexport default function useRafLoop(callback: FrameRequestCallback, initiallyActive?: boolean): RafLoopReturns;\n",
      "lib/useRafState.d.ts": "import { Dispatch, SetStateAction } from 'react';\ndeclare const useRafState: <S>(initialState: S | (() => S)) => [S, Dispatch<SetStateAction<S>>];\nexport default useRafState;\n",
      "lib/useRendersCount.d.ts": "export declare function useRendersCount(): number;\n",
      "lib/useScratch.d.ts": "import { FC } from 'react';\nexport interface ScratchSensorParams {\n    disabled?: boolean;\n    onScratch?: (state: ScratchSensorState) => void;\n    onScratchStart?: (state: ScratchSensorState) => void;\n    onScratchEnd?: (state: ScratchSensorState) => void;\n}\nexport interface ScratchSensorState {\n    isScratching: boolean;\n    start?: number;\n    end?: number;\n    x?: number;\n    y?: number;\n    dx?: number;\n    dy?: number;\n    docX?: number;\n    docY?: number;\n    posX?: number;\n    posY?: number;\n    elH?: number;\n    elW?: number;\n    elX?: number;\n    elY?: number;\n}\ndeclare const useScratch: (params?: ScratchSensorParams) => [(el: HTMLElement | null) => void, ScratchSensorState];\nexport interface ScratchSensorProps extends ScratchSensorParams {\n    children: (state: ScratchSensorState, ref: (el: HTMLElement | null) => void) => React.ReactElement<any>;\n}\nexport declare const ScratchSensor: FC<ScratchSensorProps>;\nexport default useScratch;\n",
      "lib/useScroll.d.ts": "import { RefObject } from 'react';\nexport interface State {\n    x: number;\n    y: number;\n}\ndeclare const useScroll: (ref: RefObject<HTMLElement>) => State;\nexport default useScroll;\n",
      "lib/useScrollbarWidth.d.ts": "export declare function useScrollbarWidth(): number | undefined;\n",
      "lib/useScrolling.d.ts": "import { RefObject } from 'react';\ndeclare const useScrolling: (ref: RefObject<HTMLElement>) => boolean;\nexport default useScrolling;\n",
      "lib/useSearchParam.d.ts": "export declare type UseQueryParam = (param: string) => string | null;\ndeclare const _default: UseQueryParam;\nexport default _default;\n",
      "lib/useSessionStorage.d.ts": "declare const useSessionStorage: <T>(key: string, initialValue?: T | undefined, raw?: boolean | undefined) => [T, (value: T) => void];\nexport default useSessionStorage;\n",
      "lib/useSet.d.ts": "export interface StableActions<K> {\n    add: (key: K) => void;\n    remove: (key: K) => void;\n    toggle: (key: K) => void;\n    reset: () => void;\n}\nexport interface Actions<K> extends StableActions<K> {\n    has: (key: K) => boolean;\n}\ndeclare const useSet: <K>(initialSet?: Set<K>) => [Set<K>, Actions<K>];\nexport default useSet;\n",
      "lib/useSetState.d.ts": "declare const useSetState: <T extends object>(initialState?: T) => [T, (patch: Partial<T> | ((prevState: T) => Partial<T>)) => void];\nexport default useSetState;\n",
      "lib/useShallowCompareEffect.d.ts": "import { DependencyList, EffectCallback } from 'react';\ndeclare const useShallowCompareEffect: (effect: EffectCallback, deps: DependencyList) => void;\nexport default useShallowCompareEffect;\n",
      "lib/useSize.d.ts": "import * as React from 'react';\nexport declare type Element = ((state: State) => React.ReactElement<any>) | React.ReactElement<any>;\nexport interface State {\n    width: number;\n    height: number;\n}\ndeclare const useSize: (element: Element, { width, height }?: Partial<State>) => [React.ReactElement<any>, State];\nexport default useSize;\n",
      "lib/useSlider.d.ts": "import { RefObject, CSSProperties } from 'react';\nexport interface State {\n    isSliding: boolean;\n    value: number;\n}\nexport interface Options {\n    onScrub: (value: number) => void;\n    onScrubStart: () => void;\n    onScrubStop: (value: number) => void;\n    reverse: boolean;\n    styles: boolean | CSSProperties;\n    vertical?: boolean;\n}\ndeclare const useSlider: (ref: RefObject<HTMLElement>, options?: Partial<Options>) => State;\nexport default useSlider;\n",
      "lib/useSpeech.d.ts": "export interface SpeechState {\n    isPlaying: boolean;\n    lang: string;\n    voice: SpeechSynthesisVoice;\n    rate: number;\n    pitch: number;\n    volume: number;\n}\nexport interface SpeechOptions {\n    lang?: string;\n    voice?: SpeechSynthesisVoice;\n    rate?: number;\n    pitch?: number;\n    volume?: number;\n}\ndeclare const useSpeech: (text: string, opts?: SpeechOptions) => SpeechState;\nexport default useSpeech;\n",
      "lib/useSpring.d.ts": "declare const useSpring: (targetValue?: number, tension?: number, friction?: number) => number;\nexport default useSpring;\n",
      "lib/useStartTyping.d.ts": "declare const useStartTyping: (onStartTyping: (event: KeyboardEvent) => void) => void;\nexport default useStartTyping;\n",
      "lib/useStateList.d.ts": "export interface UseStateListReturn<T> {\n    state: T;\n    currentIndex: number;\n    setStateAt: (newIndex: number) => void;\n    setState: (state: T) => void;\n    next: () => void;\n    prev: () => void;\n}\nexport default function useStateList<T>(stateSet?: T[]): UseStateListReturn<T>;\n",
      "lib/useStateValidator.d.ts": "import { Dispatch, SetStateAction } from 'react';\nexport declare type ValidityState = [boolean | undefined, ...any[]];\nexport interface StateValidator<V, S> {\n    (state: S): V;\n    (state: S, dispatch: Dispatch<SetStateAction<V>>): void;\n}\nexport declare type UseStateValidatorReturn<V> = [V, () => void];\nexport default function useStateValidator<V extends ValidityState, S, I extends V>(state: S, validator: StateValidator<V, S>, initialState?: I): UseStateValidatorReturn<V>;\n",
      "lib/useStateWithHistory.d.ts": "import { Dispatch } from 'react';\nimport { InitialHookState, ResolvableHookState } from './util/resolveHookState';\ninterface HistoryState<S> {\n    history: S[];\n    position: number;\n    capacity: number;\n    back: (amount?: number) => void;\n    forward: (amount?: number) => void;\n    go: (position: number) => void;\n}\nexport declare type UseStateHistoryReturn<S> = [S, Dispatch<ResolvableHookState<S>>, HistoryState<S>];\nexport declare function useStateWithHistory<S, I extends S>(initialState: InitialHookState<S>, capacity?: number, initialHistory?: I[]): UseStateHistoryReturn<S>;\nexport declare function useStateWithHistory<S = undefined>(): UseStateHistoryReturn<S | undefined>;\nexport {};\n",
      "lib/useThrottle.d.ts": "declare const useThrottle: <T>(value: T, ms?: number) => T;\nexport default useThrottle;\n",
      "lib/useThrottleFn.d.ts": "declare const useThrottleFn: <T, U extends any[]>(fn: (...args: U) => T, ms: number | undefined, args: U) => T | null;\nexport default useThrottleFn;\n",
      "lib/useTimeout.d.ts": "export declare type UseTimeoutReturn = [() => boolean | null, () => void, () => void];\nexport default function useTimeout(ms?: number): UseTimeoutReturn;\n",
      "lib/useTimeoutFn.d.ts": "export declare type UseTimeoutFnReturn = [() => boolean | null, () => void, () => void];\nexport default function useTimeoutFn(fn: Function, ms?: number): UseTimeoutFnReturn;\n",
      "lib/useTitle.d.ts": "export interface UseTitleOptions {\n    restoreOnUnmount?: boolean;\n}\ndeclare function useTitle(title: string, options?: UseTitleOptions): void;\ndeclare const _default: typeof useTitle;\nexport default _default;\n",
      "lib/useToggle.d.ts": "declare const useToggle: (initialValue: boolean) => [boolean, (nextValue?: any) => void];\nexport default useToggle;\n",
      "lib/useTween.d.ts": "export declare type Easing = (t: number) => number;\ndeclare const useTween: (easingName?: string, ms?: number, delay?: number) => number;\nexport default useTween;\n",
      "lib/useUnmount.d.ts": "declare const useUnmount: (fn: () => any) => void;\nexport default useUnmount;\n",
      "lib/useUnmountPromise.d.ts": "export declare type Race = <P extends Promise<any>, E = any>(promise: P, onError?: (error: E) => void) => P;\ndeclare const useUnmountPromise: () => Race;\nexport default useUnmountPromise;\n",
      "lib/useUpdate.d.ts": "declare const useUpdate: () => () => void;\nexport default useUpdate;\n",
      "lib/useUpdateEffect.d.ts": "import { useEffect } from 'react';\ndeclare const useUpdateEffect: typeof useEffect;\nexport default useUpdateEffect;\n",
      "lib/useUpsert.d.ts": "import { ListActions } from './useList';\nimport { InitialHookState } from './util/resolveHookState';\nexport interface UpsertListActions<T> extends Omit<ListActions<T>, 'upsert'> {\n    upsert: (newItem: T) => void;\n}\n/**\n * @deprecated Use `useList` hook's upsert action instead\n */\nexport default function useUpsert<T>(predicate: (a: T, b: T) => boolean, initialList?: InitialHookState<T[]>): [T[], UpsertListActions<T>];\n",
      "lib/useVibrate.d.ts": "export declare type VibrationPattern = number | number[];\ndeclare function useVibrate(enabled?: boolean, pattern?: VibrationPattern, loop?: boolean): void;\ndeclare const _default: typeof useVibrate;\nexport default _default;\n",
      "lib/useVideo.d.ts": "/// <reference types=\"react\" />\ndeclare const useVideo: (elOrProps: import(\"./util/createHTMLMediaHook\").HTMLMediaProps | import(\"react\").ReactElement<import(\"./util/createHTMLMediaHook\").HTMLMediaProps, string | ((props: any) => import(\"react\").ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)> | null) | (new (props: any) => import(\"react\").Component<any, any, any>)>) => [import(\"react\").ReactElement<import(\"./util/createHTMLMediaHook\").HTMLMediaProps, string | ((props: any) => import(\"react\").ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)> | null) | (new (props: any) => import(\"react\").Component<any, any, any>)>, import(\"./util/createHTMLMediaHook\").HTMLMediaState, import(\"./util/createHTMLMediaHook\").HTMLMediaControls, {\n    current: HTMLAudioElement | null;\n}];\nexport default useVideo;\n",
      "lib/useWait.d.ts": "",
      "lib/useWindowScroll.d.ts": "export interface State {\n    x: number;\n    y: number;\n}\ndeclare const useWindowScroll: () => State;\nexport default useWindowScroll;\n",
      "lib/useWindowSize.d.ts": "declare const useWindowSize: (initialWidth?: number, initialHeight?: number) => {\n    width: number;\n    height: number;\n};\nexport default useWindowSize;\n",
      "lib/util/createHTMLMediaHook.d.ts": "import * as React from 'react';\nexport interface HTMLMediaProps extends React.AudioHTMLAttributes<any>, React.VideoHTMLAttributes<any> {\n    src: string;\n}\nexport interface HTMLMediaState {\n    buffered: any[];\n    duration: number;\n    paused: boolean;\n    muted: boolean;\n    time: number;\n    volume: number;\n}\nexport interface HTMLMediaControls {\n    play: () => Promise<void> | void;\n    pause: () => void;\n    mute: () => void;\n    unmute: () => void;\n    volume: (volume: number) => void;\n    seek: (time: number) => void;\n}\ndeclare const createHTMLMediaHook: (tag: 'audio' | 'video') => (elOrProps: HTMLMediaProps | React.ReactElement<HTMLMediaProps>) => [React.ReactElement<HTMLMediaProps>, HTMLMediaState, HTMLMediaControls, {\n    current: HTMLAudioElement | null;\n}];\nexport default createHTMLMediaHook;\n",
      "lib/util/createRenderProp.d.ts": "declare const createRenderProp: (hook: any, mapPropsToArgs?: (props: any) => any[]) => (props: any) => any;\nexport default createRenderProp;\n",
      "lib/util/parseTimeRanges.d.ts": "declare const parseTimeRanges: (ranges: any) => {\n    start: number;\n    end: number;\n}[];\nexport default parseTimeRanges;\n",
      "lib/util/resolveHookState.d.ts": "export declare type StateSetter<S> = (prevState: S) => S;\nexport declare type InitialStateSetter<S> = () => S;\nexport declare type InitialHookState<S> = S | InitialStateSetter<S>;\nexport declare type HookState<S> = S | StateSetter<S>;\nexport declare type ResolvableHookState<S> = S | StateSetter<S> | InitialStateSetter<S>;\nexport declare function resolveHookState<S, C extends S>(newState: InitialStateSetter<S>): S;\nexport declare function resolveHookState<S, C extends S>(newState: StateSetter<S>, currentState: C): S;\nexport declare function resolveHookState<S, C extends S>(newState: ResolvableHookState<S>, currentState?: C): S;\n",
      "lib/util.d.ts": "export declare const isClient: boolean;\nexport declare const on: (obj: any, ...args: any[]) => any;\nexport declare const off: (obj: any, ...args: any[]) => any;\nexport declare type FnReturningPromise = (...args: any[]) => Promise<any>;\nexport declare type PromiseType<P extends Promise<any>> = P extends Promise<infer T> ? T : never;\nexport declare const isDeepEqual: (a: any, b: any) => boolean;\n"
    },
    "yjs": {
      "dist/src/index.d.ts": "export { Doc, Transaction, YArray as Array, YMap as Map, YText as Text, YXmlText as XmlText, YXmlHook as XmlHook, YXmlElement as XmlElement, YXmlFragment as XmlFragment, YXmlEvent, YMapEvent, YArrayEvent, YTextEvent, YEvent, Item, AbstractStruct, GC, ContentBinary, ContentDeleted, ContentEmbed, ContentFormat, ContentJSON, ContentAny, ContentString, ContentType, AbstractType, RelativePosition, getTypeChildren, createRelativePositionFromTypeIndex, createRelativePositionFromJSON, createAbsolutePositionFromRelativePosition, compareRelativePositions, writeRelativePosition, readRelativePosition, ID, createID, compareIDs, getState, Snapshot, createSnapshot, createDeleteSet, createDeleteSetFromStructStore, snapshot, emptySnapshot, findRootTypeKey, typeListToArraySnapshot, typeMapGetSnapshot, iterateDeletedStructs, applyUpdate, applyUpdateV2, readUpdate, readUpdateV2, encodeStateAsUpdate, encodeStateAsUpdateV2, encodeStateVector, encodeStateVectorV2, UndoManager, decodeSnapshot, encodeSnapshot, decodeSnapshotV2, encodeSnapshotV2, decodeStateVector, decodeStateVectorV2, isDeleted, isParentOf, equalSnapshots, PermanentUserData, tryGc, transact, AbstractConnector, logType } from \"./internals.js\";\n",
      "dist/src/internals.d.ts": "export * from \"./utils/AbstractConnector.js\";\nexport * from \"./utils/DeleteSet.js\";\nexport * from \"./utils/Doc.js\";\nexport * from \"./utils/UpdateDecoder.js\";\nexport * from \"./utils/UpdateEncoder.js\";\nexport * from \"./utils/encoding.js\";\nexport * from \"./utils/EventHandler.js\";\nexport * from \"./utils/ID.js\";\nexport * from \"./utils/isParentOf.js\";\nexport * from \"./utils/logging.js\";\nexport * from \"./utils/PermanentUserData.js\";\nexport * from \"./utils/RelativePosition.js\";\nexport * from \"./utils/Snapshot.js\";\nexport * from \"./utils/StructStore.js\";\nexport * from \"./utils/Transaction.js\";\nexport * from \"./utils/UndoManager.js\";\nexport * from \"./utils/YEvent.js\";\nexport * from \"./types/AbstractType.js\";\nexport * from \"./types/YArray.js\";\nexport * from \"./types/YMap.js\";\nexport * from \"./types/YText.js\";\nexport * from \"./types/YXmlFragment.js\";\nexport * from \"./types/YXmlElement.js\";\nexport * from \"./types/YXmlEvent.js\";\nexport * from \"./types/YXmlHook.js\";\nexport * from \"./types/YXmlText.js\";\nexport * from \"./structs/AbstractStruct.js\";\nexport * from \"./structs/GC.js\";\nexport * from \"./structs/ContentBinary.js\";\nexport * from \"./structs/ContentDeleted.js\";\nexport * from \"./structs/ContentEmbed.js\";\nexport * from \"./structs/ContentFormat.js\";\nexport * from \"./structs/ContentJSON.js\";\nexport * from \"./structs/ContentAny.js\";\nexport * from \"./structs/ContentString.js\";\nexport * from \"./structs/ContentType.js\";\nexport * from \"./structs/Item.js\";\n",
      "dist/src/structs/AbstractStruct.d.ts": "export class AbstractStruct {\n    /**\n     * @param {ID} id\n     * @param {number} length\n     */\n    constructor(id: ID, length: number);\n    id: ID;\n    length: number;\n    /**\n     * @type {boolean}\n     */\n    get deleted(): boolean;\n    /**\n     * Merge this struct with the item to the right.\n     * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n     * Also this method does *not* remove right from StructStore!\n     * @param {AbstractStruct} right\n     * @return {boolean} wether this merged with right\n     */\n    mergeWith(right: AbstractStruct): boolean;\n    /**\n     * @param {AbstractUpdateEncoder} encoder The encoder to write data to.\n     * @param {number} offset\n     * @param {number} encodingRef\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number, encodingRef: number): void;\n    /**\n     * @param {Transaction} transaction\n     * @param {number} offset\n     */\n    integrate(transaction: Transaction, offset: number): void;\n}\nimport { ID } from \"../utils/ID.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\n",
      "dist/src/structs/ContentAny.d.ts": "export class ContentAny {\n    /**\n     * @param {Array<any>} arr\n     */\n    constructor(arr: Array<any>);\n    /**\n     * @type {Array<any>}\n     */\n    arr: Array<any>;\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {ContentAny}\n     */\n    copy(): ContentAny;\n    /**\n     * @param {number} offset\n     * @return {ContentAny}\n     */\n    splice(offset: number): ContentAny;\n    /**\n     * @param {ContentAny} right\n     * @return {boolean}\n     */\n    mergeWith(right: ContentAny): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nexport function readContentAny(decoder: AbstractUpdateDecoder): ContentAny;\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Item } from \"./Item.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/structs/ContentBinary.d.ts": "export class ContentBinary {\n    /**\n     * @param {Uint8Array} content\n     */\n    constructor(content: Uint8Array);\n    content: Uint8Array;\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {ContentBinary}\n     */\n    copy(): ContentBinary;\n    /**\n     * @param {number} offset\n     * @return {ContentBinary}\n     */\n    splice(offset: number): ContentBinary;\n    /**\n     * @param {ContentBinary} right\n     * @return {boolean}\n     */\n    mergeWith(right: ContentBinary): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nexport function readContentBinary(decoder: AbstractUpdateDecoder): ContentBinary;\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Item } from \"./Item.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/structs/ContentDeleted.d.ts": "export class ContentDeleted {\n    /**\n     * @param {number} len\n     */\n    constructor(len: number);\n    len: number;\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {ContentDeleted}\n     */\n    copy(): ContentDeleted;\n    /**\n     * @param {number} offset\n     * @return {ContentDeleted}\n     */\n    splice(offset: number): ContentDeleted;\n    /**\n     * @param {ContentDeleted} right\n     * @return {boolean}\n     */\n    mergeWith(right: ContentDeleted): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nexport function readContentDeleted(decoder: AbstractUpdateDecoder): ContentDeleted;\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Item } from \"./Item.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/structs/ContentEmbed.d.ts": "/**\n * @private\n */\nexport class ContentEmbed {\n    /**\n     * @param {Object} embed\n     */\n    constructor(embed: Object);\n    embed: Object;\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {ContentEmbed}\n     */\n    copy(): ContentEmbed;\n    /**\n     * @param {number} offset\n     * @return {ContentEmbed}\n     */\n    splice(offset: number): ContentEmbed;\n    /**\n     * @param {ContentEmbed} right\n     * @return {boolean}\n     */\n    mergeWith(right: ContentEmbed): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nexport function readContentEmbed(decoder: AbstractUpdateDecoder): ContentEmbed;\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Item } from \"./Item.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/structs/ContentFormat.d.ts": "/**\n * @private\n */\nexport class ContentFormat {\n    /**\n     * @param {string} key\n     * @param {Object} value\n     */\n    constructor(key: string, value: Object);\n    key: string;\n    value: Object;\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {ContentFormat}\n     */\n    copy(): ContentFormat;\n    /**\n     * @param {number} offset\n     * @return {ContentFormat}\n     */\n    splice(offset: number): ContentFormat;\n    /**\n     * @param {ContentFormat} right\n     * @return {boolean}\n     */\n    mergeWith(right: ContentFormat): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nexport function readContentFormat(decoder: AbstractUpdateDecoder): ContentFormat;\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Item } from \"./Item.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/structs/ContentJSON.d.ts": "/**\n * @private\n */\nexport class ContentJSON {\n    /**\n     * @param {Array<any>} arr\n     */\n    constructor(arr: Array<any>);\n    /**\n     * @type {Array<any>}\n     */\n    arr: Array<any>;\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {ContentJSON}\n     */\n    copy(): ContentJSON;\n    /**\n     * @param {number} offset\n     * @return {ContentJSON}\n     */\n    splice(offset: number): ContentJSON;\n    /**\n     * @param {ContentJSON} right\n     * @return {boolean}\n     */\n    mergeWith(right: ContentJSON): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nexport function readContentJSON(decoder: AbstractUpdateDecoder): ContentJSON;\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Item } from \"./Item.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/structs/ContentString.d.ts": "/**\n * @private\n */\nexport class ContentString {\n    /**\n     * @param {string} str\n     */\n    constructor(str: string);\n    /**\n     * @type {string}\n     */\n    str: string;\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {ContentString}\n     */\n    copy(): ContentString;\n    /**\n     * @param {number} offset\n     * @return {ContentString}\n     */\n    splice(offset: number): ContentString;\n    /**\n     * @param {ContentString} right\n     * @return {boolean}\n     */\n    mergeWith(right: ContentString): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nexport function readContentString(decoder: AbstractUpdateDecoder): ContentString;\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Item } from \"./Item.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/structs/ContentType.d.ts": "/**\n * @type {Array<function(AbstractUpdateDecoder):AbstractType<any>>}\n * @private\n */\nexport const typeRefs: Array<(arg0: AbstractUpdateDecoder) => AbstractType<any>>;\nexport const YArrayRefID: 0;\nexport const YMapRefID: 1;\nexport const YTextRefID: 2;\nexport const YXmlElementRefID: 3;\nexport const YXmlFragmentRefID: 4;\nexport const YXmlHookRefID: 5;\nexport const YXmlTextRefID: 6;\n/**\n * @private\n */\nexport class ContentType {\n    /**\n     * @param {AbstractType<YEvent>} type\n     */\n    constructor(type: AbstractType<YEvent>);\n    /**\n     * @type {AbstractType<any>}\n     */\n    type: AbstractType<any>;\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {ContentType}\n     */\n    copy(): ContentType;\n    /**\n     * @param {number} offset\n     * @return {ContentType}\n     */\n    splice(offset: number): ContentType;\n    /**\n     * @param {ContentType} right\n     * @return {boolean}\n     */\n    mergeWith(right: ContentType): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nexport function readContentType(decoder: AbstractUpdateDecoder): ContentType;\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\nimport { AbstractType } from \"../types/AbstractType.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Item } from \"./Item.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { YEvent } from \"../utils/YEvent.js\";\n",
      "dist/src/structs/GC.d.ts": "export const structGCRefNumber: 0;\n/**\n * @private\n */\nexport class GC extends AbstractStruct {\n    constructor(id: ID, length: number);\n    delete(): void;\n    /**\n     * @param {Transaction} transaction\n     * @param {StructStore} store\n     * @return {null | number}\n     */\n    getMissing(transaction: Transaction, store: StructStore): null | number;\n}\nimport { AbstractStruct } from \"./AbstractStruct.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { ID } from \"../utils/ID.js\";\n",
      "dist/src/structs/Item.d.ts": "export function followRedone(store: StructStore, id: ID): {\n    item: Item;\n    diff: number;\n};\nexport function keepItem(item: Item | null, keep: boolean): void;\nexport function splitItem(transaction: Transaction, leftItem: Item, diff: number): Item;\nexport function redoItem(transaction: Transaction, item: Item, redoitems: Set<Item>): Item | null;\n/**\n * Abstract class that represents any content.\n */\nexport class Item extends AbstractStruct {\n    /**\n     * @param {ID} id\n     * @param {Item | null} left\n     * @param {ID | null} origin\n     * @param {Item | null} right\n     * @param {ID | null} rightOrigin\n     * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n     * @param {string | null} parentSub\n     * @param {AbstractContent} content\n     */\n    constructor(id: ID, left: Item | null, origin: ID | null, right: Item | null, rightOrigin: ID | null, parent: AbstractType<any> | ID | null, parentSub: string | null, content: AbstractContent);\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    origin: ID | null;\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    left: Item | null;\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    right: Item | null;\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    rightOrigin: ID | null;\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    parent: AbstractType<any> | ID | null;\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    parentSub: string | null;\n    /**\n     * If this type's effect is reundone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    redone: ID | null;\n    /**\n     * @type {AbstractContent}\n     */\n    content: AbstractContent;\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n    info: number;\n    /**\n     * This is used to mark the item as an indexed fast-search marker\n     *\n     * @type {boolean}\n     */\n    set marker(arg: boolean);\n    get marker(): boolean;\n    set keep(arg: boolean);\n    /**\n     * If true, do not garbage collect this Item.\n     */\n    get keep(): boolean;\n    get countable(): boolean;\n    markDeleted(): void;\n    /**\n     * Return the creator clientID of the missing op or define missing items and return null.\n     *\n     * @param {Transaction} transaction\n     * @param {StructStore} store\n     * @return {null | number}\n     */\n    getMissing(transaction: Transaction, store: StructStore): null | number;\n    /**\n     * Returns the next non-deleted item\n     */\n    get next(): Item | null;\n    /**\n     * Returns the previous non-deleted item\n     */\n    get prev(): Item | null;\n    /**\n     * Computes the last content address of this Item.\n     */\n    get lastId(): ID;\n    /**\n     * Mark this Item as deleted.\n     *\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     * @param {boolean} parentGCd\n     */\n    gc(store: StructStore, parentGCd: boolean): void;\n}\nexport function readItemContent(decoder: AbstractUpdateDecoder, info: number): AbstractContent;\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(AbstractUpdateDecoder):AbstractContent>}\n */\nexport const contentRefs: Array<(arg0: AbstractUpdateDecoder) => AbstractContent>;\n/**\n * Do not implement this class!\n */\nexport class AbstractContent {\n    /**\n     * @return {number}\n     */\n    getLength(): number;\n    /**\n     * @return {Array<any>}\n     */\n    getContent(): Array<any>;\n    /**\n     * Should return false if this Item is some kind of meta information\n     * (e.g. format information).\n     *\n     * * Whether this Item should be addressable via `yarray.get(i)`\n     * * Whether this Item should be counted when computing yarray.length\n     *\n     * @return {boolean}\n     */\n    isCountable(): boolean;\n    /**\n     * @return {AbstractContent}\n     */\n    copy(): AbstractContent;\n    /**\n     * @param {number} offset\n     * @return {AbstractContent}\n     */\n    splice(offset: number): AbstractContent;\n    /**\n     * @param {AbstractContent} right\n     * @return {boolean}\n     */\n    mergeWith(right: AbstractContent): boolean;\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n    integrate(transaction: Transaction, item: Item): void;\n    /**\n     * @param {Transaction} transaction\n     */\n    delete(transaction: Transaction): void;\n    /**\n     * @param {StructStore} store\n     */\n    gc(store: StructStore): void;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     * @param {number} offset\n     */\n    write(encoder: AbstractUpdateEncoder, offset: number): void;\n    /**\n     * @return {number}\n     */\n    getRef(): number;\n}\nimport { StructStore } from \"../utils/StructStore.js\";\nimport { ID } from \"../utils/ID.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { AbstractStruct } from \"./AbstractStruct.js\";\nimport { AbstractType } from \"../types/AbstractType.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\n",
      "dist/src/types/AbstractType.d.ts": "export class ArraySearchMarker {\n    /**\n     * @param {Item} p\n     * @param {number} index\n     */\n    constructor(p: Item, index: number);\n    p: Item;\n    index: number;\n    timestamp: number;\n}\nexport function findMarker(yarray: AbstractType<any>, index: number): ArraySearchMarker | null;\nexport function updateMarkerChanges(searchMarker: Array<ArraySearchMarker>, index: number, len: number): void;\nexport function getTypeChildren(t: AbstractType<any>): Array<Item>;\nexport function callTypeObservers<EventType>(type: AbstractType<EventType>, transaction: Transaction, event: EventType): void;\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nexport class AbstractType<EventType> {\n    /**\n     * @type {Item|null}\n     */\n    _item: Item | null;\n    /**\n     * @type {Map<string,Item>}\n     */\n    _map: Map<string, Item>;\n    /**\n     * @type {Item|null}\n     */\n    _start: Item | null;\n    /**\n     * @type {Doc|null}\n     */\n    doc: Doc | null;\n    _length: number;\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    _eH: EventHandler<EventType, Transaction>;\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent>,Transaction>}\n     */\n    _dEH: EventHandler<Array<YEvent>, Transaction>;\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n    _searchMarker: null | Array<ArraySearchMarker>;\n    /**\n     * Integrate this type into the Yjs instance.\n     *\n     * * Save this struct in the os\n     * * This type is sent to other client\n     * * Observer functions are fired\n     *\n     * @param {Doc} y The Yjs instance\n     * @param {Item|null} item\n     */\n    _integrate(y: Doc, item: Item | null): void;\n    /**\n     * @return {AbstractType<EventType>}\n     */\n    _copy(): AbstractType<EventType>;\n    /**\n     * @param {AbstractUpdateEncoder} encoder\n     */\n    _write(encoder: AbstractUpdateEncoder): void;\n    /**\n     * The first non-deleted item\n     */\n    get _first(): Item | null;\n    /**\n     * Creates YEvent and calls all type observers.\n     * Must be implemented by each type.\n     *\n     * @param {Transaction} transaction\n     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n     */\n    _callObserver(transaction: Transaction, parentSubs: Set<null | string>): void;\n    /**\n     * Observe all events that are created on this type.\n     *\n     * @param {function(EventType, Transaction):void} f Observer function\n     */\n    observe(f: (arg0: EventType, arg1: Transaction) => void): void;\n    /**\n     * Observe all events that are created by this type and its children.\n     *\n     * @param {function(Array<YEvent>,Transaction):void} f Observer function\n     */\n    observeDeep(f: (arg0: Array<YEvent>, arg1: Transaction) => void): void;\n    /**\n     * Unregister an observer function.\n     *\n     * @param {function(EventType,Transaction):void} f Observer function\n     */\n    unobserve(f: (arg0: EventType, arg1: Transaction) => void): void;\n    /**\n     * Unregister an observer function.\n     *\n     * @param {function(Array<YEvent>,Transaction):void} f Observer function\n     */\n    unobserveDeep(f: (arg0: Array<YEvent>, arg1: Transaction) => void): void;\n    /**\n     * @abstract\n     * @return {any}\n     */\n    toJSON(): any;\n}\nexport function typeListToArray(type: AbstractType<any>): Array<any>;\nexport function typeListToArraySnapshot(type: AbstractType<any>, snapshot: Snapshot): Array<any>;\nexport function typeListForEach(type: AbstractType<any>, f: (arg0: any, arg1: number, arg2: any) => void): void;\nexport function typeListMap<C, R>(type: AbstractType<any>, f: (arg0: C, arg1: number, arg2: AbstractType<any>) => R): R[];\nexport function typeListCreateIterator(type: AbstractType<any>): IterableIterator<any>;\nexport function typeListForEachSnapshot(type: AbstractType<any>, f: (arg0: any, arg1: number, arg2: AbstractType<any>) => void, snapshot: Snapshot): void;\nexport function typeListGet(type: AbstractType<any>, index: number): any;\nexport function typeListInsertGenericsAfter(transaction: Transaction, parent: AbstractType<any>, referenceItem: Item | null, content: Array<{\n    [x: string]: any;\n} | Array<any> | boolean | number | string | Uint8Array>): void;\nexport function typeListInsertGenerics(transaction: Transaction, parent: AbstractType<any>, index: number, content: Array<{\n    [x: string]: any;\n} | Array<any> | number | string | Uint8Array>): void;\nexport function typeListDelete(transaction: Transaction, parent: AbstractType<any>, index: number, length: number): void;\nexport function typeMapDelete(transaction: Transaction, parent: AbstractType<any>, key: string): void;\nexport function typeMapSet(transaction: Transaction, parent: AbstractType<any>, key: string, value: Object | number | Array<any> | string | Uint8Array | AbstractType<any>): void;\nexport function typeMapGet(parent: AbstractType<any>, key: string): {\n    [x: string]: any;\n} | number | Array<any> | string | Uint8Array | AbstractType<any> | undefined;\nexport function typeMapGetAll(parent: AbstractType<any>): {\n    [x: string]: {\n        [x: string]: any;\n    } | number | Array<any> | string | Uint8Array | AbstractType<any> | undefined;\n};\nexport function typeMapHas(parent: AbstractType<any>, key: string): boolean;\nexport function typeMapGetSnapshot(parent: AbstractType<any>, key: string, snapshot: Snapshot): {\n    [x: string]: any;\n} | number | Array<any> | string | Uint8Array | AbstractType<any> | undefined;\nexport function createMapIterator(map: Map<string, Item>): IterableIterator<Array<any>>;\nimport { Item } from \"../structs/Item.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { Doc } from \"../utils/Doc.js\";\nimport { EventHandler } from \"../utils/EventHandler.js\";\nimport { YEvent } from \"../utils/YEvent.js\";\nimport { AbstractUpdateEncoder } from \"../utils/UpdateEncoder.js\";\nimport { Snapshot } from \"../utils/Snapshot.js\";\n",
      "dist/src/types/YArray.d.ts": "/**\n * Event that describes the changes on a YArray\n * @template T\n */\nexport class YArrayEvent<T> extends YEvent {\n    /**\n     * @param {YArray<T>} yarray The changed type\n     * @param {Transaction} transaction The transaction object\n     */\n    constructor(yarray: YArray<T>, transaction: Transaction);\n    _transaction: Transaction;\n}\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YArray<T> extends AbstractType<YArrayEvent<T>> implements Iterable<T> {\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    private _prelimContent;\n    get length(): number;\n    /**\n     * Inserts new content at an index.\n     *\n     * Important: This function expects an array of content. Not just a content\n     * object. The reason for this \"weirdness\" is that inserting several elements\n     * is very efficient when it is done as a single operation.\n     *\n     * @example\n     *  // Insert character 'a' at position 0\n     *  yarray.insert(0, ['a'])\n     *  // Insert numbers 1, 2 at position 1\n     *  yarray.insert(1, [1, 2])\n     *\n     * @param {number} index The index to insert content at.\n     * @param {Array<T>} content The array of content\n     */\n    insert(index: number, content: T[]): void;\n    /**\n     * Appends content to this YArray.\n     *\n     * @param {Array<T>} content Array of content to append.\n     */\n    push(content: T[]): void;\n    /**\n     * Preppends content to this YArray.\n     *\n     * @param {Array<T>} content Array of content to preppend.\n     */\n    unshift(content: T[]): void;\n    /**\n     * Deletes elements starting from an index.\n     *\n     * @param {number} index Index at which to start deleting elements\n     * @param {number} length The number of elements to remove. Defaults to 1.\n     */\n    delete(index: number, length?: number): void;\n    /**\n     * Returns the i-th element from a YArray.\n     *\n     * @param {number} index The index of the element to return from the YArray\n     * @return {T}\n     */\n    get(index: number): T;\n    /**\n     * Transforms this YArray to a JavaScript Array.\n     *\n     * @return {Array<T>}\n     */\n    toArray(): T[];\n    /**\n     * Returns an Array with the result of calling a provided function on every\n     * element of this YArray.\n     *\n     * @template T,M\n     * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n     * @return {Array<M>} A new array with each element being the result of the\n     *                 callback function\n     */\n    map<T_1, M>(f: (arg0: T_1, arg1: number, arg2: YArray<T_1>) => M): M[];\n    /**\n     * Executes a provided function on once on overy element of this YArray.\n     *\n     * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n     */\n    forEach(f: (arg0: T, arg1: number, arg2: YArray<T>) => void): void;\n    /**\n     * @return {IterableIterator<T>}\n     */\n    [Symbol.iterator](): IterableIterator<T>;\n}\nexport function readYArray(decoder: AbstractUpdateDecoder): YArray<any>;\nimport { YEvent } from \"../utils/YEvent.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { AbstractType } from \"./AbstractType.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/types/YMap.d.ts": "/**\n * @template T\n * Event that describes the changes on a YMap.\n */\nexport class YMapEvent<T> extends YEvent {\n    /**\n     * @param {YMap<T>} ymap The YArray that changed.\n     * @param {Transaction} transaction\n     * @param {Set<any>} subs The keys that changed.\n     */\n    constructor(ymap: YMap<T>, transaction: Transaction, subs: Set<any>);\n    keysChanged: Set<any>;\n}\n/**\n * @template T number|string|Object|Array|Uint8Array\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YMap<T> extends AbstractType<YMapEvent<T>> implements Iterable<T> {\n    /**\n     *\n     * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n     */\n    constructor(entries?: Iterable<readonly [string, any]> | undefined);\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    private _prelimContent;\n    /**\n     * Returns the size of the YMap (count of key/value pairs)\n     *\n     * @return {number}\n     */\n    get size(): number;\n    /**\n     * Returns the keys for each element in the YMap Type.\n     *\n     * @return {IterableIterator<string>}\n     */\n    keys(): IterableIterator<string>;\n    /**\n     * Returns the keys for each element in the YMap Type.\n     *\n     * @return {IterableIterator<string>}\n     */\n    values(): IterableIterator<string>;\n    /**\n     * Returns an Iterator of [key, value] pairs\n     *\n     * @return {IterableIterator<any>}\n     */\n    entries(): IterableIterator<any>;\n    /**\n     * Executes a provided function on once on every key-value pair.\n     *\n     * @param {function(T,string,YMap<T>):void} f A function to execute on every element of this YArray.\n     */\n    forEach(f: (arg0: T, arg1: string, arg2: YMap<T>) => void): {\n        [x: string]: T;\n    };\n    /**\n     * @return {IterableIterator<T>}\n     */\n    [Symbol.iterator](): IterableIterator<T>;\n    /**\n     * Remove a specified element from this YMap.\n     *\n     * @param {string} key The key of the element to remove.\n     */\n    delete(key: string): void;\n    /**\n     * Adds or updates an element with a specified key and value.\n     *\n     * @param {string} key The key of the element to add to this YMap\n     * @param {T} value The value of the element to add\n     */\n    set(key: string, value: T): T;\n    /**\n     * Returns a specified element from this YMap.\n     *\n     * @param {string} key\n     * @return {T|undefined}\n     */\n    get(key: string): T | undefined;\n    /**\n     * Returns a boolean indicating whether the specified key exists or not.\n     *\n     * @param {string} key The key to test.\n     * @return {boolean}\n     */\n    has(key: string): boolean;\n}\nexport function readYMap(decoder: AbstractUpdateDecoder): YMap<any>;\nimport { YEvent } from \"../utils/YEvent.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { AbstractType } from \"./AbstractType.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/types/YText.d.ts": "export class ItemTextListPosition {\n    /**\n     * @param {Item|null} left\n     * @param {Item|null} right\n     * @param {number} index\n     * @param {Map<string,any>} currentAttributes\n     */\n    constructor(left: Item | null, right: Item | null, index: number, currentAttributes: Map<string, any>);\n    left: Item | null;\n    right: Item | null;\n    index: number;\n    currentAttributes: Map<string, any>;\n    /**\n     * Only call this if you know that this.right is defined\n     */\n    forward(): void;\n}\nexport function cleanupYTextFormatting(type: YText): number;\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n/**\n * @typedef {Object} DeltaItem\n * @property {number|undefined} DeltaItem.delete\n * @property {number|undefined} DeltaItem.retain\n * @property {string|undefined} DeltaItem.string\n * @property {Object<string,any>} DeltaItem.attributes\n */\n/**\n * Event that describes the changes on a YText type.\n */\nexport class YTextEvent extends YEvent {\n    /**\n     * @param {YText} ytext\n     * @param {Transaction} transaction\n     */\n    constructor(ytext: YText, transaction: Transaction);\n    /**\n     * @type {Array<DeltaItem>|null}\n     */\n    _delta: Array<DeltaItem> | null;\n    /**\n     * Compute the changes in the delta format.\n     * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n     *\n     * @type {Array<DeltaItem>}\n     *\n     * @public\n     */\n    public get delta(): DeltaItem[];\n}\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nexport class YText extends AbstractType<YTextEvent> {\n    /**\n     * @param {String} [string] The initial value of the YText.\n     */\n    constructor(string?: string | undefined);\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    _pending: (() => void)[] | null;\n    /**\n     * Number of characters of this text type.\n     *\n     * @type {number}\n     */\n    get length(): number;\n    /**\n     * Apply a {@link Delta} on this shared YText type.\n     *\n     * @param {any} delta The changes to apply on this element.\n     * @param {object}  [opts]\n     * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n     *\n     *\n     * @public\n     */\n    public applyDelta(delta: any, { sanitize }?: {\n        sanitize?: boolean;\n    } | undefined): void;\n    /**\n     * Returns the Delta representation of this YText type.\n     *\n     * @param {Snapshot} [snapshot]\n     * @param {Snapshot} [prevSnapshot]\n     * @param {function('removed' | 'added', ID):any} [computeYChange]\n     * @return {any} The Delta representation of this type.\n     *\n     * @public\n     */\n    public toDelta(snapshot?: Snapshot | undefined, prevSnapshot?: Snapshot | undefined, computeYChange?: ((arg0: 'removed' | 'added', arg1: ID) => any) | undefined): any;\n    /**\n     * Insert text at a given index.\n     *\n     * @param {number} index The index at which to start inserting.\n     * @param {String} text The text to insert at the specified position.\n     * @param {TextAttributes} [attributes] Optionally define some formatting\n     *                                    information to apply on the inserted\n     *                                    Text.\n     * @public\n     */\n    public insert(index: number, text: string, attributes?: Object | undefined): void;\n    /**\n     * Inserts an embed at a index.\n     *\n     * @param {number} index The index to insert the embed at.\n     * @param {Object} embed The Object that represents the embed.\n     * @param {TextAttributes} attributes Attribute information to apply on the\n     *                                    embed\n     *\n     * @public\n     */\n    public insertEmbed(index: number, embed: Object, attributes?: TextAttributes): void;\n    /**\n     * Deletes text starting from an index.\n     *\n     * @param {number} index Index at which to start deleting.\n     * @param {number} length The number of characters to remove. Defaults to 1.\n     *\n     * @public\n     */\n    public delete(index: number, length: number): void;\n    /**\n     * Assigns properties to a range of text.\n     *\n     * @param {number} index The position where to start formatting.\n     * @param {number} length The amount of characters to assign properties to.\n     * @param {TextAttributes} attributes Attribute information to apply on the\n     *                                    text.\n     *\n     * @public\n     */\n    public format(index: number, length: number, attributes: TextAttributes): void;\n}\nexport function readYText(decoder: AbstractUpdateDecoder): YText;\n/**\n * Attributes that can be assigned to a selection of text.\n */\nexport type TextAttributes = Object;\nexport type DeltaItem = {\n    delete: number | undefined;\n    retain: number | undefined;\n    string: string | undefined;\n    attributes: {\n        [x: string]: any;\n    };\n};\nimport { Item } from \"../structs/Item.js\";\nimport { YEvent } from \"../utils/YEvent.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\nimport { AbstractType } from \"./AbstractType.js\";\nimport { Snapshot } from \"../utils/Snapshot.js\";\nimport { ID } from \"../utils/ID.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/types/YXmlElement.d.ts": "/**\n * An YXmlElement imitates the behavior of a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n */\nexport class YXmlElement extends YXmlFragment {\n    constructor(nodeName?: string);\n    nodeName: string;\n    /**\n     * @type {Map<string, any>|null}\n     */\n    _prelimAttrs: Map<string, any> | null;\n    /**\n     * Removes an attribute from this YXmlElement.\n     *\n     * @param {String} attributeName The attribute name that is to be removed.\n     *\n     * @public\n     */\n    public removeAttribute(attributeName: string): void;\n    /**\n     * Sets or updates an attribute.\n     *\n     * @param {String} attributeName The attribute name that is to be set.\n     * @param {String} attributeValue The attribute value that is to be set.\n     *\n     * @public\n     */\n    public setAttribute(attributeName: string, attributeValue: string): void;\n    /**\n     * Returns an attribute value that belongs to the attribute name.\n     *\n     * @param {String} attributeName The attribute name that identifies the\n     *                               queried value.\n     * @return {String} The queried attribute value.\n     *\n     * @public\n     */\n    public getAttribute(attributeName: string): string;\n    /**\n     * Returns all attribute name/value pairs in a JSON Object.\n     *\n     * @param {Snapshot} [snapshot]\n     * @return {Object<string, any>} A JSON Object that describes the attributes.\n     *\n     * @public\n     */\n    public getAttributes(snapshot?: Snapshot | undefined): {\n        [x: string]: any;\n    };\n}\nexport function readYXmlElement(decoder: AbstractUpdateDecoder): YXmlElement;\nimport { YXmlFragment } from \"./YXmlFragment.js\";\nimport { Snapshot } from \"../utils/Snapshot.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/types/YXmlEvent.d.ts": "/**\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nexport class YXmlEvent extends YEvent {\n    /**\n     * @param {YXmlElement|YXmlFragment} target The target on which the event is created.\n     * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n     *                   child list changed.\n     * @param {Transaction} transaction The transaction instance with wich the\n     *                                  change was created.\n     */\n    constructor(target: YXmlElement | YXmlFragment, subs: Set<string | null>, transaction: Transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    private childListChanged;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string|null>}\n     */\n    attributesChanged: Set<string | null>;\n}\nimport { YEvent } from \"../utils/YEvent.js\";\nimport { YXmlElement } from \"./YXmlElement.js\";\nimport { YXmlFragment } from \"./YXmlFragment.js\";\nimport { Transaction } from \"../utils/Transaction.js\";\n",
      "dist/src/types/YXmlFragment.d.ts": "/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nexport class YXmlTreeWalker implements Iterable<YXmlElement | YXmlText | YXmlHook> {\n    /**\n     * @param {YXmlFragment | YXmlElement} root\n     * @param {function(AbstractType<any>):boolean} [f]\n     */\n    constructor(root: YXmlFragment | YXmlElement, f?: ((arg0: AbstractType<any>) => boolean) | undefined);\n    _filter: (arg0: AbstractType<any>) => boolean;\n    _root: YXmlFragment | YXmlElement;\n    /**\n     * @type {Item}\n     */\n    _currentNode: Item;\n    _firstCall: boolean;\n    [Symbol.iterator](): YXmlTreeWalker;\n    /**\n     * Get the next node.\n     *\n     * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n     *\n     * @public\n     */\n    public next(): IteratorResult<YXmlElement | YXmlText | YXmlHook>;\n}\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nexport class YXmlFragment extends AbstractType<YXmlEvent> {\n    /**\n     * @type {Array<any>|null}\n     */\n    _prelimContent: Array<any> | null;\n    get length(): number;\n    /**\n     * Create a subtree of childNodes.\n     *\n     * @example\n     * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n     * for (let node in walker) {\n     *   // `node` is a div node\n     *   nop(node)\n     * }\n     *\n     * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n     *                          returns a Boolean indicating whether the child\n     *                          is to be included in the subtree.\n     * @return {YXmlTreeWalker} A subtree and a position within it.\n     *\n     * @public\n     */\n    public createTreeWalker(filter: (arg0: AbstractType<any>) => boolean): YXmlTreeWalker;\n    /**\n     * Returns the first YXmlElement that matches the query.\n     * Similar to DOM's {@link querySelector}.\n     *\n     * Query support:\n     *   - tagname\n     * TODO:\n     *   - id\n     *   - attribute\n     *\n     * @param {CSS_Selector} query The query on the children.\n     * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n     *\n     * @public\n     */\n    public querySelector(query: CSS_Selector): YXmlElement | YXmlText | YXmlHook | null;\n    /**\n     * Returns all YXmlElements that match the query.\n     * Similar to Dom's {@link querySelectorAll}.\n     *\n     * @todo Does not yet support all queries. Currently only query by tagName.\n     *\n     * @param {CSS_Selector} query The query on the children\n     * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n     *\n     * @public\n     */\n    public querySelectorAll(query: CSS_Selector): Array<YXmlElement | YXmlText | YXmlHook | null>;\n    /**\n     * Creates a Dom Element that mirrors this YXmlElement.\n     *\n     * @param {Document} [_document=document] The document object (you must define\n     *                                        this when calling this method in\n     *                                        nodejs)\n     * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n     *                                             are presented in the DOM\n     * @param {any} [binding] You should not set this property. This is\n     *                               used if DomBinding wants to create a\n     *                               association to the created DOM type.\n     * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n     *\n     * @public\n     */\n    public toDOM(_document?: Document | undefined, hooks?: {\n        [x: string]: any;\n    } | undefined, binding?: any): Node;\n    /**\n     * Inserts new content at an index.\n     *\n     * @example\n     *  // Insert character 'a' at position 0\n     *  xml.insert(0, [new Y.XmlText('text')])\n     *\n     * @param {number} index The index to insert content at\n     * @param {Array<YXmlElement|YXmlText>} content The array of content\n     */\n    insert(index: number, content: Array<YXmlElement | YXmlText>): void;\n    /**\n     * Deletes elements starting from an index.\n     *\n     * @param {number} index Index at which to start deleting elements\n     * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n     */\n    delete(index: number, length?: number | undefined): void;\n    /**\n     * Transforms this YArray to a JavaScript Array.\n     *\n     * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n     */\n    toArray(): Array<YXmlElement | YXmlText | YXmlHook>;\n}\nexport function readYXmlFragment(decoder: AbstractUpdateDecoder): YXmlFragment;\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n */\nexport type CSS_Selector = string;\n/**\n * Dom filter function.\n */\nexport type domFilter = (nodeName: string, attributes: Map<any, any>) => boolean;\nimport { YXmlElement } from \"./YXmlElement.js\";\nimport { YXmlText } from \"./YXmlText.js\";\nimport { YXmlHook } from \"./YXmlHook.js\";\nimport { AbstractType } from \"./AbstractType.js\";\nimport { Item } from \"../structs/Item.js\";\nimport { YXmlEvent } from \"./YXmlEvent.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/types/YXmlHook.d.ts": "/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\nexport class YXmlHook extends YMap<any> {\n    /**\n     * @param {string} hookName nodeName of the Dom Node.\n     */\n    constructor(hookName: string);\n    /**\n     * @type {string}\n     */\n    hookName: string;\n    /**\n     * Creates a Dom Element that mirrors this YXmlElement.\n     *\n     * @param {Document} [_document=document] The document object (you must define\n     *                                        this when calling this method in\n     *                                        nodejs)\n     * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n     *                                             are presented in the DOM\n     * @param {any} [binding] You should not set this property. This is\n     *                               used if DomBinding wants to create a\n     *                               association to the created DOM type\n     * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n     *\n     * @public\n     */\n    public toDOM(_document?: Document | undefined, hooks?: {\n        [x: string]: any;\n    } | undefined, binding?: any): Element;\n}\nexport function readYXmlHook(decoder: AbstractUpdateDecoder): YXmlHook;\nimport { YMap } from \"./YMap.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/types/YXmlText.d.ts": "/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\nexport class YXmlText extends YText {\n    constructor(string?: string | undefined);\n    /**\n     * Creates a Dom Element that mirrors this YXmlText.\n     *\n     * @param {Document} [_document=document] The document object (you must define\n     *                                        this when calling this method in\n     *                                        nodejs)\n     * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n     *                                             are presented in the DOM\n     * @param {any} [binding] You should not set this property. This is\n     *                               used if DomBinding wants to create a\n     *                               association to the created DOM type.\n     * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n     *\n     * @public\n     */\n    public toDOM(_document?: Document | undefined, hooks?: {\n        [x: string]: any;\n    } | undefined, binding?: any): Text;\n}\nexport function readYXmlText(decoder: AbstractUpdateDecoder): YXmlText;\nimport { YText } from \"./YText.js\";\nimport { AbstractUpdateDecoder } from \"../utils/UpdateDecoder.js\";\n",
      "dist/src/utils/AbstractConnector.d.ts": "/**\n * This is an abstract interface that all Connectors should implement to keep them interchangeable.\n *\n * @note This interface is experimental and it is not advised to actually inherit this class.\n *       It just serves as typing information.\n *\n * @extends {Observable<any>}\n */\nexport class AbstractConnector extends Observable<any> {\n    /**\n     * @param {Doc} ydoc\n     * @param {any} awareness\n     */\n    constructor(ydoc: Doc, awareness: any);\n    doc: Doc;\n    awareness: any;\n}\nimport { Observable } from \"lib0/observable\";\nimport { Doc } from \"./Doc.js\";\n",
      "dist/src/utils/DeleteSet.d.ts": "export class DeleteItem {\n    /**\n     * @param {number} clock\n     * @param {number} len\n     */\n    constructor(clock: number, len: number);\n    /**\n     * @type {number}\n     */\n    clock: number;\n    /**\n     * @type {number}\n     */\n    len: number;\n}\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nexport class DeleteSet {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    clients: Map<number, Array<DeleteItem>>;\n}\nexport function iterateDeletedStructs(transaction: Transaction, ds: DeleteSet, f: (arg0: GC | Item) => void): void;\nexport function findIndexDS(dis: Array<DeleteItem>, clock: number): number | null;\nexport function isDeleted(ds: DeleteSet, id: ID): boolean;\nexport function sortAndMergeDeleteSet(ds: DeleteSet): void;\nexport function mergeDeleteSets(dss: Array<DeleteSet>): DeleteSet;\nexport function addToDeleteSet(ds: DeleteSet, client: number, clock: number, length: number): void;\nexport function createDeleteSet(): DeleteSet;\nexport function createDeleteSetFromStructStore(ss: StructStore): DeleteSet;\nexport function writeDeleteSet(encoder: AbstractDSEncoder, ds: DeleteSet): void;\nexport function readDeleteSet(decoder: AbstractDSDecoder): DeleteSet;\nexport function readAndApplyDeleteSet(decoder: AbstractDSDecoder, transaction: Transaction, store: StructStore): void;\nimport { Transaction } from \"./Transaction.js\";\nimport { GC } from \"../structs/GC.js\";\nimport { Item } from \"../structs/Item.js\";\nimport { ID } from \"./ID.js\";\nimport { StructStore } from \"./StructStore.js\";\nimport { AbstractDSEncoder } from \"./UpdateEncoder.js\";\nimport { AbstractDSDecoder } from \"./UpdateDecoder.js\";\n",
      "dist/src/utils/Doc.d.ts": "export const generateNewClientId: typeof random.uint32;\n/**\n * A Yjs instance handles the state of shared data.\n * @extends Observable<string>\n */\nexport class Doc extends Observable<string> {\n    /**\n     * @param {Object} conf configuration\n     * @param {boolean} [conf.gc] Disable garbage collection (default: gc=true)\n     * @param {function(Item):boolean} [conf.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n     */\n    constructor({ gc, gcFilter }?: {\n        gc: boolean;\n        gcFilter: (arg0: Item) => boolean;\n    });\n    gc: boolean;\n    gcFilter: (arg0: Item) => boolean;\n    clientID: number;\n    /**\n     * @type {Map<string, AbstractType<YEvent>>}\n     */\n    share: Map<string, AbstractType<YEvent>>;\n    store: StructStore;\n    /**\n     * @type {Transaction | null}\n     */\n    _transaction: Transaction | null;\n    /**\n     * @type {Array<Transaction>}\n     */\n    _transactionCleanups: Array<Transaction>;\n    /**\n     * Changes that happen inside of a transaction are bundled. This means that\n     * the observer fires _after_ the transaction is finished and that all changes\n     * that happened inside of the transaction are sent as one message to the\n     * other peers.\n     *\n     * @param {function(Transaction):void} f The function that should be executed as a transaction\n     * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n     *\n     * @public\n     */\n    public transact(f: (arg0: Transaction) => void, origin?: any): void;\n    /**\n     * Define a shared data type.\n     *\n     * Multiple calls of `y.get(name, TypeConstructor)` yield the same result\n     * and do not overwrite each other. I.e.\n     * `y.define(name, Y.Array) === y.define(name, Y.Array)`\n     *\n     * After this method is called, the type is also available on `y.share.get(name)`.\n     *\n     * *Best Practices:*\n     * Define all types right after the Yjs instance is created and store them in a separate object.\n     * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n     *\n     * @example\n     *   const y = new Y(..)\n     *   const appState = {\n     *     document: y.getText('document')\n     *     comments: y.getArray('comments')\n     *   }\n     *\n     * @param {string} name\n     * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n     * @return {AbstractType<any>} The created type. Constructed with TypeConstructor\n     *\n     * @public\n     */\n    public get(name: string, TypeConstructor?: Function): AbstractType<any>;\n    /**\n     * @template T\n     * @param {string} [name]\n     * @return {YArray<T>}\n     *\n     * @public\n     */\n    public getArray<T>(name?: string | undefined): YArray<T>;\n    /**\n     * @param {string} [name]\n     * @return {YText}\n     *\n     * @public\n     */\n    public getText(name?: string | undefined): YText;\n    /**\n     * @param {string} [name]\n     * @return {YMap<any>}\n     *\n     * @public\n     */\n    public getMap(name?: string | undefined): YMap<any>;\n    /**\n     * @param {string} [name]\n     * @return {YXmlFragment}\n     *\n     * @public\n     */\n    public getXmlFragment(name?: string | undefined): YXmlFragment;\n    /**\n     * Converts the entire document into a js object, recursively traversing each yjs type\n     *\n     * @return {Object<string, any>}\n     */\n    toJSON(): {\n        [x: string]: any;\n    };\n}\nimport * as random from \"lib0/random\";\nimport { Observable } from \"lib0/observable\";\nimport { Item } from \"../structs/Item.js\";\nimport { AbstractType } from \"../types/AbstractType.js\";\nimport { YEvent } from \"./YEvent.js\";\nimport { StructStore } from \"./StructStore.js\";\nimport { Transaction } from \"./Transaction.js\";\nimport { YArray } from \"../types/YArray.js\";\nimport { YText } from \"../types/YText.js\";\nimport { YMap } from \"../types/YMap.js\";\nimport { YXmlFragment } from \"../types/YXmlFragment.js\";\n",
      "dist/src/utils/EventHandler.d.ts": "/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nexport class EventHandler<ARG0, ARG1> {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    l: ((arg0: ARG0, arg1: ARG1) => void)[];\n}\nexport function createEventHandler<ARG0, ARG1>(): EventHandler<ARG0, ARG1>;\nexport function addEventHandlerListener<ARG0, ARG1>(eventHandler: EventHandler<ARG0, ARG1>, f: (arg0: ARG0, arg1: ARG1) => void): number;\nexport function removeEventHandlerListener<ARG0, ARG1>(eventHandler: EventHandler<ARG0, ARG1>, f: (arg0: ARG0, arg1: ARG1) => void): void;\nexport function removeAllEventHandlerListeners<ARG0, ARG1>(eventHandler: EventHandler<ARG0, ARG1>): void;\nexport function callEventHandlerListeners<ARG0, ARG1>(eventHandler: EventHandler<ARG0, ARG1>, arg0: ARG0, arg1: ARG1): void;\n",
      "dist/src/utils/ID.d.ts": "export class ID {\n    /**\n     * @param {number} client client id\n     * @param {number} clock unique per client id, continuous number\n     */\n    constructor(client: number, clock: number);\n    /**\n     * Client id\n     * @type {number}\n     */\n    client: number;\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    clock: number;\n}\nexport function compareIDs(a: ID | null, b: ID | null): boolean;\nexport function createID(client: number, clock: number): ID;\nexport function writeID(encoder: encoding.Encoder, id: ID): void;\nexport function readID(decoder: decoding.Decoder): ID;\nexport function findRootTypeKey(type: AbstractType<any>): string;\nimport * as encoding from \"lib0/encoding\";\nimport * as decoding from \"lib0/decoding\";\nimport { AbstractType } from \"../types/AbstractType.js\";\n",
      "dist/src/utils/PermanentUserData.d.ts": "export class PermanentUserData {\n    /**\n     * @param {Doc} doc\n     * @param {YMap<any>} [storeType]\n     */\n    constructor(doc: Doc, storeType?: YMap<any> | undefined);\n    yusers: YMap<any>;\n    doc: Doc;\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n    clients: Map<number, string>;\n    dss: Map<string, DeleteSet>;\n    /**\n     * @param {Doc} doc\n     * @param {number} clientid\n     * @param {string} userDescription\n     * @param {Object} [conf]\n     * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n     */\n    setUserMapping(doc: Doc, clientid: number, userDescription: string, { filter }?: {\n        filter?: (arg0: Transaction, arg1: DeleteSet) => boolean;\n    } | undefined): void;\n    /**\n     * @param {number} clientid\n     * @return {any}\n     */\n    getUserByClientId(clientid: number): any;\n    /**\n     * @param {ID} id\n     * @return {string | null}\n     */\n    getUserByDeletedId(id: ID): string | null;\n}\nimport { YMap } from \"../types/YMap.js\";\nimport { Doc } from \"./Doc.js\";\nimport { DeleteSet } from \"./DeleteSet.js\";\nimport { Transaction } from \"./Transaction.js\";\nimport { ID } from \"./ID.js\";\n",
      "dist/src/utils/RelativePosition.d.ts": "/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\nexport class RelativePosition {\n    /**\n     * @param {ID|null} type\n     * @param {string|null} tname\n     * @param {ID|null} item\n     */\n    constructor(type: ID | null, tname: string | null, item: ID | null);\n    /**\n     * @type {ID|null}\n     */\n    type: ID | null;\n    /**\n     * @type {string|null}\n     */\n    tname: string | null;\n    /**\n     * @type {ID | null}\n     */\n    item: ID | null;\n}\nexport function createRelativePositionFromJSON(json: any): RelativePosition;\nexport class AbsolutePosition {\n    /**\n     * @param {AbstractType<any>} type\n     * @param {number} index\n     */\n    constructor(type: AbstractType<any>, index: number);\n    /**\n     * @type {AbstractType<any>}\n     */\n    type: AbstractType<any>;\n    /**\n     * @type {number}\n     */\n    index: number;\n}\nexport function createAbsolutePosition(type: AbstractType<any>, index: number): AbsolutePosition;\nexport function createRelativePosition(type: AbstractType<any>, item: ID | null): RelativePosition;\nexport function createRelativePositionFromTypeIndex(type: AbstractType<any>, index: number): RelativePosition;\nexport function writeRelativePosition(encoder: encoding.Encoder, rpos: RelativePosition): encoding.Encoder;\nexport function encodeRelativePosition(rpos: RelativePosition): Uint8Array;\nexport function readRelativePosition(decoder: decoding.Decoder): RelativePosition | null;\nexport function decodeRelativePosition(uint8Array: Uint8Array): RelativePosition | null;\nexport function createAbsolutePositionFromRelativePosition(rpos: RelativePosition, doc: Doc): AbsolutePosition | null;\nexport function compareRelativePositions(a: RelativePosition | null, b: RelativePosition | null): boolean;\nimport { ID } from \"./ID.js\";\nimport { AbstractType } from \"../types/AbstractType.js\";\nimport * as encoding from \"lib0/encoding\";\nimport * as decoding from \"lib0/decoding\";\nimport { Doc } from \"./Doc.js\";\n",
      "dist/src/utils/Snapshot.d.ts": "export class Snapshot {\n    /**\n     * @param {DeleteSet} ds\n     * @param {Map<number,number>} sv state map\n     */\n    constructor(ds: DeleteSet, sv: Map<number, number>);\n    /**\n     * @type {DeleteSet}\n     */\n    ds: DeleteSet;\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n    sv: Map<number, number>;\n}\nexport function equalSnapshots(snap1: Snapshot, snap2: Snapshot): boolean;\nexport function encodeSnapshotV2(snapshot: Snapshot, encoder?: AbstractDSEncoder | undefined): Uint8Array;\nexport function encodeSnapshot(snapshot: Snapshot): Uint8Array;\nexport function decodeSnapshotV2(buf: Uint8Array, decoder?: AbstractDSDecoder | undefined): Snapshot;\nexport function decodeSnapshot(buf: Uint8Array): Snapshot;\nexport function createSnapshot(ds: DeleteSet, sm: Map<number, number>): Snapshot;\nexport const emptySnapshot: Snapshot;\nexport function snapshot(doc: Doc): Snapshot;\nexport function isVisible(item: Item, snapshot: Snapshot | undefined): boolean;\nexport function splitSnapshotAffectedStructs(transaction: Transaction, snapshot: Snapshot): void;\nimport { DeleteSet } from \"./DeleteSet.js\";\nimport { AbstractDSEncoder } from \"./UpdateEncoder.js\";\nimport { AbstractDSDecoder } from \"./UpdateDecoder.js\";\nimport { Doc } from \"./Doc.js\";\nimport { Item } from \"../structs/Item.js\";\nimport { Transaction } from \"./Transaction.js\";\n",
      "dist/src/utils/StructStore.d.ts": "export class StructStore {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    clients: Map<number, Array<GC | Item>>;\n    /**\n     * Store incompleted struct reads here\n     * `i` denotes to the next read operation\n     * We could shift the array of refs instead, but shift is incredible\n     * slow in Chrome for arrays with more than 100k elements\n     * @see tryResumePendingStructRefs\n     * @type {Map<number,{i:number,refs:Array<GC|Item>}>}\n     */\n    pendingClientsStructRefs: Map<number, {\n        i: number;\n        refs: Array<GC | Item>;\n    }>;\n    /**\n     * Stack of pending structs waiting for struct dependencies\n     * Maximum length of stack is structReaders.size\n     * @type {Array<GC|Item>}\n     */\n    pendingStack: Array<GC | Item>;\n    /**\n     * @type {Array<DSDecoderV2>}\n     */\n    pendingDeleteReaders: Array<DSDecoderV2>;\n}\nexport function getStateVector(store: StructStore): Map<number, number>;\nexport function getState(store: StructStore, client: number): number;\nexport function integretyCheck(store: StructStore): void;\nexport function addStruct(store: StructStore, struct: GC | Item): void;\nexport function findIndexSS(structs: Array<Item | GC>, clock: number): number;\nexport function find(store: StructStore, id: ID): GC | Item;\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nexport const getItem: (arg0: StructStore, arg1: ID) => Item;\nexport function findIndexCleanStart(transaction: Transaction, structs: Array<Item | GC>, clock: number): number;\nexport function getItemCleanStart(transaction: Transaction, id: ID): Item;\nexport function getItemCleanEnd(transaction: Transaction, store: StructStore, id: ID): Item;\nexport function replaceStruct(store: StructStore, struct: GC | Item, newStruct: GC | Item): void;\nexport function iterateStructs(transaction: Transaction, structs: Array<Item | GC>, clockStart: number, len: number, f: (arg0: GC | Item) => void): void;\nimport { GC } from \"../structs/GC.js\";\nimport { Item } from \"../structs/Item.js\";\nimport { DSDecoderV2 } from \"./UpdateDecoder.js\";\nimport { ID } from \"./ID.js\";\nimport { Transaction } from \"./Transaction.js\";\n",
      "dist/src/utils/Transaction.d.ts": "/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const map = y.define('map', YMap)\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * y.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nexport class Transaction {\n    /**\n     * @param {Doc} doc\n     * @param {any} origin\n     * @param {boolean} local\n     */\n    constructor(doc: Doc, origin: any, local: boolean);\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    doc: Doc;\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    deleteSet: DeleteSet;\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    beforeState: Map<number, number>;\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    afterState: Map<number, number>;\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent>,Set<String|null>>}\n     */\n    changed: Map<AbstractType<YEvent>, Set<string | null>>;\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent>,Array<YEvent>>}\n     */\n    changedParentTypes: Map<AbstractType<YEvent>, Array<YEvent>>;\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    _mergeStructs: Array<AbstractStruct>;\n    /**\n     * @type {any}\n     */\n    origin: any;\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    meta: Map<any, any>;\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    local: boolean;\n}\nexport function writeUpdateMessageFromTransaction(encoder: AbstractUpdateEncoder, transaction: Transaction): boolean;\nexport function nextID(transaction: Transaction): import(\"./ID.js\").ID;\nexport function addChangedTypeToTransaction(transaction: Transaction, type: AbstractType<YEvent>, parentSub: string | null): void;\nexport function tryGc(ds: DeleteSet, store: StructStore, gcFilter: (arg0: Item) => boolean): void;\nexport function transact(doc: Doc, f: (arg0: Transaction) => void, origin?: any, local?: boolean): void;\nimport { Doc } from \"./Doc.js\";\nimport { DeleteSet } from \"./DeleteSet.js\";\nimport { AbstractType } from \"../types/AbstractType.js\";\nimport { YEvent } from \"./YEvent.js\";\nimport { AbstractStruct } from \"../structs/AbstractStruct.js\";\nimport { AbstractUpdateEncoder } from \"./UpdateEncoder.js\";\nimport { StructStore } from \"./StructStore.js\";\nimport { Item } from \"../structs/Item.js\";\n",
      "dist/src/utils/UndoManager.d.ts": "/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter whan an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n */\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {Observable<'stack-item-added'|'stack-item-popped'>}\n */\nexport class UndoManager extends Observable<\"stack-item-added\" | \"stack-item-popped\"> {\n    /**\n     * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n     * @param {UndoManagerOptions} options\n     */\n    constructor(typeScope: AbstractType<any> | Array<AbstractType<any>>, { captureTimeout, deleteFilter, trackedOrigins }?: UndoManagerOptions);\n    scope: AbstractType<any>[];\n    deleteFilter: (arg0: Item) => boolean;\n    trackedOrigins: Set<any>;\n    /**\n     * @type {Array<StackItem>}\n     */\n    undoStack: Array<StackItem>;\n    /**\n     * @type {Array<StackItem>}\n     */\n    redoStack: Array<StackItem>;\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n    undoing: boolean;\n    redoing: boolean;\n    doc: Doc;\n    lastChange: number;\n    clear(): void;\n    /**\n     * UndoManager merges Undo-StackItem if they are created within time-gap\n     * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n     * StackItem won't be merged.\n     *\n     *\n     * @example\n     *     // without stopCapturing\n     *     ytext.insert(0, 'a')\n     *     ytext.insert(1, 'b')\n     *     um.undo()\n     *     ytext.toString() // => '' (note that 'ab' was removed)\n     *     // with stopCapturing\n     *     ytext.insert(0, 'a')\n     *     um.stopCapturing()\n     *     ytext.insert(0, 'b')\n     *     um.undo()\n     *     ytext.toString() // => 'a' (note that only 'b' was removed)\n     *\n     */\n    stopCapturing(): void;\n    /**\n     * Undo last changes on type.\n     *\n     * @return {StackItem?} Returns StackItem if a change was applied\n     */\n    undo(): StackItem | null;\n    /**\n     * Redo last undo operation.\n     *\n     * @return {StackItem?} Returns StackItem if a change was applied\n     */\n    redo(): StackItem | null;\n}\nexport type UndoManagerOptions = {\n    captureTimeout?: number;\n    /**\n     * Sometimes\n     * it is necessary to filter whan an Undo/Redo operation can delete. If this\n     * filter returns false, the type/item won't be deleted even it is in the\n     * undo/redo scope.\n     */\n    deleteFilter?: (arg0: Item) => boolean;\n    trackedOrigins?: Set<any>;\n};\nimport { Observable } from \"lib0/observable\";\nimport { AbstractType } from \"../types/AbstractType.js\";\nimport { Item } from \"../structs/Item.js\";\ndeclare class StackItem {\n    /**\n     * @param {DeleteSet} ds\n     * @param {Map<number,number>} beforeState\n     * @param {Map<number,number>} afterState\n     */\n    constructor(ds: DeleteSet, beforeState: Map<number, number>, afterState: Map<number, number>);\n    ds: DeleteSet;\n    beforeState: Map<number, number>;\n    afterState: Map<number, number>;\n    /**\n     * Use this to save and restore metadata like selection range\n     */\n    meta: Map<any, any>;\n}\nimport { Doc } from \"./Doc.js\";\nimport { DeleteSet } from \"./DeleteSet.js\";\nexport {};\n",
      "dist/src/utils/UpdateDecoder.d.ts": "export class AbstractDSDecoder {\n    /**\n     * @param {decoding.Decoder} decoder\n     */\n    constructor(decoder: decoding.Decoder);\n    restDecoder: decoding.Decoder;\n    resetDsCurVal(): void;\n    /**\n     * @return {number}\n     */\n    readDsClock(): number;\n    /**\n     * @return {number}\n     */\n    readDsLen(): number;\n}\nexport class AbstractUpdateDecoder extends AbstractDSDecoder {\n    /**\n     * @param {decoding.Decoder} decoder\n     */\n    constructor(decoder: decoding.Decoder);\n    /**\n     * @return {ID}\n     */\n    readLeftID(): ID;\n    /**\n     * @return {ID}\n     */\n    readRightID(): ID;\n    /**\n     * Read the next client id.\n     * Use this in favor of readID whenever possible to reduce the number of objects created.\n     *\n     * @return {number}\n     */\n    readClient(): number;\n    /**\n     * @return {number} info An unsigned 8-bit integer\n     */\n    readInfo(): number;\n    /**\n     * @return {string}\n     */\n    readString(): string;\n    /**\n     * @return {boolean} isKey\n     */\n    readParentInfo(): boolean;\n    /**\n     * @return {number} info An unsigned 8-bit integer\n     */\n    readTypeRef(): number;\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @return {number} len\n     */\n    readLen(): number;\n    /**\n     * @return {any}\n     */\n    readAny(): any;\n    /**\n     * @return {Uint8Array}\n     */\n    readBuf(): Uint8Array;\n    /**\n     * Legacy implementation uses JSON parse. We use any-decoding in v2.\n     *\n     * @return {any}\n     */\n    readJSON(): any;\n    /**\n     * @return {string}\n     */\n    readKey(): string;\n}\nexport class DSDecoderV1 {\n    /**\n     * @param {decoding.Decoder} decoder\n     */\n    constructor(decoder: decoding.Decoder);\n    restDecoder: decoding.Decoder;\n    resetDsCurVal(): void;\n    /**\n     * @return {number}\n     */\n    readDsClock(): number;\n    /**\n     * @return {number}\n     */\n    readDsLen(): number;\n}\nexport class UpdateDecoderV1 extends DSDecoderV1 {\n    /**\n     * @param {decoding.Decoder} decoder\n     */\n    constructor(decoder: decoding.Decoder);\n    /**\n     * @return {ID}\n     */\n    readLeftID(): ID;\n    /**\n     * @return {ID}\n     */\n    readRightID(): ID;\n    /**\n     * Read the next client id.\n     * Use this in favor of readID whenever possible to reduce the number of objects created.\n     */\n    readClient(): number;\n    /**\n     * @return {number} info An unsigned 8-bit integer\n     */\n    readInfo(): number;\n    /**\n     * @return {string}\n     */\n    readString(): string;\n    /**\n     * @return {boolean} isKey\n     */\n    readParentInfo(): boolean;\n    /**\n     * @return {number} info An unsigned 8-bit integer\n     */\n    readTypeRef(): number;\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @return {number} len\n     */\n    readLen(): number;\n    /**\n     * @return {any}\n     */\n    readAny(): any;\n    /**\n     * @return {Uint8Array}\n     */\n    readBuf(): Uint8Array;\n    /**\n     * Legacy implementation uses JSON parse. We use any-decoding in v2.\n     *\n     * @return {any}\n     */\n    readJSON(): any;\n    /**\n     * @return {string}\n     */\n    readKey(): string;\n}\nexport class DSDecoderV2 {\n    /**\n     * @param {decoding.Decoder} decoder\n     */\n    constructor(decoder: decoding.Decoder);\n    dsCurrVal: number;\n    restDecoder: decoding.Decoder;\n    resetDsCurVal(): void;\n    readDsClock(): number;\n    readDsLen(): number;\n}\nexport class UpdateDecoderV2 extends DSDecoderV2 {\n    /**\n     * @param {decoding.Decoder} decoder\n     */\n    constructor(decoder: decoding.Decoder);\n    /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */\n    keys: Array<string>;\n    keyClockDecoder: decoding.IntDiffOptRleDecoder;\n    clientDecoder: decoding.UintOptRleDecoder;\n    leftClockDecoder: decoding.IntDiffOptRleDecoder;\n    rightClockDecoder: decoding.IntDiffOptRleDecoder;\n    infoDecoder: decoding.RleDecoder<number>;\n    stringDecoder: decoding.StringDecoder;\n    parentInfoDecoder: decoding.RleDecoder<number>;\n    typeRefDecoder: decoding.UintOptRleDecoder;\n    lenDecoder: decoding.UintOptRleDecoder;\n    /**\n     * @return {ID}\n     */\n    readLeftID(): ID;\n    /**\n     * @return {ID}\n     */\n    readRightID(): ID;\n    /**\n     * Read the next client id.\n     * Use this in favor of readID whenever possible to reduce the number of objects created.\n     */\n    readClient(): number;\n    /**\n     * @return {number} info An unsigned 8-bit integer\n     */\n    readInfo(): number;\n    /**\n     * @return {string}\n     */\n    readString(): string;\n    /**\n     * @return {boolean}\n     */\n    readParentInfo(): boolean;\n    /**\n     * @return {number} An unsigned 8-bit integer\n     */\n    readTypeRef(): number;\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @return {number}\n     */\n    readLen(): number;\n    /**\n     * @return {any}\n     */\n    readAny(): any;\n    /**\n     * @return {Uint8Array}\n     */\n    readBuf(): Uint8Array;\n    /**\n     * This is mainly here for legacy purposes.\n     *\n     * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n     *\n     * @return {any}\n     */\n    readJSON(): any;\n    /**\n     * @return {string}\n     */\n    readKey(): string;\n}\nimport * as decoding from \"lib0/decoding\";\nimport { ID } from \"./ID.js\";\n",
      "dist/src/utils/UpdateEncoder.d.ts": "export class AbstractDSEncoder {\n    restEncoder: encoding.Encoder;\n    /**\n     * @return {Uint8Array}\n     */\n    toUint8Array(): Uint8Array;\n    /**\n     * Resets the ds value to 0.\n     * The v2 encoder uses this information to reset the initial diff value.\n     */\n    resetDsCurVal(): void;\n    /**\n     * @param {number} clock\n     */\n    writeDsClock(clock: number): void;\n    /**\n     * @param {number} len\n     */\n    writeDsLen(len: number): void;\n}\nexport class AbstractUpdateEncoder extends AbstractDSEncoder {\n    /**\n     * @param {ID} id\n     */\n    writeLeftID(id: ID): void;\n    /**\n     * @param {ID} id\n     */\n    writeRightID(id: ID): void;\n    /**\n     * Use writeClient and writeClock instead of writeID if possible.\n     * @param {number} client\n     */\n    writeClient(client: number): void;\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n    writeInfo(info: number): void;\n    /**\n     * @param {string} s\n     */\n    writeString(s: string): void;\n    /**\n     * @param {boolean} isYKey\n     */\n    writeParentInfo(isYKey: boolean): void;\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n    writeTypeRef(info: number): void;\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @param {number} len\n     */\n    writeLen(len: number): void;\n    /**\n     * @param {any} any\n     */\n    writeAny(any: any): void;\n    /**\n     * @param {Uint8Array} buf\n     */\n    writeBuf(buf: Uint8Array): void;\n    /**\n     * @param {any} embed\n     */\n    writeJSON(embed: any): void;\n    /**\n     * @param {string} key\n     */\n    writeKey(key: string): void;\n}\nexport class DSEncoderV1 {\n    restEncoder: encoding.Encoder;\n    toUint8Array(): Uint8Array;\n    resetDsCurVal(): void;\n    /**\n     * @param {number} clock\n     */\n    writeDsClock(clock: number): void;\n    /**\n     * @param {number} len\n     */\n    writeDsLen(len: number): void;\n}\nexport class UpdateEncoderV1 extends DSEncoderV1 {\n    /**\n     * @param {ID} id\n     */\n    writeLeftID(id: ID): void;\n    /**\n     * @param {ID} id\n     */\n    writeRightID(id: ID): void;\n    /**\n     * Use writeClient and writeClock instead of writeID if possible.\n     * @param {number} client\n     */\n    writeClient(client: number): void;\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n    writeInfo(info: number): void;\n    /**\n     * @param {string} s\n     */\n    writeString(s: string): void;\n    /**\n     * @param {boolean} isYKey\n     */\n    writeParentInfo(isYKey: boolean): void;\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n    writeTypeRef(info: number): void;\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @param {number} len\n     */\n    writeLen(len: number): void;\n    /**\n     * @param {any} any\n     */\n    writeAny(any: any): void;\n    /**\n     * @param {Uint8Array} buf\n     */\n    writeBuf(buf: Uint8Array): void;\n    /**\n     * @param {any} embed\n     */\n    writeJSON(embed: any): void;\n    /**\n     * @param {string} key\n     */\n    writeKey(key: string): void;\n}\nexport class DSEncoderV2 {\n    restEncoder: encoding.Encoder;\n    dsCurrVal: number;\n    toUint8Array(): Uint8Array;\n    resetDsCurVal(): void;\n    /**\n     * @param {number} clock\n     */\n    writeDsClock(clock: number): void;\n    /**\n     * @param {number} len\n     */\n    writeDsLen(len: number): void;\n}\nexport class UpdateEncoderV2 extends DSEncoderV2 {\n    /**\n     * @type {Map<string,number>}\n     */\n    keyMap: Map<string, number>;\n    /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n    keyClock: number;\n    keyClockEncoder: encoding.IntDiffOptRleEncoder;\n    clientEncoder: encoding.UintOptRleEncoder;\n    leftClockEncoder: encoding.IntDiffOptRleEncoder;\n    rightClockEncoder: encoding.IntDiffOptRleEncoder;\n    infoEncoder: encoding.RleEncoder<number>;\n    stringEncoder: encoding.StringEncoder;\n    parentInfoEncoder: encoding.RleEncoder<number>;\n    typeRefEncoder: encoding.UintOptRleEncoder;\n    lenEncoder: encoding.UintOptRleEncoder;\n    /**\n     * @param {ID} id\n     */\n    writeLeftID(id: ID): void;\n    /**\n     * @param {ID} id\n     */\n    writeRightID(id: ID): void;\n    /**\n     * @param {number} client\n     */\n    writeClient(client: number): void;\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n    writeInfo(info: number): void;\n    /**\n     * @param {string} s\n     */\n    writeString(s: string): void;\n    /**\n     * @param {boolean} isYKey\n     */\n    writeParentInfo(isYKey: boolean): void;\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n    writeTypeRef(info: number): void;\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @param {number} len\n     */\n    writeLen(len: number): void;\n    /**\n     * @param {any} any\n     */\n    writeAny(any: any): void;\n    /**\n     * @param {Uint8Array} buf\n     */\n    writeBuf(buf: Uint8Array): void;\n    /**\n     * This is mainly here for legacy purposes.\n     *\n     * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n     *\n     * @param {any} embed\n     */\n    writeJSON(embed: any): void;\n    /**\n     * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n     * occur very often. For a 3d application, the key `position` might occur very often.\n     *\n     * We cache these keys in a Map and refer to them via a unique number.\n     *\n     * @param {string} key\n     */\n    writeKey(key: string): void;\n}\nimport * as encoding from \"lib0/encoding\";\nimport { ID } from \"./ID.js\";\n",
      "dist/src/utils/YEvent.d.ts": "/**\n * YEvent describes the changes on a YType.\n */\nexport class YEvent {\n    /**\n     * @param {AbstractType<any>} target The changed type.\n     * @param {Transaction} transaction\n     */\n    constructor(target: AbstractType<any>, transaction: Transaction);\n    /**\n     * The type on which this event was created on.\n     * @type {AbstractType<any>}\n     */\n    target: AbstractType<any>;\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    currentTarget: AbstractType<any>;\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    transaction: Transaction;\n    /**\n     * @type {Object|null}\n     */\n    _changes: Object | null;\n    /**\n     * Computes the path from `y` to the changed type.\n     *\n     * The following property holds:\n     * @example\n     *   let type = y\n     *   event.path.forEach(dir => {\n     *     type = type.get(dir)\n     *   })\n     *   type === event.target // => true\n     */\n    get path(): (string | number)[];\n    /**\n     * Check if a struct is deleted by this event.\n     *\n     * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n     *\n     * @param {AbstractStruct} struct\n     * @return {boolean}\n     */\n    deletes(struct: AbstractStruct): boolean;\n    /**\n     * Check if a struct is added by this event.\n     *\n     * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n     *\n     * @param {AbstractStruct} struct\n     * @return {boolean}\n     */\n    adds(struct: AbstractStruct): boolean;\n    /**\n     * @return {{added:Set<Item>,deleted:Set<Item>,delta:Array<{insert:Array<any>}|{delete:number}|{retain:number}>}}\n     */\n    get changes(): {\n        added: Set<Item>;\n        deleted: Set<Item>;\n        delta: Array<{\n            insert: Array<any>;\n        } | {\n            delete: number;\n        } | {\n            retain: number;\n        }>;\n    };\n}\nimport { AbstractType } from \"../types/AbstractType.js\";\nimport { Transaction } from \"./Transaction.js\";\nimport { AbstractStruct } from \"../structs/AbstractStruct.js\";\nimport { Item } from \"../structs/Item.js\";\n",
      "dist/src/utils/encoding.d.ts": "export let DefaultDSEncoder: typeof DSEncoderV1;\nexport let DefaultDSDecoder: typeof DSDecoderV1;\nexport let DefaultUpdateEncoder: typeof UpdateEncoderV1;\nexport let DefaultUpdateDecoder: typeof UpdateDecoderV1;\nexport function useV1Encoding(): void;\nexport function useV2Encoding(): void;\nexport function writeClientsStructs(encoder: AbstractUpdateEncoder, store: StructStore, _sm: Map<number, number>): void;\nexport function readClientsStructRefs(decoder: AbstractUpdateDecoder, clientRefs: Map<number, Array<GC | Item>>, doc: Doc): Map<number, Array<GC | Item>>;\nexport function tryResumePendingDeleteReaders(transaction: Transaction, store: StructStore): void;\nexport function writeStructsFromTransaction(encoder: AbstractUpdateEncoder, transaction: Transaction): void;\nexport function readStructs(decoder: AbstractUpdateDecoder, transaction: Transaction, store: StructStore): void;\nexport function readUpdateV2(decoder: decoding.Decoder, ydoc: Doc, transactionOrigin?: any, structDecoder?: AbstractUpdateDecoder | undefined): void;\nexport function readUpdate(decoder: decoding.Decoder, ydoc: Doc, transactionOrigin?: any): void;\nexport function applyUpdateV2(ydoc: Doc, update: Uint8Array, transactionOrigin?: any, YDecoder?: typeof UpdateDecoderV1 | typeof UpdateDecoderV2 | undefined): void;\nexport function applyUpdate(ydoc: Doc, update: Uint8Array, transactionOrigin?: any): void;\nexport function writeStateAsUpdate(encoder: AbstractUpdateEncoder, doc: Doc, targetStateVector?: Map<number, number> | undefined): void;\nexport function encodeStateAsUpdateV2(doc: Doc, encodedTargetStateVector?: Uint8Array | undefined, encoder?: AbstractUpdateEncoder | undefined): Uint8Array;\nexport function encodeStateAsUpdate(doc: Doc, encodedTargetStateVector?: Uint8Array | undefined): Uint8Array;\nexport function readStateVector(decoder: AbstractDSDecoder): Map<number, number>;\nexport function decodeStateVectorV2(decodedState: Uint8Array): Map<number, number>;\nexport function decodeStateVector(decodedState: Uint8Array): Map<number, number>;\nexport function writeStateVector(encoder: AbstractDSEncoder, sv: Map<number, number>): AbstractDSEncoder;\nexport function writeDocumentStateVector(encoder: AbstractDSEncoder, doc: Doc): AbstractDSEncoder;\nexport function encodeStateVectorV2(doc: Doc, encoder?: AbstractDSEncoder | undefined): Uint8Array;\nexport function encodeStateVector(doc: Doc): Uint8Array;\nimport { DSEncoderV1 } from \"./UpdateEncoder.js\";\nimport { DSDecoderV1 } from \"./UpdateDecoder.js\";\nimport { UpdateEncoderV1 } from \"./UpdateEncoder.js\";\nimport { UpdateDecoderV1 } from \"./UpdateDecoder.js\";\nimport { AbstractUpdateEncoder } from \"./UpdateEncoder.js\";\nimport { StructStore } from \"./StructStore.js\";\nimport { AbstractUpdateDecoder } from \"./UpdateDecoder.js\";\nimport { GC } from \"../structs/GC.js\";\nimport { Item } from \"../structs/Item.js\";\nimport { Doc } from \"./Doc.js\";\nimport { Transaction } from \"./Transaction.js\";\nimport * as decoding from \"lib0/decoding\";\nimport { UpdateDecoderV2 } from \"./UpdateDecoder.js\";\nimport { AbstractDSDecoder } from \"./UpdateDecoder.js\";\nimport { AbstractDSEncoder } from \"./UpdateEncoder.js\";\n",
      "dist/src/utils/isParentOf.d.ts": "export function isParentOf(parent: AbstractType<any>, child: Item | null): boolean;\nimport { AbstractType } from \"../types/AbstractType.js\";\nimport { Item } from \"../structs/Item.js\";\n",
      "dist/src/utils/logging.d.ts": "export function logType(type: AbstractType<any>): void;\nimport { AbstractType } from \"../types/AbstractType.js\";\n",
      "dist/tests/compatibility.tests.d.ts": "export function testArrayCompatibilityV1(tc: t.TestCase): void;\nexport function testMapDecodingCompatibilityV1(tc: t.TestCase): void;\nexport function testTextDecodingCompatibilityV1(tc: t.TestCase): void;\nimport * as t from \"lib0/testing\";\n",
      "dist/tests/doc.tests.d.ts": "export function testClientIdDuplicateChange(tc: t.TestCase): void;\nexport function testGetTypeEmptyId(tc: t.TestCase): void;\nexport function testToJSON(tc: t.TestCase): void;\nimport * as t from \"lib0/testing\";\n",
      "dist/tests/encoding.tests.d.ts": "export function testStructReferences(tc: t.TestCase): void;\nimport * as t from \"lib0/testing\";\n",
      "dist/tests/index.d.ts": "export {};\n",
      "dist/tests/testHelper.d.ts": "export * from \"../src/internals.js\";\nexport class TestYInstance extends Y.Doc {\n    /**\n     * @param {TestConnector} testConnector\n     * @param {number} clientID\n     */\n    constructor(testConnector: TestConnector, clientID: number);\n    userID: number;\n    /**\n     * @type {TestConnector}\n     */\n    tc: TestConnector;\n    /**\n     * @type {Map<TestYInstance, Array<Uint8Array>>}\n     */\n    receiving: Map<TestYInstance, Array<Uint8Array>>;\n    /**\n     * Disconnect from TestConnector.\n     */\n    disconnect(): void;\n    /**\n     * Append yourself to the list of known Y instances in testconnector.\n     * Also initiate sync with all clients.\n     */\n    connect(): void;\n    /**\n     * Receive a message from another client. This message is only appended to the list of receiving messages.\n     * TestConnector decides when this client actually reads this message.\n     *\n     * @param {Uint8Array} message\n     * @param {TestYInstance} remoteClient\n     */\n    _receive(message: Uint8Array, remoteClient: TestYInstance): void;\n}\n/**\n * Keeps track of TestYInstances.\n *\n * The TestYInstances add/remove themselves from the list of connections maiained in this object.\n * I think it makes sense. Deal with it.\n */\nexport class TestConnector {\n    /**\n     * @param {prng.PRNG} gen\n     */\n    constructor(gen: prng.PRNG);\n    /**\n     * @type {Set<TestYInstance>}\n     */\n    allConns: Set<TestYInstance>;\n    /**\n     * @type {Set<TestYInstance>}\n     */\n    onlineConns: Set<TestYInstance>;\n    /**\n     * @type {prng.PRNG}\n     */\n    prng: prng.PRNG;\n    /**\n     * Create a new Y instance and add it to the list of connections\n     * @param {number} clientID\n     */\n    createY(clientID: number): TestYInstance;\n    /**\n     * Choose random connection and flush a random message from a random sender.\n     *\n     * If this function was unable to flush a message, because there are no more messages to flush, it returns false. true otherwise.\n     * @return {boolean}\n     */\n    flushRandomMessage(): boolean;\n    /**\n     * @return {boolean} True iff this function actually flushed something\n     */\n    flushAllMessages(): boolean;\n    reconnectAll(): void;\n    disconnectAll(): void;\n    syncAll(): void;\n    /**\n     * @return {boolean} Whether it was possible to disconnect a randon connection.\n     */\n    disconnectRandom(): boolean;\n    /**\n     * @return {boolean} Whether it was possible to reconnect a random connection.\n     */\n    reconnectRandom(): boolean;\n}\nexport function init<T>(tc: t.TestCase, { users }?: {\n    users?: number;\n}, initTestObject?: InitTestObjectCallback<T> | undefined): {\n    testObjects: Array<any>;\n    testConnector: TestConnector;\n    users: Array<TestYInstance>;\n    array0: Y.YArray<any>;\n    array1: Y.YArray<any>;\n    array2: Y.YArray<any>;\n    map0: Y.YMap<any>;\n    map1: Y.YMap<any>;\n    map2: Y.YMap<any>;\n    map3: Y.YMap<any>;\n    text0: Y.YText;\n    text1: Y.YText;\n    text2: Y.YText;\n    xml0: Y.YXmlElement;\n    xml1: Y.YXmlElement;\n    xml2: Y.YXmlElement;\n};\nexport function compare(users: Array<TestYInstance>): void;\nexport function compareItemIDs(a: Y.Item | null, b: Y.Item | null): boolean;\nexport function compareStructStores(ss1: Y.StructStore, ss2: Y.StructStore): undefined;\nexport function compareDS(ds1: Y.DeleteSet, ds2: Y.DeleteSet): void;\nexport function applyRandomTests<T>(tc: t.TestCase, mods: ((arg0: Y.Doc, arg1: prng.PRNG, arg2: T) => void)[], iterations: number, initTestObject?: InitTestObjectCallback<T> | undefined): {\n    testObjects: Array<any>;\n    testConnector: TestConnector;\n    users: Array<TestYInstance>;\n    array0: Y.YArray<any>;\n    array1: Y.YArray<any>;\n    array2: Y.YArray<any>;\n    map0: Y.YMap<any>;\n    map1: Y.YMap<any>;\n    map2: Y.YMap<any>;\n    map3: Y.YMap<any>;\n    text0: Y.YText;\n    text1: Y.YText;\n    text2: Y.YText;\n    xml0: Y.YXmlElement;\n    xml1: Y.YXmlElement;\n    xml2: Y.YXmlElement;\n};\nexport type InitTestObjectCallback<T> = (y: TestYInstance) => T;\nimport * as Y from \"../src/internals.js\";\nimport * as prng from \"lib0/prng\";\nimport * as t from \"lib0/testing\";\n",
      "dist/tests/undo-redo.tests.d.ts": "export function testUndoText(tc: t.TestCase): void;\nexport function testUndoMap(tc: t.TestCase): void;\nexport function testUndoArray(tc: t.TestCase): void;\nexport function testUndoXml(tc: t.TestCase): void;\nexport function testUndoEvents(tc: t.TestCase): void;\nexport function testTrackClass(tc: t.TestCase): void;\nexport function testTypeScope(tc: t.TestCase): void;\nexport function testUndoDeleteFilter(tc: t.TestCase): void;\nimport * as t from \"lib0/testing\";\n",
      "dist/tests/y-array.tests.d.ts": "export function testBasicUpdate(tc: t.TestCase): void;\nexport function testDeleteInsert(tc: t.TestCase): void;\nexport function testInsertThreeElementsTryRegetProperty(tc: t.TestCase): void;\nexport function testConcurrentInsertWithThreeConflicts(tc: t.TestCase): void;\nexport function testConcurrentInsertDeleteWithThreeConflicts(tc: t.TestCase): void;\nexport function testInsertionsInLateSync(tc: t.TestCase): void;\nexport function testDisconnectReallyPreventsSendingMessages(tc: t.TestCase): void;\nexport function testDeletionsInLateSync(tc: t.TestCase): void;\nexport function testInsertThenMergeDeleteOnSync(tc: t.TestCase): void;\nexport function testInsertAndDeleteEvents(tc: t.TestCase): void;\nexport function testNestedObserverEvents(tc: t.TestCase): void;\nexport function testInsertAndDeleteEventsForTypes(tc: t.TestCase): void;\nexport function testChangeEvent(tc: t.TestCase): void;\nexport function testInsertAndDeleteEventsForTypes2(tc: t.TestCase): void;\nexport function testNewChildDoesNotEmitEventInTransaction(tc: t.TestCase): void;\nexport function testGarbageCollector(tc: t.TestCase): void;\nexport function testEventTargetIsSetCorrectlyOnLocal(tc: t.TestCase): void;\nexport function testEventTargetIsSetCorrectlyOnRemote(tc: t.TestCase): void;\nexport function testIteratingArrayContainingTypes(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests6(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests40(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests42(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests43(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests44(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests45(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests46(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests300(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests400(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests500(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests600(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests1000(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests1800(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests3000(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests5000(tc: t.TestCase): void;\nexport function testRepeatGeneratingYarrayTests30000(tc: t.TestCase): void;\nimport * as t from \"lib0/testing\";\n",
      "dist/tests/y-map.tests.d.ts": "export function testMapHavingIterableAsConstructorParamTests(tc: t.TestCase): void;\nexport function testBasicMapTests(tc: t.TestCase): void;\nexport function testGetAndSetOfMapProperty(tc: t.TestCase): void;\nexport function testYmapSetsYmap(tc: t.TestCase): void;\nexport function testYmapSetsYarray(tc: t.TestCase): void;\nexport function testGetAndSetOfMapPropertySyncs(tc: t.TestCase): void;\nexport function testGetAndSetOfMapPropertyWithConflict(tc: t.TestCase): void;\nexport function testSizeAndDeleteOfMapProperty(tc: t.TestCase): void;\nexport function testGetAndSetAndDeleteOfMapProperty(tc: t.TestCase): void;\nexport function testGetAndSetOfMapPropertyWithThreeConflicts(tc: t.TestCase): void;\nexport function testGetAndSetAndDeleteOfMapPropertyWithThreeConflicts(tc: t.TestCase): void;\nexport function testObserveDeepProperties(tc: t.TestCase): void;\nexport function testObserversUsingObservedeep(tc: t.TestCase): void;\nexport function testThrowsAddAndUpdateAndDeleteEvents(tc: t.TestCase): void;\nexport function testChangeEvent(tc: t.TestCase): void;\nexport function testYmapEventExceptionsShouldCompleteTransaction(tc: t.TestCase): void;\nexport function testYmapEventHasCorrectValueWhenSettingAPrimitive(tc: t.TestCase): void;\nexport function testYmapEventHasCorrectValueWhenSettingAPrimitiveFromOtherUser(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests10(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests40(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests42(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests43(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests44(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests45(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests46(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests300(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests400(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests500(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests600(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests1000(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests1800(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests5000(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests10000(tc: t.TestCase): void;\nexport function testRepeatGeneratingYmapTests100000(tc: t.TestCase): void;\nimport * as t from \"lib0/testing\";\n",
      "dist/tests/y-text.tests.d.ts": "export function testBasicInsertAndDelete(tc: t.TestCase): void;\nexport function testBasicFormat(tc: t.TestCase): void;\nexport function testGetDeltaWithEmbeds(tc: t.TestCase): void;\nexport function testSnapshot(tc: t.TestCase): void;\nexport function testSnapshotDeleteAfter(tc: t.TestCase): void;\nexport function testToJson(tc: t.TestCase): void;\nexport function testToDeltaEmbedAttributes(tc: t.TestCase): void;\nexport function testToDeltaEmbedNoAttributes(tc: t.TestCase): void;\nexport function testFormattingRemoved(tc: t.TestCase): void;\nexport function testFormattingRemovedInMidText(tc: t.TestCase): void;\nexport function testInsertAndDeleteAtRandomPositions(tc: t.TestCase): void;\nexport function testAppendChars(tc: t.TestCase): void;\nexport function testBestCase(tc: t.TestCase): void;\nexport function testLargeFragmentedDocument(tc: t.TestCase): void;\nexport function testRepeatGenerateTextChanges5(tc: t.TestCase): void;\nexport function testRepeatGenerateTextChanges30(tc: t.TestCase): void;\nexport function testRepeatGenerateTextChanges40(tc: t.TestCase): void;\nexport function testRepeatGenerateTextChanges50(tc: t.TestCase): void;\nexport function testRepeatGenerateTextChanges70(tc: t.TestCase): void;\nexport function testRepeatGenerateTextChanges90(tc: t.TestCase): void;\nexport function testRepeatGenerateTextChanges300(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges1(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges2(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges2Repeat(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges3(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges30(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges40(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges70(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges100(tc: t.TestCase): void;\nexport function testRepeatGenerateQuillChanges300(tc: t.TestCase): void;\nimport * as t from \"lib0/testing\";\n",
      "dist/tests/y-xml.tests.d.ts": "export function testSetProperty(tc: t.TestCase): void;\nexport function testEvents(tc: t.TestCase): void;\nexport function testTreewalker(tc: t.TestCase): void;\nimport * as t from \"lib0/testing\";\n"
    },
    "lib0": {
      "array.d.ts": "export function last<L>(arr: L[]): L;\nexport function create<C>(): C[];\nexport function copy<D>(a: D[]): D[];\nexport function appendTo<M>(dest: M[], src: M[]): void;\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from: {\n    <T_1>(arrayLike: ArrayLike<T_1>): T_1[];\n    <T_2, U>(arrayLike: ArrayLike<T_2>, mapfn: (v: T_2, k: number) => U, thisArg?: any): U[];\n    <T_3>(iterable: Iterable<T_3> | ArrayLike<T_3>): T_3[];\n    <T_4, U_1>(iterable: Iterable<T_4> | ArrayLike<T_4>, mapfn: (v: T_4, k: number) => U_1, thisArg?: any): U_1[];\n};\nexport function every<ITEM>(arr: ITEM[], f: (arg0: ITEM, arg1: number, arg2: ITEM[]) => boolean): boolean;\nexport function some<S>(arr: S[], f: (arg0: S, arg1: number, arg2: S[]) => boolean): boolean;\nexport function equalFlat<ELEM>(a: ELEM[], b: ELEM[]): boolean;\n//# sourceMappingURL=array.d.ts.map",
      "array.test.d.ts": "export function testAppend(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=array.test.d.ts.map",
      "binary.d.ts": "/**\n * Binary data constants.\n *\n * @module binary\n */\n/**\n * n-th bit activated.\n *\n * @type {number}\n */\nexport const BIT1: number;\nexport const BIT2: 2;\nexport const BIT3: 4;\nexport const BIT4: 8;\nexport const BIT5: 16;\nexport const BIT6: 32;\nexport const BIT7: 64;\nexport const BIT8: 128;\nexport const BIT9: 256;\nexport const BIT10: 512;\nexport const BIT11: 1024;\nexport const BIT12: 2048;\nexport const BIT13: 4096;\nexport const BIT14: 8192;\nexport const BIT15: 16384;\nexport const BIT16: 32768;\nexport const BIT17: 65536;\nexport const BIT18: number;\nexport const BIT19: number;\nexport const BIT20: number;\nexport const BIT21: number;\nexport const BIT22: number;\nexport const BIT23: number;\nexport const BIT24: number;\nexport const BIT25: number;\nexport const BIT26: number;\nexport const BIT27: number;\nexport const BIT28: number;\nexport const BIT29: number;\nexport const BIT30: number;\nexport const BIT31: number;\nexport const BIT32: number;\n/**\n * First n bits activated.\n *\n * @type {number}\n */\nexport const BITS0: number;\nexport const BITS1: 1;\nexport const BITS2: 3;\nexport const BITS3: 7;\nexport const BITS4: 15;\nexport const BITS5: 31;\nexport const BITS6: 63;\nexport const BITS7: 127;\nexport const BITS8: 255;\nexport const BITS9: 511;\nexport const BITS10: 1023;\nexport const BITS11: 2047;\nexport const BITS12: 4095;\nexport const BITS13: 8191;\nexport const BITS14: 16383;\nexport const BITS15: 32767;\nexport const BITS16: 65535;\nexport const BITS17: number;\nexport const BITS18: number;\nexport const BITS19: number;\nexport const BITS20: number;\nexport const BITS21: number;\nexport const BITS22: number;\nexport const BITS23: number;\nexport const BITS24: number;\nexport const BITS25: number;\nexport const BITS26: number;\nexport const BITS27: number;\nexport const BITS28: number;\nexport const BITS29: number;\nexport const BITS30: number;\n/**\n * @type {number}\n */\nexport const BITS31: number;\n/**\n * @type {number}\n */\nexport const BITS32: number;\n//# sourceMappingURL=binary.d.ts.map",
      "binary.test.d.ts": "export function testBitx(tc: t.TestCase): void;\nexport function testBitsx(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=binary.test.d.ts.map",
      "broadcastchannel.d.ts": "export function subscribe(room: string, f: (arg0: any) => any): Set<Function>;\nexport function unsubscribe(room: string, f: (arg0: any) => any): boolean;\nexport function publish(room: string, data: any): void;\nexport type Channel = {\n    subs: Set<Function>;\n    bc: any;\n};\n//# sourceMappingURL=broadcastchannel.d.ts.map",
      "buffer.d.ts": "export function createUint8ArrayFromLen(len: number): Uint8Array;\nexport function createUint8ArrayViewFromArrayBuffer(buffer: ArrayBuffer, byteOffset: number, length: number): Uint8Array;\nexport function createUint8ArrayFromArrayBuffer(buffer: ArrayBuffer): Uint8Array;\nexport function toBase64(bytes: Uint8Array): string;\nexport function fromBase64(s: string): Uint8Array;\nexport function copyUint8Array(uint8Array: Uint8Array): Uint8Array;\nexport function encodeAny(data: any): Uint8Array;\nexport function decodeAny(buf: Uint8Array): any;\n//# sourceMappingURL=buffer.d.ts.map",
      "buffer.test.d.ts": "export function testRepeatBase64Encoding(tc: t.TestCase): void;\nexport function testAnyEncoding(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=buffer.test.d.ts.map",
      "component.d.ts": "export const registry: CustomElementRegistry;\nexport function define(name: string, constr: any, opts?: ElementDefinitionOptions | undefined): void;\nexport function whenDefined(name: string): Promise<void>;\n/**\n * @template S\n */\nexport class Lib0Component<S> extends HTMLElement {\n    /**\n     * @param {S} [state]\n     */\n    constructor(state?: S | undefined);\n    /**\n     * @type {S|null}\n     */\n    state: S | null;\n    /**\n     * @type {any}\n     */\n    _internal: any;\n    /**\n     * @param {S} state\n     */\n    setState(state: S): void;\n    /**\n      * @param {any} stateUpdate\n      */\n    updateState(stateUpdate: any): void;\n}\nexport function createComponent<T>(name: string, { template, style, state: defaultState, onStateChange, childStates, attrs, listeners, slots }: CONF<T>): typeof Lib0Component;\nexport function createComponentDefiner(definer: Function): () => any;\nexport function defineListComponent(): any;\nexport function defineLazyLoadingComponent(): any;\nexport type CONF<S> = {\n    /**\n     * Template for the shadow dom.\n     */\n    template?: string | null;\n    /**\n     * shadow dom style. Is only used when\n     * `CONF.template` is defined\n     */\n    style?: string;\n    /**\n     * Initial component state.\n     */\n    state?: S;\n    /**\n     * Called when\n     * the state changes.\n     */\n    onStateChange?: (arg0: S, arg1: S | null, arg2: Lib0Component<S>) => void;\n    /**\n     * maps from\n     * CSS-selector to transformer function. The first element that matches the\n     * CSS-selector receives state updates via the transformer function.\n     */\n    childStates?: {\n        [x: string]: (arg0: any, arg1: any) => Object;\n    };\n    /**\n     * attrs-keys and state-keys should be camelCase, but the DOM uses kebap-case. I.e.\n     * `attrs = { myAttr: 4 }` is represeted as `<my-elem my-attr=\"4\" />` in the DOM\n     */\n    attrs?: {\n        [x: string]: \"string\" | \"number\" | \"json\" | \"bool\";\n    };\n    /**\n     * Maps from dom-event-name\n     * to event listener.\n     */\n    listeners?: {\n        [x: string]: (arg0: CustomEvent<any>, arg1: Lib0Component<any>) => boolean | void;\n    };\n    /**\n     * Fill slots\n     * automatically when state changes. Maps from slot-name to slot-html.\n     */\n    slots?: (arg0: S, arg1: S, arg2: Lib0Component<S>) => {\n        [x: string]: string;\n    };\n};\n//# sourceMappingURL=component.d.ts.map",
      "conditions.d.ts": "export function undefinedToNull<T>(v: T | null | undefined): T | null;\n//# sourceMappingURL=conditions.d.ts.map",
      "decoding.d.ts": "/**\n * A Decoder handles the decoding of an Uint8Array.\n */\nexport class Decoder {\n    /**\n     * @param {Uint8Array} uint8Array Binary data to decode\n     */\n    constructor(uint8Array: Uint8Array);\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    arr: Uint8Array;\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n    pos: number;\n}\nexport function createDecoder(uint8Array: Uint8Array): Decoder;\nexport function hasContent(decoder: Decoder): boolean;\nexport function clone(decoder: Decoder, newPos?: number | undefined): Decoder;\nexport function readUint8Array(decoder: Decoder, len: number): Uint8Array;\nexport function readVarUint8Array(decoder: Decoder): Uint8Array;\nexport function readTailAsUint8Array(decoder: Decoder): Uint8Array;\nexport function skip8(decoder: Decoder): number;\nexport function readUint8(decoder: Decoder): number;\nexport function readUint16(decoder: Decoder): number;\nexport function readUint32(decoder: Decoder): number;\nexport function readUint32BigEndian(decoder: Decoder): number;\nexport function peekUint8(decoder: Decoder): number;\nexport function peekUint16(decoder: Decoder): number;\nexport function peekUint32(decoder: Decoder): number;\nexport function readVarUint(decoder: Decoder): number;\nexport function readVarInt(decoder: Decoder): number;\nexport function peekVarUint(decoder: Decoder): number;\nexport function peekVarInt(decoder: Decoder): number;\nexport function readVarString(decoder: Decoder): string;\nexport function peekVarString(decoder: Decoder): string;\nexport function readFromDataView(decoder: Decoder, len: number): DataView;\nexport function readFloat32(decoder: Decoder): number;\nexport function readFloat64(decoder: Decoder): number;\nexport function readBigInt64(decoder: Decoder): any;\nexport function readBigUint64(decoder: Decoder): any;\nexport function readAny(decoder: Decoder): any;\n/**\n * T must not be null.\n *\n * @template T\n */\nexport class RleDecoder<T> extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     * @param {function(Decoder):T} reader\n     */\n    constructor(uint8Array: Uint8Array, reader: (arg0: Decoder) => T);\n    /**\n     * The reader\n     */\n    reader: (arg0: Decoder) => T;\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    s: T | null;\n    count: number;\n    read(): T;\n}\nexport class IntDiffDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     * @param {number} start\n     */\n    constructor(uint8Array: Uint8Array, start: number);\n    /**\n     * Current state\n     * @type {number}\n     */\n    s: number;\n    /**\n     * @return {number}\n     */\n    read(): number;\n}\nexport class RleIntDiffDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     * @param {number} start\n     */\n    constructor(uint8Array: Uint8Array, start: number);\n    /**\n     * Current state\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    /**\n     * @return {number}\n     */\n    read(): number;\n}\nexport class UintOptRleDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     */\n    constructor(uint8Array: Uint8Array);\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    read(): number;\n}\nexport class IncUintOptRleDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     */\n    constructor(uint8Array: Uint8Array);\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    read(): number;\n}\nexport class IntDiffOptRleDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     */\n    constructor(uint8Array: Uint8Array);\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    diff: number;\n    /**\n     * @return {number}\n     */\n    read(): number;\n}\nexport class StringDecoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     */\n    constructor(uint8Array: Uint8Array);\n    decoder: UintOptRleDecoder;\n    str: string;\n    /**\n     * @type {number}\n     */\n    spos: number;\n    /**\n     * @return {string}\n     */\n    read(): string;\n}\n//# sourceMappingURL=decoding.d.ts.map",
      "diff.d.ts": "export function simpleDiffString(a: string, b: string): SimpleDiff<string>;\nexport function simpleDiff(a: string, b: string): SimpleDiff<string>;\nexport function simpleDiffArray<T>(a: T[], b: T[], compare?: ((arg0: T, arg1: T) => boolean) | undefined): SimpleDiff<T[]>;\n/**\n * A SimpleDiff describes a change on a String.\n *\n * ```js\n * console.log(a) // the old value\n * console.log(b) // the updated value\n * // Apply changes of diff (pseudocode)\n * a.remove(diff.index, diff.remove) // Remove `diff.remove` characters\n * a.insert(diff.index, diff.insert) // Insert `diff.insert`\n * a === b // values match\n * ```\n */\nexport type SimpleDiff<T> = {\n    /**\n     * The index where changes were applied\n     */\n    index: number;\n    /**\n     * The number of characters to delete starting\n     *        at `index`.\n     */\n    remove: number;\n    /**\n     * The new text to insert at `index` after applying\n     *      `delete`\n     */\n    insert: T;\n};\n//# sourceMappingURL=diff.d.ts.map",
      "diff.test.d.ts": "export function testDiffing(tc: t.TestCase): void;\nexport function testRepeatDiffing(tc: t.TestCase): void;\nexport function testArrayDiffing(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=diff.test.d.ts.map",
      "dist/array.d.ts": "export function last<L>(arr: L[]): L;\nexport function create<C>(): C[];\nexport function copy<D>(a: D[]): D[];\nexport function appendTo<M>(dest: M[], src: M[]): void;\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from: {\n    <T_1>(arrayLike: ArrayLike<T_1>): T_1[];\n    <T_2, U>(arrayLike: ArrayLike<T_2>, mapfn: (v: T_2, k: number) => U, thisArg?: any): U[];\n    <T_3>(iterable: Iterable<T_3> | ArrayLike<T_3>): T_3[];\n    <T_4, U_1>(iterable: Iterable<T_4> | ArrayLike<T_4>, mapfn: (v: T_4, k: number) => U_1, thisArg?: any): U_1[];\n};\nexport function every<ITEM>(arr: ITEM[], f: (arg0: ITEM, arg1: number, arg2: ITEM[]) => boolean): boolean;\nexport function some<S>(arr: S[], f: (arg0: S, arg1: number, arg2: S[]) => boolean): boolean;\nexport function equalFlat<ELEM>(a: ELEM[], b: ELEM[]): boolean;\n//# sourceMappingURL=array.d.ts.map",
      "dist/array.test.d.ts": "export function testAppend(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=array.test.d.ts.map",
      "dist/binary.d.ts": "/**\n * Binary data constants.\n *\n * @module binary\n */\n/**\n * n-th bit activated.\n *\n * @type {number}\n */\nexport const BIT1: number;\nexport const BIT2: 2;\nexport const BIT3: 4;\nexport const BIT4: 8;\nexport const BIT5: 16;\nexport const BIT6: 32;\nexport const BIT7: 64;\nexport const BIT8: 128;\nexport const BIT9: 256;\nexport const BIT10: 512;\nexport const BIT11: 1024;\nexport const BIT12: 2048;\nexport const BIT13: 4096;\nexport const BIT14: 8192;\nexport const BIT15: 16384;\nexport const BIT16: 32768;\nexport const BIT17: 65536;\nexport const BIT18: number;\nexport const BIT19: number;\nexport const BIT20: number;\nexport const BIT21: number;\nexport const BIT22: number;\nexport const BIT23: number;\nexport const BIT24: number;\nexport const BIT25: number;\nexport const BIT26: number;\nexport const BIT27: number;\nexport const BIT28: number;\nexport const BIT29: number;\nexport const BIT30: number;\nexport const BIT31: number;\nexport const BIT32: number;\n/**\n * First n bits activated.\n *\n * @type {number}\n */\nexport const BITS0: number;\nexport const BITS1: 1;\nexport const BITS2: 3;\nexport const BITS3: 7;\nexport const BITS4: 15;\nexport const BITS5: 31;\nexport const BITS6: 63;\nexport const BITS7: 127;\nexport const BITS8: 255;\nexport const BITS9: 511;\nexport const BITS10: 1023;\nexport const BITS11: 2047;\nexport const BITS12: 4095;\nexport const BITS13: 8191;\nexport const BITS14: 16383;\nexport const BITS15: 32767;\nexport const BITS16: 65535;\nexport const BITS17: number;\nexport const BITS18: number;\nexport const BITS19: number;\nexport const BITS20: number;\nexport const BITS21: number;\nexport const BITS22: number;\nexport const BITS23: number;\nexport const BITS24: number;\nexport const BITS25: number;\nexport const BITS26: number;\nexport const BITS27: number;\nexport const BITS28: number;\nexport const BITS29: number;\nexport const BITS30: number;\n/**\n * @type {number}\n */\nexport const BITS31: number;\n/**\n * @type {number}\n */\nexport const BITS32: number;\n//# sourceMappingURL=binary.d.ts.map",
      "dist/binary.test.d.ts": "export function testBitx(tc: t.TestCase): void;\nexport function testBitsx(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=binary.test.d.ts.map",
      "dist/broadcastchannel.d.ts": "export function subscribe(room: string, f: (arg0: any) => any): Set<Function>;\nexport function unsubscribe(room: string, f: (arg0: any) => any): boolean;\nexport function publish(room: string, data: any): void;\nexport type Channel = {\n    subs: Set<Function>;\n    bc: any;\n};\n//# sourceMappingURL=broadcastchannel.d.ts.map",
      "dist/buffer.d.ts": "export function createUint8ArrayFromLen(len: number): Uint8Array;\nexport function createUint8ArrayViewFromArrayBuffer(buffer: ArrayBuffer, byteOffset: number, length: number): Uint8Array;\nexport function createUint8ArrayFromArrayBuffer(buffer: ArrayBuffer): Uint8Array;\nexport function toBase64(bytes: Uint8Array): string;\nexport function fromBase64(s: string): Uint8Array;\nexport function copyUint8Array(uint8Array: Uint8Array): Uint8Array;\nexport function encodeAny(data: any): Uint8Array;\nexport function decodeAny(buf: Uint8Array): any;\n//# sourceMappingURL=buffer.d.ts.map",
      "dist/buffer.test.d.ts": "export function testRepeatBase64Encoding(tc: t.TestCase): void;\nexport function testAnyEncoding(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=buffer.test.d.ts.map",
      "dist/component.d.ts": "export const registry: CustomElementRegistry;\nexport function define(name: string, constr: any, opts?: ElementDefinitionOptions | undefined): void;\nexport function whenDefined(name: string): Promise<void>;\n/**\n * @template S\n */\nexport class Lib0Component<S> extends HTMLElement {\n    /**\n     * @param {S} [state]\n     */\n    constructor(state?: S | undefined);\n    /**\n     * @type {S|null}\n     */\n    state: S | null;\n    /**\n     * @type {any}\n     */\n    _internal: any;\n    /**\n     * @param {S} state\n     */\n    setState(state: S): void;\n    /**\n      * @param {any} stateUpdate\n      */\n    updateState(stateUpdate: any): void;\n}\nexport function createComponent<T>(name: string, { template, style, state: defaultState, onStateChange, childStates, attrs, listeners, slots }: CONF<T>): typeof Lib0Component;\nexport function createComponentDefiner(definer: Function): () => any;\nexport function defineListComponent(): any;\nexport function defineLazyLoadingComponent(): any;\nexport type CONF<S> = {\n    /**\n     * Template for the shadow dom.\n     */\n    template?: string | null;\n    /**\n     * shadow dom style. Is only used when\n     * `CONF.template` is defined\n     */\n    style?: string;\n    /**\n     * Initial component state.\n     */\n    state?: S;\n    /**\n     * Called when\n     * the state changes.\n     */\n    onStateChange?: (arg0: S, arg1: S | null, arg2: Lib0Component<S>) => void;\n    /**\n     * maps from\n     * CSS-selector to transformer function. The first element that matches the\n     * CSS-selector receives state updates via the transformer function.\n     */\n    childStates?: {\n        [x: string]: (arg0: any, arg1: any) => Object;\n    };\n    /**\n     * attrs-keys and state-keys should be camelCase, but the DOM uses kebap-case. I.e.\n     * `attrs = { myAttr: 4 }` is represeted as `<my-elem my-attr=\"4\" />` in the DOM\n     */\n    attrs?: {\n        [x: string]: \"string\" | \"number\" | \"json\" | \"bool\";\n    };\n    /**\n     * Maps from dom-event-name\n     * to event listener.\n     */\n    listeners?: {\n        [x: string]: (arg0: CustomEvent<any>, arg1: Lib0Component<any>) => boolean | void;\n    };\n    /**\n     * Fill slots\n     * automatically when state changes. Maps from slot-name to slot-html.\n     */\n    slots?: (arg0: S, arg1: S, arg2: Lib0Component<S>) => {\n        [x: string]: string;\n    };\n};\n//# sourceMappingURL=component.d.ts.map",
      "dist/conditions.d.ts": "export function undefinedToNull<T>(v: T | null | undefined): T | null;\n//# sourceMappingURL=conditions.d.ts.map",
      "dist/decoding.d.ts": "/**\n * A Decoder handles the decoding of an Uint8Array.\n */\nexport class Decoder {\n    /**\n     * @param {Uint8Array} uint8Array Binary data to decode\n     */\n    constructor(uint8Array: Uint8Array);\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    arr: Uint8Array;\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n    pos: number;\n}\nexport function createDecoder(uint8Array: Uint8Array): Decoder;\nexport function hasContent(decoder: Decoder): boolean;\nexport function clone(decoder: Decoder, newPos?: number | undefined): Decoder;\nexport function readUint8Array(decoder: Decoder, len: number): Uint8Array;\nexport function readVarUint8Array(decoder: Decoder): Uint8Array;\nexport function readTailAsUint8Array(decoder: Decoder): Uint8Array;\nexport function skip8(decoder: Decoder): number;\nexport function readUint8(decoder: Decoder): number;\nexport function readUint16(decoder: Decoder): number;\nexport function readUint32(decoder: Decoder): number;\nexport function readUint32BigEndian(decoder: Decoder): number;\nexport function peekUint8(decoder: Decoder): number;\nexport function peekUint16(decoder: Decoder): number;\nexport function peekUint32(decoder: Decoder): number;\nexport function readVarUint(decoder: Decoder): number;\nexport function readVarInt(decoder: Decoder): number;\nexport function peekVarUint(decoder: Decoder): number;\nexport function peekVarInt(decoder: Decoder): number;\nexport function readVarString(decoder: Decoder): string;\nexport function peekVarString(decoder: Decoder): string;\nexport function readFromDataView(decoder: Decoder, len: number): DataView;\nexport function readFloat32(decoder: Decoder): number;\nexport function readFloat64(decoder: Decoder): number;\nexport function readBigInt64(decoder: Decoder): any;\nexport function readBigUint64(decoder: Decoder): any;\nexport function readAny(decoder: Decoder): any;\n/**\n * T must not be null.\n *\n * @template T\n */\nexport class RleDecoder<T> extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     * @param {function(Decoder):T} reader\n     */\n    constructor(uint8Array: Uint8Array, reader: (arg0: Decoder) => T);\n    /**\n     * The reader\n     */\n    reader: (arg0: Decoder) => T;\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    s: T | null;\n    count: number;\n    read(): T;\n}\nexport class IntDiffDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     * @param {number} start\n     */\n    constructor(uint8Array: Uint8Array, start: number);\n    /**\n     * Current state\n     * @type {number}\n     */\n    s: number;\n    /**\n     * @return {number}\n     */\n    read(): number;\n}\nexport class RleIntDiffDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     * @param {number} start\n     */\n    constructor(uint8Array: Uint8Array, start: number);\n    /**\n     * Current state\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    /**\n     * @return {number}\n     */\n    read(): number;\n}\nexport class UintOptRleDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     */\n    constructor(uint8Array: Uint8Array);\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    read(): number;\n}\nexport class IncUintOptRleDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     */\n    constructor(uint8Array: Uint8Array);\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    read(): number;\n}\nexport class IntDiffOptRleDecoder extends Decoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     */\n    constructor(uint8Array: Uint8Array);\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    diff: number;\n    /**\n     * @return {number}\n     */\n    read(): number;\n}\nexport class StringDecoder {\n    /**\n     * @param {Uint8Array} uint8Array\n     */\n    constructor(uint8Array: Uint8Array);\n    decoder: UintOptRleDecoder;\n    str: string;\n    /**\n     * @type {number}\n     */\n    spos: number;\n    /**\n     * @return {string}\n     */\n    read(): string;\n}\n//# sourceMappingURL=decoding.d.ts.map",
      "dist/diff.d.ts": "export function simpleDiffString(a: string, b: string): SimpleDiff<string>;\nexport function simpleDiff(a: string, b: string): SimpleDiff<string>;\nexport function simpleDiffArray<T>(a: T[], b: T[], compare?: ((arg0: T, arg1: T) => boolean) | undefined): SimpleDiff<T[]>;\n/**\n * A SimpleDiff describes a change on a String.\n *\n * ```js\n * console.log(a) // the old value\n * console.log(b) // the updated value\n * // Apply changes of diff (pseudocode)\n * a.remove(diff.index, diff.remove) // Remove `diff.remove` characters\n * a.insert(diff.index, diff.insert) // Insert `diff.insert`\n * a === b // values match\n * ```\n */\nexport type SimpleDiff<T> = {\n    /**\n     * The index where changes were applied\n     */\n    index: number;\n    /**\n     * The number of characters to delete starting\n     *        at `index`.\n     */\n    remove: number;\n    /**\n     * The new text to insert at `index` after applying\n     *      `delete`\n     */\n    insert: T;\n};\n//# sourceMappingURL=diff.d.ts.map",
      "dist/diff.test.d.ts": "export function testDiffing(tc: t.TestCase): void;\nexport function testRepeatDiffing(tc: t.TestCase): void;\nexport function testArrayDiffing(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=diff.test.d.ts.map",
      "dist/dom.d.ts": "/**\n * @type {Document}\n */\nexport const doc: Document;\nexport function createElement(name: string): HTMLElement;\nexport function createDocumentFragment(): DocumentFragment;\nexport function createTextNode(text: string): Text;\nexport const domParser: DOMParser;\nexport function emitCustomEvent(el: HTMLElement, name: string, opts: Object): boolean;\nexport function setAttributes(el: Element, attrs: pair.Pair<string, string | boolean>[]): Element;\nexport function setAttributesMap(el: Element, attrs: Map<string, string>): Element;\nexport function fragment(children: HTMLCollection | Node[]): DocumentFragment;\nexport function append(parent: Element, nodes: Node[]): Element;\nexport function remove(el: HTMLElement): void;\nexport function addEventListener(el: EventTarget, name: string, f: EventListener): void;\nexport function removeEventListener(el: EventTarget, name: string, f: EventListener): void;\nexport function addEventListeners(node: Node, listeners: pair.Pair<string, EventListener>[]): Node;\nexport function removeEventListeners(node: Node, listeners: pair.Pair<string, EventListener>[]): Node;\nexport function element(name: string, attrs?: (pair.Pair<string, string> | pair.Pair<string, boolean>)[], children?: Node[]): Element;\nexport function canvas(width: number, height: number): HTMLCanvasElement;\nexport function text(text: string): Text;\nexport function pairToStyleString(pair: pair.Pair<string, string>): string;\nexport function pairsToStyleString(pairs: pair.Pair<string, string>[]): string;\nexport function mapToStyleString(m: Map<string, string>): string;\nexport function querySelector(el: HTMLElement | ShadowRoot, query: string): HTMLElement | null;\nexport function querySelectorAll(el: HTMLElement | ShadowRoot, query: string): NodeListOf<HTMLElement>;\nexport function getElementById(id: string): HTMLElement;\nexport function parseFragment(html: string): DocumentFragment;\nexport function parseElement(html: string): HTMLElement;\nexport function replaceWith(oldEl: HTMLElement, newEl: HTMLElement | DocumentFragment): void;\nexport function insertBefore(parent: HTMLElement, el: HTMLElement, ref: Node | null): HTMLElement;\nexport function appendChild(parent: Node, child: Node): Node;\nexport const ELEMENT_NODE: number;\nexport const TEXT_NODE: number;\nexport const CDATA_SECTION_NODE: number;\nexport const COMMENT_NODE: number;\nexport const DOCUMENT_NODE: number;\nexport const DOCUMENT_TYPE_NODE: number;\nexport const DOCUMENT_FRAGMENT_NODE: number;\nexport function checkNodeType(node: any, type: number): boolean;\nexport function isParentOf(parent: Node, child: HTMLElement): boolean;\nimport * as pair from \"./pair.js\";\n//# sourceMappingURL=dom.d.ts.map",
      "dist/encoding.d.ts": "/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nexport class Encoder {\n    cpos: number;\n    cbuf: Uint8Array;\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    bufs: Array<Uint8Array>;\n}\nexport function createEncoder(): Encoder;\nexport function length(encoder: Encoder): number;\nexport function toUint8Array(encoder: Encoder): Uint8Array;\nexport function write(encoder: Encoder, num: number): void;\nexport function set(encoder: Encoder, pos: number, num: number): void;\nexport function writeUint8(encoder: Encoder, num: number): void;\nexport function setUint8(encoder: Encoder, pos: number, num: number): void;\nexport function writeUint16(encoder: Encoder, num: number): void;\nexport function setUint16(encoder: Encoder, pos: number, num: number): void;\nexport function writeUint32(encoder: Encoder, num: number): void;\nexport function writeUint32BigEndian(encoder: Encoder, num: number): void;\nexport function setUint32(encoder: Encoder, pos: number, num: number): void;\nexport function writeVarUint(encoder: Encoder, num: number): void;\nexport function writeVarInt(encoder: Encoder, num: number): void;\nexport function writeVarString(encoder: Encoder, str: string): void;\nexport function writeBinaryEncoder(encoder: Encoder, append: Encoder): void;\nexport function writeUint8Array(encoder: Encoder, uint8Array: Uint8Array): void;\nexport function writeVarUint8Array(encoder: Encoder, uint8Array: Uint8Array): void;\nexport function writeOnDataView(encoder: Encoder, len: number): DataView;\nexport function writeFloat32(encoder: Encoder, num: number): void;\nexport function writeFloat64(encoder: Encoder, num: number): void;\nexport function writeBigInt64(encoder: Encoder, num: bigint): any;\nexport function writeBigUint64(encoder: Encoder, num: bigint): any;\nexport function writeAny(encoder: Encoder, data: string | number | bigint | boolean | any[] | Uint8Array | {\n    [x: string]: any;\n} | null | undefined): void;\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nexport class RleEncoder<T> extends Encoder {\n    /**\n     * @param {function(Encoder, T):void} writer\n     */\n    constructor(writer: (arg0: Encoder, arg1: T) => void);\n    /**\n     * The writer\n     */\n    w: (arg0: Encoder, arg1: T) => void;\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    s: T | null;\n    count: number;\n    /**\n     * @param {T} v\n     */\n    write(v: T): void;\n}\n/**\n * Basic diff decoder using variable length encoding.\n *\n * Encodes the values [3, 1100, 1101, 1050, 0] to [3, 1097, 1, -51, -1050] using writeVarInt.\n */\nexport class IntDiffEncoder extends Encoder {\n    /**\n     * @param {number} start\n     */\n    constructor(start: number);\n    /**\n     * Current state\n     * @type {number}\n     */\n    s: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n}\n/**\n * A combination of IntDiffEncoder and RleEncoder.\n *\n * Basically first writes the IntDiffEncoder and then counts duplicate diffs using RleEncoding.\n *\n * Encodes the values [1,1,1,2,3,4,5,6] as [1,1,0,2,1,5] (RLE([1,0,0,1,1,1,1,1]) ⇒ RleIntDiff[1,1,0,2,1,5])\n */\nexport class RleIntDiffEncoder extends Encoder {\n    /**\n     * @param {number} start\n     */\n    constructor(start: number);\n    /**\n     * Current state\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n}\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nexport class UintOptRleEncoder {\n    encoder: Encoder;\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n    toUint8Array(): Uint8Array;\n}\n/**\n * Increasing Uint Optimized RLE Encoder\n *\n * The RLE encoder counts the number of same occurences of the same value.\n * The IncUintOptRle encoder counts if the value increases.\n * I.e. 7, 8, 9, 10 will be encoded as [-7, 4]. 1, 3, 5 will be encoded\n * as [1, 3, 5].\n */\nexport class IncUintOptRleEncoder {\n    encoder: Encoder;\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n    toUint8Array(): Uint8Array;\n}\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nexport class IntDiffOptRleEncoder {\n    encoder: Encoder;\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    diff: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n    toUint8Array(): Uint8Array;\n}\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nexport class StringEncoder {\n    /**\n     * @type {Array<string>}\n     */\n    sarr: Array<string>;\n    s: string;\n    lensE: UintOptRleEncoder;\n    /**\n     * @param {string} string\n     */\n    write(string: string): void;\n    toUint8Array(): Uint8Array;\n}\n//# sourceMappingURL=encoding.d.ts.map",
      "dist/encoding.test.d.ts": "export function testGolangBinaryEncodingCompatibility(): void;\nexport function testStringDecodingPerformance(): void;\nexport function testAnyEncodeUnknowns(tc: t.TestCase): void;\nexport function testAnyEncodeDate(tc: t.TestCase): void;\nexport function testEncodeMax32bitUint(tc: t.TestCase): void;\nexport function testVarUintEncoding(tc: t.TestCase): void;\nexport function testVarIntEncoding(tc: t.TestCase): void;\nexport function testRepeatVarUintEncoding(tc: t.TestCase): void;\nexport function testRepeatVarIntEncoding(tc: t.TestCase): void;\nexport function testRepeatAnyEncoding(tc: t.TestCase): void;\nexport function testRepeatPeekVarUintEncoding(tc: t.TestCase): void;\nexport function testRepeatPeekVarIntEncoding(tc: t.TestCase): void;\nexport function testAnyVsJsonEncoding(tc: t.TestCase): void;\nexport function testStringEncoding(tc: t.TestCase): void;\nexport function testRepeatStringEncoding(tc: t.TestCase): void;\nexport function testSetMethods(tc: t.TestCase): void;\nexport function testRepeatRandomWrites(tc: t.TestCase): void;\nexport function testWriteUint8ArrayOverflow(tc: t.TestCase): void;\nexport function testSetOnOverflow(tc: t.TestCase): void;\nexport function testCloneDecoder(tc: t.TestCase): void;\nexport function testWriteBinaryEncoder(tc: t.TestCase): void;\nexport function testOverflowStringDecoding(tc: t.TestCase): void;\nexport function testRleEncoder(tc: t.TestCase): void;\nexport function testRleIntDiffEncoder(tc: t.TestCase): void;\nexport function testIntDiffRleEncoder(tc: t.TestCase): void;\nexport function testIntEncoders(tc: t.TestCase): void;\nexport function testIntDiffEncoder(tc: t.TestCase): void;\nexport function testStringDecoder(tc: t.TestCase): void;\nexport type EncodingPair = {\n    read: (arg0: decoding.Decoder) => any;\n    write: (arg0: encoding.Encoder, arg1: any) => void;\n    gen: (arg0: prng.PRNG) => any;\n    compare: (arg0: any, arg1: any) => boolean;\n    name: string;\n};\nimport * as t from \"./testing.js\";\nimport * as decoding from \"./decoding.js\";\nimport * as encoding from \"./encoding.js\";\nimport * as prng from \"./prng.js\";\n//# sourceMappingURL=encoding.test.d.ts.map",
      "dist/environment.d.ts": "export const isNode: boolean;\nexport const isBrowser: boolean;\nexport const isMac: boolean;\nexport function hasParam(name: string): boolean;\nexport function getParam(name: string, defaultVal: string): string;\nexport function getVariable(name: string): string | null;\nexport function getConf(name: string): string | null;\nexport function hasConf(name: string): boolean;\nexport const production: boolean;\n//# sourceMappingURL=environment.d.ts.map",
      "dist/environment.test.d.ts": "//# sourceMappingURL=environment.test.d.ts.map",
      "dist/error.d.ts": "export function create(s: string): Error;\nexport function methodUnimplemented(): never;\nexport function unexpectedCase(): never;\n//# sourceMappingURL=error.d.ts.map",
      "dist/eventloop.d.ts": "export function enqueue(f: () => void): void;\nexport function timeout(timeout: number, callback: Function): TimeoutObject;\nexport function interval(timeout: number, callback: Function): TimeoutObject;\nexport const Animation: {\n    new (timeoutId: number): {\n        _: number;\n        destroy(): void;\n    };\n};\nexport function animationFrame(cb: (arg0: number) => void): TimeoutObject;\nexport function idleCallback(cb: Function): TimeoutObject;\nexport function createDebouncer(timeout: number): (arg0: () => void) => void;\nexport type TimeoutObject = {\n    destroy: Function;\n};\n//# sourceMappingURL=eventloop.d.ts.map",
      "dist/eventloop.test.d.ts": "export function testEventloopOrder(tc: t.TestCase): Promise<void[]>;\nexport function testTimeout(tc: t.TestCase): Promise<void>;\nexport function testInterval(tc: t.TestCase): Promise<void>;\nexport function testAnimationFrame(tc: t.TestCase): Promise<void>;\nexport function testIdleCallback(tc: t.TestCase): Promise<void>;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=eventloop.test.d.ts.map",
      "dist/function.d.ts": "export function callAll(fs: Function[], args: any[], i?: number): void;\nexport function nop(): void;\nexport function apply<T>(f: () => T): T;\nexport function id<A>(a: A): A;\nexport function equalityStrict<T>(a: T, b: T): boolean;\nexport function equalityFlat<T>(a: object | T[], b: object | T[]): boolean;\nexport function equalityDeep(a: any, b: any): boolean;\n//# sourceMappingURL=function.d.ts.map",
      "dist/function.test.d.ts": "export function testDeepEquality(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=function.test.d.ts.map",
      "dist/index.d.ts": "import * as array from \"./array.js\";\nimport * as binary from \"./binary.js\";\nimport * as broadcastchannel from \"./broadcastchannel.js\";\nimport * as buffer from \"./buffer.js\";\nimport * as conditions from \"./conditions.js\";\nimport * as decoding from \"./decoding.js\";\nimport * as diff from \"./diff.js\";\nimport * as dom from \"./dom.js\";\nimport * as encoding from \"./encoding.js\";\nimport * as environment from \"./environment.js\";\nimport * as error from \"./error.js\";\nimport * as eventloop from \"./eventloop.js\";\nimport * as func from \"./function.js\";\nimport * as indexeddb from \"./indexeddb.js\";\nimport * as iterator from \"./iterator.js\";\nimport * as json from \"./json.js\";\nimport * as logging from \"./logging.js\";\nimport * as map from \"./map.js\";\nimport * as math from \"./math.js\";\nimport * as mutex from \"./mutex.js\";\nimport * as number from \"./number.js\";\nimport * as object from \"./object.js\";\nimport * as pair from \"./pair.js\";\nimport * as prng from \"./prng.js\";\nimport * as promise from \"./promise.js\";\nimport * as set from \"./set.js\";\nimport * as sort from \"./sort.js\";\nimport * as statistics from \"./statistics.js\";\nimport * as string from \"./string.js\";\nimport * as symbol from \"./symbol.js\";\nimport * as time from \"./time.js\";\nimport * as tree from \"./tree.js\";\nimport * as websocket from \"./websocket.js\";\nexport { array, binary, broadcastchannel, buffer, conditions, decoding, diff, dom, encoding, environment, error, eventloop, func, indexeddb, iterator, json, logging, map, math, mutex, number, object, pair, prng, promise, set, sort, statistics, string, symbol, time, tree, websocket };\n//# sourceMappingURL=index.d.ts.map",
      "dist/indexeddb.d.ts": "export function rtop(request: IDBRequest<any>): Promise<any>;\nexport function openDB(name: string, initDB: (arg0: IDBDatabase) => any): Promise<IDBDatabase>;\nexport function deleteDB(name: string): Promise<any>;\nexport function createStores(db: IDBDatabase, definitions: (string[] | (string | IDBObjectStoreParameters | undefined)[])[]): void;\nexport function transact(db: IDBDatabase, stores: string[], access?: \"readonly\" | \"readwrite\" | undefined): IDBObjectStore[];\nexport function count(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<number>;\nexport function get(store: IDBObjectStore, key: string | number | any[] | Date | ArrayBuffer): Promise<string | number | any[] | Date | ArrayBuffer>;\nexport function del(store: IDBObjectStore, key: string | number | any[] | Date | ArrayBuffer | IDBKeyRange): Promise<any>;\nexport function put(store: IDBObjectStore, item: string | number | boolean | Date | ArrayBuffer, key?: string | number | any[] | Date | ArrayBuffer | undefined): Promise<any>;\nexport function add(store: IDBObjectStore, item: string | number | boolean | Date | ArrayBuffer, key: string | number | any[] | Date | ArrayBuffer): Promise<any>;\nexport function addAutoKey(store: IDBObjectStore, item: string | number | Date | ArrayBuffer): Promise<number>;\nexport function getAll(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<any[]>;\nexport function getAllKeys(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<any[]>;\nexport function queryFirst(store: IDBObjectStore, query: IDBKeyRange | null, direction: IDBCursorDirection): Promise<any>;\nexport function getLastKey(store: IDBObjectStore): Promise<any>;\nexport function getFirstKey(store: IDBObjectStore): Promise<any>;\nexport function getAllKeysValues(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<KeyValuePair[]>;\nexport function iterate(store: IDBObjectStore, keyrange: IDBKeyRange | null, f: (arg0: any, arg1: any) => boolean | void, direction?: IDBCursorDirection): Promise<void>;\nexport function iterateKeys(store: IDBObjectStore, keyrange: IDBKeyRange | null, f: (arg0: any) => boolean | void, direction?: IDBCursorDirection): Promise<void>;\nexport function getStore(t: IDBTransaction, store: string): IDBObjectStore;\nexport function createIDBKeyRangeBound(lower: any, upper: any, lowerOpen: boolean, upperOpen: boolean): IDBKeyRange;\nexport function createIDBKeyRangeUpperBound(upper: any, upperOpen: boolean): IDBKeyRange;\nexport function createIDBKeyRangeLowerBound(lower: any, lowerOpen: boolean): IDBKeyRange;\nexport type KeyValuePair = {\n    /**\n     * key\n     */\n    k: any;\n    /**\n     * Value\n     */\n    v: any;\n};\n//# sourceMappingURL=indexeddb.d.ts.map",
      "dist/indexeddb.test.d.ts": "export function testRetrieveElements(): Promise<void>;\n//# sourceMappingURL=indexeddb.test.d.ts.map",
      "dist/isomorphic.d.ts": "export const performance: any;\nexport const cryptoRandomBuffer: any;\n//# sourceMappingURL=isomorphic.d.ts.map",
      "dist/iterator.d.ts": "export function mapIterator<T, R>(iterator: Iterator<T, any, undefined>, f: (arg0: T) => R): IterableIterator<R>;\nexport function createIterator<T>(next: () => IteratorResult<T, any>): IterableIterator<T>;\nexport function iteratorFilter<T>(iterator: Iterator<T, any, undefined>, filter: (arg0: T) => boolean): IterableIterator<T>;\nexport function iteratorMap<T, M>(iterator: Iterator<T, any, undefined>, fmap: (arg0: T) => M): IterableIterator<M | undefined>;\n//# sourceMappingURL=iterator.d.ts.map",
      "dist/json.d.ts": "/**\n * JSON utility functions.\n *\n * @module json\n */\n/**\n * Transform JavaScript object to JSON.\n *\n * @param {any} object\n * @return {string}\n */\nexport const stringify: {\n    (value: any, replacer?: ((this: any, key: string, value: any) => any) | undefined, space?: string | number | undefined): string;\n    (value: any, replacer?: (string | number)[] | null | undefined, space?: string | number | undefined): string;\n};\n/**\n * Parse JSON object.\n *\n * @param {string} json\n * @return {any}\n */\nexport const parse: (text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined) => any;\n//# sourceMappingURL=json.d.ts.map",
      "dist/logging.d.ts": "export const BOLD: symbol;\nexport const UNBOLD: symbol;\nexport const BLUE: symbol;\nexport const GREY: symbol;\nexport const GREEN: symbol;\nexport const RED: symbol;\nexport const PURPLE: symbol;\nexport const ORANGE: symbol;\nexport const UNCOLOR: symbol;\nexport function print(...args: (string | number | Object | Symbol)[]): void;\nexport function warn(...args: (string | number | Object | Symbol)[]): void;\nexport function printError(err: Error): void;\nexport function printImg(url: string, height: number): void;\nexport function printImgBase64(base64: string, height: number): void;\nexport function group(...args: (string | number | Object | Symbol)[]): void;\nexport function groupCollapsed(...args: (string | number | Object | Symbol)[]): void;\nexport function groupEnd(): void;\nexport function printDom(createNode: () => Node): void;\nexport function printCanvas(canvas: HTMLCanvasElement, height: number): void;\nexport const vconsoles: Set<any>;\nexport class VConsole {\n    /**\n     * @param {Element} dom\n     */\n    constructor(dom: Element);\n    dom: Element;\n    /**\n     * @type {Element}\n     */\n    ccontainer: Element;\n    depth: number;\n    /**\n     * @param {Array<string|Symbol|Object|number>} args\n     * @param {boolean} collapsed\n     */\n    group(args: (string | number | Object | Symbol)[], collapsed?: boolean): void;\n    /**\n     * @param {Array<string|Symbol|Object|number>} args\n     */\n    groupCollapsed(args: (string | number | Object | Symbol)[]): void;\n    groupEnd(): void;\n    /**\n     * @param {Array<string|Symbol|Object|number>} args\n     */\n    print(args: (string | number | Object | Symbol)[]): void;\n    /**\n     * @param {Error} err\n     */\n    printError(err: Error): void;\n    /**\n     * @param {string} url\n     * @param {number} height\n     */\n    printImg(url: string, height: number): void;\n    /**\n     * @param {Node} node\n     */\n    printDom(node: Node): void;\n    destroy(): void;\n}\nexport function createVConsole(dom: Element): VConsole;\nexport function createModuleLogger(moduleName: string): (...arg0: any[]) => any;\n//# sourceMappingURL=logging.d.ts.map",
      "dist/logging.test.d.ts": "export function testLogging(): void;\n//# sourceMappingURL=logging.test.d.ts.map",
      "dist/map.d.ts": "export function create(): Map<any, any>;\nexport function copy<X, Y>(m: Map<X, Y>): Map<X, Y>;\nexport function setIfUndefined<T, K>(map: Map<K, T>, key: K, createT: () => T): T;\nexport function map<K, V, R>(m: Map<K, V>, f: (arg0: V, arg1: K) => R): R[];\nexport function any<K, V>(m: Map<K, V>, f: (arg0: V, arg1: K) => boolean): boolean;\nexport function all<K, V>(m: Map<K, V>, f: (arg0: V, arg1: K) => boolean): boolean;\n//# sourceMappingURL=map.d.ts.map",
      "dist/map.test.d.ts": "export function testMap(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=map.test.d.ts.map",
      "dist/math.d.ts": "/**\n * Common Math expressions.\n *\n * @module math\n */\nexport const floor: (x: number) => number;\nexport const ceil: (x: number) => number;\nexport const abs: (x: number) => number;\nexport const imul: (x: number, y: number) => number;\nexport const round: (x: number) => number;\nexport const log10: (x: number) => number;\nexport const log2: (x: number) => number;\nexport const log: (x: number) => number;\nexport const sqrt: (x: number) => number;\nexport function add(a: number, b: number): number;\nexport function min(a: number, b: number): number;\nexport function max(a: number, b: number): number;\nexport const isNaN: (number: number) => boolean;\nexport const pow: (x: number, y: number) => number;\nexport function exp10(exp: number): number;\nexport const sign: (x: number) => number;\nexport function isNegativeZero(n: number): boolean;\n//# sourceMappingURL=math.d.ts.map",
      "dist/math.test.d.ts": "export function testMath(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=math.test.d.ts.map",
      "dist/metric.d.ts": "export const yotta: 1e+24;\nexport const zetta: 1e+21;\nexport const exa: 1000000000000000000;\nexport const peta: 1000000000000000;\nexport const tera: 1000000000000;\nexport const giga: 1000000000;\nexport const mega: 1000000;\nexport const kilo: 1000;\nexport const hecto: 100;\nexport const deca: 10;\nexport const deci: 0.1;\nexport const centi: 0.01;\nexport const milli: 0.001;\nexport const micro: 0.000001;\nexport const nano: 1e-9;\nexport const pico: 1e-12;\nexport const femto: 1e-15;\nexport const atto: 1e-18;\nexport const zepto: 1e-21;\nexport const yocto: 1e-24;\nexport function prefix(n: number, baseMultiplier?: number | undefined): {\n    n: number;\n    prefix: string;\n};\n//# sourceMappingURL=metric.d.ts.map",
      "dist/metric.test.d.ts": "export function testMetricPrefix(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=metric.test.d.ts.map",
      "dist/mutex.d.ts": "export function createMutex(): mutex;\nexport type mutex = (cb: () => void, elseCb?: () => void) => any;\n//# sourceMappingURL=mutex.d.ts.map",
      "dist/number.d.ts": "export const MAX_SAFE_INTEGER: number;\nexport const MIN_SAFE_INTEGER: number;\nexport const LOWEST_INT32: number;\n/**\n * @type {number}\n */\nexport const HIGHEST_INT32: number;\n/**\n * @module number\n */\nexport const isInteger: (number: number) => boolean;\nexport const isNaN: (number: number) => boolean;\n//# sourceMappingURL=number.d.ts.map",
      "dist/number.test.d.ts": "export function testNumber(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=number.test.d.ts.map",
      "dist/object.d.ts": "export function create(): {\n    [x: string]: any;\n};\n/**\n * Object.assign\n */\nexport const assign: {\n    <T, U>(target: T, source: U): T & U;\n    <T_1, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V;\n    <T_2, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W;\n    (target: object, ...sources: any[]): any;\n};\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys: {\n    (o: object): string[];\n    (o: {}): string[];\n};\nexport function forEach(obj: {\n    [x: string]: any;\n}, f: (arg0: any, arg1: string) => any): void;\nexport function map<R>(obj: {\n    [x: string]: any;\n}, f: (arg0: any, arg1: string) => R): R[];\nexport function length(obj: {\n    [x: string]: any;\n}): number;\nexport function some(obj: {\n    [x: string]: any;\n}, f: (arg0: any, arg1: string) => boolean): boolean;\nexport function every(obj: {\n    [x: string]: any;\n}, f: (arg0: any, arg1: string) => boolean): boolean;\nexport function hasProperty(obj: any, key: string | symbol): boolean;\nexport function equalFlat(a: {\n    [x: string]: any;\n}, b: {\n    [x: string]: any;\n}): boolean;\n//# sourceMappingURL=object.d.ts.map",
      "dist/object.test.d.ts": "export function testObject(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=object.test.d.ts.map",
      "dist/observable.d.ts": "/**\n * Handles named events.\n *\n * @template N\n */\nexport class Observable<N> {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    _observers: Map<N, any>;\n    /**\n     * @param {N} name\n     * @param {function} f\n     */\n    on(name: N, f: Function): void;\n    /**\n     * @param {N} name\n     * @param {function} f\n     */\n    once(name: N, f: Function): void;\n    /**\n     * @param {N} name\n     * @param {function} f\n     */\n    off(name: N, f: Function): void;\n    /**\n     * Emit a named event. All registered event listeners that listen to the\n     * specified name will receive the event.\n     *\n     * @todo This should catch exceptions\n     *\n     * @param {N} name The event name.\n     * @param {Array<any>} args The arguments that are applied to the event listener.\n     */\n    emit(name: N, args: any[]): void;\n    destroy(): void;\n}\n//# sourceMappingURL=observable.d.ts.map",
      "dist/pair.d.ts": "/**\n * Working with value pairs.\n *\n * @module pair\n */\n/**\n * @template L,R\n */\nexport class Pair<L, R> {\n    /**\n     * @param {L} left\n     * @param {R} right\n     */\n    constructor(left: L, right: R);\n    left: L;\n    right: R;\n}\nexport function create<L, R>(left: L, right: R): Pair<L, R>;\nexport function createReversed<L, R>(right: R, left: L): Pair<L, R>;\nexport function forEach<L, R>(arr: Pair<L, R>[], f: (arg0: L, arg1: R) => any): void;\nexport function map<L, R, X>(arr: Pair<L, R>[], f: (arg0: L, arg1: R) => X): X[];\n//# sourceMappingURL=pair.d.ts.map",
      "dist/pair.test.d.ts": "export function testPair(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=pair.test.d.ts.map",
      "dist/prng/Mt19937.d.ts": "/**\n * This is a port of Shawn Cokus's implementation of the original Mersenne Twister algorithm (http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/MTARCOK/mt19937ar-cok.c).\n * MT has a very high period of 2^19937. Though the authors of xorshift describe that a high period is not\n * very relevant (http://vigna.di.unimi.it/xorshift/). It is four times slower than xoroshiro128plus and\n * needs to recompute its state after generating 624 numbers.\n *\n * ```js\n * const gen = new Mt19937(new Date().getTime())\n * console.log(gen.next())\n * ```\n *\n * @public\n */\nexport class Mt19937 {\n    /**\n     * @param {number} seed Unsigned 32 bit number\n     */\n    constructor(seed: number);\n    seed: number;\n    _state: Uint32Array;\n    _i: number;\n    /**\n     * Generate a random signed integer.\n     *\n     * @return {Number} A 32 bit signed integer.\n     */\n    next(): number;\n}\n//# sourceMappingURL=Mt19937.d.ts.map",
      "dist/prng/Xoroshiro128plus.d.ts": "/**\n * This is a variant of xoroshiro128plus - the fastest full-period generator passing BigCrush without systematic failures.\n *\n * This implementation follows the idea of the original xoroshiro128plus implementation,\n * but is optimized for the JavaScript runtime. I.e.\n * * The operations are performed on 32bit integers (the original implementation works with 64bit values).\n * * The initial 128bit state is computed based on a 32bit seed and Xorshift32.\n * * This implementation returns two 32bit values based on the 64bit value that is computed by xoroshiro128plus.\n *   Caution: The last addition step works slightly different than in the original implementation - the add carry of the\n *   first 32bit addition is not carried over to the last 32bit.\n *\n * [Reference implementation](http://vigna.di.unimi.it/xorshift/xoroshiro128plus.c)\n */\nexport class Xoroshiro128plus {\n    /**\n     * @param {number} seed Unsigned 32 bit number\n     */\n    constructor(seed: number);\n    seed: number;\n    state: Uint32Array;\n    _fresh: boolean;\n    /**\n     * @return {number} Float/Double in [0,1)\n     */\n    next(): number;\n}\n//# sourceMappingURL=Xoroshiro128plus.d.ts.map",
      "dist/prng/Xorshift32.d.ts": "/**\n * Xorshift32 is a very simple but elegang PRNG with a period of `2^32-1`.\n */\nexport class Xorshift32 {\n    /**\n     * @param {number} seed Unsigned 32 bit number\n     */\n    constructor(seed: number);\n    seed: number;\n    /**\n     * @type {number}\n     */\n    _state: number;\n    /**\n     * Generate a random signed integer.\n     *\n     * @return {Number} A 32 bit signed integer.\n     */\n    next(): number;\n}\n//# sourceMappingURL=Xorshift32.d.ts.map",
      "dist/prng.d.ts": "/**\n * Description of the function\n *  @callback generatorNext\n *  @return {number} A 32bit integer\n */\n/**\n * A random type generator.\n *\n * @typedef {Object} PRNG\n * @property {generatorNext} next Generate new number\n */\nexport const DefaultPRNG: typeof Xoroshiro128plus;\nexport function create(seed: number): PRNG;\nexport function bool(gen: PRNG): boolean;\nexport function int53(gen: PRNG, min: number, max: number): number;\nexport function uint53(gen: PRNG, min: number, max: number): number;\nexport function int32(gen: PRNG, min: number, max: number): number;\nexport function uint32(gen: PRNG, min: number, max: number): number;\nexport function int31(gen: PRNG, min: number, max: number): number;\nexport function real53(gen: PRNG): number;\nexport function char(gen: PRNG): string;\nexport function letter(gen: PRNG): string;\nexport function word(gen: PRNG, minLen?: number | undefined, maxLen?: number | undefined): string;\nexport function utf16Rune(gen: PRNG): string;\nexport function utf16String(gen: PRNG, maxlen?: number | undefined): string;\nexport function oneOf<T>(gen: PRNG, array: T[]): T;\nexport function uint8Array(gen: PRNG, len: number): Uint8Array;\nexport function uint16Array(gen: PRNG, len: number): Uint16Array;\nexport function uint32Array(gen: PRNG, len: number): Uint32Array;\n/**\n * Description of the function\n */\nexport type generatorNext = () => number;\n/**\n * A random type generator.\n */\nexport type PRNG = {\n    /**\n     * Generate new number\n     */\n    next: generatorNext;\n};\nimport { Xoroshiro128plus } from \"./prng/Xoroshiro128plus.js\";\n//# sourceMappingURL=prng.d.ts.map",
      "dist/prng.test.d.ts": "export function testGeneratorXoroshiro128plus(tc: t.TestCase): void;\nexport function testGeneratorXorshift32(tc: t.TestCase): void;\nexport function testGeneratorMt19937(tc: t.TestCase): void;\nexport function testNumberDistributions(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=prng.test.d.ts.map",
      "dist/promise.d.ts": "export function create<T>(f: (arg0: PromiseResolve<T>, arg1: (arg0: Error) => void) => any): Promise<T>;\nexport function createEmpty(f: (arg0: () => void, arg1: (arg0: Error) => void) => void): Promise<void>;\nexport function all<T>(arrp: Promise<T>[]): Promise<T[]>;\nexport function reject(reason?: Error | undefined): Promise<never>;\nexport function resolve<T>(res: void | T): Promise<void | T>;\nexport function until(timeout: number, check: () => boolean, intervalResolution?: number | undefined): Promise<void>;\nexport function wait(timeout: number): Promise<undefined>;\nexport function isPromise(p: any): boolean;\nexport type PromiseResolve<T> = (result?: T | PromiseLike<T>) => any;\n//# sourceMappingURL=promise.d.ts.map",
      "dist/promise.test.d.ts": "export function testRepeatPromise(tc: t.TestCase): Promise<void>;\nexport function testispromise(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=promise.test.d.ts.map",
      "dist/queue.d.ts": "export class QueueNode {\n    /**\n     * @type {QueueNode|null}\n     */\n    next: QueueNode | null;\n}\nexport class Queue {\n    /**\n     * @type {QueueNode | null}\n     */\n    start: QueueNode | null;\n    /**\n     * @type {QueueNode | null}\n     */\n    end: QueueNode | null;\n}\nexport function create(): Queue;\nexport function isEmpty(queue: Queue): boolean;\nexport function enqueue(queue: Queue, n: QueueNode): void;\nexport function dequeue(queue: Queue): QueueNode | null;\n//# sourceMappingURL=queue.d.ts.map",
      "dist/queue.test.d.ts": "export function testEnqueueDequeue(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=queue.test.d.ts.map",
      "dist/random.d.ts": "export const rand: () => number;\nexport function uint32(): number;\nexport function oneOf<T>(arr: T[]): T;\nexport function uuidv4(): any;\n//# sourceMappingURL=random.d.ts.map",
      "dist/random.test.d.ts": "export function testUint32(tc: t.TestCase): void;\nexport function testUuidv4(tc: t.TestCase): void;\nexport function testUuidv4Overlaps(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=random.test.d.ts.map",
      "dist/rollup.config.d.ts": "declare var _default: ({\n    input: string;\n    output: {\n        file: string;\n        format: string;\n        sourcemap: boolean;\n        dir?: undefined;\n        entryFileNames?: undefined;\n        chunkFileNames?: undefined;\n    };\n    plugins: import(\"rollup\").Plugin[];\n    external?: undefined;\n} | {\n    input: string[];\n    output: {\n        dir: string;\n        format: string;\n        sourcemap: boolean;\n        entryFileNames: string;\n        chunkFileNames: string;\n        file?: undefined;\n    };\n    external: string[];\n    plugins?: undefined;\n} | {\n    input: string;\n    output: {\n        dir: string;\n        format: string;\n        sourcemap: boolean;\n        entryFileNames: string;\n        chunkFileNames: string;\n        file?: undefined;\n    };\n    external: string[];\n    plugins?: undefined;\n})[];\nexport default _default;\n//# sourceMappingURL=rollup.config.d.ts.map",
      "dist/set.d.ts": "export function create(): Set<any>;\nexport function toArray<T>(set: Set<T>): T[];\n//# sourceMappingURL=set.d.ts.map",
      "dist/set.test.d.ts": "//# sourceMappingURL=set.test.d.ts.map",
      "dist/sort.d.ts": "export function _insertionSort<T>(arr: T[], lo: number, hi: number, compare: (arg0: T, arg1: T) => number): void;\nexport function insertionSort<T>(arr: T[], compare: (arg0: T, arg1: T) => number): void;\nexport function quicksort<T>(arr: T[], compare: (arg0: T, arg1: T) => number): void;\n//# sourceMappingURL=sort.d.ts.map",
      "dist/sort.test.d.ts": "export function testSortUint16(tc: t.TestCase): void;\nexport function testSortUint32(tc: t.TestCase): void;\nexport function testSortObjectUint32(tc: t.TestCase): void;\nexport function testListVsArrayPerformance(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=sort.test.d.ts.map",
      "dist/statistics.d.ts": "export function median(arr: number[]): number;\nexport function average(arr: number[]): number;\n//# sourceMappingURL=statistics.d.ts.map",
      "dist/statistics.test.d.ts": "export function testMedian(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=statistics.test.d.ts.map",
      "dist/storage.d.ts": "/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage: any;\n//# sourceMappingURL=storage.d.ts.map",
      "dist/string.d.ts": "/**\n * Utility module to work with strings.\n *\n * @module string\n */\nexport const fromCharCode: (...codes: number[]) => string;\nexport const fromCodePoint: (...codePoints: number[]) => string;\nexport function trimLeft(s: string): string;\nexport function fromCamelCase(s: string, separator: string): string;\nexport function utf8ByteLength(str: string): number;\nexport function _encodeUtf8Polyfill(str: string): Uint8Array;\nexport const utf8TextEncoder: TextEncoder;\nexport function _encodeUtf8Native(str: string): Uint8Array;\nexport function encodeUtf8(str: string): Uint8Array;\nexport function _decodeUtf8Polyfill(buf: Uint8Array): string;\nexport let utf8TextDecoder: TextDecoder | null;\nexport function _decodeUtf8Native(buf: Uint8Array): string;\nexport function decodeUtf8(buf: Uint8Array): string;\n//# sourceMappingURL=string.d.ts.map",
      "dist/string.test.d.ts": "export function testLowercaseTransformation(tc: t.TestCase): void;\nexport function testRepeatStringUtf8Encoding(tc: t.TestCase): void;\nexport function testRepeatStringUtf8Decoding(tc: t.TestCase): void;\nexport function testBomEncodingDecoding(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=string.test.d.ts.map",
      "dist/symbol.d.ts": "/**\n * Utility module to work with EcmaScript Symbols.\n *\n * @module symbol\n */\n/**\n * Return fresh symbol.\n *\n * @return {Symbol}\n */\nexport const create: SymbolConstructor;\nexport function isSymbol(s: any): boolean;\n//# sourceMappingURL=symbol.d.ts.map",
      "dist/test.d.ts": "export {};\n//# sourceMappingURL=test.d.ts.map",
      "dist/testing.d.ts": "export { production } from \"./environment.js\";\nexport const extensive: boolean;\nexport const envSeed: number | null;\nexport class TestCase {\n    /**\n     * @param {string} moduleName\n     * @param {string} testName\n     */\n    constructor(moduleName: string, testName: string);\n    /**\n     * @type {string}\n     */\n    moduleName: string;\n    /**\n     * @type {string}\n     */\n    testName: string;\n    _seed: number | null;\n    _prng: prng.PRNG | null;\n    resetSeed(): void;\n    /**\n     * @type {number}\n     */\n    get seed(): number;\n    /**\n     * A PRNG for this test case. Use only this PRNG for randomness to make the test case reproducible.\n     *\n     * @type {prng.PRNG}\n     */\n    get prng(): prng.PRNG;\n}\nexport const repititionTime: number;\nexport function run(moduleName: string, name: string, f: (arg0: TestCase) => void | Promise<any>, i: number, numberOfTests: number): Promise<boolean>;\nexport function describe(description: string, info?: string): void;\nexport function info(info: string): void;\nexport const printDom: (createNode: () => Node) => void;\nexport const printCanvas: (canvas: HTMLCanvasElement, height: number) => void;\nexport function group(description: string, f: (arg0: void) => void): void;\nexport function groupAsync(description: string, f: (arg0: void) => Promise<any>): Promise<void>;\nexport function measureTime(message: string, f: () => void): number;\nexport function measureTimeAsync(message: string, f: () => Promise<any>): Promise<number>;\nexport function compareArrays<T>(as: T[], bs: T[], m?: string | undefined): boolean;\nexport function compareStrings(a: string, b: string, m?: string | undefined): void;\nexport function compareObjects<K, V>(a: any, b: any, m?: string | undefined): void;\nexport function compare<T>(a: T, b: T, message?: string | null | undefined, customCompare?: ((arg0: any, arg1: T, arg2: T, arg3: string, arg4: any) => boolean) | undefined): boolean;\nexport function assert(condition: boolean, message?: string | null | undefined): true;\nexport function fails(f: () => void): void;\nexport function runTests(tests: {\n    [x: string]: {\n        [x: string]: (arg0: TestCase) => void | Promise<any>;\n    };\n}): Promise<boolean>;\nexport function fail(reason: string): never;\nexport function skip(cond?: boolean): void;\nimport * as prng from \"./prng.js\";\n//# sourceMappingURL=testing.d.ts.map",
      "dist/testing.test.d.ts": "export function testComparing(tc: t.TestCase): void;\nexport function testFailing(): void;\nexport function testSkipping(): void;\nexport function testAsync(): Promise<void>;\nexport function testRepeatRepitition(): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=testing.test.d.ts.map",
      "dist/time.d.ts": "export function getDate(): Date;\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime: () => number;\nexport function humanizeDuration(d: number): string;\n//# sourceMappingURL=time.d.ts.map",
      "dist/time.test.d.ts": "export function testTime(tc: t.TestCase): void;\nexport function testHumanDuration(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=time.test.d.ts.map",
      "dist/tree.d.ts": "/**\n * This is a Red Black Tree implementation\n *\n * @template K,V\n */\nexport class Tree<K, V> {\n    root: any;\n    length: number;\n    /**\n     * @param {K} id\n     */\n    findNext(id: K): V;\n    /**\n     * @param {K} id\n     */\n    findPrev(id: K): V;\n    /**\n     * @param {K} from\n     */\n    findNodeWithLowerBound(from: K): any;\n    /**\n     * @param {K} to\n     */\n    findNodeWithUpperBound(to: K): any;\n    /**\n     * @return {V}\n     */\n    findSmallestNode(): V;\n    /**\n     * @param {K} from\n     * @return {V}\n     */\n    findWithLowerBound(from: K): V;\n    /**\n     * @param {K} to\n     * @return {V}\n     */\n    findWithUpperBound(to: K): V;\n    /**\n     * @param {K} from\n     * @param {V} from\n     * @param {function(V):void} f\n     */\n    iterate(from: K, to: any, f: (arg0: V) => void): void;\n    /**\n     * @param {K} id\n     * @return {V|null}\n     */\n    find(id: K): V | null;\n    /**\n     * @param {K} id\n     * @return {N<V>|null}\n     */\n    findNode(id: K): any;\n    /**\n     * @param {K} id\n     */\n    delete(id: K): void;\n    _fixDelete(n: any): void;\n    put(v: any): any;\n    _fixInsert(n: any): void;\n}\n//# sourceMappingURL=tree.d.ts.map",
      "dist/tree.test.d.ts": "//# sourceMappingURL=tree.test.d.ts.map",
      "dist/url.d.ts": "export function decodeQueryParams(url: string): {\n    [x: string]: string;\n};\nexport function encodeQueryParams(params: {\n    [x: string]: string;\n}): string;\n//# sourceMappingURL=url.d.ts.map",
      "dist/url.test.d.ts": "export function testUrlParamQuery(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=url.test.d.ts.map",
      "dist/websocket.d.ts": "/**\n * @extends Observable<string>\n */\nexport class WebsocketClient extends Observable<string> {\n    /**\n     * @param {string} url\n     * @param {object} [opts]\n     * @param {'arraybuffer' | 'blob' | null} [opts.binaryType] Set `ws.binaryType`\n     */\n    constructor(url: string, { binaryType }?: {\n        binaryType?: \"arraybuffer\" | \"blob\" | null;\n    } | undefined);\n    url: string;\n    /**\n     * @type {WebSocket?}\n     */\n    ws: WebSocket | null;\n    binaryType: \"arraybuffer\" | \"blob\" | null;\n    connected: boolean;\n    connecting: boolean;\n    unsuccessfulReconnects: number;\n    lastMessageReceived: number;\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    shouldConnect: boolean;\n    _checkInterval: NodeJS.Timeout;\n    /**\n     * @param {any} message\n     */\n    send(message: any): void;\n    disconnect(): void;\n    connect(): void;\n}\nimport { Observable } from \"./observable.js\";\n//# sourceMappingURL=websocket.d.ts.map",
      "dom.d.ts": "/**\n * @type {Document}\n */\nexport const doc: Document;\nexport function createElement(name: string): HTMLElement;\nexport function createDocumentFragment(): DocumentFragment;\nexport function createTextNode(text: string): Text;\nexport const domParser: DOMParser;\nexport function emitCustomEvent(el: HTMLElement, name: string, opts: Object): boolean;\nexport function setAttributes(el: Element, attrs: pair.Pair<string, string | boolean>[]): Element;\nexport function setAttributesMap(el: Element, attrs: Map<string, string>): Element;\nexport function fragment(children: HTMLCollection | Node[]): DocumentFragment;\nexport function append(parent: Element, nodes: Node[]): Element;\nexport function remove(el: HTMLElement): void;\nexport function addEventListener(el: EventTarget, name: string, f: EventListener): void;\nexport function removeEventListener(el: EventTarget, name: string, f: EventListener): void;\nexport function addEventListeners(node: Node, listeners: pair.Pair<string, EventListener>[]): Node;\nexport function removeEventListeners(node: Node, listeners: pair.Pair<string, EventListener>[]): Node;\nexport function element(name: string, attrs?: (pair.Pair<string, string> | pair.Pair<string, boolean>)[], children?: Node[]): Element;\nexport function canvas(width: number, height: number): HTMLCanvasElement;\nexport function text(text: string): Text;\nexport function pairToStyleString(pair: pair.Pair<string, string>): string;\nexport function pairsToStyleString(pairs: pair.Pair<string, string>[]): string;\nexport function mapToStyleString(m: Map<string, string>): string;\nexport function querySelector(el: HTMLElement | ShadowRoot, query: string): HTMLElement | null;\nexport function querySelectorAll(el: HTMLElement | ShadowRoot, query: string): NodeListOf<HTMLElement>;\nexport function getElementById(id: string): HTMLElement;\nexport function parseFragment(html: string): DocumentFragment;\nexport function parseElement(html: string): HTMLElement;\nexport function replaceWith(oldEl: HTMLElement, newEl: HTMLElement | DocumentFragment): void;\nexport function insertBefore(parent: HTMLElement, el: HTMLElement, ref: Node | null): HTMLElement;\nexport function appendChild(parent: Node, child: Node): Node;\nexport const ELEMENT_NODE: number;\nexport const TEXT_NODE: number;\nexport const CDATA_SECTION_NODE: number;\nexport const COMMENT_NODE: number;\nexport const DOCUMENT_NODE: number;\nexport const DOCUMENT_TYPE_NODE: number;\nexport const DOCUMENT_FRAGMENT_NODE: number;\nexport function checkNodeType(node: any, type: number): boolean;\nexport function isParentOf(parent: Node, child: HTMLElement): boolean;\nimport * as pair from \"./pair.js\";\n//# sourceMappingURL=dom.d.ts.map",
      "encoding.d.ts": "/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nexport class Encoder {\n    cpos: number;\n    cbuf: Uint8Array;\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    bufs: Array<Uint8Array>;\n}\nexport function createEncoder(): Encoder;\nexport function length(encoder: Encoder): number;\nexport function toUint8Array(encoder: Encoder): Uint8Array;\nexport function write(encoder: Encoder, num: number): void;\nexport function set(encoder: Encoder, pos: number, num: number): void;\nexport function writeUint8(encoder: Encoder, num: number): void;\nexport function setUint8(encoder: Encoder, pos: number, num: number): void;\nexport function writeUint16(encoder: Encoder, num: number): void;\nexport function setUint16(encoder: Encoder, pos: number, num: number): void;\nexport function writeUint32(encoder: Encoder, num: number): void;\nexport function writeUint32BigEndian(encoder: Encoder, num: number): void;\nexport function setUint32(encoder: Encoder, pos: number, num: number): void;\nexport function writeVarUint(encoder: Encoder, num: number): void;\nexport function writeVarInt(encoder: Encoder, num: number): void;\nexport function writeVarString(encoder: Encoder, str: string): void;\nexport function writeBinaryEncoder(encoder: Encoder, append: Encoder): void;\nexport function writeUint8Array(encoder: Encoder, uint8Array: Uint8Array): void;\nexport function writeVarUint8Array(encoder: Encoder, uint8Array: Uint8Array): void;\nexport function writeOnDataView(encoder: Encoder, len: number): DataView;\nexport function writeFloat32(encoder: Encoder, num: number): void;\nexport function writeFloat64(encoder: Encoder, num: number): void;\nexport function writeBigInt64(encoder: Encoder, num: bigint): any;\nexport function writeBigUint64(encoder: Encoder, num: bigint): any;\nexport function writeAny(encoder: Encoder, data: string | number | bigint | boolean | any[] | Uint8Array | {\n    [x: string]: any;\n} | null | undefined): void;\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nexport class RleEncoder<T> extends Encoder {\n    /**\n     * @param {function(Encoder, T):void} writer\n     */\n    constructor(writer: (arg0: Encoder, arg1: T) => void);\n    /**\n     * The writer\n     */\n    w: (arg0: Encoder, arg1: T) => void;\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    s: T | null;\n    count: number;\n    /**\n     * @param {T} v\n     */\n    write(v: T): void;\n}\n/**\n * Basic diff decoder using variable length encoding.\n *\n * Encodes the values [3, 1100, 1101, 1050, 0] to [3, 1097, 1, -51, -1050] using writeVarInt.\n */\nexport class IntDiffEncoder extends Encoder {\n    /**\n     * @param {number} start\n     */\n    constructor(start: number);\n    /**\n     * Current state\n     * @type {number}\n     */\n    s: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n}\n/**\n * A combination of IntDiffEncoder and RleEncoder.\n *\n * Basically first writes the IntDiffEncoder and then counts duplicate diffs using RleEncoding.\n *\n * Encodes the values [1,1,1,2,3,4,5,6] as [1,1,0,2,1,5] (RLE([1,0,0,1,1,1,1,1]) ⇒ RleIntDiff[1,1,0,2,1,5])\n */\nexport class RleIntDiffEncoder extends Encoder {\n    /**\n     * @param {number} start\n     */\n    constructor(start: number);\n    /**\n     * Current state\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n}\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nexport class UintOptRleEncoder {\n    encoder: Encoder;\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n    toUint8Array(): Uint8Array;\n}\n/**\n * Increasing Uint Optimized RLE Encoder\n *\n * The RLE encoder counts the number of same occurences of the same value.\n * The IncUintOptRle encoder counts if the value increases.\n * I.e. 7, 8, 9, 10 will be encoded as [-7, 4]. 1, 3, 5 will be encoded\n * as [1, 3, 5].\n */\nexport class IncUintOptRleEncoder {\n    encoder: Encoder;\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n    toUint8Array(): Uint8Array;\n}\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nexport class IntDiffOptRleEncoder {\n    encoder: Encoder;\n    /**\n     * @type {number}\n     */\n    s: number;\n    count: number;\n    diff: number;\n    /**\n     * @param {number} v\n     */\n    write(v: number): void;\n    toUint8Array(): Uint8Array;\n}\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nexport class StringEncoder {\n    /**\n     * @type {Array<string>}\n     */\n    sarr: Array<string>;\n    s: string;\n    lensE: UintOptRleEncoder;\n    /**\n     * @param {string} string\n     */\n    write(string: string): void;\n    toUint8Array(): Uint8Array;\n}\n//# sourceMappingURL=encoding.d.ts.map",
      "encoding.test.d.ts": "export function testGolangBinaryEncodingCompatibility(): void;\nexport function testStringDecodingPerformance(): void;\nexport function testAnyEncodeUnknowns(tc: t.TestCase): void;\nexport function testAnyEncodeDate(tc: t.TestCase): void;\nexport function testEncodeMax32bitUint(tc: t.TestCase): void;\nexport function testVarUintEncoding(tc: t.TestCase): void;\nexport function testVarIntEncoding(tc: t.TestCase): void;\nexport function testRepeatVarUintEncoding(tc: t.TestCase): void;\nexport function testRepeatVarIntEncoding(tc: t.TestCase): void;\nexport function testRepeatAnyEncoding(tc: t.TestCase): void;\nexport function testRepeatPeekVarUintEncoding(tc: t.TestCase): void;\nexport function testRepeatPeekVarIntEncoding(tc: t.TestCase): void;\nexport function testAnyVsJsonEncoding(tc: t.TestCase): void;\nexport function testStringEncoding(tc: t.TestCase): void;\nexport function testRepeatStringEncoding(tc: t.TestCase): void;\nexport function testSetMethods(tc: t.TestCase): void;\nexport function testRepeatRandomWrites(tc: t.TestCase): void;\nexport function testWriteUint8ArrayOverflow(tc: t.TestCase): void;\nexport function testSetOnOverflow(tc: t.TestCase): void;\nexport function testCloneDecoder(tc: t.TestCase): void;\nexport function testWriteBinaryEncoder(tc: t.TestCase): void;\nexport function testOverflowStringDecoding(tc: t.TestCase): void;\nexport function testRleEncoder(tc: t.TestCase): void;\nexport function testRleIntDiffEncoder(tc: t.TestCase): void;\nexport function testIntDiffRleEncoder(tc: t.TestCase): void;\nexport function testIntEncoders(tc: t.TestCase): void;\nexport function testIntDiffEncoder(tc: t.TestCase): void;\nexport function testStringDecoder(tc: t.TestCase): void;\nexport type EncodingPair = {\n    read: (arg0: decoding.Decoder) => any;\n    write: (arg0: encoding.Encoder, arg1: any) => void;\n    gen: (arg0: prng.PRNG) => any;\n    compare: (arg0: any, arg1: any) => boolean;\n    name: string;\n};\nimport * as t from \"./testing.js\";\nimport * as decoding from \"./decoding.js\";\nimport * as encoding from \"./encoding.js\";\nimport * as prng from \"./prng.js\";\n//# sourceMappingURL=encoding.test.d.ts.map",
      "environment.d.ts": "export const isNode: boolean;\nexport const isBrowser: boolean;\nexport const isMac: boolean;\nexport function hasParam(name: string): boolean;\nexport function getParam(name: string, defaultVal: string): string;\nexport function getVariable(name: string): string | null;\nexport function getConf(name: string): string | null;\nexport function hasConf(name: string): boolean;\nexport const production: boolean;\n//# sourceMappingURL=environment.d.ts.map",
      "environment.test.d.ts": "//# sourceMappingURL=environment.test.d.ts.map",
      "error.d.ts": "export function create(s: string): Error;\nexport function methodUnimplemented(): never;\nexport function unexpectedCase(): never;\n//# sourceMappingURL=error.d.ts.map",
      "eventloop.d.ts": "export function enqueue(f: () => void): void;\nexport function timeout(timeout: number, callback: Function): TimeoutObject;\nexport function interval(timeout: number, callback: Function): TimeoutObject;\nexport const Animation: {\n    new (timeoutId: number): {\n        _: number;\n        destroy(): void;\n    };\n};\nexport function animationFrame(cb: (arg0: number) => void): TimeoutObject;\nexport function idleCallback(cb: Function): TimeoutObject;\nexport function createDebouncer(timeout: number): (arg0: () => void) => void;\nexport type TimeoutObject = {\n    destroy: Function;\n};\n//# sourceMappingURL=eventloop.d.ts.map",
      "eventloop.test.d.ts": "export function testEventloopOrder(tc: t.TestCase): Promise<void[]>;\nexport function testTimeout(tc: t.TestCase): Promise<void>;\nexport function testInterval(tc: t.TestCase): Promise<void>;\nexport function testAnimationFrame(tc: t.TestCase): Promise<void>;\nexport function testIdleCallback(tc: t.TestCase): Promise<void>;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=eventloop.test.d.ts.map",
      "function.d.ts": "export function callAll(fs: Function[], args: any[], i?: number): void;\nexport function nop(): void;\nexport function apply<T>(f: () => T): T;\nexport function id<A>(a: A): A;\nexport function equalityStrict<T>(a: T, b: T): boolean;\nexport function equalityFlat<T>(a: object | T[], b: object | T[]): boolean;\nexport function equalityDeep(a: any, b: any): boolean;\n//# sourceMappingURL=function.d.ts.map",
      "function.test.d.ts": "export function testDeepEquality(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=function.test.d.ts.map",
      "index.d.ts": "import * as array from \"./array.js\";\nimport * as binary from \"./binary.js\";\nimport * as broadcastchannel from \"./broadcastchannel.js\";\nimport * as buffer from \"./buffer.js\";\nimport * as conditions from \"./conditions.js\";\nimport * as decoding from \"./decoding.js\";\nimport * as diff from \"./diff.js\";\nimport * as dom from \"./dom.js\";\nimport * as encoding from \"./encoding.js\";\nimport * as environment from \"./environment.js\";\nimport * as error from \"./error.js\";\nimport * as eventloop from \"./eventloop.js\";\nimport * as func from \"./function.js\";\nimport * as indexeddb from \"./indexeddb.js\";\nimport * as iterator from \"./iterator.js\";\nimport * as json from \"./json.js\";\nimport * as logging from \"./logging.js\";\nimport * as map from \"./map.js\";\nimport * as math from \"./math.js\";\nimport * as mutex from \"./mutex.js\";\nimport * as number from \"./number.js\";\nimport * as object from \"./object.js\";\nimport * as pair from \"./pair.js\";\nimport * as prng from \"./prng.js\";\nimport * as promise from \"./promise.js\";\nimport * as set from \"./set.js\";\nimport * as sort from \"./sort.js\";\nimport * as statistics from \"./statistics.js\";\nimport * as string from \"./string.js\";\nimport * as symbol from \"./symbol.js\";\nimport * as time from \"./time.js\";\nimport * as tree from \"./tree.js\";\nimport * as websocket from \"./websocket.js\";\nexport { array, binary, broadcastchannel, buffer, conditions, decoding, diff, dom, encoding, environment, error, eventloop, func, indexeddb, iterator, json, logging, map, math, mutex, number, object, pair, prng, promise, set, sort, statistics, string, symbol, time, tree, websocket };\n//# sourceMappingURL=index.d.ts.map",
      "indexeddb.d.ts": "export function rtop(request: IDBRequest<any>): Promise<any>;\nexport function openDB(name: string, initDB: (arg0: IDBDatabase) => any): Promise<IDBDatabase>;\nexport function deleteDB(name: string): Promise<any>;\nexport function createStores(db: IDBDatabase, definitions: (string[] | (string | IDBObjectStoreParameters | undefined)[])[]): void;\nexport function transact(db: IDBDatabase, stores: string[], access?: \"readonly\" | \"readwrite\" | undefined): IDBObjectStore[];\nexport function count(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<number>;\nexport function get(store: IDBObjectStore, key: string | number | any[] | Date | ArrayBuffer): Promise<string | number | any[] | Date | ArrayBuffer>;\nexport function del(store: IDBObjectStore, key: string | number | any[] | Date | ArrayBuffer | IDBKeyRange): Promise<any>;\nexport function put(store: IDBObjectStore, item: string | number | boolean | Date | ArrayBuffer, key?: string | number | any[] | Date | ArrayBuffer | undefined): Promise<any>;\nexport function add(store: IDBObjectStore, item: string | number | boolean | Date | ArrayBuffer, key: string | number | any[] | Date | ArrayBuffer): Promise<any>;\nexport function addAutoKey(store: IDBObjectStore, item: string | number | Date | ArrayBuffer): Promise<number>;\nexport function getAll(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<any[]>;\nexport function getAllKeys(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<any[]>;\nexport function queryFirst(store: IDBObjectStore, query: IDBKeyRange | null, direction: IDBCursorDirection): Promise<any>;\nexport function getLastKey(store: IDBObjectStore): Promise<any>;\nexport function getFirstKey(store: IDBObjectStore): Promise<any>;\nexport function getAllKeysValues(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<KeyValuePair[]>;\nexport function iterate(store: IDBObjectStore, keyrange: IDBKeyRange | null, f: (arg0: any, arg1: any) => boolean | void, direction?: IDBCursorDirection): Promise<void>;\nexport function iterateKeys(store: IDBObjectStore, keyrange: IDBKeyRange | null, f: (arg0: any) => boolean | void, direction?: IDBCursorDirection): Promise<void>;\nexport function getStore(t: IDBTransaction, store: string): IDBObjectStore;\nexport function createIDBKeyRangeBound(lower: any, upper: any, lowerOpen: boolean, upperOpen: boolean): IDBKeyRange;\nexport function createIDBKeyRangeUpperBound(upper: any, upperOpen: boolean): IDBKeyRange;\nexport function createIDBKeyRangeLowerBound(lower: any, lowerOpen: boolean): IDBKeyRange;\nexport type KeyValuePair = {\n    /**\n     * key\n     */\n    k: any;\n    /**\n     * Value\n     */\n    v: any;\n};\n//# sourceMappingURL=indexeddb.d.ts.map",
      "indexeddb.test.d.ts": "export function testRetrieveElements(): Promise<void>;\n//# sourceMappingURL=indexeddb.test.d.ts.map",
      "isomorphic.d.ts": "export const performance: any;\nexport const cryptoRandomBuffer: any;\n//# sourceMappingURL=isomorphic.d.ts.map",
      "iterator.d.ts": "export function mapIterator<T, R>(iterator: Iterator<T, any, undefined>, f: (arg0: T) => R): IterableIterator<R>;\nexport function createIterator<T>(next: () => IteratorResult<T, any>): IterableIterator<T>;\nexport function iteratorFilter<T>(iterator: Iterator<T, any, undefined>, filter: (arg0: T) => boolean): IterableIterator<T>;\nexport function iteratorMap<T, M>(iterator: Iterator<T, any, undefined>, fmap: (arg0: T) => M): IterableIterator<M | undefined>;\n//# sourceMappingURL=iterator.d.ts.map",
      "json.d.ts": "/**\n * JSON utility functions.\n *\n * @module json\n */\n/**\n * Transform JavaScript object to JSON.\n *\n * @param {any} object\n * @return {string}\n */\nexport const stringify: {\n    (value: any, replacer?: ((this: any, key: string, value: any) => any) | undefined, space?: string | number | undefined): string;\n    (value: any, replacer?: (string | number)[] | null | undefined, space?: string | number | undefined): string;\n};\n/**\n * Parse JSON object.\n *\n * @param {string} json\n * @return {any}\n */\nexport const parse: (text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined) => any;\n//# sourceMappingURL=json.d.ts.map",
      "logging.d.ts": "export const BOLD: symbol;\nexport const UNBOLD: symbol;\nexport const BLUE: symbol;\nexport const GREY: symbol;\nexport const GREEN: symbol;\nexport const RED: symbol;\nexport const PURPLE: symbol;\nexport const ORANGE: symbol;\nexport const UNCOLOR: symbol;\nexport function print(...args: (string | number | Object | Symbol)[]): void;\nexport function warn(...args: (string | number | Object | Symbol)[]): void;\nexport function printError(err: Error): void;\nexport function printImg(url: string, height: number): void;\nexport function printImgBase64(base64: string, height: number): void;\nexport function group(...args: (string | number | Object | Symbol)[]): void;\nexport function groupCollapsed(...args: (string | number | Object | Symbol)[]): void;\nexport function groupEnd(): void;\nexport function printDom(createNode: () => Node): void;\nexport function printCanvas(canvas: HTMLCanvasElement, height: number): void;\nexport const vconsoles: Set<any>;\nexport class VConsole {\n    /**\n     * @param {Element} dom\n     */\n    constructor(dom: Element);\n    dom: Element;\n    /**\n     * @type {Element}\n     */\n    ccontainer: Element;\n    depth: number;\n    /**\n     * @param {Array<string|Symbol|Object|number>} args\n     * @param {boolean} collapsed\n     */\n    group(args: (string | number | Object | Symbol)[], collapsed?: boolean): void;\n    /**\n     * @param {Array<string|Symbol|Object|number>} args\n     */\n    groupCollapsed(args: (string | number | Object | Symbol)[]): void;\n    groupEnd(): void;\n    /**\n     * @param {Array<string|Symbol|Object|number>} args\n     */\n    print(args: (string | number | Object | Symbol)[]): void;\n    /**\n     * @param {Error} err\n     */\n    printError(err: Error): void;\n    /**\n     * @param {string} url\n     * @param {number} height\n     */\n    printImg(url: string, height: number): void;\n    /**\n     * @param {Node} node\n     */\n    printDom(node: Node): void;\n    destroy(): void;\n}\nexport function createVConsole(dom: Element): VConsole;\nexport function createModuleLogger(moduleName: string): (...arg0: any[]) => any;\n//# sourceMappingURL=logging.d.ts.map",
      "logging.test.d.ts": "export function testLogging(): void;\n//# sourceMappingURL=logging.test.d.ts.map",
      "map.d.ts": "export function create(): Map<any, any>;\nexport function copy<X, Y>(m: Map<X, Y>): Map<X, Y>;\nexport function setIfUndefined<T, K>(map: Map<K, T>, key: K, createT: () => T): T;\nexport function map<K, V, R>(m: Map<K, V>, f: (arg0: V, arg1: K) => R): R[];\nexport function any<K, V>(m: Map<K, V>, f: (arg0: V, arg1: K) => boolean): boolean;\nexport function all<K, V>(m: Map<K, V>, f: (arg0: V, arg1: K) => boolean): boolean;\n//# sourceMappingURL=map.d.ts.map",
      "map.test.d.ts": "export function testMap(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=map.test.d.ts.map",
      "math.d.ts": "/**\n * Common Math expressions.\n *\n * @module math\n */\nexport const floor: (x: number) => number;\nexport const ceil: (x: number) => number;\nexport const abs: (x: number) => number;\nexport const imul: (x: number, y: number) => number;\nexport const round: (x: number) => number;\nexport const log10: (x: number) => number;\nexport const log2: (x: number) => number;\nexport const log: (x: number) => number;\nexport const sqrt: (x: number) => number;\nexport function add(a: number, b: number): number;\nexport function min(a: number, b: number): number;\nexport function max(a: number, b: number): number;\nexport const isNaN: (number: number) => boolean;\nexport const pow: (x: number, y: number) => number;\nexport function exp10(exp: number): number;\nexport const sign: (x: number) => number;\nexport function isNegativeZero(n: number): boolean;\n//# sourceMappingURL=math.d.ts.map",
      "math.test.d.ts": "export function testMath(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=math.test.d.ts.map",
      "metric.d.ts": "export const yotta: 1e+24;\nexport const zetta: 1e+21;\nexport const exa: 1000000000000000000;\nexport const peta: 1000000000000000;\nexport const tera: 1000000000000;\nexport const giga: 1000000000;\nexport const mega: 1000000;\nexport const kilo: 1000;\nexport const hecto: 100;\nexport const deca: 10;\nexport const deci: 0.1;\nexport const centi: 0.01;\nexport const milli: 0.001;\nexport const micro: 0.000001;\nexport const nano: 1e-9;\nexport const pico: 1e-12;\nexport const femto: 1e-15;\nexport const atto: 1e-18;\nexport const zepto: 1e-21;\nexport const yocto: 1e-24;\nexport function prefix(n: number, baseMultiplier?: number | undefined): {\n    n: number;\n    prefix: string;\n};\n//# sourceMappingURL=metric.d.ts.map",
      "metric.test.d.ts": "export function testMetricPrefix(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=metric.test.d.ts.map",
      "mutex.d.ts": "export function createMutex(): mutex;\nexport type mutex = (cb: () => void, elseCb?: () => void) => any;\n//# sourceMappingURL=mutex.d.ts.map",
      "number.d.ts": "export const MAX_SAFE_INTEGER: number;\nexport const MIN_SAFE_INTEGER: number;\nexport const LOWEST_INT32: number;\n/**\n * @type {number}\n */\nexport const HIGHEST_INT32: number;\n/**\n * @module number\n */\nexport const isInteger: (number: number) => boolean;\nexport const isNaN: (number: number) => boolean;\n//# sourceMappingURL=number.d.ts.map",
      "number.test.d.ts": "export function testNumber(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=number.test.d.ts.map",
      "object.d.ts": "export function create(): {\n    [x: string]: any;\n};\n/**\n * Object.assign\n */\nexport const assign: {\n    <T, U>(target: T, source: U): T & U;\n    <T_1, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V;\n    <T_2, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W;\n    (target: object, ...sources: any[]): any;\n};\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys: {\n    (o: object): string[];\n    (o: {}): string[];\n};\nexport function forEach(obj: {\n    [x: string]: any;\n}, f: (arg0: any, arg1: string) => any): void;\nexport function map<R>(obj: {\n    [x: string]: any;\n}, f: (arg0: any, arg1: string) => R): R[];\nexport function length(obj: {\n    [x: string]: any;\n}): number;\nexport function some(obj: {\n    [x: string]: any;\n}, f: (arg0: any, arg1: string) => boolean): boolean;\nexport function every(obj: {\n    [x: string]: any;\n}, f: (arg0: any, arg1: string) => boolean): boolean;\nexport function hasProperty(obj: any, key: string | symbol): boolean;\nexport function equalFlat(a: {\n    [x: string]: any;\n}, b: {\n    [x: string]: any;\n}): boolean;\n//# sourceMappingURL=object.d.ts.map",
      "object.test.d.ts": "export function testObject(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=object.test.d.ts.map",
      "observable.d.ts": "/**\n * Handles named events.\n *\n * @template N\n */\nexport class Observable<N> {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    _observers: Map<N, any>;\n    /**\n     * @param {N} name\n     * @param {function} f\n     */\n    on(name: N, f: Function): void;\n    /**\n     * @param {N} name\n     * @param {function} f\n     */\n    once(name: N, f: Function): void;\n    /**\n     * @param {N} name\n     * @param {function} f\n     */\n    off(name: N, f: Function): void;\n    /**\n     * Emit a named event. All registered event listeners that listen to the\n     * specified name will receive the event.\n     *\n     * @todo This should catch exceptions\n     *\n     * @param {N} name The event name.\n     * @param {Array<any>} args The arguments that are applied to the event listener.\n     */\n    emit(name: N, args: any[]): void;\n    destroy(): void;\n}\n//# sourceMappingURL=observable.d.ts.map",
      "pair.d.ts": "/**\n * Working with value pairs.\n *\n * @module pair\n */\n/**\n * @template L,R\n */\nexport class Pair<L, R> {\n    /**\n     * @param {L} left\n     * @param {R} right\n     */\n    constructor(left: L, right: R);\n    left: L;\n    right: R;\n}\nexport function create<L, R>(left: L, right: R): Pair<L, R>;\nexport function createReversed<L, R>(right: R, left: L): Pair<L, R>;\nexport function forEach<L, R>(arr: Pair<L, R>[], f: (arg0: L, arg1: R) => any): void;\nexport function map<L, R, X>(arr: Pair<L, R>[], f: (arg0: L, arg1: R) => X): X[];\n//# sourceMappingURL=pair.d.ts.map",
      "pair.test.d.ts": "export function testPair(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=pair.test.d.ts.map",
      "prng/Mt19937.d.ts": "/**\n * This is a port of Shawn Cokus's implementation of the original Mersenne Twister algorithm (http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/MTARCOK/mt19937ar-cok.c).\n * MT has a very high period of 2^19937. Though the authors of xorshift describe that a high period is not\n * very relevant (http://vigna.di.unimi.it/xorshift/). It is four times slower than xoroshiro128plus and\n * needs to recompute its state after generating 624 numbers.\n *\n * ```js\n * const gen = new Mt19937(new Date().getTime())\n * console.log(gen.next())\n * ```\n *\n * @public\n */\nexport class Mt19937 {\n    /**\n     * @param {number} seed Unsigned 32 bit number\n     */\n    constructor(seed: number);\n    seed: number;\n    _state: Uint32Array;\n    _i: number;\n    /**\n     * Generate a random signed integer.\n     *\n     * @return {Number} A 32 bit signed integer.\n     */\n    next(): number;\n}\n//# sourceMappingURL=Mt19937.d.ts.map",
      "prng/Xoroshiro128plus.d.ts": "/**\n * This is a variant of xoroshiro128plus - the fastest full-period generator passing BigCrush without systematic failures.\n *\n * This implementation follows the idea of the original xoroshiro128plus implementation,\n * but is optimized for the JavaScript runtime. I.e.\n * * The operations are performed on 32bit integers (the original implementation works with 64bit values).\n * * The initial 128bit state is computed based on a 32bit seed and Xorshift32.\n * * This implementation returns two 32bit values based on the 64bit value that is computed by xoroshiro128plus.\n *   Caution: The last addition step works slightly different than in the original implementation - the add carry of the\n *   first 32bit addition is not carried over to the last 32bit.\n *\n * [Reference implementation](http://vigna.di.unimi.it/xorshift/xoroshiro128plus.c)\n */\nexport class Xoroshiro128plus {\n    /**\n     * @param {number} seed Unsigned 32 bit number\n     */\n    constructor(seed: number);\n    seed: number;\n    state: Uint32Array;\n    _fresh: boolean;\n    /**\n     * @return {number} Float/Double in [0,1)\n     */\n    next(): number;\n}\n//# sourceMappingURL=Xoroshiro128plus.d.ts.map",
      "prng/Xorshift32.d.ts": "/**\n * Xorshift32 is a very simple but elegang PRNG with a period of `2^32-1`.\n */\nexport class Xorshift32 {\n    /**\n     * @param {number} seed Unsigned 32 bit number\n     */\n    constructor(seed: number);\n    seed: number;\n    /**\n     * @type {number}\n     */\n    _state: number;\n    /**\n     * Generate a random signed integer.\n     *\n     * @return {Number} A 32 bit signed integer.\n     */\n    next(): number;\n}\n//# sourceMappingURL=Xorshift32.d.ts.map",
      "prng.d.ts": "/**\n * Description of the function\n *  @callback generatorNext\n *  @return {number} A 32bit integer\n */\n/**\n * A random type generator.\n *\n * @typedef {Object} PRNG\n * @property {generatorNext} next Generate new number\n */\nexport const DefaultPRNG: typeof Xoroshiro128plus;\nexport function create(seed: number): PRNG;\nexport function bool(gen: PRNG): boolean;\nexport function int53(gen: PRNG, min: number, max: number): number;\nexport function uint53(gen: PRNG, min: number, max: number): number;\nexport function int32(gen: PRNG, min: number, max: number): number;\nexport function uint32(gen: PRNG, min: number, max: number): number;\nexport function int31(gen: PRNG, min: number, max: number): number;\nexport function real53(gen: PRNG): number;\nexport function char(gen: PRNG): string;\nexport function letter(gen: PRNG): string;\nexport function word(gen: PRNG, minLen?: number | undefined, maxLen?: number | undefined): string;\nexport function utf16Rune(gen: PRNG): string;\nexport function utf16String(gen: PRNG, maxlen?: number | undefined): string;\nexport function oneOf<T>(gen: PRNG, array: T[]): T;\nexport function uint8Array(gen: PRNG, len: number): Uint8Array;\nexport function uint16Array(gen: PRNG, len: number): Uint16Array;\nexport function uint32Array(gen: PRNG, len: number): Uint32Array;\n/**\n * Description of the function\n */\nexport type generatorNext = () => number;\n/**\n * A random type generator.\n */\nexport type PRNG = {\n    /**\n     * Generate new number\n     */\n    next: generatorNext;\n};\nimport { Xoroshiro128plus } from \"./prng/Xoroshiro128plus.js\";\n//# sourceMappingURL=prng.d.ts.map",
      "prng.test.d.ts": "export function testGeneratorXoroshiro128plus(tc: t.TestCase): void;\nexport function testGeneratorXorshift32(tc: t.TestCase): void;\nexport function testGeneratorMt19937(tc: t.TestCase): void;\nexport function testNumberDistributions(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=prng.test.d.ts.map",
      "promise.d.ts": "export function create<T>(f: (arg0: PromiseResolve<T>, arg1: (arg0: Error) => void) => any): Promise<T>;\nexport function createEmpty(f: (arg0: () => void, arg1: (arg0: Error) => void) => void): Promise<void>;\nexport function all<T>(arrp: Promise<T>[]): Promise<T[]>;\nexport function reject(reason?: Error | undefined): Promise<never>;\nexport function resolve<T>(res: void | T): Promise<void | T>;\nexport function until(timeout: number, check: () => boolean, intervalResolution?: number | undefined): Promise<void>;\nexport function wait(timeout: number): Promise<undefined>;\nexport function isPromise(p: any): boolean;\nexport type PromiseResolve<T> = (result?: T | PromiseLike<T>) => any;\n//# sourceMappingURL=promise.d.ts.map",
      "promise.test.d.ts": "export function testRepeatPromise(tc: t.TestCase): Promise<void>;\nexport function testispromise(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=promise.test.d.ts.map",
      "queue.d.ts": "export class QueueNode {\n    /**\n     * @type {QueueNode|null}\n     */\n    next: QueueNode | null;\n}\nexport class Queue {\n    /**\n     * @type {QueueNode | null}\n     */\n    start: QueueNode | null;\n    /**\n     * @type {QueueNode | null}\n     */\n    end: QueueNode | null;\n}\nexport function create(): Queue;\nexport function isEmpty(queue: Queue): boolean;\nexport function enqueue(queue: Queue, n: QueueNode): void;\nexport function dequeue(queue: Queue): QueueNode | null;\n//# sourceMappingURL=queue.d.ts.map",
      "queue.test.d.ts": "export function testEnqueueDequeue(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=queue.test.d.ts.map",
      "random.d.ts": "export const rand: () => number;\nexport function uint32(): number;\nexport function oneOf<T>(arr: T[]): T;\nexport function uuidv4(): any;\n//# sourceMappingURL=random.d.ts.map",
      "random.test.d.ts": "export function testUint32(tc: t.TestCase): void;\nexport function testUuidv4(tc: t.TestCase): void;\nexport function testUuidv4Overlaps(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=random.test.d.ts.map",
      "rollup.config.d.ts": "declare var _default: ({\n    input: string;\n    output: {\n        file: string;\n        format: string;\n        sourcemap: boolean;\n        dir?: undefined;\n        entryFileNames?: undefined;\n        chunkFileNames?: undefined;\n    };\n    plugins: import(\"rollup\").Plugin[];\n    external?: undefined;\n} | {\n    input: string[];\n    output: {\n        dir: string;\n        format: string;\n        sourcemap: boolean;\n        entryFileNames: string;\n        chunkFileNames: string;\n        file?: undefined;\n    };\n    external: string[];\n    plugins?: undefined;\n} | {\n    input: string;\n    output: {\n        dir: string;\n        format: string;\n        sourcemap: boolean;\n        entryFileNames: string;\n        chunkFileNames: string;\n        file?: undefined;\n    };\n    external: string[];\n    plugins?: undefined;\n})[];\nexport default _default;\n//# sourceMappingURL=rollup.config.d.ts.map",
      "set.d.ts": "export function create(): Set<any>;\nexport function toArray<T>(set: Set<T>): T[];\n//# sourceMappingURL=set.d.ts.map",
      "set.test.d.ts": "//# sourceMappingURL=set.test.d.ts.map",
      "sort.d.ts": "export function _insertionSort<T>(arr: T[], lo: number, hi: number, compare: (arg0: T, arg1: T) => number): void;\nexport function insertionSort<T>(arr: T[], compare: (arg0: T, arg1: T) => number): void;\nexport function quicksort<T>(arr: T[], compare: (arg0: T, arg1: T) => number): void;\n//# sourceMappingURL=sort.d.ts.map",
      "sort.test.d.ts": "export function testSortUint16(tc: t.TestCase): void;\nexport function testSortUint32(tc: t.TestCase): void;\nexport function testSortObjectUint32(tc: t.TestCase): void;\nexport function testListVsArrayPerformance(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=sort.test.d.ts.map",
      "statistics.d.ts": "export function median(arr: number[]): number;\nexport function average(arr: number[]): number;\n//# sourceMappingURL=statistics.d.ts.map",
      "statistics.test.d.ts": "export function testMedian(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=statistics.test.d.ts.map",
      "storage.d.ts": "/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage: any;\n//# sourceMappingURL=storage.d.ts.map",
      "string.d.ts": "/**\n * Utility module to work with strings.\n *\n * @module string\n */\nexport const fromCharCode: (...codes: number[]) => string;\nexport const fromCodePoint: (...codePoints: number[]) => string;\nexport function trimLeft(s: string): string;\nexport function fromCamelCase(s: string, separator: string): string;\nexport function utf8ByteLength(str: string): number;\nexport function _encodeUtf8Polyfill(str: string): Uint8Array;\nexport const utf8TextEncoder: TextEncoder;\nexport function _encodeUtf8Native(str: string): Uint8Array;\nexport function encodeUtf8(str: string): Uint8Array;\nexport function _decodeUtf8Polyfill(buf: Uint8Array): string;\nexport let utf8TextDecoder: TextDecoder | null;\nexport function _decodeUtf8Native(buf: Uint8Array): string;\nexport function decodeUtf8(buf: Uint8Array): string;\n//# sourceMappingURL=string.d.ts.map",
      "string.test.d.ts": "export function testLowercaseTransformation(tc: t.TestCase): void;\nexport function testRepeatStringUtf8Encoding(tc: t.TestCase): void;\nexport function testRepeatStringUtf8Decoding(tc: t.TestCase): void;\nexport function testBomEncodingDecoding(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=string.test.d.ts.map",
      "symbol.d.ts": "/**\n * Utility module to work with EcmaScript Symbols.\n *\n * @module symbol\n */\n/**\n * Return fresh symbol.\n *\n * @return {Symbol}\n */\nexport const create: SymbolConstructor;\nexport function isSymbol(s: any): boolean;\n//# sourceMappingURL=symbol.d.ts.map",
      "test.d.ts": "export {};\n//# sourceMappingURL=test.d.ts.map",
      "testing.d.ts": "export { production } from \"./environment.js\";\nexport const extensive: boolean;\nexport const envSeed: number | null;\nexport class TestCase {\n    /**\n     * @param {string} moduleName\n     * @param {string} testName\n     */\n    constructor(moduleName: string, testName: string);\n    /**\n     * @type {string}\n     */\n    moduleName: string;\n    /**\n     * @type {string}\n     */\n    testName: string;\n    _seed: number | null;\n    _prng: prng.PRNG | null;\n    resetSeed(): void;\n    /**\n     * @type {number}\n     */\n    get seed(): number;\n    /**\n     * A PRNG for this test case. Use only this PRNG for randomness to make the test case reproducible.\n     *\n     * @type {prng.PRNG}\n     */\n    get prng(): prng.PRNG;\n}\nexport const repititionTime: number;\nexport function run(moduleName: string, name: string, f: (arg0: TestCase) => void | Promise<any>, i: number, numberOfTests: number): Promise<boolean>;\nexport function describe(description: string, info?: string): void;\nexport function info(info: string): void;\nexport const printDom: (createNode: () => Node) => void;\nexport const printCanvas: (canvas: HTMLCanvasElement, height: number) => void;\nexport function group(description: string, f: (arg0: void) => void): void;\nexport function groupAsync(description: string, f: (arg0: void) => Promise<any>): Promise<void>;\nexport function measureTime(message: string, f: () => void): number;\nexport function measureTimeAsync(message: string, f: () => Promise<any>): Promise<number>;\nexport function compareArrays<T>(as: T[], bs: T[], m?: string | undefined): boolean;\nexport function compareStrings(a: string, b: string, m?: string | undefined): void;\nexport function compareObjects<K, V>(a: any, b: any, m?: string | undefined): void;\nexport function compare<T>(a: T, b: T, message?: string | null | undefined, customCompare?: ((arg0: any, arg1: T, arg2: T, arg3: string, arg4: any) => boolean) | undefined): boolean;\nexport function assert(condition: boolean, message?: string | null | undefined): true;\nexport function fails(f: () => void): void;\nexport function runTests(tests: {\n    [x: string]: {\n        [x: string]: (arg0: TestCase) => void | Promise<any>;\n    };\n}): Promise<boolean>;\nexport function fail(reason: string): never;\nexport function skip(cond?: boolean): void;\nimport * as prng from \"./prng.js\";\n//# sourceMappingURL=testing.d.ts.map",
      "testing.test.d.ts": "export function testComparing(tc: t.TestCase): void;\nexport function testFailing(): void;\nexport function testSkipping(): void;\nexport function testAsync(): Promise<void>;\nexport function testRepeatRepitition(): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=testing.test.d.ts.map",
      "time.d.ts": "export function getDate(): Date;\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime: () => number;\nexport function humanizeDuration(d: number): string;\n//# sourceMappingURL=time.d.ts.map",
      "time.test.d.ts": "export function testTime(tc: t.TestCase): void;\nexport function testHumanDuration(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=time.test.d.ts.map",
      "tree.d.ts": "/**\n * This is a Red Black Tree implementation\n *\n * @template K,V\n */\nexport class Tree<K, V> {\n    root: any;\n    length: number;\n    /**\n     * @param {K} id\n     */\n    findNext(id: K): V;\n    /**\n     * @param {K} id\n     */\n    findPrev(id: K): V;\n    /**\n     * @param {K} from\n     */\n    findNodeWithLowerBound(from: K): any;\n    /**\n     * @param {K} to\n     */\n    findNodeWithUpperBound(to: K): any;\n    /**\n     * @return {V}\n     */\n    findSmallestNode(): V;\n    /**\n     * @param {K} from\n     * @return {V}\n     */\n    findWithLowerBound(from: K): V;\n    /**\n     * @param {K} to\n     * @return {V}\n     */\n    findWithUpperBound(to: K): V;\n    /**\n     * @param {K} from\n     * @param {V} from\n     * @param {function(V):void} f\n     */\n    iterate(from: K, to: any, f: (arg0: V) => void): void;\n    /**\n     * @param {K} id\n     * @return {V|null}\n     */\n    find(id: K): V | null;\n    /**\n     * @param {K} id\n     * @return {N<V>|null}\n     */\n    findNode(id: K): any;\n    /**\n     * @param {K} id\n     */\n    delete(id: K): void;\n    _fixDelete(n: any): void;\n    put(v: any): any;\n    _fixInsert(n: any): void;\n}\n//# sourceMappingURL=tree.d.ts.map",
      "tree.test.d.ts": "//# sourceMappingURL=tree.test.d.ts.map",
      "url.d.ts": "export function decodeQueryParams(url: string): {\n    [x: string]: string;\n};\nexport function encodeQueryParams(params: {\n    [x: string]: string;\n}): string;\n//# sourceMappingURL=url.d.ts.map",
      "url.test.d.ts": "export function testUrlParamQuery(tc: t.TestCase): void;\nimport * as t from \"./testing.js\";\n//# sourceMappingURL=url.test.d.ts.map",
      "websocket.d.ts": "/**\n * @extends Observable<string>\n */\nexport class WebsocketClient extends Observable<string> {\n    /**\n     * @param {string} url\n     * @param {object} [opts]\n     * @param {'arraybuffer' | 'blob' | null} [opts.binaryType] Set `ws.binaryType`\n     */\n    constructor(url: string, { binaryType }?: {\n        binaryType?: \"arraybuffer\" | \"blob\" | null;\n    } | undefined);\n    url: string;\n    /**\n     * @type {WebSocket?}\n     */\n    ws: WebSocket | null;\n    binaryType: \"arraybuffer\" | \"blob\" | null;\n    connected: boolean;\n    connecting: boolean;\n    unsuccessfulReconnects: number;\n    lastMessageReceived: number;\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    shouldConnect: boolean;\n    _checkInterval: NodeJS.Timeout;\n    /**\n     * @param {any} message\n     */\n    send(message: any): void;\n    disconnect(): void;\n    connect(): void;\n}\nimport { Observable } from \"./observable.js\";\n//# sourceMappingURL=websocket.d.ts.map"
    },
    "make-error": {
      "index.d.ts": "/**\n * Create a new error constructor instance.\n */\ndeclare function makeError(\n  name: string\n): makeError.Constructor<makeError.BaseError>;\n\n/**\n * Set the constructor prototype to `BaseError`.\n */\ndeclare function makeError<T extends Error>(super_: {\n  new (...args: any[]): T;\n}): makeError.Constructor<T & makeError.BaseError>;\n\n/**\n * Create a specialized error instance.\n */\ndeclare function makeError<T extends Error, K>(\n  name: string | Function,\n  super_: K\n): K & makeError.SpecializedConstructor<T>;\n\ndeclare namespace makeError {\n  /**\n   * Use with ES2015+ inheritance.\n   */\n  export class BaseError extends Error {\n    message: string;\n    name: string;\n    stack: string;\n\n    constructor(message?: string);\n  }\n\n  export interface Constructor<T> {\n    new (message?: string): T;\n    super_: any;\n    prototype: T;\n  }\n\n  export interface SpecializedConstructor<T> {\n    super_: any;\n    prototype: T;\n  }\n}\n\nexport = makeError;\n"
    },
    "json.macro": {
      "dist/index.d.ts": "export default macro;\nimport macro from \"./macro\";\n//# sourceMappingURL=index.d.ts.map",
      "dist/macro.d.ts": "declare var _default: any;\nexport default _default;\nexport type MacroParams = import(\"babel-plugin-macros\").MacroParams;\nexport type Node = import(\"@babel/types\").AnyTypeAnnotation | import(\"@babel/types\").ArgumentPlaceholder | import(\"@babel/types\").ArrayExpression | import(\"@babel/types\").ArrayPattern | import(\"@babel/types\").ArrayTypeAnnotation | import(\"@babel/types\").ArrowFunctionExpression | import(\"@babel/types\").AssignmentExpression | import(\"@babel/types\").AssignmentPattern | import(\"@babel/types\").AwaitExpression | import(\"@babel/types\").BigIntLiteral | import(\"@babel/types\").BinaryExpression | import(\"@babel/types\").LogicalExpression | import(\"@babel/types\").BindExpression | import(\"@babel/types\").BlockStatement | import(\"@babel/types\").Program | import(\"@babel/types\").TSModuleBlock | import(\"@babel/types\").CatchClause | import(\"@babel/types\").DoWhileStatement | import(\"@babel/types\").ForInStatement | import(\"@babel/types\").ForStatement | import(\"@babel/types\").FunctionDeclaration | import(\"@babel/types\").FunctionExpression | import(\"@babel/types\").ObjectMethod | import(\"@babel/types\").SwitchStatement | import(\"@babel/types\").WhileStatement | import(\"@babel/types\").ForOfStatement | import(\"@babel/types\").ClassMethod | import(\"@babel/types\").ClassPrivateMethod | import(\"@babel/types\").BooleanLiteral | import(\"@babel/types\").BooleanLiteralTypeAnnotation | import(\"@babel/types\").BooleanTypeAnnotation | import(\"@babel/types\").BreakStatement | import(\"@babel/types\").CallExpression | import(\"@babel/types\").ClassExpression | import(\"@babel/types\").ClassDeclaration | import(\"@babel/types\").ClassBody | import(\"@babel/types\").ClassImplements | import(\"@babel/types\").ClassPrivateProperty | import(\"@babel/types\").ClassProperty | import(\"@babel/types\").ContinueStatement | import(\"@babel/types\").ReturnStatement | import(\"@babel/types\").ThrowStatement | import(\"@babel/types\").ConditionalExpression | import(\"@babel/types\").IfStatement | import(\"@babel/types\").DebuggerStatement | import(\"@babel/types\").VariableDeclaration | import(\"@babel/types\").ExportAllDeclaration | import(\"@babel/types\").ExportDefaultDeclaration | import(\"@babel/types\").ExportNamedDeclaration | import(\"@babel/types\").ImportDeclaration | import(\"@babel/types\").DeclareClass | import(\"@babel/types\").DeclareFunction | import(\"@babel/types\").DeclareInterface | import(\"@babel/types\").DeclareModule | import(\"@babel/types\").DeclareModuleExports | import(\"@babel/types\").DeclareTypeAlias | import(\"@babel/types\").DeclareOpaqueType | import(\"@babel/types\").DeclareVariable | import(\"@babel/types\").DeclareExportDeclaration | import(\"@babel/types\").DeclareExportAllDeclaration | import(\"@babel/types\").InterfaceDeclaration | import(\"@babel/types\").OpaqueType | import(\"@babel/types\").TypeAlias | import(\"@babel/types\").EnumDeclaration | import(\"@babel/types\").TSDeclareFunction | import(\"@babel/types\").TSInterfaceDeclaration | import(\"@babel/types\").TSTypeAliasDeclaration | import(\"@babel/types\").TSEnumDeclaration | import(\"@babel/types\").TSModuleDeclaration | import(\"@babel/types\").DeclaredPredicate | import(\"@babel/types\").Decorator | import(\"@babel/types\").Directive | import(\"@babel/types\").DirectiveLiteral | import(\"@babel/types\").DoExpression | import(\"@babel/types\").EmptyStatement | import(\"@babel/types\").EmptyTypeAnnotation | import(\"@babel/types\").EnumBooleanBody | import(\"@babel/types\").EnumNumberBody | import(\"@babel/types\").EnumStringBody | import(\"@babel/types\").EnumSymbolBody | import(\"@babel/types\").EnumBooleanMember | import(\"@babel/types\").EnumDefaultedMember | import(\"@babel/types\").EnumNumberMember | import(\"@babel/types\").EnumStringMember | import(\"@babel/types\").ExistsTypeAnnotation | import(\"@babel/types\").ExportDefaultSpecifier | import(\"@babel/types\").ExportNamespaceSpecifier | import(\"@babel/types\").ExportSpecifier | import(\"@babel/types\").Identifier | import(\"@babel/types\").StringLiteral | import(\"@babel/types\").NumericLiteral | import(\"@babel/types\").NullLiteral | import(\"@babel/types\").RegExpLiteral | import(\"@babel/types\").MemberExpression | import(\"@babel/types\").NewExpression | import(\"@babel/types\").ObjectExpression | import(\"@babel/types\").SequenceExpression | import(\"@babel/types\").ParenthesizedExpression | import(\"@babel/types\").ThisExpression | import(\"@babel/types\").UnaryExpression | import(\"@babel/types\").UpdateExpression | import(\"@babel/types\").MetaProperty | import(\"@babel/types\").Super | import(\"@babel/types\").TaggedTemplateExpression | import(\"@babel/types\").TemplateLiteral | import(\"@babel/types\").YieldExpression | import(\"@babel/types\").TypeCastExpression | import(\"@babel/types\").JSXElement | import(\"@babel/types\").JSXFragment | import(\"@babel/types\").OptionalMemberExpression | import(\"@babel/types\").PipelinePrimaryTopicReference | import(\"@babel/types\").OptionalCallExpression | import(\"@babel/types\").Import | import(\"@babel/types\").RecordExpression | import(\"@babel/types\").TupleExpression | import(\"@babel/types\").TSAsExpression | import(\"@babel/types\").TSTypeAssertion | import(\"@babel/types\").TSNonNullExpression | import(\"@babel/types\").ExpressionStatement | import(\"@babel/types\").File | import(\"@babel/types\").NullLiteralTypeAnnotation | import(\"@babel/types\").FunctionTypeAnnotation | import(\"@babel/types\").FunctionTypeParam | import(\"@babel/types\").GenericTypeAnnotation | import(\"@babel/types\").InferredPredicate | import(\"@babel/types\").InterfaceExtends | import(\"@babel/types\").InterfaceTypeAnnotation | import(\"@babel/types\").IntersectionTypeAnnotation | import(\"@babel/types\").MixedTypeAnnotation | import(\"@babel/types\").NullableTypeAnnotation | import(\"@babel/types\").NumberLiteralTypeAnnotation | import(\"@babel/types\").NumberTypeAnnotation | import(\"@babel/types\").ObjectTypeAnnotation | import(\"@babel/types\").ObjectTypeInternalSlot | import(\"@babel/types\").ObjectTypeCallProperty | import(\"@babel/types\").ObjectTypeIndexer | import(\"@babel/types\").ObjectTypeProperty | import(\"@babel/types\").ObjectTypeSpreadProperty | import(\"@babel/types\").QualifiedTypeIdentifier | import(\"@babel/types\").StringLiteralTypeAnnotation | import(\"@babel/types\").StringTypeAnnotation | import(\"@babel/types\").SymbolTypeAnnotation | import(\"@babel/types\").ThisTypeAnnotation | import(\"@babel/types\").TupleTypeAnnotation | import(\"@babel/types\").TypeofTypeAnnotation | import(\"@babel/types\").TypeAnnotation | import(\"@babel/types\").TypeParameter | import(\"@babel/types\").TypeParameterDeclaration | import(\"@babel/types\").TypeParameterInstantiation | import(\"@babel/types\").UnionTypeAnnotation | import(\"@babel/types\").Variance | import(\"@babel/types\").VoidTypeAnnotation | import(\"@babel/types\").JSXAttribute | import(\"@babel/types\").JSXClosingElement | import(\"@babel/types\").JSXExpressionContainer | import(\"@babel/types\").JSXSpreadChild | import(\"@babel/types\").JSXOpeningElement | import(\"@babel/types\").JSXText | import(\"@babel/types\").JSXOpeningFragment | import(\"@babel/types\").JSXClosingFragment | import(\"@babel/types\").ImportDefaultSpecifier | import(\"@babel/types\").ImportNamespaceSpecifier | import(\"@babel/types\").ImportSpecifier | import(\"@babel/types\").InterpreterDirective | import(\"@babel/types\").JSXEmptyExpression | import(\"@babel/types\").JSXIdentifier | import(\"@babel/types\").JSXMemberExpression | import(\"@babel/types\").JSXNamespacedName | import(\"@babel/types\").JSXSpreadAttribute | import(\"@babel/types\").RestElement | import(\"@babel/types\").ObjectPattern | import(\"@babel/types\").TSParameterProperty | import(\"@babel/types\").LabeledStatement | import(\"@babel/types\").Noop | import(\"@babel/types\").ObjectProperty | import(\"@babel/types\").PipelineBareFunction | import(\"@babel/types\").PipelineTopicExpression | import(\"@babel/types\").Placeholder | import(\"@babel/types\").PrivateName | import(\"@babel/types\").SpreadElement | import(\"@babel/types\").TryStatement | import(\"@babel/types\").WithStatement | import(\"@babel/types\").TSImportEqualsDeclaration | import(\"@babel/types\").TSExportAssignment | import(\"@babel/types\").TSNamespaceExportDeclaration | import(\"@babel/types\").SwitchCase | import(\"@babel/types\").TSAnyKeyword | import(\"@babel/types\").TSArrayType | import(\"@babel/types\").TSBooleanKeyword | import(\"@babel/types\").TSBigIntKeyword | import(\"@babel/types\").TSNeverKeyword | import(\"@babel/types\").TSNullKeyword | import(\"@babel/types\").TSNumberKeyword | import(\"@babel/types\").TSObjectKeyword | import(\"@babel/types\").TSStringKeyword | import(\"@babel/types\").TSSymbolKeyword | import(\"@babel/types\").TSUndefinedKeyword | import(\"@babel/types\").TSUnknownKeyword | import(\"@babel/types\").TSVoidKeyword | import(\"@babel/types\").TSThisType | import(\"@babel/types\").TSLiteralType | import(\"@babel/types\").TSCallSignatureDeclaration | import(\"@babel/types\").TSConditionalType | import(\"@babel/types\").TSConstructSignatureDeclaration | import(\"@babel/types\").TSConstructorType | import(\"@babel/types\").TSDeclareMethod | import(\"@babel/types\").TSQualifiedName | import(\"@babel/types\").TSEnumMember | import(\"@babel/types\").TSExpressionWithTypeArguments | import(\"@babel/types\").TSExternalModuleReference | import(\"@babel/types\").TSFunctionType | import(\"@babel/types\").TSImportType | import(\"@babel/types\").TSIndexSignature | import(\"@babel/types\").TSIndexedAccessType | import(\"@babel/types\").TSInferType | import(\"@babel/types\").TSInterfaceBody | import(\"@babel/types\").TSIntersectionType | import(\"@babel/types\").TSMappedType | import(\"@babel/types\").TSMethodSignature | import(\"@babel/types\").TSOptionalType | import(\"@babel/types\").TSParenthesizedType | import(\"@babel/types\").TSPropertySignature | import(\"@babel/types\").TSRestType | import(\"@babel/types\").TSTupleType | import(\"@babel/types\").TSTypeReference | import(\"@babel/types\").TSTypePredicate | import(\"@babel/types\").TSTypeQuery | import(\"@babel/types\").TSTypeLiteral | import(\"@babel/types\").TSUnionType | import(\"@babel/types\").TSTypeOperator | import(\"@babel/types\").TSTypeAnnotation | import(\"@babel/types\").TSTypeParameter | import(\"@babel/types\").TSTypeParameterDeclaration | import(\"@babel/types\").TSTypeParameterInstantiation | import(\"@babel/types\").TemplateElement | import(\"@babel/types\").V8IntrinsicIdentifier | import(\"@babel/types\").VariableDeclarator;\nexport type NodePath = import(\"@babel/traverse\").NodePath<import(\"@babel/types\").Node>;\nexport type MethodParams = {\n    reference: NodePath;\n    babel: MacroParams['babel'];\n    state: MacroParams['state'];\n};\nexport type MethodCall = (options: MethodParams) => void;\nexport type CheckReferenceExistsParameter = {\n    /**\n     * - The reference name to check for\n     */\n    name: string;\n    /**\n     * - the method called for each instance of the\n     * reference.\n     */\n    method: MethodCall;\n    /**\n     * - the reference to check.\n     */\n    macroParameter: MacroParams;\n};\n//# sourceMappingURL=macro.d.ts.map",
      "json.macro.d.ts": "import { PackageJson, SemanticVersion, TsConfigJson } from './types';\n\n/**\n * This loads a json file from the provided path. The path can be relative to\n * the file it's being used from, an absolute path, or a path to your\n * `node_modules` folder.\n *\n * If the file can't be resolved the build will fail.\n *\n * @remarks\n *\n * For the following json file: `./my-json.json`\n *\n * ```json\n * {\n *   \"custom\": 1,\n * }\n * ```\n *\n * This is how to load it at build time.\n *\n * @example\n *\n * ```js\n * import { loadJson } from 'json.macro';\n *\n * const myJson = loadJson('my-json.json');\n * ```\n *\n * Compiles to ↓ ↓ ↓ ↓ ↓ ↓\n *\n * ```js\n * const myJson = { custom: 1 };\n * ```\n *\n * Magic :-)\n *\n * To load from node_modules you can do something like the following.\n *\n * ```js\n * import { loadJson } from 'json.macro';\n *\n * const jsonFromNode = loadJson('json.macro/package.json');\n * ```\n *\n * The above will be replaced with the full package.json file from the\n * json.macro node_modules package.\n *\n * If you are using typescript you can specify the expected return type by\n * annotating the variable created.\n *\n * @example\n *\n * ```ts\n * import { loadJson } from 'json.macro';\n *\n * const myJson: { custom: number } = loadJson('my-json.json');\n * ```\n *\n * If a second parameter is passed, this can also load a specific key path from\n * a json file.\n *\n * @example\n *\n * `./my-json.json`\n *\n * ```json\n * {\n *   \"a\": {\n *     \"b\": { \"c\": { \"d\": 1 } },\n *     \"arr\": [1, 2, 3, 4, { \"end\" : true }]\n *   }\n * }\n * ```\n *\n * ```js\n * import { loadJsonPath } from 'json.macro';\n *\n * const value = loadJsonPath('my-json.json', 'a.b.c.d')\n * const value2 = loadJsonPath('my-json.json', 'a.arr.4.end')\n * ```\n *\n * Compiles to\n * ↓ ↓ ↓ ↓ ↓ ↓\n *\n * ```js\n * const value = 1;\n * const value2 = true;\n * ```\n */\nexport function loadJson<Type>(filePath: string, path?: string): Type;\n\n/**\n * Write a json object to a relative file path.\n *\n * @remarks\n *\n * Sometimes it's easier to create an object that needs to follow certain type\n * rules in typescript and then export it to a json object. How to do this\n * though?\n *\n * This method wraps the json object you create (statically and not dynamically)\n * and will output to the provided filePath at build time.\n *\n * @example\n *\n * ```ts\n * import { writeJson } from 'json.macro';\n *\n * type Config = {config: boolean, type: 'string' | 'array' };\n * const json = writeJson<Config>({config: true, type: 'array'}, './config.json);\n * ```\n *\n * Compiles to\n * ↓ ↓ ↓ ↓ ↓ ↓\n *\n * ```js\n * const json = { config: true, type: 'array' }\n * ```\n *\n * And `./config.json` is written as.\n *\n * ```json\n * {\n *   \"config\": true,\n *   \"type\": \"array\"\n * }\n * ```\n *\n * One thing to be aware of is that this method only supports inline or\n * statically inferrable values. You can't use any dynamic values, like return\n * values from a function call.\n *\n * ```ts\n * import { writeJson } from 'json.macro';\n *\n * const json = { custom: 'custom' };\n * const createJson = () => json;\n *\n * writeJson({ a: true }, './file.json'); // Static ✅\n * writeJson(custom, './file.json'); // Static ✅\n *\n * writeJson(createJson(), './file.json'); // Dynamic ❌\n * ```\n */\nexport function writeJson<Type>(json: Type, filePath: string): Type;\n\n/**\n * Load all the json files matching the provided glob patterns.\n *\n * @remarks\n *\n * If no files match then an empty array is returned.\n *\n * @example\n *\n * ```js\n * import { loadJsonFiles } from 'json.macro';\n *\n * const jsonArray = loadJsonFiles('*.json');\n * ```\n *\n * Compiles to\n * ↓ ↓ ↓ ↓ ↓ ↓\n *\n * ```js\n * const jsonArray = [{ custom: 1}, {another: 2}];\n * ```\n *\n * If you are using typescript you can specify the expected return type by\n * annotating the variable created.\n *\n * ```ts\n * import { loadJsonFiles } from 'json.macro';\n *\n * const jsonArray: Array<{ custom: string}> = loadJsonFiles('*.json');\n * ```\n */\nexport function loadJsonFiles<Type>(glob: string, ...globs: string[]): Type[];\n\n/**\n * Load the nearest parent `package.json` file.\n *\n * @remarks\n *\n * You can also provide a key property which will load the property\n * corresponding to the key from the nearest `package.json`.\n *\n * @example\n *\n * ```js\n * import { loadPackageJson } from 'json.macro';\n *\n * const packageJson = loadPackageJson();\n * const name = loadPackageJson('name');\n * ```\n *\n * Compiles to\n * ↓ ↓ ↓ ↓ ↓ ↓\n *\n * ```js\n * const packageJson = { name: 'my-package', version: '1.0.0', private: true };\n * const name = '1.0.0';\n * ```\n *\n * For typescript users, the types are automatically inferred using the\n * `PackageJson` type from the\n * [`type-fest`](https://github.com/sindresorhus/type-fest) library.\n */\nexport function loadPackageJson(): PackageJson;\nexport function loadPackageJson<Key extends string>(key: Key): PackageJson[Key];\n\n/**\n * Load the nearest parent `tsconfig.json` file.\n *\n * @remarks\n *\n * You can customise the name of the file searched for.\n *\n * @example\n *\n * ```js\n * import { loadTsConfigJson } from 'json.macro';\n *\n * const tsconfig = loadTsConfigJson();\n * const customTsConfig = loadTsConfigJson('tsconfig.custom.json');\n * ```\n *\n * Compiles to\n * ↓ ↓ ↓ ↓ ↓ ↓\n *\n * ```js\n * const tsconfig = { compilerOptions: {} };\n * const customTsConfig = { compilerOptions: { paths: [] } };\n * ```\n *\n * For typescript users, the types are automatically inferred using the\n * `TsConfigJson` type from the\n * [`type-fest`](https://github.com/sindresorhus/type-fest) library.\n */\nexport function loadTsConfigJson(): TsConfigJson;\nexport function loadTsConfigJson(fileName: string): TsConfigJson;\n\n/**\n * Get the semver compatible version from the package.json file.\n *\n * @remarks\n *\n * This will throw a build error if the semver version in your package.json is\n * not valid.\n *\n * @example\n *\n * ```js\n * import { getVersion } from 'json.macro';\n *\n * const versionString = getVersion();\n * const versionStringAlt = getVersion(false);\n * const versionObject = getVersion(true);\n * ```\n *\n * Compiles to\n * ↓ ↓ ↓ ↓ ↓ ↓\n *\n * ```js\n * const versionString = '1.19.2';\n * const versionStringAlt = '1.19.2';\n * const versionObject = { major: 1, minor: 19, patch: 2, version: '1.19.2' }\n * ```\n */\nexport function getVersion(verbose?: false): string;\nexport function getVersion(verbose: true): SemanticVersion;\n",
      "src/modules.d.ts": "declare module 'babel-plugin-tester' {\n  import * as Babel from '@babel/core';\n\n  export type BabelType = typeof Babel;\n\n  /**\n   * A minimal test object can be:\n   *\n   * - A string representing code\n   * - An object with a code property\n   *\n   * Here are the available properties if you provide an object.\n   */\n  export interface TestObject {\n    /**\n     * The code that you want to run through your babel plugin. This must be\n     * provided unless you provide a fixture instead. If there's no output or\n     * outputFixture and snapshot is not true, then the assertion is that this\n     * code is unchanged by the plugin.\n     */\n    code?: string;\n    /**\n     * If provided, this will be used instead of the pluginName. If you're using\n     * the object API, then the key of this object will be the title (see\n     * example below).\n     */\n    title?: string;\n\n    /**\n     * If this is provided, the result of the plugin will be compared with this\n     * output for the assertion. It will have any indentation stripped and will\n     * be trimmed as a convenience for template literals.\n     */\n    output?: string;\n\n    /**\n     * If you'd rather put your code in a separate file, you can specify a\n     * filename here. If it's an absolute path, that's the file that will be\n     * loaded, otherwise, this will be path.joined with the filename path.\n     */\n    fixture?: string;\n\n    /**\n     * If you'd rather put your output in a separate file, you can specify this\n     * instead (works the same as fixture).\n     */\n    outputFixture?: string;\n\n    /**\n     * To run only this test. Useful while developing to help focus on a single\n     * test. Can be used on multiple tests.\n     */\n    only?: boolean;\n\n    /**\n     * To skip running this test. Useful for when you're working on a feature\n     * that is not yet supported.\n     */\n    skip?: boolean;\n\n    /**\n     * If you'd prefer to take a snapshot of your output rather than compare it\n     * to something you hard-code, then specify snapshot: true. This will take a\n     * snapshot with both the source code and the output, making the snapshot\n     * easier to understand.\n     */\n    snapshot?: boolean;\n\n    /**\n     * If a particular test case should be throwing an error, you can that using\n     * one of the following:\n     *\n     * ```ts\n     * {\n     *  // ...\n     *   error: true,\n     *   error: 'should have this exact message',\n     *   error: /should pass this regex/,\n     *   error: SyntaxError, // should be instance of this constructor\n     *   error: err => {\n     *     if (err instanceof SyntaxError && /message/.test(err.message)) {\n     *       return true; // test will fail if function doesn't return `true`\n     *     }\n     *   },\n     * }\n     * ```\n     */\n    error?: boolean | string | RegExp | Error | ((error: unknown) => boolean);\n\n    /**\n     * If you need something set up before a particular test is run, you can do\n     * this with setup. This function will be run before the test runs. It can\n     * return a function which will be treated as a teardown function. It can\n     * also return a promise. If that promise resolves to a function, that will\n     * be treated as a teardown function.\n     */\n    setup?: () =>\n      | void\n      | NonNullable<TestObject['teardown']>\n      | Promise<void>\n      | Promise<NonNullable<TestObject['teardown']>>;\n\n    /**\n     * If you set up some state, it's quite possible you want to tear it down.\n     * You can either define this as its own property, or you can return it from\n     * the setup function. This can likewise return a promise if it's\n     * asynchronous.\n     */\n    teardown?: () => void | Promise<void>;\n\n    /**\n     * This defaults to a function which formats your code output with prettier.\n     * If you have prettier configured, then it will use your configuration. If\n     * you don't then it will be default configuration.\n     *\n     * If you'd like to specify your own, then feel free to do so. Here's the\n     * API:\n     *\n     * ```ts\n     * function customFormatter(code, { filename }) {\n     *   return formattedCode;\n     * }\n     * ```\n     *\n     * The use case for this originally was for testing codemods and formatting\n     * their result with prettier-eslint.\n     */\n    formatResult?: (code: string, options: { filename: string }) => string;\n    /**\n     * To use `babel.config.js` instead of `.babelrc`, set babelOptions to the\n     * config object:\n     *\n     * ```ts\n     * pluginTester({\n     *   plugin: yourPlugin,\n     *   ...\n     *   babelOptions: require('./babel.config.js'),\n     *   ...\n     *   tests: {\n     *     // your test objects\n     *   },\n     * });\n     * ```\n     *\n     */\n    babelOptions?: Babel.TransformOptions;\n  }\n\n  export interface PluginTesterOptions\n    extends TestObject,\n      Omit<Babel.TransformOptions, 'code' | 'only'> {\n    /**\n     * Your babel plugin. For example:\n     *\n     * ```ts\n     * pluginTester({\n     *   plugin: identifierReversePlugin,\n     *   tests: {\n     *   },\n     * })\n     *\n     * // normally you would import this from your plugin module\n     * function identifierReversePlugin() {\n     *   return {\n     *     name: 'identifier reverse',\n     *     visitor: {\n     *       Identifier(idPath) {\n     *         idPath.node.name = idPath.node.name.split('').reverse().join('')\n     *       },\n     *     },\n     *   }\n     * }\n     * ```\n     */\n    plugin: any;\n\n    /**\n     * This is used for the describe title as well as the test titles. If it can be inferred from the plugin's name then it will be and you don't need to provide this option.\n     */\n    pluginName?: string;\n\n    /**\n     * This can be used to pass options into your plugin at transform time. This\n     * option can be overwritten using the test object.\n     *\n     */\n    pluginOptions?: Babel.PluginOptions;\n\n    /**\n     * This can be used to specify a title for the describe block (rather than\n     * using the pluginName).\n     */\n    title?: string;\n\n    /**\n     * Relative paths from the other options will be relative to this. Normally\n     * you'll provide this as filename: __filename. The only options property\n     * affected by this value is fixtures. Test Object properties affected by\n     * this value are: fixture and outputFixture. If those properties are not\n     * absolute paths, then they will be path.joined with path.dirname of the\n     * filename.\n     */\n    filename?: string;\n\n    /**\n     * This is used to control which line endings the output from babel should\n     * have\n     *\n     * - `lf` - **Unix** default\n     * - `crlf` - **Windows**\n     * - `auto` - Use the system default\n     * - `preserve` Use the line ending from the input.\n     *\n     * @default 'lf'\n     */\n    endOfLine?: 'lf' | 'crlf' | 'auto' | 'preserve';\n\n    /**\n     * This is a path to a directory with this format:\n     *\n     * ```\n     * __fixtures__\n     * ├── first-test # test title will be: \"first test\"\n     * │   ├── code.js # required\n     * │   └── output.js # required\n     * └── second-test\n     *     ├── .babelrc # optional\n     *     ├── options.json # optional\n     *     ├── code.js\n     *     └── output.js\n     * ```\n     *\n     * With this you could make your test config like so:\n     *\n     * ```ts\n     * pluginTester({\n     *   plugin,\n     *   fixtures: path.join(__dirname, '__fixtures__'),\n     * })\n     * ```\n     *\n     * And it would run two tests. One for each directory in __fixtures__, with\n     * plugin options set to the content of options.json\n     *\n     * Options are inherited, placing a options.json file in __fixtures__ would\n     * add those options to all fixtures.\n     */\n    fixtures?: string;\n\n    /**\n     * You provide test objects as the tests option to babel-plugin-tester. You\n     * can either provide the tests as an object of test objects or an array of\n     * test objects.\n     *\n     * If you provide the tests as an object, the key will be used as the title\n     * of the test.\n     *\n     * If you provide an array, the title will be derived from it's index and a\n     * specified title property or the pluginName.\n     *\n     * Read more about test objects below.\n     */\n    tests?: Array<TestObject | string> | Record<string, TestObject | string>;\n\n    /**\n     * Use this to provide your own implementation of babel. This is\n     * particularly useful if you want to use a different version of babel than\n     * what's included in this package.\n     */\n    babel?: BabelType;\n  }\n\n  export default function pluginTester(options: PluginTesterOptions): void;\n}\n",
      "types.d.ts": "export { PackageJson, TsConfigJson } from 'type-fest';\n\nexport interface SemanticVersion {\n  /**\n   * The raw un-parsed version taken directly from your `package.json` file. This\n   * includes the build numbers.\n   */\n  raw: string;\n\n  /**\n   * Whether this version is loose or not.\n   */\n  loose: boolean;\n\n  /**\n   * The major version.\n   *\n   * `3.4.1-alpha.100+a.123` => `3`\n   */\n  major: number;\n\n  /**\n   * The minor version.\n   *\n   * `3.4.1-alpha.100+a.123` => `4`\n   */\n  minor: number;\n\n  /**\n   * The patch version.\n   *\n   * `3.4.1-alpha.100+a.123` => `1`\n   */\n  patch: number;\n\n  /**\n   * The version as a string without the build number.\n   */\n  version: string;\n\n  /**\n   * The build number for this version\n   *\n   * `3.4.1-alpha.100+a.123` => `['a', 123]`\n   */\n  build: readonly string[];\n\n  /**\n   * The prerelease string.\n   *\n   * `3.4.1-alpha.100+a.123` => `['alpha', 100]`\n   */\n  prerelease: ReadonlyArray<string | number>;\n}\n"
    },
    "case-anything": {
      "types/core.d.ts": "/**\r\n * converts strings to camelCase\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in camelCase\r\n */\r\nexport declare function camelCase(string: string): string;\r\n/**\r\n * converts strings to PascalCase\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in PascalCase\r\n */\r\nexport declare function pascalCase(string: string): string;\r\n/**\r\n * converts strings to kebab-case\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in kebab-case\r\n */\r\nexport declare function kebabCase(string: string): string;\r\n/**\r\n * converts strings to snake_case\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in snake_case\r\n */\r\nexport declare function snakeCase(string: string): string;\r\n/**\r\n * converts strings to CONSTANT_CASE\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in CONSTANT_CASE\r\n */\r\nexport declare function constantCase(string: string): string;\r\n/**\r\n * converts strings to path/case\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in path/case\r\n */\r\nexport declare function pathCase(string: string): string;\r\n/**\r\n * converts strings to space case (will add spaces but not change casing)\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in path case\r\n */\r\nexport declare function spaceCase(string: string): string;\r\n/**\r\n * converts strings to Capital Case (with spaces)\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in Capital Case (with spaces)\r\n */\r\nexport declare function capitalCase(string: string): string;\r\n/**\r\n * converts strings to lower case (with spaces)\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in lower case (with spaces)\r\n */\r\nexport declare function lowerCase(string: string): string;\r\n/**\r\n * converts strings to UPPER CASE (with spaces)\r\n *\r\n * @export\r\n * @param {string} string\r\n * @returns {string} in UPPER CASE (with spaces)\r\n */\r\nexport declare function upperCase(string: string): string;\r\n",
      "types/index.d.ts": "export { camelCase, pascalCase, kebabCase, snakeCase, constantCase, pathCase, spaceCase, capitalCase, lowerCase, upperCase, } from './core';\r\n",
      "types/utils.d.ts": "/**\r\n * A string.match function that will return an array of \"string parts\"\r\n *\r\n * @param {string} string\r\n * @returns {string[]}\r\n */\r\nexport declare function splitOnSpecialChars(string: string): any[];\r\n/**\r\n * A string.match function that will return an array of \"string parts\"\r\n *\r\n * @param {string} string\r\n * @returns {string[]}\r\n */\r\nexport declare function getParts(string: string, noSpecialChars?: boolean): any[];\r\n/**\r\n * Capitalises a single word\r\n *\r\n * @export\r\n * @param {string} string the word\r\n * @returns {string} the word with the first character in uppercase and the rest in lowercase\r\n */\r\nexport declare function capitaliseWord(string: string): string;\r\n"
    },
    "csstype": {
      "index.d.ts": "export interface StandardLonghandProperties<TLength = string | 0> {\n  /**\n   * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  alignContent?: AlignContentProperty;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **52**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  alignItems?: AlignItemsProperty;\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **20**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :------: | :----: | :----------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _-x-_ |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  alignSelf?: AlignSelfProperty;\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  animationDelay?: GlobalsString;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  animationDirection?: AnimationDirectionProperty;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  animationDuration?: GlobalsString;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  animationFillMode?: AnimationFillModeProperty;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  animationIterationCount?: AnimationIterationCountProperty;\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  animationName?: AnimationNameProperty;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  animationPlayState?: AnimationPlayStateProperty;\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  animationTimingFunction?: AnimationTimingFunctionProperty;\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | auto | button | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    |   Firefox   |   Safari    |     Edge     | IE  |\n   * | :---------: | :---------: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **1** _-x-_ | **3** _-x-_ | **12** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: AppearanceProperty;\n  /**\n   * The **`aspect-ratio`**    CSS property sets a _**preferred aspect ratio**_ for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **71**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  aspectRatio?: AspectRatioProperty;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** |   n/a   | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  backdropFilter?: BackdropFilterProperty;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox  |    Safari     |  Edge  |   IE   |\n   * | :------: | :------: | :-----------: | :----: | :----: |\n   * |  **36**  |  **16**  | **5.1** _-x-_ | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ |               |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  backfaceVisibility?: BackfaceVisibilityProperty;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  backgroundAttachment?: BackgroundAttachmentProperty;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **30**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  backgroundBlendMode?: BackgroundBlendModeProperty;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  |  IE   |\n   * | :----: | :-----: | :---------: | :----: | :---: |\n   * | **1**  |  **4**  | **3** _-x-_ | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  backgroundClip?: BackgroundClipProperty;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  backgroundColor?: BackgroundColorProperty;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  backgroundImage?: BackgroundImageProperty;\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  backgroundOrigin?: BackgroundOriginProperty;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  backgroundPosition?: BackgroundPositionProperty<TLength>;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `left`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  backgroundPositionX?: BackgroundPositionXProperty<TLength>;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position, relative to the background position layer defined by `background-origin`, for each defined background image.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  backgroundPositionY?: BackgroundPositionYProperty<TLength>;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  backgroundRepeat?: BackgroundRepeatProperty;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  backgroundSize?: BackgroundSizeProperty<TLength>;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  blockOverflow?: BlockOverflowProperty;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  blockSize?: BlockSizeProperty<TLength>;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  borderBlockColor?: BorderBlockColorProperty;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  borderBlockEndColor?: BorderBlockEndColorProperty;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  borderBlockEndStyle?: BorderBlockEndStyleProperty;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  borderBlockEndWidth?: BorderBlockEndWidthProperty<TLength>;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  borderBlockStartColor?: BorderBlockStartColorProperty;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  borderBlockStartStyle?: BorderBlockStartStyleProperty;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  borderBlockStartWidth?: BorderBlockStartWidthProperty<TLength>;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  borderBlockStyle?: BorderBlockStyleProperty;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  borderBlockWidth?: BorderBlockWidthProperty<TLength>;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  borderBottomColor?: BorderBottomColorProperty;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  borderBottomLeftRadius?: BorderBottomLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  borderBottomRightRadius?: BorderBottomRightRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  borderBottomStyle?: BorderBottomStyleProperty;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of a box.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  borderBottomWidth?: BorderBottomWidthProperty<TLength>;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  borderCollapse?: BorderCollapseProperty;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  borderEndEndRadius?: BorderEndEndRadiusProperty<TLength>;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  borderEndStartRadius?: BorderEndStartRadiusProperty<TLength>;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  borderImageOutset?: BorderImageOutsetProperty<TLength>;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  borderImageRepeat?: BorderImageRepeatProperty;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  borderImageSlice?: BorderImageSliceProperty;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  borderImageSource?: BorderImageSourceProperty;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  borderImageWidth?: BorderImageWidthProperty<TLength>;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  borderInlineColor?: BorderInlineColorProperty;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  borderInlineEndColor?: BorderInlineEndColorProperty;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  borderInlineEndStyle?: BorderInlineEndStyleProperty;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  borderInlineEndWidth?: BorderInlineEndWidthProperty<TLength>;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |\n   * | :----: | :---------------------------: | :------: | :----: | :-: |\n   * | **69** |            **41**             | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  borderInlineStartColor?: BorderInlineStartColorProperty;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |\n   * | :----: | :---------------------------: | :------: | :----: | :-: |\n   * | **69** |            **41**             | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  borderInlineStartStyle?: BorderInlineStartStyleProperty;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  borderInlineStartWidth?: BorderInlineStartWidthProperty<TLength>;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  borderInlineStyle?: BorderInlineStyleProperty;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  borderInlineWidth?: BorderInlineWidthProperty<TLength>;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  borderLeftColor?: BorderLeftColorProperty;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  borderLeftStyle?: BorderLeftStyleProperty;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  borderLeftWidth?: BorderLeftWidthProperty<TLength>;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  borderRightColor?: BorderRightColorProperty;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  borderRightStyle?: BorderRightStyleProperty;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  borderRightWidth?: BorderRightWidthProperty<TLength>;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent `<table>` cells. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  borderSpacing?: BorderSpacingProperty<TLength>;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  borderStartEndRadius?: BorderStartEndRadiusProperty<TLength>;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  borderStartStartRadius?: BorderStartStartRadiusProperty<TLength>;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  borderTopColor?: BorderTopColorProperty;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  borderTopLeftRadius?: BorderTopLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  borderTopRightRadius?: BorderTopRightRadiusProperty<TLength>;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  borderTopStyle?: BorderTopStyleProperty;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  borderTopWidth?: BorderTopWidthProperty<TLength>;\n  /**\n   * The **`bottom`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: BottomProperty<TLength>;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |    Safari     |     Edge     | IE  |\n   * | :----------: | :-----: | :-----------: | :----------: | :-: |\n   * | **22** _-x-_ | **32**  | **6.1** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  boxDecorationBreak?: BoxDecorationBreakProperty;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  boxShadow?: BoxShadowProperty;\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  boxSizing?: BoxSizingProperty;\n  /**\n   * The **`break-after`** CSS property defines how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** |   No    |   No   | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  breakAfter?: BreakAfterProperty;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  |   No   | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  breakBefore?: BreakBeforeProperty;\n  /**\n   * The **`break-inside`** CSS property defines how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  breakInside?: BreakInsideProperty;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  captionSide?: CaptionSideProperty;\n  /**\n   * The **`caret-color`** CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **53**  | **11.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  caretColor?: CaretColorProperty;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: ClearProperty;\n  /**\n   * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **55**  | **3.5** |  **9.1**  | **12** | **10** |\n   * | 23 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  clipPath?: ClipPathProperty;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: Varies from one browser to another\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: ColorProperty;\n  /**\n   * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |                Chrome                 | Firefox |                Safari                |                 Edge                  | IE  |\n   * | :-----------------------------------: | :-----: | :----------------------------------: | :-----------------------------------: | :-: |\n   * | **49** _(-webkit-print-color-adjust)_ | **48**  | **6** _(-webkit-print-color-adjust)_ | **79** _(-webkit-print-color-adjust)_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-adjust\n   */\n  colorAdjust?: ColorAdjustProperty;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  columnCount?: ColumnCountProperty;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  columnFill?: ColumnFillProperty;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   | **63**  | **3** _-x-_ |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |     Chrome      |     Firefox     |        Safari         |  Edge  | IE  |\n   * | :-------------: | :-------------: | :-------------------: | :----: | :-: |\n   * |     **66**      |     **61**      | **10.1** _(grid-gap)_ | **16** | No  |\n   * | 57 _(grid-gap)_ | 52 _(grid-gap)_ |                       |        |     |\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  | **10**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  columnGap?: ColumnGapProperty<TLength>;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  columnRuleColor?: ColumnRuleColorProperty;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  columnRuleStyle?: ColumnRuleStyleProperty;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  columnRuleWidth?: ColumnRuleWidthProperty<TLength>;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  columnSpan?: ColumnSpanProperty;\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  columnWidth?: ColumnWidthProperty<TLength>;\n  /**\n   * The **`contain`** CSS property allows an author to indicate that an element and its contents are, as much as possible, _independent_ of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page.\n   *\n   * **Syntax**: `none | strict | content | [ size || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **52** | **69**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: ContainProperty;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are _anonymous replaced elements._\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: ContentProperty;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  counterIncrement?: CounterIncrementProperty;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  counterReset?: CounterResetProperty;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **68**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  counterSet?: CounterSetProperty;\n  /**\n   * The **`cursor`** CSS property sets mouse cursor to display when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: CursorProperty;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: DirectionProperty;\n  /**\n   * The **`display`** CSS property defines the _display type_ of an element, which consists of the two basic qualities of how an element generates boxes — the **outer display type** defining how the box participates in flow layout, and the **inner display type** defining how the children of the box are laid out.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: DisplayProperty;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  emptyCells?: EmptyCellsProperty;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: FilterProperty;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  flexBasis?: FlexBasisProperty<TLength>;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  flexDirection?: FlexDirectionProperty;\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |            IE            |\n   * | :------: | :-----: | :-------: | :----: | :----------------------: |\n   * |  **29**  | **20**  |   **9**   | **12** |          **11**          |\n   * | 22 _-x-_ |         | 6.1 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  flexGrow?: GlobalsNumber;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  flexShrink?: GlobalsNumber;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  flexWrap?: FlexWrapProperty;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: FloatProperty;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  fontFamily?: FontFamilyProperty;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  fontFeatureSettings?: FontFeatureSettingsProperty;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **33** | **32**  |  **9**  | **79** | No  |\n   * |        |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  fontKerning?: FontKerningProperty;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   |  No  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  fontLanguageOverride?: FontLanguageOverrideProperty;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes. This only works for fonts that have an optical size variation axis.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  fontOpticalSizing?: FontOpticalSizingProperty;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative `<length>` units.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  fontSize?: FontSizeProperty<TLength>;\n  /**\n   * The **`font-size-adjust`** CSS property sets how the font size should be chosen based on the height of lowercase rather than capital letters.\n   *\n   * **Syntax**: `none | <number>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |  **1**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  fontSizeAdjust?: FontSizeAdjustProperty;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  fontStretch?: FontStretchProperty;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  fontStyle?: FontStyleProperty;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style ]`\n   *\n   * **Initial value**: `weight style`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  | **9**  |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  fontSynthesis?: FontSynthesisProperty;\n  /**\n   * The **font-variant** CSS property is a shorthand for the longhand properties `font-variant-caps`, `font-variant-numeric`, `font-variant-alternates`, `font-variant-ligatures`, and `font-variant-east-asian`. You can also set the CSS Level 2 (Revision 1) values of `font-variant`, (that is, `normal` or `small-caps`), by using the `font` shorthand.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  fontVariant?: FontVariantProperty;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **52** | **34**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  fontVariantCaps?: FontVariantCapsProperty;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **34**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  fontVariantEastAsian?: FontVariantEastAsianProperty;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **34**  | **34**  | **9.1** | **79** | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  fontVariantLigatures?: FontVariantLigaturesProperty;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **52** | **34**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  fontVariantNumeric?: FontVariantNumericProperty;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  fontVariantPosition?: FontVariantPositionProperty;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  fontVariationSettings?: FontVariationSettingsProperty;\n  /**\n   * The **`font-weight`** CSS property specifies the weight (or boldness) of the font. The font weights available to you will depend on the `font-family` you are using. Some fonts are only available in `normal` and `bold`.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  fontWeight?: FontWeightProperty;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |          Edge           |             IE              |\n   * | :----: | :-----: | :------: | :---------------------: | :-------------------------: |\n   * | **57** | **70**  | **10.1** |         **16**          | **10** _(-ms-grid-columns)_ |\n   * |        |         |          | 12 _(-ms-grid-columns)_ |                             |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  gridAutoColumns?: GridAutoColumnsProperty<TLength>;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  gridAutoFlow?: GridAutoFlowProperty;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |         Edge         |            IE            |\n   * | :----: | :-----: | :------: | :------------------: | :----------------------: |\n   * | **57** | **70**  | **10.1** |        **16**        | **10** _(-ms-grid-rows)_ |\n   * |        |         |          | 12 _(-ms-grid-rows)_ |                          |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  gridAutoRows?: GridAutoRowsProperty<TLength>;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  gridColumnEnd?: GridColumnEndProperty;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  gridColumnStart?: GridColumnStartProperty;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item’s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  gridRowEnd?: GridRowEndProperty;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item’s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  gridRowStart?: GridRowStartProperty;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  gridTemplateAreas?: GridTemplateAreasProperty;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  gridTemplateColumns?: GridTemplateColumnsProperty<TLength>;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  gridTemplateRows?: GridTemplateRowsProperty<TLength>;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  hangingPunctuation?: HangingPunctuationProperty;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: HeightProperty<TLength>;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |    Safari     |     Edge     |      IE      |\n   * | :------: | :-----: | :-----------: | :----------: | :----------: |\n   * |  **55**  | **43**  | **5.1** _-x-_ | **12** _-x-_ | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ |               |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: HyphensProperty;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image. It should _not_ be used for any other orientation adjustments; instead, the `transform` property should be used with the `rotate` `<transform-function>`.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `0deg`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **81** | **26**  | **13.1** | **81** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  imageOrientation?: ImageOrientationProperty;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **13** | **3.6** | **6**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  imageRendering?: ImageRenderingProperty;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  imageResolution?: ImageResolutionProperty;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **9**  |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  initialLetter?: InitialLetterProperty;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  inlineSize?: InlineSizeProperty<TLength>;\n  /**\n   * The **`inset`** CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: InsetProperty<TLength>;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  insetBlock?: InsetBlockProperty<TLength>;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  insetBlockEnd?: InsetBlockEndProperty<TLength>;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  insetBlockStart?: InsetBlockStartProperty<TLength>;\n  /**\n   * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  insetInline?: InsetInlineProperty<TLength>;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  insetInlineEnd?: InsetInlineEndProperty<TLength>;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  insetInlineStart?: InsetInlineStartProperty<TLength>;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **41** | **36**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: IsolationProperty;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **52**  | **20**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  justifyContent?: JustifyContentProperty;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  justifyItems?: JustifyItemsProperty;\n  /**\n   * The CSS **`justify-self`** property set the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  justifySelf?: JustifySelfProperty;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: LeftProperty<TLength>;\n  /**\n   * The **`letter-spacing`** CSS property sets the spacing behavior between text characters.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  letterSpacing?: LetterSpacingProperty<TLength>;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |  Edge  |   IE    |\n   * | :-----: | :-----: | :---------: | :----: | :-----: |\n   * | **58**  | **69**  | **3** _-x-_ | **14** | **5.5** |\n   * | 1 _-x-_ |         |             |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  lineBreak?: LineBreakProperty;\n  /**\n   * The **`line-height`** CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  lineHeight?: LineHeightProperty<TLength>;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  lineHeightStep?: LineHeightStepProperty<TLength>;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  listStyleImage?: ListStyleImageProperty;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  listStylePosition?: ListStylePositionProperty;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  listStyleType?: ListStyleTypeProperty;\n  /**\n   * The **`margin-block`** CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  marginBlock?: MarginBlockProperty<TLength>;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  marginBlockEnd?: MarginBlockEndProperty<TLength>;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  marginBlockStart?: MarginBlockStartProperty<TLength>;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  marginBottom?: MarginBottomProperty<TLength>;\n  /**\n   * The **`margin-inline`** CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  marginInline?: MarginInlineProperty<TLength>;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          |  Edge  | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :----: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | **79** | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  marginInlineEnd?: MarginInlineEndProperty<TLength>;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           |  Edge  | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :----: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | **79** | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  marginInlineStart?: MarginInlineStartProperty<TLength>;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  marginLeft?: MarginLeftProperty<TLength>;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  marginRight?: MarginRightProperty<TLength>;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  marginTop?: MarginTopProperty<TLength>;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  maskBorderMode?: MaskBorderModeProperty;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  maskBorderOutset?: MaskBorderOutsetProperty<TLength>;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  maskBorderRepeat?: MaskBorderRepeatProperty;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  maskBorderSlice?: MaskBorderSliceProperty;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  maskBorderSource?: MaskBorderSourceProperty;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  maskBorderWidth?: MaskBorderWidthProperty<TLength>;\n  /**\n   * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |\n   * | :---------: | :-----: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  maskClip?: MaskClipProperty;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome | Firefox | Safari | Edge  | IE  |\n   * | :----: | :-----: | :----: | :---: | :-: |\n   * |   No   | **53**  |   No   | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  maskComposite?: MaskCompositeProperty;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |\n   * | :---------: | :-----: | :---------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  maskImage?: MaskImageProperty;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **53**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  maskMode?: MaskModeProperty;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |\n   * | :---------: | :-----: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  maskOrigin?: MaskOriginProperty;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |\n   * | :---------: | :-----: | :-----------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  maskPosition?: MaskPositionProperty<TLength>;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `no-repeat`\n   *\n   * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |\n   * | :---------: | :-----: | :-----------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  maskRepeat?: MaskRepeatProperty;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |\n   * | :---------: | :-----: | :---------: | :----: | :-: |\n   * | **4** _-x-_ | **53**  | **4** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  maskSize?: MaskSizeProperty<TLength>;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **24** | **35**  | **6.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  maskType?: MaskTypeProperty;\n  /**\n   * The `**max-block-size**` CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  maxBlockSize?: MaxBlockSizeProperty<TLength>;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  maxHeight?: MaxHeightProperty<TLength>;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |   Safari   |  Edge  | IE  |\n   * | :----: | :-----: | :--------: | :----: | :-: |\n   * | **57** | **41**  |  **12.1**  | **79** | No  |\n   * |        |         | 10.1 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  maxInlineSize?: MaxInlineSizeProperty<TLength>;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  maxLines?: MaxLinesProperty;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  maxWidth?: MaxWidthProperty<TLength>;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  minBlockSize?: MinBlockSizeProperty<TLength>;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  minHeight?: MinHeightProperty<TLength>;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  minInlineSize?: MinInlineSizeProperty<TLength>;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  minWidth?: MinWidthProperty<TLength>;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **41** | **32**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  mixBlendMode?: MixBlendModeProperty;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **55**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-distance)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  motionDistance?: OffsetDistanceProperty<TLength>;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox | Safari |  Edge  | IE  |\n   * | :----------------: | :-----: | :----: | :----: | :-: |\n   * |       **55**       | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-path)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  motionPath?: OffsetPathProperty;\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  motionRotation?: OffsetRotateProperty;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **31** | **36**  | **10** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  objectFit?: ObjectFitProperty;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **31** | **36**  | **10** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  objectPosition?: ObjectPositionProperty<TLength>;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **72**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  offsetAnchor?: OffsetAnchorProperty<TLength>;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **55**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-distance)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  offsetDistance?: OffsetDistanceProperty<TLength>;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox | Safari |  Edge  | IE  |\n   * | :----------------: | :-----: | :----: | :----: | :-: |\n   * |       **55**       | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-path)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  offsetPath?: OffsetPathProperty;\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotate?: OffsetRotateProperty;\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotation?: OffsetRotateProperty;\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: OpacityProperty;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: GlobalsNumber;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: GlobalsNumber;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  outlineColor?: OutlineColorProperty;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  outlineOffset?: OutlineOffsetProperty<TLength>;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  outlineStyle?: OutlineStyleProperty;\n  /**\n   * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  outlineWidth?: OutlineWidthProperty<TLength>;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **56** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  overflowAnchor?: OverflowAnchorProperty;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  overflowBlock?: OverflowBlockProperty;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **29**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box\n   */\n  overflowClipBox?: OverflowClipBoxProperty;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  overflowInline?: OverflowInlineProperty;\n  /**\n   * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |     **6.1**     |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  overflowWrap?: OverflowWrapProperty;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  overflowX?: OverflowXProperty;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **1.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  overflowY?: OverflowYProperty;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  overscrollBehavior?: OverscrollBehaviorProperty;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **77** | **73**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  overscrollBehaviorBlock?: OverscrollBehaviorBlockProperty;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **77** | **73**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  overscrollBehaviorInline?: OverscrollBehaviorInlineProperty;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  overscrollBehaviorX?: OverscrollBehaviorXProperty;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  overscrollBehaviorY?: OverscrollBehaviorYProperty;\n  /**\n   * The **`padding-block`** CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  paddingBlock?: PaddingBlockProperty<TLength>;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  paddingBlockEnd?: PaddingBlockEndProperty<TLength>;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  paddingBlockStart?: PaddingBlockStartProperty<TLength>;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  paddingBottom?: PaddingBottomProperty<TLength>;\n  /**\n   * The **`padding-inline`** CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  paddingInline?: PaddingInlineProperty<TLength>;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           |  Edge  | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :----: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | **79** | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  paddingInlineEnd?: PaddingInlineEndProperty<TLength>;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            |  Edge  | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :----: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | **79** | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  paddingInlineStart?: PaddingInlineStartProperty<TLength>;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area on the left side of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  paddingLeft?: PaddingLeftProperty<TLength>;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right side of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  paddingRight?: PaddingRightProperty<TLength>;\n  /**\n   * The **`padding-top`** padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  paddingTop?: PaddingTopProperty<TLength>;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  pageBreakAfter?: PageBreakAfterProperty;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  pageBreakBefore?: PageBreakBeforeProperty;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  pageBreakInside?: PageBreakInsideProperty;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  paintOrder?: PaintOrderProperty;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: PerspectiveProperty<TLength>;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  perspectiveOrigin?: PerspectiveOriginProperty<TLength>;\n  /**\n   * The `**place-content**` CSS property is a shorthand for `align-content` and `justify-content`. It can be used in any layout method which utilizes both of these alignment values.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **9**  | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **53**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  placeContent?: PlaceContentProperty;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of mouse events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  pointerEvents?: PointerEventsProperty;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: PositionProperty;\n  /**\n   * The **`quotes`** CSS property sets how quotation marks appear.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: QuotesProperty;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **1**  |  **4**  | **3**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: ResizeProperty;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: RightProperty<TLength>;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: RotateProperty;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **63**  |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |       Chrome        |       Firefox       |          Safari           |  Edge  | IE  |\n   * | :-----------------: | :-----------------: | :-----------------------: | :----: | :-: |\n   * |       **66**        |       **61**        | **10.1** _(grid-row-gap)_ | **16** | No  |\n   * | 57 _(grid-row-gap)_ | 52 _(grid-row-gap)_ |                           |        |     |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  rowGap?: RowGapProperty<TLength>;\n  /**\n   * The `**ruby-align**` CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  rubyAlign?: RubyAlignProperty;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  rubyMerge?: RubyMergeProperty;\n  /**\n   * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).\n   *\n   * **Syntax**: `over | under | inter-character`\n   *\n   * **Initial value**: `over`\n   *\n   * | Chrome | Firefox | Safari | Edge  | IE  |\n   * | :----: | :-----: | :----: | :---: | :-: |\n   * |   No   | **38**  |   No   | 12-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  rubyPosition?: RubyPositionProperty;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: ScaleProperty;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **61** | **36**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  scrollBehavior?: ScrollBehaviorProperty;\n  /**\n   * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollMargin?: ScrollMarginProperty<TLength>;\n  /**\n   * The `scroll-margin-block` property is a shorthand property which sets the scroll-margin longhands in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  scrollMarginBlock?: ScrollMarginBlockProperty<TLength>;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  scrollMarginBlockEnd?: ScrollMarginBlockEndProperty<TLength>;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  scrollMarginBlockStart?: ScrollMarginBlockStartProperty<TLength>;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |                Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :----------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollMarginBottom?: ScrollMarginBottomProperty<TLength>;\n  /**\n   * The `scroll-margin-inline` property is a shorthand property which sets the scroll-margin longhands in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **68**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  scrollMarginInline?: ScrollMarginInlineProperty<TLength>;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  scrollMarginInlineEnd?: ScrollMarginInlineEndProperty<TLength>;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  scrollMarginInlineStart?: ScrollMarginInlineStartProperty<TLength>;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :--------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollMarginLeft?: ScrollMarginLeftProperty<TLength>;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollMarginRight?: ScrollMarginRightProperty<TLength>;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :-------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollMarginTop?: ScrollMarginTopProperty<TLength>;\n  /**\n * The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-\\* longhands.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  | **11** | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n */\n  scrollPadding?: ScrollPaddingProperty<TLength>;\n  /**\n * The `scroll-padding-block` property is a shorthand property which sets the scroll-padding longhands for the block dimension.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  |   No   | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n */\n  scrollPaddingBlock?: ScrollPaddingBlockProperty<TLength>;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  scrollPaddingBlockEnd?: ScrollPaddingBlockEndProperty<TLength>;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  scrollPaddingBlockStart?: ScrollPaddingBlockStartProperty<TLength>;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  scrollPaddingBottom?: ScrollPaddingBottomProperty<TLength>;\n  /**\n * The `scroll-padding-inline` property is a shorthand property which sets the scroll-padding longhands for the inline dimension.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  |   No   | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n */\n  scrollPaddingInline?: ScrollPaddingInlineProperty<TLength>;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  scrollPaddingInlineEnd?: ScrollPaddingInlineEndProperty<TLength>;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  scrollPaddingInlineStart?: ScrollPaddingInlineStartProperty<TLength>;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  scrollPaddingLeft?: ScrollPaddingLeftProperty<TLength>;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  scrollPaddingRight?: ScrollPaddingRightProperty<TLength>;\n  /**\n   * The `scroll-padding-top` property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  scrollPaddingTop?: ScrollPaddingTopProperty<TLength>;\n  /**\n   * The `scroll-snap-align` property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  scrollSnapAlign?: ScrollSnapAlignProperty;\n  /**\n   * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollSnapMargin?: ScrollMarginProperty<TLength>;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |                Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :----------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollSnapMarginBottom?: ScrollMarginBottomProperty<TLength>;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :--------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollSnapMarginLeft?: ScrollMarginLeftProperty<TLength>;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollSnapMarginRight?: ScrollMarginRightProperty<TLength>;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :-------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollSnapMarginTop?: ScrollMarginTopProperty<TLength>;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **75** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  scrollSnapStop?: ScrollSnapStopProperty;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |     Edge     |      IE      |\n   * | :----: | :-----: | :-----: | :----------: | :----------: |\n   * | **69** |  39-68  | **11**  | **12** _-x-_ | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  scrollSnapType?: ScrollSnapTypeProperty;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | dark | light | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  scrollbarColor?: ScrollbarColorProperty;\n  /**\n   * The `scrollbar-width` property allows the author to set the maximum thickness of an element’s scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  scrollbarWidth?: ScrollbarWidthProperty;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  shapeImageThreshold?: ShapeImageThresholdProperty;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |     Safari     |  Edge  | IE  |\n   * | :----: | :-----: | :------------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** _-x-_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  shapeMargin?: ShapeMarginProperty<TLength>;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | <shape-box> || <basic-shape> | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  shapeOutside?: ShapeOutsideProperty;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome |   Firefox   | Safari  |  Edge  | IE  |\n   * | :----: | :---------: | :-----: | :----: | :-: |\n   * | **21** | **4** _-x-_ | **6.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  tabSize?: TabSizeProperty<TLength>;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  tableLayout?: TableLayoutProperty;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  textAlign?: TextAlignProperty;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  |   No   | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  textAlignLast?: TextAlignLastProperty;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |              Safari              |                  Edge                  |                   IE                   |\n   * | :------------------------: | :-----: | :------------------------------: | :------------------------------------: | :------------------------------------: |\n   * |           **48**           | **48**  | **5.1** _(-webkit-text-combine)_ | **12** _(-ms-text-combine-horizontal)_ | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         |                                  |                                        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  textCombineUpright?: TextCombineUprightProperty;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  textDecorationColor?: TextDecorationColorProperty;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  textDecorationLine?: TextDecorationLineProperty;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** |  No  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  textDecorationSkip?: TextDecorationSkipProperty;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **64** | **70**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  textDecorationSkipInk?: TextDecorationSkipInkProperty;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  textDecorationStyle?: TextDecorationStyleProperty;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  textDecorationThickness?: TextDecorationThicknessProperty<TLength>;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  textDecorationWidth?: TextDecorationThicknessProperty<TLength>;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  textEmphasisColor?: TextEmphasisColorProperty;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  textEmphasisPosition?: GlobalsString;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  textEmphasisStyle?: TextEmphasisStyleProperty;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  textIndent?: TextIndentProperty<TLength>;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * |  n/a   | **55**  |   No   | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  textJustify?: TextJustifyProperty;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |    Safari     |  Edge  | IE  |\n   * | :------: | :-----: | :-----------: | :----: | :-: |\n   * |  **48**  | **41**  | **5.1** _-x-_ | **79** | No  |\n   * | 11 _-x-_ |         |               |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  textOrientation?: TextOrientationProperty;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  textOverflow?: TextOverflowProperty;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **4**  |  **1**  | **5**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  textRendering?: TextRenderingProperty;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  textShadow?: TextShadowProperty;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  textSizeAdjust?: TextSizeAdjustProperty;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  textTransform?: TextTransformProperty;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  textUnderlineOffset?: TextUnderlineOffsetProperty<TLength>;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  textUnderlinePosition?: TextUnderlinePositionProperty;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: TopProperty<TLength>;\n  /**\n   * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  touchAction?: TouchActionProperty;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: TransformProperty;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform` and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **64** | **55**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  transformBox?: TransformBoxProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |\n   * | :-----: | :-------: | :-----: | :----: | :-----: |\n   * | **36**  |  **16**   |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  transformOrigin?: TransformOriginProperty<TLength>;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |\n   * | :------: | :------: | :-----: | :----: | :-: |\n   * |  **36**  |  **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  transformStyle?: TransformStyleProperty;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  transitionDelay?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  transitionDuration?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  transitionProperty?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  transitionTimingFunction?: TransitionTimingFunctionProperty;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: TranslateProperty<TLength>;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  unicodeBidi?: UnicodeBidiProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |     Edge     |      IE      |\n   * | :-----: | :-----: | :---------: | :----------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ | **12** _-x-_ | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  userSelect?: UserSelectProperty;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  verticalAlign?: VerticalAlignProperty<TLength>;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: VisibilityProperty;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  whiteSpace?: WhiteSpaceProperty;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: GlobalsNumber;\n  /**\n   * The **`width`** CSS property sets an element's width. By default it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: WidthProperty<TLength>;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **36** | **36**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  willChange?: WillChangeProperty;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  wordBreak?: WordBreakProperty;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  wordSpacing?: WordSpacingProperty<TLength>;\n  /**\n   * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **3.5** | **2**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  wordWrap?: WordWrapProperty;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |     IE      |\n   * | :-----: | :-----: | :-------: | :----: | :---------: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** _-x-_ |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |             |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  writingMode?: WritingModeProperty;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  zIndex?: ZIndexProperty;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   No    | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: ZoomProperty;\n}\n\nexport interface StandardShorthandProperties<TLength = string | 0> {\n  /**\n   * The `**all**` CSS shorthand property sets all of an element's properties (other than `unicode-bidi` and `direction`) to their initial or inherited values, or to the values specified in another stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **37** | **27**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Globals;\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: AnimationProperty;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: BackgroundProperty<TLength>;\n  /**\n   * The **`border`** CSS property sets an element's border. It's a shorthand for `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: BorderProperty<TLength>;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  borderBlock?: BorderBlockProperty<TLength>;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  borderBlockEnd?: BorderBlockEndProperty<TLength>;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  borderBlockStart?: BorderBlockStartProperty<TLength>;\n  /**\n   * The **`border-bottom`** CSS property is a shorthand that sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`. These properties set an element's bottom border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  borderBottom?: BorderBottomProperty<TLength>;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of all sides of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  borderColor?: BorderColorProperty;\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  borderImage?: BorderImageProperty;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  borderInline?: BorderInlineProperty<TLength>;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  borderInlineEnd?: BorderInlineEndProperty<TLength>;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  borderInlineStart?: BorderInlineStartProperty<TLength>;\n  /**\n   * The **`border-left`** CSS property is a shorthand that sets the values of `border-left-width`, `border-left-style` and `border-left-color`. These properties set an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  borderLeft?: BorderLeftProperty<TLength>;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  borderRadius?: BorderRadiusProperty<TLength>;\n  /**\n   * The **`border-right`** CSS property is a shorthand that sets the values of `border-right-width`, `border-right-style` and `border-right-color`. These properties set an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  borderRight?: BorderRightProperty<TLength>;\n  /**\n   * The **`border-style`** CSS property is a shorthand property that sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  borderStyle?: BorderStyleProperty;\n  /**\n   * The **`border-top`** CSS property is a shorthand that sets the values of `border-top-width`, `border-top-style` and `border-top-color`. These properties set an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  borderTop?: BorderTopProperty<TLength>;\n  /**\n   * The **`border-width`** shorthand CSS property sets the widths of all four sides of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  borderWidth?: BorderWidthProperty<TLength>;\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  columnRule?: ColumnRuleProperty<TLength>;\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: ColumnsProperty<TLength>;\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |    IE    |\n   * | :------: | :-----: | :-------: | :----: | :------: |\n   * |  **29**  | **20**  |   **9**   | **12** |  **11**  |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: FlexProperty<TLength>;\n  /**\n   * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  flexFlow?: FlexFlowProperty;\n  /**\n   * The **`font`** CSS property is a shorthand for `font-style`, `font-variant`, `font-weight`, `font-size`, `line-height`, and `font-family`. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: FontProperty;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **84** | **63**  |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |     Chrome      |     Firefox     |      Safari       |  Edge  | IE  |\n   * | :-------------: | :-------------: | :---------------: | :----: | :-: |\n   * |     **66**      |     **61**      |      **12**       | **16** | No  |\n   * | 57 _(grid-gap)_ | 52 _(grid-gap)_ | 10.1 _(grid-gap)_ |        |     |\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **66** | **61**  |   No   | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: GapProperty<TLength>;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit grid properties (`grid-template-rows`, `grid-template-columns`, and `grid-template-areas`), and all the implicit grid properties (`grid-auto-rows`, `grid-auto-columns`, and `grid-auto-flow`), in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: GridProperty;\n  /**\n   * The **`grid-area`** CSS property is a shorthand property for `grid-row-start`, `grid-column-start`, `grid-row-end` and `grid-column-end`, specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  gridArea?: GridAreaProperty;\n  /**\n   * The **`grid-column`** CSS property is a shorthand property for `grid-column-start` and `grid-column-end` specifying a grid item's size and location within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  gridColumn?: GridColumnProperty;\n  /**\n   * The **`grid-row`** CSS property is a shorthand property for `grid-row-start` and `grid-row-end` specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  gridRow?: GridRowProperty;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, rows, and areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  gridTemplate?: GridTemplateProperty;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  lineClamp?: LineClampProperty;\n  /**\n   * The **`list-style`** CSS property is a shorthand to set list style properties `list-style-type`, `list-style-image`, and `list-style-position`.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  listStyle?: ListStyleProperty;\n  /**\n   * The **`margin`** CSS property sets the margin area on all four sides of an element. It is a shorthand for `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: MarginProperty<TLength>;\n  /**\n   * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  |  **2**  | **3.2** | **12** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: MaskProperty<TLength>;\n  /**\n   * The **`mask-border`** CSS property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  maskBorder?: MaskBorderProperty;\n  /**\n   * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari |  Edge  | IE  |\n   * | :-----------: | :-----: | :----: | :----: | :-: |\n   * |    **55**     | **72**  |   No   | **79** | No  |\n   * | 46 _(motion)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: OffsetProperty<TLength>;\n  /**\n   * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari |  Edge  | IE  |\n   * | :-----------: | :-----: | :----: | :----: | :-: |\n   * |    **55**     | **72**  |   No   | **79** | No  |\n   * | 46 _(motion)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: OffsetProperty<TLength>;\n  /**\n   * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: OutlineProperty<TLength>;\n  /**\n   * The **`overflow`** CSS property sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflow-x` and `overflow-y`.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: OverflowProperty;\n  /**\n   * The **`padding`** CSS property sets the padding area on all four sides of an element. It is a shorthand for `padding-top`, `padding-right`, `padding-bottom`, and `padding-left`.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: PaddingProperty<TLength>;\n  /**\n   * The CSS **`place-items`** shorthand property sets the `align-items` and `justify-items` properties, respectively. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  placeItems?: PlaceItemsProperty;\n  /**\n   * The **`place-self`** CSS property is a shorthand property sets both the `align-self` and `justify-self` properties. The first value is the `align-self` property value, the second the `justify-self` one. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  |   No   | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  |   No   | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  placeSelf?: PlaceSelfProperty;\n  /**\n   * The **`text-decoration`** CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, and `text-decoration-style`.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  textDecoration?: TextDecorationProperty<TLength>;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  textEmphasis?: TextEmphasisProperty;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: TransitionProperty;\n}\n\nexport interface StandardProperties<TLength = string | 0> extends StandardLonghandProperties<TLength>, StandardShorthandProperties<TLength> {}\n\nexport interface VendorLonghandProperties<TLength = string | 0> {\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDelay?: GlobalsString;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozAnimationDirection?: AnimationDirectionProperty;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDuration?: GlobalsString;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationFillMode?: AnimationFillModeProperty;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  MozAnimationIterationCount?: AnimationIterationCountProperty;\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationName?: AnimationNameProperty;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  MozAnimationPlayState?: AnimationPlayStateProperty;\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozAnimationTimingFunction?: AnimationTimingFunctionProperty;\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  MozAppearance?: MozAppearanceProperty;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  MozBackfaceVisibility?: BackfaceVisibilityProperty;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderBottomColors?: MozBorderBottomColorsProperty;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderEndColor?: BorderInlineEndColorProperty;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderEndStyle?: BorderInlineEndStyleProperty;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozBorderEndWidth?: BorderInlineEndWidthProperty<TLength>;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderLeftColors?: MozBorderLeftColorsProperty;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderRightColors?: MozBorderRightColorsProperty;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderStartColor?: BorderInlineStartColorProperty;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderStartStyle?: BorderInlineStartStyleProperty;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderTopColors?: MozBorderTopColorsProperty;\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  MozBoxSizing?: BoxSizingProperty;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnCount?: ColumnCountProperty;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  MozColumnFill?: ColumnFillProperty;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   */\n  MozColumnGap?: ColumnGapProperty<TLength>;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozColumnRuleColor?: ColumnRuleColorProperty;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozColumnRuleStyle?: ColumnRuleStyleProperty;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozColumnRuleWidth?: ColumnRuleWidthProperty<TLength>;\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnWidth?: ColumnWidthProperty<TLength>;\n  /**\n   * If you reference an SVG image in a webpage (such as with the `<img>` element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the **`-moz-context-properties`** property, and the image needs to opt in to using those properties by using values such as the `context-fill` value.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozContextProperties?: MozContextPropertiesProperty;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  MozFloatEdge?: MozFloatEdgeProperty;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontFeatureSettings?: FontFeatureSettingsProperty;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontLanguageOverride?: FontLanguageOverrideProperty;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  MozForceBrokenImageIcon?: GlobalsNumber;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  MozHyphens?: HyphensProperty;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozImageRegion?: MozImageRegionProperty;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginEnd?: MarginInlineEndProperty<TLength>;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginStart?: MarginInlineStartProperty<TLength>;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  MozOrient?: MozOrientProperty;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomleft?: MozOutlineRadiusBottomleftProperty<TLength>;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomright?: MozOutlineRadiusBottomrightProperty<TLength>;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopleft?: MozOutlineRadiusTopleftProperty<TLength>;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopright?: MozOutlineRadiusToprightProperty<TLength>;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingEnd?: PaddingInlineEndProperty<TLength>;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingStart?: PaddingInlineStartProperty<TLength>;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  MozPerspective?: PerspectiveProperty<TLength>;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  MozPerspectiveOrigin?: PerspectiveOriginProperty<TLength>;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `stack` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  MozStackSizing?: MozStackSizingProperty;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  MozTabSize?: TabSizeProperty<TLength>;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  MozTextBlink?: MozTextBlinkProperty;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  MozTextSizeAdjust?: TextSizeAdjustProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  MozTransformOrigin?: TransformOriginProperty<TLength>;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  MozTransformStyle?: TransformStyleProperty;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozTransitionDelay?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozTransitionDuration?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  MozTransitionProperty?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozTransitionTimingFunction?: TransitionTimingFunctionProperty;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozUserFocus?: MozUserFocusProperty;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  MozUserModify?: MozUserModifyProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  MozUserSelect?: UserSelectProperty;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  MozWindowDragging?: MozWindowDraggingProperty;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  MozWindowShadow?: MozWindowShadowProperty;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  msAccelerator?: MsAcceleratorProperty;\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  msAlignSelf?: AlignSelfProperty;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  msBlockProgression?: MsBlockProgressionProperty;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomChaining?: MsContentZoomChainingProperty;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  msContentZoomLimitMax?: GlobalsString;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  msContentZoomLimitMin?: GlobalsString;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  msContentZoomSnapPoints?: GlobalsString;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomSnapType?: MsContentZoomSnapTypeProperty;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  msContentZooming?: MsContentZoomingProperty;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  msFilter?: GlobalsString;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  msFlexDirection?: FlexDirectionProperty;\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  msFlexPositive?: GlobalsNumber;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowFrom?: MsFlowFromProperty;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowInto?: MsFlowIntoProperty;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   */\n  msGridColumns?: GridAutoColumnsProperty<TLength>;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   */\n  msGridRows?: GridAutoRowsProperty<TLength>;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  msHighContrastAdjust?: MsHighContrastAdjustProperty;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  msHyphenateLimitChars?: MsHyphenateLimitCharsProperty;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  msHyphenateLimitLines?: MsHyphenateLimitLinesProperty;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  msHyphenateLimitZone?: MsHyphenateLimitZoneProperty<TLength>;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  msHyphens?: HyphensProperty;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  msImeAlign?: MsImeAlignProperty;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  msLineBreak?: LineBreakProperty;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  msOrder?: GlobalsNumber;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  msOverflowStyle?: MsOverflowStyleProperty;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowX?: OverflowXProperty;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowY?: OverflowYProperty;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  msScrollChaining?: MsScrollChainingProperty;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitXMax?: MsScrollLimitXMaxProperty<TLength>;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitXMin?: MsScrollLimitXMinProperty<TLength>;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitYMax?: MsScrollLimitYMaxProperty<TLength>;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitYMin?: MsScrollLimitYMinProperty<TLength>;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  msScrollRails?: MsScrollRailsProperty;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsX?: GlobalsString;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsY?: GlobalsString;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollSnapType?: MsScrollSnapTypeProperty;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollTranslation?: MsScrollTranslationProperty;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbar3dlightColor?: MsScrollbar3dlightColorProperty;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  msScrollbarArrowColor?: MsScrollbarArrowColorProperty;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbarBaseColor?: MsScrollbarBaseColorProperty;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarDarkshadowColor?: MsScrollbarDarkshadowColorProperty;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  msScrollbarFaceColor?: MsScrollbarFaceColorProperty;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  msScrollbarHighlightColor?: MsScrollbarHighlightColorProperty;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarShadowColor?: MsScrollbarShadowColorProperty;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  msTextAutospace?: MsTextAutospaceProperty;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  msTextCombineHorizontal?: TextCombineUprightProperty;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  msTextOverflow?: TextOverflowProperty;\n  /**\n   * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  msTouchAction?: TouchActionProperty;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  msTouchSelect?: MsTouchSelectProperty;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msTransform?: TransformProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  msTransformOrigin?: TransformOriginProperty<TLength>;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDelay?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDuration?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  msTransitionProperty?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  msTransitionTimingFunction?: TransitionTimingFunctionProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  msUserSelect?: MsUserSelectProperty;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  msWordBreak?: WordBreakProperty;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  msWrapFlow?: MsWrapFlowProperty;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msWrapMargin?: MsWrapMarginProperty<TLength>;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  msWrapThrough?: MsWrapThroughProperty;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  msWritingMode?: WritingModeProperty;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   */\n  OObjectFit?: ObjectFitProperty;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  OObjectPosition?: ObjectPositionProperty<TLength>;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  OTabSize?: TabSizeProperty<TLength>;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  OTextOverflow?: TextOverflowProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  OTransformOrigin?: TransformOriginProperty<TLength>;\n  /**\n   * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignContent?: AlignContentProperty;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignItems?: AlignItemsProperty;\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitAlignSelf?: AlignSelfProperty;\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDelay?: GlobalsString;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAnimationDirection?: AnimationDirectionProperty;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDuration?: GlobalsString;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationFillMode?: AnimationFillModeProperty;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitAnimationIterationCount?: AnimationIterationCountProperty;\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationName?: AnimationNameProperty;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  WebkitAnimationPlayState?: AnimationPlayStateProperty;\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitAnimationTimingFunction?: AnimationTimingFunctionProperty;\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  WebkitAppearance?: WebkitAppearanceProperty;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBackdropFilter?: BackdropFilterProperty;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  WebkitBackfaceVisibility?: BackfaceVisibilityProperty;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  WebkitBackgroundClip?: BackgroundClipProperty;\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  WebkitBackgroundOrigin?: BackgroundOriginProperty;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitBackgroundSize?: BackgroundSizeProperty<TLength>;\n  /**\n   * **Syntax**: `<'color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitBorderBeforeColor?: WebkitBorderBeforeColorProperty;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBorderBeforeStyle?: WebkitBorderBeforeStyleProperty;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitBorderBeforeWidth?: WebkitBorderBeforeWidthProperty<TLength>;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomLeftRadius?: BorderBottomLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomRightRadius?: BorderBottomRightRadiusProperty<TLength>;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  WebkitBorderImageSlice?: BorderImageSliceProperty;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopLeftRadius?: BorderTopLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopRightRadius?: BorderTopRightRadiusProperty<TLength>;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  WebkitBoxDecorationBreak?: BoxDecorationBreakProperty;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxReflect?: WebkitBoxReflectProperty<TLength>;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxShadow?: BoxShadowProperty;\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  WebkitBoxSizing?: BoxSizingProperty;\n  /**\n   * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitClipPath?: ClipPathProperty;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnCount?: ColumnCountProperty;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  WebkitColumnFill?: ColumnFillProperty;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitColumnGap?: ColumnGapProperty<TLength>;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitColumnRuleColor?: ColumnRuleColorProperty;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnRuleStyle?: ColumnRuleStyleProperty;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitColumnRuleWidth?: ColumnRuleWidthProperty<TLength>;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnSpan?: ColumnSpanProperty;\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnWidth?: ColumnWidthProperty<TLength>;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitFilter?: FilterProperty;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFlexBasis?: FlexBasisProperty<TLength>;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  WebkitFlexDirection?: FlexDirectionProperty;\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitFlexGrow?: GlobalsNumber;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitFlexShrink?: GlobalsNumber;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  WebkitFlexWrap?: FlexWrapProperty;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontFeatureSettings?: FontFeatureSettingsProperty;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontKerning?: FontKerningProperty;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontVariantLigatures?: FontVariantLigaturesProperty;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  WebkitHyphens?: HyphensProperty;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitJustifyContent?: JustifyContentProperty;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitLineBreak?: LineBreakProperty;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block container to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitLineClamp?: WebkitLineClampProperty;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginEnd?: MarginInlineEndProperty<TLength>;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginStart?: MarginInlineStartProperty<TLength>;\n  /**\n   * If a `-webkit-mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  WebkitMaskAttachment?: WebkitMaskAttachmentProperty;\n  /**\n   * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  WebkitMaskClip?: WebkitMaskClipProperty;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  WebkitMaskComposite?: WebkitMaskCompositeProperty;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskImage?: WebkitMaskImageProperty;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  WebkitMaskOrigin?: WebkitMaskOriginProperty;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  WebkitMaskPosition?: WebkitMaskPositionProperty<TLength>;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionX?: WebkitMaskPositionXProperty<TLength>;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionY?: WebkitMaskPositionYProperty<TLength>;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeat?: WebkitMaskRepeatProperty;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatX?: WebkitMaskRepeatXProperty;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatY?: WebkitMaskRepeatYProperty;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitMaskSize?: WebkitMaskSizeProperty<TLength>;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaxInlineSize?: MaxInlineSizeProperty<TLength>;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitOrder?: GlobalsNumber;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitOverflowScrolling?: WebkitOverflowScrollingProperty;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingEnd?: PaddingInlineEndProperty<TLength>;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingStart?: PaddingInlineStartProperty<TLength>;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitPerspective?: PerspectiveProperty<TLength>;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  WebkitPerspectiveOrigin?: PerspectiveOriginProperty<TLength>;\n  /**\n   * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  WebkitPrintColorAdjust?: ColorAdjustProperty;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitScrollSnapType?: ScrollSnapTypeProperty;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitShapeMargin?: ShapeMarginProperty<TLength>;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  WebkitTapHighlightColor?: WebkitTapHighlightColorProperty;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextCombine?: TextCombineUprightProperty;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextDecorationColor?: TextDecorationColorProperty;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextDecorationLine?: TextDecorationLineProperty;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  WebkitTextDecorationSkip?: TextDecorationSkipProperty;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  WebkitTextDecorationStyle?: TextDecorationStyleProperty;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextEmphasisColor?: TextEmphasisColorProperty;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  WebkitTextEmphasisPosition?: GlobalsString;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextEmphasisStyle?: TextEmphasisStyleProperty;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextFillColor?: WebkitTextFillColorProperty;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  WebkitTextOrientation?: TextOrientationProperty;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  WebkitTextSizeAdjust?: TextSizeAdjustProperty;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextStrokeColor?: WebkitTextStrokeColorProperty;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitTextStrokeWidth?: WebkitTextStrokeWidthProperty<TLength>;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitTextUnderlinePosition?: TextUnderlinePositionProperty;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  WebkitTouchCallout?: WebkitTouchCalloutProperty;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTransform?: TransformProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  WebkitTransformOrigin?: TransformOriginProperty<TLength>;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  WebkitTransformStyle?: TransformStyleProperty;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDelay?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDuration?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  WebkitTransitionProperty?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitTransitionTimingFunction?: TransitionTimingFunctionProperty;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  WebkitUserModify?: WebkitUserModifyProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitUserSelect?: UserSelectProperty;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  WebkitWritingMode?: WritingModeProperty;\n}\n\nexport interface VendorShorthandProperties<TLength = string | 0> {\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  MozAnimation?: AnimationProperty;\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  MozBorderImage?: BorderImageProperty;\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  MozColumnRule?: ColumnRuleProperty<TLength>;\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  MozColumns?: ColumnsProperty<TLength>;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  MozTransition?: TransitionProperty;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  msContentZoomLimit?: GlobalsString;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  msContentZoomSnap?: MsContentZoomSnapProperty;\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  msFlex?: FlexProperty<TLength>;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  msScrollLimit?: GlobalsString;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  msScrollSnapX?: GlobalsString;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  msScrollSnapY?: GlobalsString;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  msTransition?: TransitionProperty;\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  WebkitAnimation?: AnimationProperty;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <'color'>`\n   */\n  WebkitBorderBefore?: WebkitBorderBeforeProperty<TLength>;\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  WebkitBorderImage?: BorderImageProperty;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  WebkitBorderRadius?: BorderRadiusProperty<TLength>;\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  WebkitColumnRule?: ColumnRuleProperty<TLength>;\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  WebkitColumns?: ColumnsProperty<TLength>;\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  WebkitFlex?: FlexProperty<TLength>;\n  /**\n   * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  WebkitFlexFlow?: FlexFlowProperty;\n  /**\n   * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  WebkitMask?: WebkitMaskProperty<TLength>;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  WebkitTextEmphasis?: TextEmphasisProperty;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  WebkitTextStroke?: WebkitTextStrokeProperty<TLength>;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  WebkitTransition?: TransitionProperty;\n}\n\nexport interface VendorProperties<TLength = string | 0> extends VendorLonghandProperties<TLength>, VendorShorthandProperties<TLength> {}\n\nexport interface ObsoleteProperties<TLength = string | 0> {\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  boxAlign?: BoxAlignProperty;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  boxDirection?: BoxDirectionProperty;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  boxFlex?: GlobalsNumber;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxFlexGroup?: GlobalsNumber;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  boxLines?: BoxLinesProperty;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxOrdinalGroup?: GlobalsNumber;\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  boxOrient?: BoxOrientProperty;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  boxPack?: BoxPackProperty;\n  /**\n   * The **`clip`** CSS property defines what portion of an element is visible. The `clip` property applies only to absolutely positioned elements, that is elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: ClipProperty;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  fontVariantAlternates?: FontVariantAlternatesProperty;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridColumnGap?: GridColumnGapProperty<TLength>;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  gridGap?: GridGapProperty<TLength>;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridRowGap?: GridRowGapProperty<TLength>;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  imeMode?: ImeModeProperty;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlock?: InsetBlockProperty<TLength>;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockEnd?: InsetBlockEndProperty<TLength>;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockStart?: InsetBlockStartProperty<TLength>;\n  /**\n   * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInline?: InsetInlineProperty<TLength>;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineEnd?: InsetInlineEndProperty<TLength>;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineStart?: InsetInlineStartProperty<TLength>;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapCoordinate?: ScrollSnapCoordinateProperty<TLength>;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  scrollSnapDestination?: ScrollSnapDestinationProperty<TLength>;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsX?: ScrollSnapPointsXProperty;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsY?: ScrollSnapPointsYProperty;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeX?: ScrollSnapTypeXProperty;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeY?: ScrollSnapTypeYProperty;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   *\n   * @deprecated\n   */\n  scrollbarTrackColor?: MsScrollbarTrackColorProperty;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  textCombineHorizontal?: TextCombineUprightProperty;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  KhtmlBoxAlign?: BoxAlignProperty;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  KhtmlBoxDirection?: BoxDirectionProperty;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlex?: GlobalsNumber;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlexGroup?: GlobalsNumber;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  KhtmlBoxLines?: BoxLinesProperty;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrdinalGroup?: GlobalsNumber;\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrient?: BoxOrientProperty;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  KhtmlBoxPack?: BoxPackProperty;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlLineBreak?: LineBreakProperty;\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * @deprecated\n   */\n  KhtmlOpacity?: OpacityProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlUserSelect?: UserSelectProperty;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundClip?: BackgroundClipProperty;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  MozBackgroundInlinePolicy?: BoxDecorationBreakProperty;\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundOrigin?: BackgroundOriginProperty;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  MozBackgroundSize?: BackgroundSizeProperty<TLength>;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozBinding?: MozBindingProperty;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozBorderRadius?: BorderRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomleft?: BorderBottomLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomright?: BorderBottomRightRadiusProperty<TLength>;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopleft?: BorderTopLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopright?: BorderTopRightRadiusProperty<TLength>;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  MozBoxAlign?: BoxAlignProperty;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  MozBoxDirection?: BoxDirectionProperty;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBoxFlex?: GlobalsNumber;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozBoxOrdinalGroup?: GlobalsNumber;\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  MozBoxOrient?: BoxOrientProperty;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  MozBoxPack?: BoxPackProperty;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozBoxShadow?: BoxShadowProperty;\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * @deprecated\n   */\n  MozOpacity?: OpacityProperty;\n  /**\n   * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  MozOutline?: OutlineProperty<TLength>;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  MozOutlineColor?: OutlineColorProperty;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozOutlineRadius?: MozOutlineRadiusProperty<TLength>;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozOutlineStyle?: OutlineStyleProperty;\n  /**\n   * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  MozOutlineWidth?: OutlineWidthProperty<TLength>;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozTextAlignLast?: TextAlignLastProperty;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  MozTextDecorationColor?: TextDecorationColorProperty;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTextDecorationLine?: TextDecorationLineProperty;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  MozTextDecorationStyle?: TextDecorationStyleProperty;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozUserInput?: MozUserInputProperty;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  msImeMode?: ImeModeProperty;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   *\n   * @deprecated\n   */\n  msScrollbarTrackColor?: MsScrollbarTrackColorProperty;\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  OAnimation?: AnimationProperty;\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDelay?: GlobalsString;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  OAnimationDirection?: AnimationDirectionProperty;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDuration?: GlobalsString;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationFillMode?: AnimationFillModeProperty;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  OAnimationIterationCount?: AnimationIterationCountProperty;\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationName?: AnimationNameProperty;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  OAnimationPlayState?: AnimationPlayStateProperty;\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OAnimationTimingFunction?: AnimationTimingFunctionProperty;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  OBackgroundSize?: BackgroundSizeProperty<TLength>;\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  OBorderImage?: BorderImageProperty;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OTransform?: TransformProperty;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  OTransition?: TransitionProperty;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDelay?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDuration?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  OTransitionProperty?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OTransitionTimingFunction?: TransitionTimingFunctionProperty;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  WebkitBoxAlign?: BoxAlignProperty;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  WebkitBoxDirection?: BoxDirectionProperty;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlex?: GlobalsNumber;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlexGroup?: GlobalsNumber;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  WebkitBoxLines?: BoxLinesProperty;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxOrdinalGroup?: GlobalsNumber;\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  WebkitBoxOrient?: BoxOrientProperty;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  WebkitBoxPack?: BoxPackProperty;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  WebkitScrollSnapPointsX?: ScrollSnapPointsXProperty;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  WebkitScrollSnapPointsY?: ScrollSnapPointsYProperty;\n}\n\nexport interface SvgProperties<TLength = string | 0> {\n  alignmentBaseline?: AlignmentBaselineProperty;\n  baselineShift?: BaselineShiftProperty<TLength>;\n  clip?: ClipProperty;\n  clipPath?: ClipPathProperty;\n  clipRule?: ClipRuleProperty;\n  color?: ColorProperty;\n  colorInterpolation?: ColorInterpolationProperty;\n  colorRendering?: ColorRenderingProperty;\n  cursor?: CursorProperty;\n  direction?: DirectionProperty;\n  display?: DisplayProperty;\n  dominantBaseline?: DominantBaselineProperty;\n  fill?: FillProperty;\n  fillOpacity?: GlobalsNumber;\n  fillRule?: FillRuleProperty;\n  filter?: FilterProperty;\n  floodColor?: FloodColorProperty;\n  floodOpacity?: GlobalsNumber;\n  font?: FontProperty;\n  fontFamily?: FontFamilyProperty;\n  fontSize?: FontSizeProperty<TLength>;\n  fontSizeAdjust?: FontSizeAdjustProperty;\n  fontStretch?: FontStretchProperty;\n  fontStyle?: FontStyleProperty;\n  fontVariant?: FontVariantProperty;\n  fontWeight?: FontWeightProperty;\n  glyphOrientationVertical?: GlyphOrientationVerticalProperty;\n  imageRendering?: ImageRenderingProperty;\n  letterSpacing?: LetterSpacingProperty<TLength>;\n  lightingColor?: LightingColorProperty;\n  lineHeight?: LineHeightProperty<TLength>;\n  marker?: MarkerProperty;\n  markerEnd?: MarkerEndProperty;\n  markerMid?: MarkerMidProperty;\n  markerStart?: MarkerStartProperty;\n  mask?: MaskProperty<TLength>;\n  opacity?: OpacityProperty;\n  overflow?: OverflowProperty;\n  paintOrder?: PaintOrderProperty;\n  pointerEvents?: PointerEventsProperty;\n  shapeRendering?: ShapeRenderingProperty;\n  stopColor?: StopColorProperty;\n  stopOpacity?: GlobalsNumber;\n  stroke?: StrokeProperty;\n  strokeDasharray?: StrokeDasharrayProperty<TLength>;\n  strokeDashoffset?: StrokeDashoffsetProperty<TLength>;\n  strokeLinecap?: StrokeLinecapProperty;\n  strokeLinejoin?: StrokeLinejoinProperty;\n  strokeMiterlimit?: GlobalsNumber;\n  strokeOpacity?: GlobalsNumber;\n  strokeWidth?: StrokeWidthProperty<TLength>;\n  textAnchor?: TextAnchorProperty;\n  textDecoration?: TextDecorationProperty<TLength>;\n  textRendering?: TextRenderingProperty;\n  unicodeBidi?: UnicodeBidiProperty;\n  vectorEffect?: VectorEffectProperty;\n  visibility?: VisibilityProperty;\n  whiteSpace?: WhiteSpaceProperty;\n  wordSpacing?: WordSpacingProperty<TLength>;\n  writingMode?: WritingModeProperty;\n}\n\nexport interface Properties<TLength = string | 0> extends StandardProperties<TLength>, VendorProperties<TLength>, ObsoleteProperties<TLength>, SvgProperties<TLength> {}\n\nexport interface StandardLonghandPropertiesHyphen<TLength = string | 0> {\n  /**\n   * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  \"align-content\"?: AlignContentProperty;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **52**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  \"align-items\"?: AlignItemsProperty;\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **20**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :------: | :----: | :----------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _-x-_ |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  \"align-self\"?: AlignSelfProperty;\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  \"animation-delay\"?: GlobalsString;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  \"animation-direction\"?: AnimationDirectionProperty;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  \"animation-duration\"?: GlobalsString;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  \"animation-fill-mode\"?: AnimationFillModeProperty;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  \"animation-iteration-count\"?: AnimationIterationCountProperty;\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  \"animation-name\"?: AnimationNameProperty;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  \"animation-play-state\"?: AnimationPlayStateProperty;\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  \"animation-timing-function\"?: AnimationTimingFunctionProperty;\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | auto | button | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    |   Firefox   |   Safari    |     Edge     | IE  |\n   * | :---------: | :---------: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **1** _-x-_ | **3** _-x-_ | **12** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: AppearanceProperty;\n  /**\n   * The **`aspect-ratio`**    CSS property sets a _**preferred aspect ratio**_ for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **71**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  \"aspect-ratio\"?: AspectRatioProperty;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** |   n/a   | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  \"backdrop-filter\"?: BackdropFilterProperty;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox  |    Safari     |  Edge  |   IE   |\n   * | :------: | :------: | :-----------: | :----: | :----: |\n   * |  **36**  |  **16**  | **5.1** _-x-_ | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ |               |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  \"backface-visibility\"?: BackfaceVisibilityProperty;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  \"background-attachment\"?: BackgroundAttachmentProperty;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **30**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  \"background-blend-mode\"?: BackgroundBlendModeProperty;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  |  IE   |\n   * | :----: | :-----: | :---------: | :----: | :---: |\n   * | **1**  |  **4**  | **3** _-x-_ | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  \"background-clip\"?: BackgroundClipProperty;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  \"background-color\"?: BackgroundColorProperty;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  \"background-image\"?: BackgroundImageProperty;\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  \"background-origin\"?: BackgroundOriginProperty;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  \"background-position\"?: BackgroundPositionProperty<TLength>;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `left`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  \"background-position-x\"?: BackgroundPositionXProperty<TLength>;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position, relative to the background position layer defined by `background-origin`, for each defined background image.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  \"background-position-y\"?: BackgroundPositionYProperty<TLength>;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  \"background-repeat\"?: BackgroundRepeatProperty;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  \"background-size\"?: BackgroundSizeProperty<TLength>;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  \"block-overflow\"?: BlockOverflowProperty;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  \"block-size\"?: BlockSizeProperty<TLength>;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  \"border-block-color\"?: BorderBlockColorProperty;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  \"border-block-end-color\"?: BorderBlockEndColorProperty;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  \"border-block-end-style\"?: BorderBlockEndStyleProperty;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  \"border-block-end-width\"?: BorderBlockEndWidthProperty<TLength>;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  \"border-block-start-color\"?: BorderBlockStartColorProperty;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  \"border-block-start-style\"?: BorderBlockStartStyleProperty;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  \"border-block-start-width\"?: BorderBlockStartWidthProperty<TLength>;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  \"border-block-style\"?: BorderBlockStyleProperty;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  \"border-block-width\"?: BorderBlockWidthProperty<TLength>;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  \"border-bottom-color\"?: BorderBottomColorProperty;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  \"border-bottom-left-radius\"?: BorderBottomLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  \"border-bottom-right-radius\"?: BorderBottomRightRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  \"border-bottom-style\"?: BorderBottomStyleProperty;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of a box.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  \"border-bottom-width\"?: BorderBottomWidthProperty<TLength>;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  \"border-collapse\"?: BorderCollapseProperty;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  \"border-end-end-radius\"?: BorderEndEndRadiusProperty<TLength>;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  \"border-end-start-radius\"?: BorderEndStartRadiusProperty<TLength>;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  \"border-image-outset\"?: BorderImageOutsetProperty<TLength>;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  \"border-image-repeat\"?: BorderImageRepeatProperty;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  \"border-image-slice\"?: BorderImageSliceProperty;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  \"border-image-source\"?: BorderImageSourceProperty;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  \"border-image-width\"?: BorderImageWidthProperty<TLength>;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  \"border-inline-color\"?: BorderInlineColorProperty;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  \"border-inline-end-color\"?: BorderInlineEndColorProperty;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  \"border-inline-end-style\"?: BorderInlineEndStyleProperty;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  \"border-inline-end-width\"?: BorderInlineEndWidthProperty<TLength>;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |\n   * | :----: | :---------------------------: | :------: | :----: | :-: |\n   * | **69** |            **41**             | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  \"border-inline-start-color\"?: BorderInlineStartColorProperty;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |\n   * | :----: | :---------------------------: | :------: | :----: | :-: |\n   * | **69** |            **41**             | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  \"border-inline-start-style\"?: BorderInlineStartStyleProperty;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  \"border-inline-start-width\"?: BorderInlineStartWidthProperty<TLength>;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  \"border-inline-style\"?: BorderInlineStyleProperty;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  \"border-inline-width\"?: BorderInlineWidthProperty<TLength>;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  \"border-left-color\"?: BorderLeftColorProperty;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  \"border-left-style\"?: BorderLeftStyleProperty;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  \"border-left-width\"?: BorderLeftWidthProperty<TLength>;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  \"border-right-color\"?: BorderRightColorProperty;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  \"border-right-style\"?: BorderRightStyleProperty;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  \"border-right-width\"?: BorderRightWidthProperty<TLength>;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent `<table>` cells. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  \"border-spacing\"?: BorderSpacingProperty<TLength>;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  \"border-start-end-radius\"?: BorderStartEndRadiusProperty<TLength>;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  \"border-start-start-radius\"?: BorderStartStartRadiusProperty<TLength>;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  \"border-top-color\"?: BorderTopColorProperty;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  \"border-top-left-radius\"?: BorderTopLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  \"border-top-right-radius\"?: BorderTopRightRadiusProperty<TLength>;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  \"border-top-style\"?: BorderTopStyleProperty;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  \"border-top-width\"?: BorderTopWidthProperty<TLength>;\n  /**\n   * The **`bottom`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: BottomProperty<TLength>;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |    Safari     |     Edge     | IE  |\n   * | :----------: | :-----: | :-----------: | :----------: | :-: |\n   * | **22** _-x-_ | **32**  | **6.1** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  \"box-decoration-break\"?: BoxDecorationBreakProperty;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  \"box-shadow\"?: BoxShadowProperty;\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  \"box-sizing\"?: BoxSizingProperty;\n  /**\n   * The **`break-after`** CSS property defines how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** |   No    |   No   | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  \"break-after\"?: BreakAfterProperty;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  |   No   | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  \"break-before\"?: BreakBeforeProperty;\n  /**\n   * The **`break-inside`** CSS property defines how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  \"break-inside\"?: BreakInsideProperty;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  \"caption-side\"?: CaptionSideProperty;\n  /**\n   * The **`caret-color`** CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **53**  | **11.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  \"caret-color\"?: CaretColorProperty;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: ClearProperty;\n  /**\n   * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **55**  | **3.5** |  **9.1**  | **12** | **10** |\n   * | 23 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  \"clip-path\"?: ClipPathProperty;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: Varies from one browser to another\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: ColorProperty;\n  /**\n   * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |                Chrome                 | Firefox |                Safari                |                 Edge                  | IE  |\n   * | :-----------------------------------: | :-----: | :----------------------------------: | :-----------------------------------: | :-: |\n   * | **49** _(-webkit-print-color-adjust)_ | **48**  | **6** _(-webkit-print-color-adjust)_ | **79** _(-webkit-print-color-adjust)_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-adjust\n   */\n  \"color-adjust\"?: ColorAdjustProperty;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  \"column-count\"?: ColumnCountProperty;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  \"column-fill\"?: ColumnFillProperty;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   | **63**  | **3** _-x-_ |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |     Chrome      |     Firefox     |        Safari         |  Edge  | IE  |\n   * | :-------------: | :-------------: | :-------------------: | :----: | :-: |\n   * |     **66**      |     **61**      | **10.1** _(grid-gap)_ | **16** | No  |\n   * | 57 _(grid-gap)_ | 52 _(grid-gap)_ |                       |        |     |\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  | **10**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  \"column-gap\"?: ColumnGapProperty<TLength>;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  \"column-rule-color\"?: ColumnRuleColorProperty;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  \"column-rule-style\"?: ColumnRuleStyleProperty;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  \"column-rule-width\"?: ColumnRuleWidthProperty<TLength>;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  \"column-span\"?: ColumnSpanProperty;\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  \"column-width\"?: ColumnWidthProperty<TLength>;\n  /**\n   * The **`contain`** CSS property allows an author to indicate that an element and its contents are, as much as possible, _independent_ of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page.\n   *\n   * **Syntax**: `none | strict | content | [ size || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **52** | **69**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: ContainProperty;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are _anonymous replaced elements._\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: ContentProperty;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  \"counter-increment\"?: CounterIncrementProperty;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  \"counter-reset\"?: CounterResetProperty;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **68**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  \"counter-set\"?: CounterSetProperty;\n  /**\n   * The **`cursor`** CSS property sets mouse cursor to display when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: CursorProperty;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: DirectionProperty;\n  /**\n   * The **`display`** CSS property defines the _display type_ of an element, which consists of the two basic qualities of how an element generates boxes — the **outer display type** defining how the box participates in flow layout, and the **inner display type** defining how the children of the box are laid out.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: DisplayProperty;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  \"empty-cells\"?: EmptyCellsProperty;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: FilterProperty;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  \"flex-basis\"?: FlexBasisProperty<TLength>;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  \"flex-direction\"?: FlexDirectionProperty;\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |            IE            |\n   * | :------: | :-----: | :-------: | :----: | :----------------------: |\n   * |  **29**  | **20**  |   **9**   | **12** |          **11**          |\n   * | 22 _-x-_ |         | 6.1 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  \"flex-grow\"?: GlobalsNumber;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  \"flex-shrink\"?: GlobalsNumber;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  \"flex-wrap\"?: FlexWrapProperty;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: FloatProperty;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  \"font-family\"?: FontFamilyProperty;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  \"font-feature-settings\"?: FontFeatureSettingsProperty;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **33** | **32**  |  **9**  | **79** | No  |\n   * |        |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  \"font-kerning\"?: FontKerningProperty;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   |  No  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  \"font-language-override\"?: FontLanguageOverrideProperty;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes. This only works for fonts that have an optical size variation axis.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  \"font-optical-sizing\"?: FontOpticalSizingProperty;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative `<length>` units.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  \"font-size\"?: FontSizeProperty<TLength>;\n  /**\n   * The **`font-size-adjust`** CSS property sets how the font size should be chosen based on the height of lowercase rather than capital letters.\n   *\n   * **Syntax**: `none | <number>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |  **1**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  \"font-size-adjust\"?: FontSizeAdjustProperty;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  \"font-stretch\"?: FontStretchProperty;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  \"font-style\"?: FontStyleProperty;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style ]`\n   *\n   * **Initial value**: `weight style`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  | **9**  |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  \"font-synthesis\"?: FontSynthesisProperty;\n  /**\n   * The **font-variant** CSS property is a shorthand for the longhand properties `font-variant-caps`, `font-variant-numeric`, `font-variant-alternates`, `font-variant-ligatures`, and `font-variant-east-asian`. You can also set the CSS Level 2 (Revision 1) values of `font-variant`, (that is, `normal` or `small-caps`), by using the `font` shorthand.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  \"font-variant\"?: FontVariantProperty;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **52** | **34**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  \"font-variant-caps\"?: FontVariantCapsProperty;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **34**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  \"font-variant-east-asian\"?: FontVariantEastAsianProperty;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **34**  | **34**  | **9.1** | **79** | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  \"font-variant-ligatures\"?: FontVariantLigaturesProperty;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **52** | **34**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  \"font-variant-numeric\"?: FontVariantNumericProperty;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  \"font-variant-position\"?: FontVariantPositionProperty;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  \"font-variation-settings\"?: FontVariationSettingsProperty;\n  /**\n   * The **`font-weight`** CSS property specifies the weight (or boldness) of the font. The font weights available to you will depend on the `font-family` you are using. Some fonts are only available in `normal` and `bold`.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  \"font-weight\"?: FontWeightProperty;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |          Edge           |             IE              |\n   * | :----: | :-----: | :------: | :---------------------: | :-------------------------: |\n   * | **57** | **70**  | **10.1** |         **16**          | **10** _(-ms-grid-columns)_ |\n   * |        |         |          | 12 _(-ms-grid-columns)_ |                             |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  \"grid-auto-columns\"?: GridAutoColumnsProperty<TLength>;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  \"grid-auto-flow\"?: GridAutoFlowProperty;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |         Edge         |            IE            |\n   * | :----: | :-----: | :------: | :------------------: | :----------------------: |\n   * | **57** | **70**  | **10.1** |        **16**        | **10** _(-ms-grid-rows)_ |\n   * |        |         |          | 12 _(-ms-grid-rows)_ |                          |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  \"grid-auto-rows\"?: GridAutoRowsProperty<TLength>;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  \"grid-column-end\"?: GridColumnEndProperty;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  \"grid-column-start\"?: GridColumnStartProperty;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item’s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  \"grid-row-end\"?: GridRowEndProperty;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item’s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  \"grid-row-start\"?: GridRowStartProperty;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  \"grid-template-areas\"?: GridTemplateAreasProperty;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  \"grid-template-columns\"?: GridTemplateColumnsProperty<TLength>;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  \"grid-template-rows\"?: GridTemplateRowsProperty<TLength>;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  \"hanging-punctuation\"?: HangingPunctuationProperty;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: HeightProperty<TLength>;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |    Safari     |     Edge     |      IE      |\n   * | :------: | :-----: | :-----------: | :----------: | :----------: |\n   * |  **55**  | **43**  | **5.1** _-x-_ | **12** _-x-_ | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ |               |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: HyphensProperty;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image. It should _not_ be used for any other orientation adjustments; instead, the `transform` property should be used with the `rotate` `<transform-function>`.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `0deg`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **81** | **26**  | **13.1** | **81** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  \"image-orientation\"?: ImageOrientationProperty;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **13** | **3.6** | **6**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  \"image-rendering\"?: ImageRenderingProperty;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  \"image-resolution\"?: ImageResolutionProperty;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **9**  |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  \"initial-letter\"?: InitialLetterProperty;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  \"inline-size\"?: InlineSizeProperty<TLength>;\n  /**\n   * The **`inset`** CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: InsetProperty<TLength>;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  \"inset-block\"?: InsetBlockProperty<TLength>;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  \"inset-block-end\"?: InsetBlockEndProperty<TLength>;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  \"inset-block-start\"?: InsetBlockStartProperty<TLength>;\n  /**\n   * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  \"inset-inline\"?: InsetInlineProperty<TLength>;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  \"inset-inline-end\"?: InsetInlineEndProperty<TLength>;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  \"inset-inline-start\"?: InsetInlineStartProperty<TLength>;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **41** | **36**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: IsolationProperty;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **52**  | **20**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  \"justify-content\"?: JustifyContentProperty;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  \"justify-items\"?: JustifyItemsProperty;\n  /**\n   * The CSS **`justify-self`** property set the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  \"justify-self\"?: JustifySelfProperty;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: LeftProperty<TLength>;\n  /**\n   * The **`letter-spacing`** CSS property sets the spacing behavior between text characters.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  \"letter-spacing\"?: LetterSpacingProperty<TLength>;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |  Edge  |   IE    |\n   * | :-----: | :-----: | :---------: | :----: | :-----: |\n   * | **58**  | **69**  | **3** _-x-_ | **14** | **5.5** |\n   * | 1 _-x-_ |         |             |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  \"line-break\"?: LineBreakProperty;\n  /**\n   * The **`line-height`** CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  \"line-height\"?: LineHeightProperty<TLength>;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  \"line-height-step\"?: LineHeightStepProperty<TLength>;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  \"list-style-image\"?: ListStyleImageProperty;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  \"list-style-position\"?: ListStylePositionProperty;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  \"list-style-type\"?: ListStyleTypeProperty;\n  /**\n   * The **`margin-block`** CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  \"margin-block\"?: MarginBlockProperty<TLength>;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  \"margin-block-end\"?: MarginBlockEndProperty<TLength>;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  \"margin-block-start\"?: MarginBlockStartProperty<TLength>;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  \"margin-bottom\"?: MarginBottomProperty<TLength>;\n  /**\n   * The **`margin-inline`** CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  \"margin-inline\"?: MarginInlineProperty<TLength>;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          |  Edge  | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :----: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | **79** | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  \"margin-inline-end\"?: MarginInlineEndProperty<TLength>;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           |  Edge  | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :----: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | **79** | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  \"margin-inline-start\"?: MarginInlineStartProperty<TLength>;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  \"margin-left\"?: MarginLeftProperty<TLength>;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  \"margin-right\"?: MarginRightProperty<TLength>;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  \"margin-top\"?: MarginTopProperty<TLength>;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  \"mask-border-mode\"?: MaskBorderModeProperty;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  \"mask-border-outset\"?: MaskBorderOutsetProperty<TLength>;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  \"mask-border-repeat\"?: MaskBorderRepeatProperty;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  \"mask-border-slice\"?: MaskBorderSliceProperty;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  \"mask-border-source\"?: MaskBorderSourceProperty;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"mask-border-width\"?: MaskBorderWidthProperty<TLength>;\n  /**\n   * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |\n   * | :---------: | :-----: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  \"mask-clip\"?: MaskClipProperty;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome | Firefox | Safari | Edge  | IE  |\n   * | :----: | :-----: | :----: | :---: | :-: |\n   * |   No   | **53**  |   No   | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  \"mask-composite\"?: MaskCompositeProperty;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |\n   * | :---------: | :-----: | :---------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  \"mask-image\"?: MaskImageProperty;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **53**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  \"mask-mode\"?: MaskModeProperty;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |\n   * | :---------: | :-----: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  \"mask-origin\"?: MaskOriginProperty;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |\n   * | :---------: | :-----: | :-----------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  \"mask-position\"?: MaskPositionProperty<TLength>;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `no-repeat`\n   *\n   * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |\n   * | :---------: | :-----: | :-----------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  \"mask-repeat\"?: MaskRepeatProperty;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |\n   * | :---------: | :-----: | :---------: | :----: | :-: |\n   * | **4** _-x-_ | **53**  | **4** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  \"mask-size\"?: MaskSizeProperty<TLength>;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **24** | **35**  | **6.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  \"mask-type\"?: MaskTypeProperty;\n  /**\n   * The `**max-block-size**` CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  \"max-block-size\"?: MaxBlockSizeProperty<TLength>;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  \"max-height\"?: MaxHeightProperty<TLength>;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |   Safari   |  Edge  | IE  |\n   * | :----: | :-----: | :--------: | :----: | :-: |\n   * | **57** | **41**  |  **12.1**  | **79** | No  |\n   * |        |         | 10.1 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  \"max-inline-size\"?: MaxInlineSizeProperty<TLength>;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"max-lines\"?: MaxLinesProperty;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  \"max-width\"?: MaxWidthProperty<TLength>;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  \"min-block-size\"?: MinBlockSizeProperty<TLength>;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  \"min-height\"?: MinHeightProperty<TLength>;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  \"min-inline-size\"?: MinInlineSizeProperty<TLength>;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  \"min-width\"?: MinWidthProperty<TLength>;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **41** | **32**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  \"mix-blend-mode\"?: MixBlendModeProperty;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **55**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-distance)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"motion-distance\"?: OffsetDistanceProperty<TLength>;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox | Safari |  Edge  | IE  |\n   * | :----------------: | :-----: | :----: | :----: | :-: |\n   * |       **55**       | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-path)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"motion-path\"?: OffsetPathProperty;\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"motion-rotation\"?: OffsetRotateProperty;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **31** | **36**  | **10** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  \"object-fit\"?: ObjectFitProperty;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **31** | **36**  | **10** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  \"object-position\"?: ObjectPositionProperty<TLength>;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **72**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  \"offset-anchor\"?: OffsetAnchorProperty<TLength>;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **55**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-distance)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"offset-distance\"?: OffsetDistanceProperty<TLength>;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox | Safari |  Edge  | IE  |\n   * | :----------------: | :-----: | :----: | :----: | :-: |\n   * |       **55**       | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-path)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"offset-path\"?: OffsetPathProperty;\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotate\"?: OffsetRotateProperty;\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotation\"?: OffsetRotateProperty;\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: OpacityProperty;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: GlobalsNumber;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: GlobalsNumber;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  \"outline-color\"?: OutlineColorProperty;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  \"outline-offset\"?: OutlineOffsetProperty<TLength>;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  \"outline-style\"?: OutlineStyleProperty;\n  /**\n   * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  \"outline-width\"?: OutlineWidthProperty<TLength>;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **56** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  \"overflow-anchor\"?: OverflowAnchorProperty;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  \"overflow-block\"?: OverflowBlockProperty;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **29**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box\n   */\n  \"overflow-clip-box\"?: OverflowClipBoxProperty;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  \"overflow-inline\"?: OverflowInlineProperty;\n  /**\n   * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |     **6.1**     |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  \"overflow-wrap\"?: OverflowWrapProperty;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  \"overflow-x\"?: OverflowXProperty;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **1.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  \"overflow-y\"?: OverflowYProperty;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  \"overscroll-behavior\"?: OverscrollBehaviorProperty;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **77** | **73**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  \"overscroll-behavior-block\"?: OverscrollBehaviorBlockProperty;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **77** | **73**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  \"overscroll-behavior-inline\"?: OverscrollBehaviorInlineProperty;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  \"overscroll-behavior-x\"?: OverscrollBehaviorXProperty;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  \"overscroll-behavior-y\"?: OverscrollBehaviorYProperty;\n  /**\n   * The **`padding-block`** CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  \"padding-block\"?: PaddingBlockProperty<TLength>;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  \"padding-block-end\"?: PaddingBlockEndProperty<TLength>;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  \"padding-block-start\"?: PaddingBlockStartProperty<TLength>;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  \"padding-bottom\"?: PaddingBottomProperty<TLength>;\n  /**\n   * The **`padding-inline`** CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  \"padding-inline\"?: PaddingInlineProperty<TLength>;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           |  Edge  | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :----: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | **79** | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  \"padding-inline-end\"?: PaddingInlineEndProperty<TLength>;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            |  Edge  | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :----: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | **79** | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  \"padding-inline-start\"?: PaddingInlineStartProperty<TLength>;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area on the left side of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  \"padding-left\"?: PaddingLeftProperty<TLength>;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right side of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  \"padding-right\"?: PaddingRightProperty<TLength>;\n  /**\n   * The **`padding-top`** padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  \"padding-top\"?: PaddingTopProperty<TLength>;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  \"page-break-after\"?: PageBreakAfterProperty;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  \"page-break-before\"?: PageBreakBeforeProperty;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  \"page-break-inside\"?: PageBreakInsideProperty;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  \"paint-order\"?: PaintOrderProperty;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: PerspectiveProperty<TLength>;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  \"perspective-origin\"?: PerspectiveOriginProperty<TLength>;\n  /**\n   * The `**place-content**` CSS property is a shorthand for `align-content` and `justify-content`. It can be used in any layout method which utilizes both of these alignment values.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **9**  | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **53**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  \"place-content\"?: PlaceContentProperty;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of mouse events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  \"pointer-events\"?: PointerEventsProperty;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: PositionProperty;\n  /**\n   * The **`quotes`** CSS property sets how quotation marks appear.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: QuotesProperty;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **1**  |  **4**  | **3**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: ResizeProperty;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: RightProperty<TLength>;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: RotateProperty;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **63**  |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |       Chrome        |       Firefox       |          Safari           |  Edge  | IE  |\n   * | :-----------------: | :-----------------: | :-----------------------: | :----: | :-: |\n   * |       **66**        |       **61**        | **10.1** _(grid-row-gap)_ | **16** | No  |\n   * | 57 _(grid-row-gap)_ | 52 _(grid-row-gap)_ |                           |        |     |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  \"row-gap\"?: RowGapProperty<TLength>;\n  /**\n   * The `**ruby-align**` CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  \"ruby-align\"?: RubyAlignProperty;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  \"ruby-merge\"?: RubyMergeProperty;\n  /**\n   * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).\n   *\n   * **Syntax**: `over | under | inter-character`\n   *\n   * **Initial value**: `over`\n   *\n   * | Chrome | Firefox | Safari | Edge  | IE  |\n   * | :----: | :-----: | :----: | :---: | :-: |\n   * |   No   | **38**  |   No   | 12-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  \"ruby-position\"?: RubyPositionProperty;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: ScaleProperty;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **61** | **36**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  \"scroll-behavior\"?: ScrollBehaviorProperty;\n  /**\n   * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-margin\"?: ScrollMarginProperty<TLength>;\n  /**\n   * The `scroll-margin-block` property is a shorthand property which sets the scroll-margin longhands in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  \"scroll-margin-block\"?: ScrollMarginBlockProperty<TLength>;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  \"scroll-margin-block-end\"?: ScrollMarginBlockEndProperty<TLength>;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  \"scroll-margin-block-start\"?: ScrollMarginBlockStartProperty<TLength>;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |                Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :----------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-margin-bottom\"?: ScrollMarginBottomProperty<TLength>;\n  /**\n   * The `scroll-margin-inline` property is a shorthand property which sets the scroll-margin longhands in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **68**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  \"scroll-margin-inline\"?: ScrollMarginInlineProperty<TLength>;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  \"scroll-margin-inline-end\"?: ScrollMarginInlineEndProperty<TLength>;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  \"scroll-margin-inline-start\"?: ScrollMarginInlineStartProperty<TLength>;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :--------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-margin-left\"?: ScrollMarginLeftProperty<TLength>;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-margin-right\"?: ScrollMarginRightProperty<TLength>;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :-------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-margin-top\"?: ScrollMarginTopProperty<TLength>;\n  /**\n * The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-\\* longhands.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  | **11** | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n */\n  \"scroll-padding\"?: ScrollPaddingProperty<TLength>;\n  /**\n * The `scroll-padding-block` property is a shorthand property which sets the scroll-padding longhands for the block dimension.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  |   No   | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n */\n  \"scroll-padding-block\"?: ScrollPaddingBlockProperty<TLength>;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  \"scroll-padding-block-end\"?: ScrollPaddingBlockEndProperty<TLength>;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  \"scroll-padding-block-start\"?: ScrollPaddingBlockStartProperty<TLength>;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  \"scroll-padding-bottom\"?: ScrollPaddingBottomProperty<TLength>;\n  /**\n * The `scroll-padding-inline` property is a shorthand property which sets the scroll-padding longhands for the inline dimension.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  |   No   | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n */\n  \"scroll-padding-inline\"?: ScrollPaddingInlineProperty<TLength>;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  \"scroll-padding-inline-end\"?: ScrollPaddingInlineEndProperty<TLength>;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  \"scroll-padding-inline-start\"?: ScrollPaddingInlineStartProperty<TLength>;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  \"scroll-padding-left\"?: ScrollPaddingLeftProperty<TLength>;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  \"scroll-padding-right\"?: ScrollPaddingRightProperty<TLength>;\n  /**\n   * The `scroll-padding-top` property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  \"scroll-padding-top\"?: ScrollPaddingTopProperty<TLength>;\n  /**\n   * The `scroll-snap-align` property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  \"scroll-snap-align\"?: ScrollSnapAlignProperty;\n  /**\n   * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-snap-margin\"?: ScrollMarginProperty<TLength>;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |                Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :----------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-snap-margin-bottom\"?: ScrollMarginBottomProperty<TLength>;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :--------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-snap-margin-left\"?: ScrollMarginLeftProperty<TLength>;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-snap-margin-right\"?: ScrollMarginRightProperty<TLength>;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :-------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-snap-margin-top\"?: ScrollMarginTopProperty<TLength>;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **75** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  \"scroll-snap-stop\"?: ScrollSnapStopProperty;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |     Edge     |      IE      |\n   * | :----: | :-----: | :-----: | :----------: | :----------: |\n   * | **69** |  39-68  | **11**  | **12** _-x-_ | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  \"scroll-snap-type\"?: ScrollSnapTypeProperty;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | dark | light | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  \"scrollbar-color\"?: ScrollbarColorProperty;\n  /**\n   * The `scrollbar-width` property allows the author to set the maximum thickness of an element’s scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  \"scrollbar-width\"?: ScrollbarWidthProperty;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  \"shape-image-threshold\"?: ShapeImageThresholdProperty;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |     Safari     |  Edge  | IE  |\n   * | :----: | :-----: | :------------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** _-x-_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  \"shape-margin\"?: ShapeMarginProperty<TLength>;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | <shape-box> || <basic-shape> | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  \"shape-outside\"?: ShapeOutsideProperty;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome |   Firefox   | Safari  |  Edge  | IE  |\n   * | :----: | :---------: | :-----: | :----: | :-: |\n   * | **21** | **4** _-x-_ | **6.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  \"tab-size\"?: TabSizeProperty<TLength>;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  \"table-layout\"?: TableLayoutProperty;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  \"text-align\"?: TextAlignProperty;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  |   No   | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  \"text-align-last\"?: TextAlignLastProperty;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |              Safari              |                  Edge                  |                   IE                   |\n   * | :------------------------: | :-----: | :------------------------------: | :------------------------------------: | :------------------------------------: |\n   * |           **48**           | **48**  | **5.1** _(-webkit-text-combine)_ | **12** _(-ms-text-combine-horizontal)_ | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         |                                  |                                        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  \"text-combine-upright\"?: TextCombineUprightProperty;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  \"text-decoration-color\"?: TextDecorationColorProperty;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  \"text-decoration-line\"?: TextDecorationLineProperty;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** |  No  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  \"text-decoration-skip\"?: TextDecorationSkipProperty;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **64** | **70**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  \"text-decoration-skip-ink\"?: TextDecorationSkipInkProperty;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  \"text-decoration-style\"?: TextDecorationStyleProperty;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  \"text-decoration-thickness\"?: TextDecorationThicknessProperty<TLength>;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  \"text-decoration-width\"?: TextDecorationThicknessProperty<TLength>;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  \"text-emphasis-color\"?: TextEmphasisColorProperty;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  \"text-emphasis-position\"?: GlobalsString;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  \"text-emphasis-style\"?: TextEmphasisStyleProperty;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  \"text-indent\"?: TextIndentProperty<TLength>;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * |  n/a   | **55**  |   No   | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  \"text-justify\"?: TextJustifyProperty;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |    Safari     |  Edge  | IE  |\n   * | :------: | :-----: | :-----------: | :----: | :-: |\n   * |  **48**  | **41**  | **5.1** _-x-_ | **79** | No  |\n   * | 11 _-x-_ |         |               |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  \"text-orientation\"?: TextOrientationProperty;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  \"text-overflow\"?: TextOverflowProperty;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **4**  |  **1**  | **5**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  \"text-rendering\"?: TextRenderingProperty;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  \"text-shadow\"?: TextShadowProperty;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  \"text-size-adjust\"?: TextSizeAdjustProperty;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  \"text-transform\"?: TextTransformProperty;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  \"text-underline-offset\"?: TextUnderlineOffsetProperty<TLength>;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  \"text-underline-position\"?: TextUnderlinePositionProperty;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: TopProperty<TLength>;\n  /**\n   * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  \"touch-action\"?: TouchActionProperty;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: TransformProperty;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform` and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **64** | **55**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  \"transform-box\"?: TransformBoxProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |\n   * | :-----: | :-------: | :-----: | :----: | :-----: |\n   * | **36**  |  **16**   |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  \"transform-origin\"?: TransformOriginProperty<TLength>;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |\n   * | :------: | :------: | :-----: | :----: | :-: |\n   * |  **36**  |  **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  \"transform-style\"?: TransformStyleProperty;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  \"transition-delay\"?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  \"transition-duration\"?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  \"transition-property\"?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  \"transition-timing-function\"?: TransitionTimingFunctionProperty;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: TranslateProperty<TLength>;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  \"unicode-bidi\"?: UnicodeBidiProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |     Edge     |      IE      |\n   * | :-----: | :-----: | :---------: | :----------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ | **12** _-x-_ | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  \"user-select\"?: UserSelectProperty;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  \"vertical-align\"?: VerticalAlignProperty<TLength>;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: VisibilityProperty;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  \"white-space\"?: WhiteSpaceProperty;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: GlobalsNumber;\n  /**\n   * The **`width`** CSS property sets an element's width. By default it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: WidthProperty<TLength>;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **36** | **36**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  \"will-change\"?: WillChangeProperty;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  \"word-break\"?: WordBreakProperty;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  \"word-spacing\"?: WordSpacingProperty<TLength>;\n  /**\n   * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **3.5** | **2**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  \"word-wrap\"?: WordWrapProperty;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |     IE      |\n   * | :-----: | :-----: | :-------: | :----: | :---------: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** _-x-_ |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |             |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  \"writing-mode\"?: WritingModeProperty;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  \"z-index\"?: ZIndexProperty;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   No    | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: ZoomProperty;\n}\n\nexport interface StandardShorthandPropertiesHyphen<TLength = string | 0> {\n  /**\n   * The `**all**` CSS shorthand property sets all of an element's properties (other than `unicode-bidi` and `direction`) to their initial or inherited values, or to the values specified in another stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **37** | **27**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Globals;\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: AnimationProperty;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: BackgroundProperty<TLength>;\n  /**\n   * The **`border`** CSS property sets an element's border. It's a shorthand for `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: BorderProperty<TLength>;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  \"border-block\"?: BorderBlockProperty<TLength>;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  \"border-block-end\"?: BorderBlockEndProperty<TLength>;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  \"border-block-start\"?: BorderBlockStartProperty<TLength>;\n  /**\n   * The **`border-bottom`** CSS property is a shorthand that sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`. These properties set an element's bottom border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  \"border-bottom\"?: BorderBottomProperty<TLength>;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of all sides of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  \"border-color\"?: BorderColorProperty;\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  \"border-image\"?: BorderImageProperty;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  \"border-inline\"?: BorderInlineProperty<TLength>;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  \"border-inline-end\"?: BorderInlineEndProperty<TLength>;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  \"border-inline-start\"?: BorderInlineStartProperty<TLength>;\n  /**\n   * The **`border-left`** CSS property is a shorthand that sets the values of `border-left-width`, `border-left-style` and `border-left-color`. These properties set an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  \"border-left\"?: BorderLeftProperty<TLength>;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  \"border-radius\"?: BorderRadiusProperty<TLength>;\n  /**\n   * The **`border-right`** CSS property is a shorthand that sets the values of `border-right-width`, `border-right-style` and `border-right-color`. These properties set an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  \"border-right\"?: BorderRightProperty<TLength>;\n  /**\n   * The **`border-style`** CSS property is a shorthand property that sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  \"border-style\"?: BorderStyleProperty;\n  /**\n   * The **`border-top`** CSS property is a shorthand that sets the values of `border-top-width`, `border-top-style` and `border-top-color`. These properties set an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  \"border-top\"?: BorderTopProperty<TLength>;\n  /**\n   * The **`border-width`** shorthand CSS property sets the widths of all four sides of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  \"border-width\"?: BorderWidthProperty<TLength>;\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  \"column-rule\"?: ColumnRuleProperty<TLength>;\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: ColumnsProperty<TLength>;\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |    IE    |\n   * | :------: | :-----: | :-------: | :----: | :------: |\n   * |  **29**  | **20**  |   **9**   | **12** |  **11**  |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: FlexProperty<TLength>;\n  /**\n   * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  \"flex-flow\"?: FlexFlowProperty;\n  /**\n   * The **`font`** CSS property is a shorthand for `font-style`, `font-variant`, `font-weight`, `font-size`, `line-height`, and `font-family`. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: FontProperty;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **84** | **63**  |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |     Chrome      |     Firefox     |      Safari       |  Edge  | IE  |\n   * | :-------------: | :-------------: | :---------------: | :----: | :-: |\n   * |     **66**      |     **61**      |      **12**       | **16** | No  |\n   * | 57 _(grid-gap)_ | 52 _(grid-gap)_ | 10.1 _(grid-gap)_ |        |     |\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **66** | **61**  |   No   | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: GapProperty<TLength>;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit grid properties (`grid-template-rows`, `grid-template-columns`, and `grid-template-areas`), and all the implicit grid properties (`grid-auto-rows`, `grid-auto-columns`, and `grid-auto-flow`), in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: GridProperty;\n  /**\n   * The **`grid-area`** CSS property is a shorthand property for `grid-row-start`, `grid-column-start`, `grid-row-end` and `grid-column-end`, specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  \"grid-area\"?: GridAreaProperty;\n  /**\n   * The **`grid-column`** CSS property is a shorthand property for `grid-column-start` and `grid-column-end` specifying a grid item's size and location within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  \"grid-column\"?: GridColumnProperty;\n  /**\n   * The **`grid-row`** CSS property is a shorthand property for `grid-row-start` and `grid-row-end` specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  \"grid-row\"?: GridRowProperty;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, rows, and areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  \"grid-template\"?: GridTemplateProperty;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"line-clamp\"?: LineClampProperty;\n  /**\n   * The **`list-style`** CSS property is a shorthand to set list style properties `list-style-type`, `list-style-image`, and `list-style-position`.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  \"list-style\"?: ListStyleProperty;\n  /**\n   * The **`margin`** CSS property sets the margin area on all four sides of an element. It is a shorthand for `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: MarginProperty<TLength>;\n  /**\n   * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  |  **2**  | **3.2** | **12** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: MaskProperty<TLength>;\n  /**\n   * The **`mask-border`** CSS property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  \"mask-border\"?: MaskBorderProperty;\n  /**\n   * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari |  Edge  | IE  |\n   * | :-----------: | :-----: | :----: | :----: | :-: |\n   * |    **55**     | **72**  |   No   | **79** | No  |\n   * | 46 _(motion)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: OffsetProperty<TLength>;\n  /**\n   * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari |  Edge  | IE  |\n   * | :-----------: | :-----: | :----: | :----: | :-: |\n   * |    **55**     | **72**  |   No   | **79** | No  |\n   * | 46 _(motion)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: OffsetProperty<TLength>;\n  /**\n   * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: OutlineProperty<TLength>;\n  /**\n   * The **`overflow`** CSS property sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflow-x` and `overflow-y`.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: OverflowProperty;\n  /**\n   * The **`padding`** CSS property sets the padding area on all four sides of an element. It is a shorthand for `padding-top`, `padding-right`, `padding-bottom`, and `padding-left`.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: PaddingProperty<TLength>;\n  /**\n   * The CSS **`place-items`** shorthand property sets the `align-items` and `justify-items` properties, respectively. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  \"place-items\"?: PlaceItemsProperty;\n  /**\n   * The **`place-self`** CSS property is a shorthand property sets both the `align-self` and `justify-self` properties. The first value is the `align-self` property value, the second the `justify-self` one. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  |   No   | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  |   No   | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  \"place-self\"?: PlaceSelfProperty;\n  /**\n   * The **`text-decoration`** CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, and `text-decoration-style`.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  \"text-decoration\"?: TextDecorationProperty<TLength>;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  \"text-emphasis\"?: TextEmphasisProperty;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: TransitionProperty;\n}\n\nexport interface StandardPropertiesHyphen<TLength = string | 0> extends StandardLonghandPropertiesHyphen<TLength>, StandardShorthandPropertiesHyphen<TLength> {}\n\nexport interface VendorLonghandPropertiesHyphen<TLength = string | 0> {\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-delay\"?: GlobalsString;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-animation-direction\"?: AnimationDirectionProperty;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-duration\"?: GlobalsString;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-fill-mode\"?: AnimationFillModeProperty;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-moz-animation-iteration-count\"?: AnimationIterationCountProperty;\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-name\"?: AnimationNameProperty;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-moz-animation-play-state\"?: AnimationPlayStateProperty;\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-animation-timing-function\"?: AnimationTimingFunctionProperty;\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-moz-appearance\"?: MozAppearanceProperty;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-moz-backface-visibility\"?: BackfaceVisibilityProperty;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-bottom-colors\"?: MozBorderBottomColorsProperty;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-end-color\"?: BorderInlineEndColorProperty;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-end-style\"?: BorderInlineEndStyleProperty;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-border-end-width\"?: BorderInlineEndWidthProperty<TLength>;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-left-colors\"?: MozBorderLeftColorsProperty;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-right-colors\"?: MozBorderRightColorsProperty;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-start-color\"?: BorderInlineStartColorProperty;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-start-style\"?: BorderInlineStartStyleProperty;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-top-colors\"?: MozBorderTopColorsProperty;\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-moz-box-sizing\"?: BoxSizingProperty;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-count\"?: ColumnCountProperty;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-moz-column-fill\"?: ColumnFillProperty;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-column-gap\"?: ColumnGapProperty<TLength>;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-column-rule-color\"?: ColumnRuleColorProperty;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-column-rule-style\"?: ColumnRuleStyleProperty;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-column-rule-width\"?: ColumnRuleWidthProperty<TLength>;\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-width\"?: ColumnWidthProperty<TLength>;\n  /**\n   * If you reference an SVG image in a webpage (such as with the `<img>` element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the **`-moz-context-properties`** property, and the image needs to opt in to using those properties by using values such as the `context-fill` value.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-context-properties\"?: MozContextPropertiesProperty;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-moz-float-edge\"?: MozFloatEdgeProperty;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-feature-settings\"?: FontFeatureSettingsProperty;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-language-override\"?: FontLanguageOverrideProperty;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-force-broken-image-icon\"?: GlobalsNumber;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-moz-hyphens\"?: HyphensProperty;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-image-region\"?: MozImageRegionProperty;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-end\"?: MarginInlineEndProperty<TLength>;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-start\"?: MarginInlineStartProperty<TLength>;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  \"-moz-orient\"?: MozOrientProperty;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomleft\"?: MozOutlineRadiusBottomleftProperty<TLength>;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomright\"?: MozOutlineRadiusBottomrightProperty<TLength>;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topleft\"?: MozOutlineRadiusTopleftProperty<TLength>;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topright\"?: MozOutlineRadiusToprightProperty<TLength>;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-end\"?: PaddingInlineEndProperty<TLength>;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-start\"?: PaddingInlineStartProperty<TLength>;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-perspective\"?: PerspectiveProperty<TLength>;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-moz-perspective-origin\"?: PerspectiveOriginProperty<TLength>;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `stack` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  \"-moz-stack-sizing\"?: MozStackSizingProperty;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  \"-moz-tab-size\"?: TabSizeProperty<TLength>;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-text-blink\"?: MozTextBlinkProperty;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-moz-text-size-adjust\"?: TextSizeAdjustProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-moz-transform-origin\"?: TransformOriginProperty<TLength>;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-moz-transform-style\"?: TransformStyleProperty;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-transition-delay\"?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-transition-duration\"?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-moz-transition-property\"?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-transition-timing-function\"?: TransitionTimingFunctionProperty;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-user-focus\"?: MozUserFocusProperty;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-moz-user-modify\"?: MozUserModifyProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-user-select\"?: UserSelectProperty;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  \"-moz-window-dragging\"?: MozWindowDraggingProperty;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-moz-window-shadow\"?: MozWindowShadowProperty;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  \"-ms-accelerator\"?: MsAcceleratorProperty;\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-align-self\"?: AlignSelfProperty;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  \"-ms-block-progression\"?: MsBlockProgressionProperty;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-chaining\"?: MsContentZoomChainingProperty;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  \"-ms-content-zoom-limit-max\"?: GlobalsString;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-ms-content-zoom-limit-min\"?: GlobalsString;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  \"-ms-content-zoom-snap-points\"?: GlobalsString;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-snap-type\"?: MsContentZoomSnapTypeProperty;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  \"-ms-content-zooming\"?: MsContentZoomingProperty;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  \"-ms-filter\"?: GlobalsString;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-ms-flex-direction\"?: FlexDirectionProperty;\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-flex-positive\"?: GlobalsNumber;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-from\"?: MsFlowFromProperty;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-into\"?: MsFlowIntoProperty;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-grid-columns\"?: GridAutoColumnsProperty<TLength>;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-grid-rows\"?: GridAutoRowsProperty<TLength>;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-high-contrast-adjust\"?: MsHighContrastAdjustProperty;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-hyphenate-limit-chars\"?: MsHyphenateLimitCharsProperty;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  \"-ms-hyphenate-limit-lines\"?: MsHyphenateLimitLinesProperty;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-hyphenate-limit-zone\"?: MsHyphenateLimitZoneProperty<TLength>;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-ms-hyphens\"?: HyphensProperty;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-ime-align\"?: MsImeAlignProperty;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-line-break\"?: LineBreakProperty;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-order\"?: GlobalsNumber;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-overflow-style\"?: MsOverflowStyleProperty;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-x\"?: OverflowXProperty;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-y\"?: OverflowYProperty;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  \"-ms-scroll-chaining\"?: MsScrollChainingProperty;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-x-max\"?: MsScrollLimitXMaxProperty<TLength>;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-x-min\"?: MsScrollLimitXMinProperty<TLength>;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-y-max\"?: MsScrollLimitYMaxProperty<TLength>;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-y-min\"?: MsScrollLimitYMinProperty<TLength>;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  \"-ms-scroll-rails\"?: MsScrollRailsProperty;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-x\"?: GlobalsString;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-y\"?: GlobalsString;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-snap-type\"?: MsScrollSnapTypeProperty;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-translation\"?: MsScrollTranslationProperty;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-3dlight-color\"?: MsScrollbar3dlightColorProperty;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  \"-ms-scrollbar-arrow-color\"?: MsScrollbarArrowColorProperty;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-base-color\"?: MsScrollbarBaseColorProperty;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-darkshadow-color\"?: MsScrollbarDarkshadowColorProperty;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  \"-ms-scrollbar-face-color\"?: MsScrollbarFaceColorProperty;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  \"-ms-scrollbar-highlight-color\"?: MsScrollbarHighlightColorProperty;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-shadow-color\"?: MsScrollbarShadowColorProperty;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-autospace\"?: MsTextAutospaceProperty;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-combine-horizontal\"?: TextCombineUprightProperty;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  \"-ms-text-overflow\"?: TextOverflowProperty;\n  /**\n   * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-touch-action\"?: TouchActionProperty;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  \"-ms-touch-select\"?: MsTouchSelectProperty;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-transform\"?: TransformProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-ms-transform-origin\"?: TransformOriginProperty<TLength>;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-delay\"?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-duration\"?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-ms-transition-property\"?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-ms-transition-timing-function\"?: TransitionTimingFunctionProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  \"-ms-user-select\"?: MsUserSelectProperty;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-ms-word-break\"?: WordBreakProperty;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-wrap-flow\"?: MsWrapFlowProperty;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-wrap-margin\"?: MsWrapMarginProperty<TLength>;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  \"-ms-wrap-through\"?: MsWrapThroughProperty;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-ms-writing-mode\"?: WritingModeProperty;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   */\n  \"-o-object-fit\"?: ObjectFitProperty;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-o-object-position\"?: ObjectPositionProperty<TLength>;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  \"-o-tab-size\"?: TabSizeProperty<TLength>;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  \"-o-text-overflow\"?: TextOverflowProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-o-transform-origin\"?: TransformOriginProperty<TLength>;\n  /**\n   * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-content\"?: AlignContentProperty;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-items\"?: AlignItemsProperty;\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-align-self\"?: AlignSelfProperty;\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-delay\"?: GlobalsString;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-animation-direction\"?: AnimationDirectionProperty;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-duration\"?: GlobalsString;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-fill-mode\"?: AnimationFillModeProperty;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-animation-iteration-count\"?: AnimationIterationCountProperty;\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-name\"?: AnimationNameProperty;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-webkit-animation-play-state\"?: AnimationPlayStateProperty;\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-animation-timing-function\"?: AnimationTimingFunctionProperty;\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-webkit-appearance\"?: WebkitAppearanceProperty;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-backdrop-filter\"?: BackdropFilterProperty;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-webkit-backface-visibility\"?: BackfaceVisibilityProperty;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  \"-webkit-background-clip\"?: BackgroundClipProperty;\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"-webkit-background-origin\"?: BackgroundOriginProperty;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-background-size\"?: BackgroundSizeProperty<TLength>;\n  /**\n   * **Syntax**: `<'color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-border-before-color\"?: WebkitBorderBeforeColorProperty;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-border-before-style\"?: WebkitBorderBeforeStyleProperty;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-border-before-width\"?: WebkitBorderBeforeWidthProperty<TLength>;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-left-radius\"?: BorderBottomLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-right-radius\"?: BorderBottomRightRadiusProperty<TLength>;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-webkit-border-image-slice\"?: BorderImageSliceProperty;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-left-radius\"?: BorderTopLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-right-radius\"?: BorderTopRightRadiusProperty<TLength>;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  \"-webkit-box-decoration-break\"?: BoxDecorationBreakProperty;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-reflect\"?: WebkitBoxReflectProperty<TLength>;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-shadow\"?: BoxShadowProperty;\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-webkit-box-sizing\"?: BoxSizingProperty;\n  /**\n   * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-clip-path\"?: ClipPathProperty;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-count\"?: ColumnCountProperty;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-webkit-column-fill\"?: ColumnFillProperty;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-column-gap\"?: ColumnGapProperty<TLength>;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-column-rule-color\"?: ColumnRuleColorProperty;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-rule-style\"?: ColumnRuleStyleProperty;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-column-rule-width\"?: ColumnRuleWidthProperty<TLength>;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-span\"?: ColumnSpanProperty;\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-width\"?: ColumnWidthProperty<TLength>;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-filter\"?: FilterProperty;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-flex-basis\"?: FlexBasisProperty<TLength>;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-webkit-flex-direction\"?: FlexDirectionProperty;\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-flex-grow\"?: GlobalsNumber;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-flex-shrink\"?: GlobalsNumber;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  \"-webkit-flex-wrap\"?: FlexWrapProperty;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-feature-settings\"?: FontFeatureSettingsProperty;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-kerning\"?: FontKerningProperty;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-variant-ligatures\"?: FontVariantLigaturesProperty;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-webkit-hyphens\"?: HyphensProperty;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-justify-content\"?: JustifyContentProperty;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-line-break\"?: LineBreakProperty;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block container to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-line-clamp\"?: WebkitLineClampProperty;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-end\"?: MarginInlineEndProperty<TLength>;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-start\"?: MarginInlineStartProperty<TLength>;\n  /**\n   * If a `-webkit-mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  \"-webkit-mask-attachment\"?: WebkitMaskAttachmentProperty;\n  /**\n   * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  \"-webkit-mask-clip\"?: WebkitMaskClipProperty;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  \"-webkit-mask-composite\"?: WebkitMaskCompositeProperty;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-image\"?: WebkitMaskImageProperty;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  \"-webkit-mask-origin\"?: WebkitMaskOriginProperty;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  \"-webkit-mask-position\"?: WebkitMaskPositionProperty<TLength>;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-x\"?: WebkitMaskPositionXProperty<TLength>;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-y\"?: WebkitMaskPositionYProperty<TLength>;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat\"?: WebkitMaskRepeatProperty;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-x\"?: WebkitMaskRepeatXProperty;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-y\"?: WebkitMaskRepeatYProperty;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-mask-size\"?: WebkitMaskSizeProperty<TLength>;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-max-inline-size\"?: MaxInlineSizeProperty<TLength>;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-order\"?: GlobalsNumber;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-overflow-scrolling\"?: WebkitOverflowScrollingProperty;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-end\"?: PaddingInlineEndProperty<TLength>;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-start\"?: PaddingInlineStartProperty<TLength>;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-perspective\"?: PerspectiveProperty<TLength>;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-webkit-perspective-origin\"?: PerspectiveOriginProperty<TLength>;\n  /**\n   * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  \"-webkit-print-color-adjust\"?: ColorAdjustProperty;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-scroll-snap-type\"?: ScrollSnapTypeProperty;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-shape-margin\"?: ShapeMarginProperty<TLength>;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  \"-webkit-tap-highlight-color\"?: WebkitTapHighlightColorProperty;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-combine\"?: TextCombineUprightProperty;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-decoration-color\"?: TextDecorationColorProperty;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-decoration-line\"?: TextDecorationLineProperty;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  \"-webkit-text-decoration-skip\"?: TextDecorationSkipProperty;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  \"-webkit-text-decoration-style\"?: TextDecorationStyleProperty;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-emphasis-color\"?: TextEmphasisColorProperty;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  \"-webkit-text-emphasis-position\"?: GlobalsString;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-emphasis-style\"?: TextEmphasisStyleProperty;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-fill-color\"?: WebkitTextFillColorProperty;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  \"-webkit-text-orientation\"?: TextOrientationProperty;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-webkit-text-size-adjust\"?: TextSizeAdjustProperty;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-stroke-color\"?: WebkitTextStrokeColorProperty;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-text-stroke-width\"?: WebkitTextStrokeWidthProperty<TLength>;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-text-underline-position\"?: TextUnderlinePositionProperty;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-webkit-touch-callout\"?: WebkitTouchCalloutProperty;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-transform\"?: TransformProperty;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-webkit-transform-origin\"?: TransformOriginProperty<TLength>;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-webkit-transform-style\"?: TransformStyleProperty;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-delay\"?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-duration\"?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-webkit-transition-property\"?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-transition-timing-function\"?: TransitionTimingFunctionProperty;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-webkit-user-modify\"?: WebkitUserModifyProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-user-select\"?: UserSelectProperty;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-webkit-writing-mode\"?: WritingModeProperty;\n}\n\nexport interface VendorShorthandPropertiesHyphen<TLength = string | 0> {\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-moz-animation\"?: AnimationProperty;\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-moz-border-image\"?: BorderImageProperty;\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-moz-column-rule\"?: ColumnRuleProperty<TLength>;\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-moz-columns\"?: ColumnsProperty<TLength>;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-moz-transition\"?: TransitionProperty;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  \"-ms-content-zoom-limit\"?: GlobalsString;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  \"-ms-content-zoom-snap\"?: MsContentZoomSnapProperty;\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-ms-flex\"?: FlexProperty<TLength>;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  \"-ms-scroll-limit\"?: GlobalsString;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  \"-ms-scroll-snap-x\"?: GlobalsString;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  \"-ms-scroll-snap-y\"?: GlobalsString;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-ms-transition\"?: TransitionProperty;\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-webkit-animation\"?: AnimationProperty;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <'color'>`\n   */\n  \"-webkit-border-before\"?: WebkitBorderBeforeProperty<TLength>;\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-webkit-border-image\"?: BorderImageProperty;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  \"-webkit-border-radius\"?: BorderRadiusProperty<TLength>;\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-webkit-column-rule\"?: ColumnRuleProperty<TLength>;\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-webkit-columns\"?: ColumnsProperty<TLength>;\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-webkit-flex\"?: FlexProperty<TLength>;\n  /**\n   * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  \"-webkit-flex-flow\"?: FlexFlowProperty;\n  /**\n   * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  \"-webkit-mask\"?: WebkitMaskProperty<TLength>;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  \"-webkit-text-emphasis\"?: TextEmphasisProperty;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  \"-webkit-text-stroke\"?: WebkitTextStrokeProperty<TLength>;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-webkit-transition\"?: TransitionProperty;\n}\n\nexport interface VendorPropertiesHyphen<TLength = string | 0> extends VendorLonghandPropertiesHyphen<TLength>, VendorShorthandPropertiesHyphen<TLength> {}\n\nexport interface ObsoletePropertiesHyphen<TLength = string | 0> {\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"box-align\"?: BoxAlignProperty;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"box-direction\"?: BoxDirectionProperty;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"box-flex\"?: GlobalsNumber;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-flex-group\"?: GlobalsNumber;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"box-lines\"?: BoxLinesProperty;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-ordinal-group\"?: GlobalsNumber;\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"box-orient\"?: BoxOrientProperty;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"box-pack\"?: BoxPackProperty;\n  /**\n   * The **`clip`** CSS property defines what portion of an element is visible. The `clip` property applies only to absolutely positioned elements, that is elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: ClipProperty;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"font-variant-alternates\"?: FontVariantAlternatesProperty;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-column-gap\"?: GridColumnGapProperty<TLength>;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  \"grid-gap\"?: GridGapProperty<TLength>;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-row-gap\"?: GridRowGapProperty<TLength>;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"ime-mode\"?: ImeModeProperty;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block\"?: InsetBlockProperty<TLength>;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-end\"?: InsetBlockEndProperty<TLength>;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-start\"?: InsetBlockStartProperty<TLength>;\n  /**\n   * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline\"?: InsetInlineProperty<TLength>;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-end\"?: InsetInlineEndProperty<TLength>;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-start\"?: InsetInlineStartProperty<TLength>;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-coordinate\"?: ScrollSnapCoordinateProperty<TLength>;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-destination\"?: ScrollSnapDestinationProperty<TLength>;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-x\"?: ScrollSnapPointsXProperty;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-y\"?: ScrollSnapPointsYProperty;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-x\"?: ScrollSnapTypeXProperty;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-y\"?: ScrollSnapTypeYProperty;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   *\n   * @deprecated\n   */\n  \"scrollbar-track-color\"?: MsScrollbarTrackColorProperty;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"text-combine-horizontal\"?: TextCombineUprightProperty;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-align\"?: BoxAlignProperty;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-direction\"?: BoxDirectionProperty;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex\"?: GlobalsNumber;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex-group\"?: GlobalsNumber;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-lines\"?: BoxLinesProperty;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-ordinal-group\"?: GlobalsNumber;\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-khtml-box-orient\"?: BoxOrientProperty;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-pack\"?: BoxPackProperty;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-line-break\"?: LineBreakProperty;\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * @deprecated\n   */\n  \"-khtml-opacity\"?: OpacityProperty;\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-user-select\"?: UserSelectProperty;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-clip\"?: BackgroundClipProperty;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  \"-moz-background-inline-policy\"?: BoxDecorationBreakProperty;\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-origin\"?: BackgroundOriginProperty;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-moz-background-size\"?: BackgroundSizeProperty<TLength>;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-binding\"?: MozBindingProperty;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius\"?: BorderRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomleft\"?: BorderBottomLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomright\"?: BorderBottomRightRadiusProperty<TLength>;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topleft\"?: BorderTopLeftRadiusProperty<TLength>;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topright\"?: BorderTopRightRadiusProperty<TLength>;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-moz-box-align\"?: BoxAlignProperty;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-moz-box-direction\"?: BoxDirectionProperty;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-box-flex\"?: GlobalsNumber;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-box-ordinal-group\"?: GlobalsNumber;\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-moz-box-orient\"?: BoxOrientProperty;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-moz-box-pack\"?: BoxPackProperty;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-box-shadow\"?: BoxShadowProperty;\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * @deprecated\n   */\n  \"-moz-opacity\"?: OpacityProperty;\n  /**\n   * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  \"-moz-outline\"?: OutlineProperty<TLength>;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  \"-moz-outline-color\"?: OutlineColorProperty;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-radius\"?: MozOutlineRadiusProperty<TLength>;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-style\"?: OutlineStyleProperty;\n  /**\n   * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-width\"?: OutlineWidthProperty<TLength>;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-text-align-last\"?: TextAlignLastProperty;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-color\"?: TextDecorationColorProperty;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-line\"?: TextDecorationLineProperty;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-style\"?: TextDecorationStyleProperty;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-user-input\"?: MozUserInputProperty;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-ms-ime-mode\"?: ImeModeProperty;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   *\n   * @deprecated\n   */\n  \"-ms-scrollbar-track-color\"?: MsScrollbarTrackColorProperty;\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  \"-o-animation\"?: AnimationProperty;\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-delay\"?: GlobalsString;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-o-animation-direction\"?: AnimationDirectionProperty;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-duration\"?: GlobalsString;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-fill-mode\"?: AnimationFillModeProperty;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-o-animation-iteration-count\"?: AnimationIterationCountProperty;\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-name\"?: AnimationNameProperty;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  \"-o-animation-play-state\"?: AnimationPlayStateProperty;\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-animation-timing-function\"?: AnimationTimingFunctionProperty;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-o-background-size\"?: BackgroundSizeProperty<TLength>;\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  \"-o-border-image\"?: BorderImageProperty;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-transform\"?: TransformProperty;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-o-transition\"?: TransitionProperty;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-delay\"?: GlobalsString;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-duration\"?: GlobalsString;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-o-transition-property\"?: TransitionPropertyProperty;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-transition-timing-function\"?: TransitionTimingFunctionProperty;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-align\"?: BoxAlignProperty;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-direction\"?: BoxDirectionProperty;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex\"?: GlobalsNumber;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex-group\"?: GlobalsNumber;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-lines\"?: BoxLinesProperty;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-ordinal-group\"?: GlobalsNumber;\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-webkit-box-orient\"?: BoxOrientProperty;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-pack\"?: BoxPackProperty;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-webkit-scroll-snap-points-x\"?: ScrollSnapPointsXProperty;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-webkit-scroll-snap-points-y\"?: ScrollSnapPointsYProperty;\n}\n\nexport interface SvgPropertiesHyphen<TLength = string | 0> {\n  \"alignment-baseline\"?: AlignmentBaselineProperty;\n  \"baseline-shift\"?: BaselineShiftProperty<TLength>;\n  clip?: ClipProperty;\n  \"clip-path\"?: ClipPathProperty;\n  \"clip-rule\"?: ClipRuleProperty;\n  color?: ColorProperty;\n  \"color-interpolation\"?: ColorInterpolationProperty;\n  \"color-rendering\"?: ColorRenderingProperty;\n  cursor?: CursorProperty;\n  direction?: DirectionProperty;\n  display?: DisplayProperty;\n  \"dominant-baseline\"?: DominantBaselineProperty;\n  fill?: FillProperty;\n  \"fill-opacity\"?: GlobalsNumber;\n  \"fill-rule\"?: FillRuleProperty;\n  filter?: FilterProperty;\n  \"flood-color\"?: FloodColorProperty;\n  \"flood-opacity\"?: GlobalsNumber;\n  font?: FontProperty;\n  \"font-family\"?: FontFamilyProperty;\n  \"font-size\"?: FontSizeProperty<TLength>;\n  \"font-size-adjust\"?: FontSizeAdjustProperty;\n  \"font-stretch\"?: FontStretchProperty;\n  \"font-style\"?: FontStyleProperty;\n  \"font-variant\"?: FontVariantProperty;\n  \"font-weight\"?: FontWeightProperty;\n  \"glyph-orientation-vertical\"?: GlyphOrientationVerticalProperty;\n  \"image-rendering\"?: ImageRenderingProperty;\n  \"letter-spacing\"?: LetterSpacingProperty<TLength>;\n  \"lighting-color\"?: LightingColorProperty;\n  \"line-height\"?: LineHeightProperty<TLength>;\n  marker?: MarkerProperty;\n  \"marker-end\"?: MarkerEndProperty;\n  \"marker-mid\"?: MarkerMidProperty;\n  \"marker-start\"?: MarkerStartProperty;\n  mask?: MaskProperty<TLength>;\n  opacity?: OpacityProperty;\n  overflow?: OverflowProperty;\n  \"paint-order\"?: PaintOrderProperty;\n  \"pointer-events\"?: PointerEventsProperty;\n  \"shape-rendering\"?: ShapeRenderingProperty;\n  \"stop-color\"?: StopColorProperty;\n  \"stop-opacity\"?: GlobalsNumber;\n  stroke?: StrokeProperty;\n  \"stroke-dasharray\"?: StrokeDasharrayProperty<TLength>;\n  \"stroke-dashoffset\"?: StrokeDashoffsetProperty<TLength>;\n  \"stroke-linecap\"?: StrokeLinecapProperty;\n  \"stroke-linejoin\"?: StrokeLinejoinProperty;\n  \"stroke-miterlimit\"?: GlobalsNumber;\n  \"stroke-opacity\"?: GlobalsNumber;\n  \"stroke-width\"?: StrokeWidthProperty<TLength>;\n  \"text-anchor\"?: TextAnchorProperty;\n  \"text-decoration\"?: TextDecorationProperty<TLength>;\n  \"text-rendering\"?: TextRenderingProperty;\n  \"unicode-bidi\"?: UnicodeBidiProperty;\n  \"vector-effect\"?: VectorEffectProperty;\n  visibility?: VisibilityProperty;\n  \"white-space\"?: WhiteSpaceProperty;\n  \"word-spacing\"?: WordSpacingProperty<TLength>;\n  \"writing-mode\"?: WritingModeProperty;\n}\n\nexport interface PropertiesHyphen<TLength = string | 0>\n  extends StandardPropertiesHyphen<TLength>,\n    VendorPropertiesHyphen<TLength>,\n    ObsoletePropertiesHyphen<TLength>,\n    SvgPropertiesHyphen<TLength> {}\n\nexport interface StandardLonghandPropertiesFallback<TLength = string | 0> {\n  /**\n   * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  alignContent?: AlignContentProperty | AlignContentProperty[];\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **52**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  alignItems?: AlignItemsProperty | AlignItemsProperty[];\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **20**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :------: | :----: | :----------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _-x-_ |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  alignSelf?: AlignSelfProperty | AlignSelfProperty[];\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  animationDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  animationDirection?: AnimationDirectionProperty | AnimationDirectionProperty[];\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  animationDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  animationFillMode?: AnimationFillModeProperty | AnimationFillModeProperty[];\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  animationIterationCount?: AnimationIterationCountProperty | AnimationIterationCountProperty[];\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  animationName?: AnimationNameProperty | AnimationNameProperty[];\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  animationPlayState?: AnimationPlayStateProperty | AnimationPlayStateProperty[];\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  animationTimingFunction?: AnimationTimingFunctionProperty | AnimationTimingFunctionProperty[];\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | auto | button | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    |   Firefox   |   Safari    |     Edge     | IE  |\n   * | :---------: | :---------: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **1** _-x-_ | **3** _-x-_ | **12** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: AppearanceProperty | AppearanceProperty[];\n  /**\n   * The **`aspect-ratio`**    CSS property sets a _**preferred aspect ratio**_ for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **71**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  aspectRatio?: AspectRatioProperty | AspectRatioProperty[];\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** |   n/a   | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  backdropFilter?: BackdropFilterProperty | BackdropFilterProperty[];\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox  |    Safari     |  Edge  |   IE   |\n   * | :------: | :------: | :-----------: | :----: | :----: |\n   * |  **36**  |  **16**  | **5.1** _-x-_ | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ |               |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  backfaceVisibility?: BackfaceVisibilityProperty | BackfaceVisibilityProperty[];\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  backgroundAttachment?: BackgroundAttachmentProperty | BackgroundAttachmentProperty[];\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **30**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  backgroundBlendMode?: BackgroundBlendModeProperty | BackgroundBlendModeProperty[];\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  |  IE   |\n   * | :----: | :-----: | :---------: | :----: | :---: |\n   * | **1**  |  **4**  | **3** _-x-_ | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  backgroundClip?: BackgroundClipProperty | BackgroundClipProperty[];\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  backgroundColor?: BackgroundColorProperty | BackgroundColorProperty[];\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  backgroundImage?: BackgroundImageProperty | BackgroundImageProperty[];\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  backgroundOrigin?: BackgroundOriginProperty | BackgroundOriginProperty[];\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  backgroundPosition?: BackgroundPositionProperty<TLength> | BackgroundPositionProperty<TLength>[];\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `left`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  backgroundPositionX?: BackgroundPositionXProperty<TLength> | BackgroundPositionXProperty<TLength>[];\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position, relative to the background position layer defined by `background-origin`, for each defined background image.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  backgroundPositionY?: BackgroundPositionYProperty<TLength> | BackgroundPositionYProperty<TLength>[];\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  backgroundRepeat?: BackgroundRepeatProperty | BackgroundRepeatProperty[];\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  backgroundSize?: BackgroundSizeProperty<TLength> | BackgroundSizeProperty<TLength>[];\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  blockOverflow?: BlockOverflowProperty | BlockOverflowProperty[];\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  blockSize?: BlockSizeProperty<TLength> | BlockSizeProperty<TLength>[];\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  borderBlockColor?: BorderBlockColorProperty | BorderBlockColorProperty[];\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  borderBlockEndColor?: BorderBlockEndColorProperty | BorderBlockEndColorProperty[];\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  borderBlockEndStyle?: BorderBlockEndStyleProperty | BorderBlockEndStyleProperty[];\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  borderBlockEndWidth?: BorderBlockEndWidthProperty<TLength> | BorderBlockEndWidthProperty<TLength>[];\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  borderBlockStartColor?: BorderBlockStartColorProperty | BorderBlockStartColorProperty[];\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  borderBlockStartStyle?: BorderBlockStartStyleProperty | BorderBlockStartStyleProperty[];\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  borderBlockStartWidth?: BorderBlockStartWidthProperty<TLength> | BorderBlockStartWidthProperty<TLength>[];\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  borderBlockStyle?: BorderBlockStyleProperty | BorderBlockStyleProperty[];\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  borderBlockWidth?: BorderBlockWidthProperty<TLength> | BorderBlockWidthProperty<TLength>[];\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  borderBottomColor?: BorderBottomColorProperty | BorderBottomColorProperty[];\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  borderBottomLeftRadius?: BorderBottomLeftRadiusProperty<TLength> | BorderBottomLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  borderBottomRightRadius?: BorderBottomRightRadiusProperty<TLength> | BorderBottomRightRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  borderBottomStyle?: BorderBottomStyleProperty | BorderBottomStyleProperty[];\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of a box.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  borderBottomWidth?: BorderBottomWidthProperty<TLength> | BorderBottomWidthProperty<TLength>[];\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  borderCollapse?: BorderCollapseProperty | BorderCollapseProperty[];\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  borderEndEndRadius?: BorderEndEndRadiusProperty<TLength> | BorderEndEndRadiusProperty<TLength>[];\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  borderEndStartRadius?: BorderEndStartRadiusProperty<TLength> | BorderEndStartRadiusProperty<TLength>[];\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  borderImageOutset?: BorderImageOutsetProperty<TLength> | BorderImageOutsetProperty<TLength>[];\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  borderImageRepeat?: BorderImageRepeatProperty | BorderImageRepeatProperty[];\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  borderImageSlice?: BorderImageSliceProperty | BorderImageSliceProperty[];\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  borderImageSource?: BorderImageSourceProperty | BorderImageSourceProperty[];\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  borderImageWidth?: BorderImageWidthProperty<TLength> | BorderImageWidthProperty<TLength>[];\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  borderInlineColor?: BorderInlineColorProperty | BorderInlineColorProperty[];\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  borderInlineEndColor?: BorderInlineEndColorProperty | BorderInlineEndColorProperty[];\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  borderInlineEndStyle?: BorderInlineEndStyleProperty | BorderInlineEndStyleProperty[];\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  borderInlineEndWidth?: BorderInlineEndWidthProperty<TLength> | BorderInlineEndWidthProperty<TLength>[];\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |\n   * | :----: | :---------------------------: | :------: | :----: | :-: |\n   * | **69** |            **41**             | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  borderInlineStartColor?: BorderInlineStartColorProperty | BorderInlineStartColorProperty[];\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |\n   * | :----: | :---------------------------: | :------: | :----: | :-: |\n   * | **69** |            **41**             | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  borderInlineStartStyle?: BorderInlineStartStyleProperty | BorderInlineStartStyleProperty[];\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  borderInlineStartWidth?: BorderInlineStartWidthProperty<TLength> | BorderInlineStartWidthProperty<TLength>[];\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  borderInlineStyle?: BorderInlineStyleProperty | BorderInlineStyleProperty[];\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  borderInlineWidth?: BorderInlineWidthProperty<TLength> | BorderInlineWidthProperty<TLength>[];\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  borderLeftColor?: BorderLeftColorProperty | BorderLeftColorProperty[];\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  borderLeftStyle?: BorderLeftStyleProperty | BorderLeftStyleProperty[];\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  borderLeftWidth?: BorderLeftWidthProperty<TLength> | BorderLeftWidthProperty<TLength>[];\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  borderRightColor?: BorderRightColorProperty | BorderRightColorProperty[];\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  borderRightStyle?: BorderRightStyleProperty | BorderRightStyleProperty[];\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  borderRightWidth?: BorderRightWidthProperty<TLength> | BorderRightWidthProperty<TLength>[];\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent `<table>` cells. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  borderSpacing?: BorderSpacingProperty<TLength> | BorderSpacingProperty<TLength>[];\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  borderStartEndRadius?: BorderStartEndRadiusProperty<TLength> | BorderStartEndRadiusProperty<TLength>[];\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  borderStartStartRadius?: BorderStartStartRadiusProperty<TLength> | BorderStartStartRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  borderTopColor?: BorderTopColorProperty | BorderTopColorProperty[];\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  borderTopLeftRadius?: BorderTopLeftRadiusProperty<TLength> | BorderTopLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  borderTopRightRadius?: BorderTopRightRadiusProperty<TLength> | BorderTopRightRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  borderTopStyle?: BorderTopStyleProperty | BorderTopStyleProperty[];\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  borderTopWidth?: BorderTopWidthProperty<TLength> | BorderTopWidthProperty<TLength>[];\n  /**\n   * The **`bottom`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: BottomProperty<TLength> | BottomProperty<TLength>[];\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |    Safari     |     Edge     | IE  |\n   * | :----------: | :-----: | :-----------: | :----------: | :-: |\n   * | **22** _-x-_ | **32**  | **6.1** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  boxDecorationBreak?: BoxDecorationBreakProperty | BoxDecorationBreakProperty[];\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  boxShadow?: BoxShadowProperty | BoxShadowProperty[];\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  boxSizing?: BoxSizingProperty | BoxSizingProperty[];\n  /**\n   * The **`break-after`** CSS property defines how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** |   No    |   No   | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  breakAfter?: BreakAfterProperty | BreakAfterProperty[];\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  |   No   | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  breakBefore?: BreakBeforeProperty | BreakBeforeProperty[];\n  /**\n   * The **`break-inside`** CSS property defines how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  breakInside?: BreakInsideProperty | BreakInsideProperty[];\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  captionSide?: CaptionSideProperty | CaptionSideProperty[];\n  /**\n   * The **`caret-color`** CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **53**  | **11.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  caretColor?: CaretColorProperty | CaretColorProperty[];\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: ClearProperty | ClearProperty[];\n  /**\n   * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **55**  | **3.5** |  **9.1**  | **12** | **10** |\n   * | 23 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  clipPath?: ClipPathProperty | ClipPathProperty[];\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: Varies from one browser to another\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: ColorProperty | ColorProperty[];\n  /**\n   * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |                Chrome                 | Firefox |                Safari                |                 Edge                  | IE  |\n   * | :-----------------------------------: | :-----: | :----------------------------------: | :-----------------------------------: | :-: |\n   * | **49** _(-webkit-print-color-adjust)_ | **48**  | **6** _(-webkit-print-color-adjust)_ | **79** _(-webkit-print-color-adjust)_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-adjust\n   */\n  colorAdjust?: ColorAdjustProperty | ColorAdjustProperty[];\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  columnCount?: ColumnCountProperty | ColumnCountProperty[];\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  columnFill?: ColumnFillProperty | ColumnFillProperty[];\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   | **63**  | **3** _-x-_ |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |     Chrome      |     Firefox     |        Safari         |  Edge  | IE  |\n   * | :-------------: | :-------------: | :-------------------: | :----: | :-: |\n   * |     **66**      |     **61**      | **10.1** _(grid-gap)_ | **16** | No  |\n   * | 57 _(grid-gap)_ | 52 _(grid-gap)_ |                       |        |     |\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  | **10**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  columnGap?: ColumnGapProperty<TLength> | ColumnGapProperty<TLength>[];\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  columnRuleColor?: ColumnRuleColorProperty | ColumnRuleColorProperty[];\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  columnRuleStyle?: ColumnRuleStyleProperty | ColumnRuleStyleProperty[];\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  columnRuleWidth?: ColumnRuleWidthProperty<TLength> | ColumnRuleWidthProperty<TLength>[];\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  columnSpan?: ColumnSpanProperty | ColumnSpanProperty[];\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  columnWidth?: ColumnWidthProperty<TLength> | ColumnWidthProperty<TLength>[];\n  /**\n   * The **`contain`** CSS property allows an author to indicate that an element and its contents are, as much as possible, _independent_ of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page.\n   *\n   * **Syntax**: `none | strict | content | [ size || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **52** | **69**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: ContainProperty | ContainProperty[];\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are _anonymous replaced elements._\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: ContentProperty | ContentProperty[];\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  counterIncrement?: CounterIncrementProperty | CounterIncrementProperty[];\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  counterReset?: CounterResetProperty | CounterResetProperty[];\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **68**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  counterSet?: CounterSetProperty | CounterSetProperty[];\n  /**\n   * The **`cursor`** CSS property sets mouse cursor to display when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: CursorProperty | CursorProperty[];\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: DirectionProperty | DirectionProperty[];\n  /**\n   * The **`display`** CSS property defines the _display type_ of an element, which consists of the two basic qualities of how an element generates boxes — the **outer display type** defining how the box participates in flow layout, and the **inner display type** defining how the children of the box are laid out.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: DisplayProperty | DisplayProperty[];\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  emptyCells?: EmptyCellsProperty | EmptyCellsProperty[];\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: FilterProperty | FilterProperty[];\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  flexBasis?: FlexBasisProperty<TLength> | FlexBasisProperty<TLength>[];\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  flexDirection?: FlexDirectionProperty | FlexDirectionProperty[];\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |            IE            |\n   * | :------: | :-----: | :-------: | :----: | :----------------------: |\n   * |  **29**  | **20**  |   **9**   | **12** |          **11**          |\n   * | 22 _-x-_ |         | 6.1 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  flexGrow?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  flexShrink?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  flexWrap?: FlexWrapProperty | FlexWrapProperty[];\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: FloatProperty | FloatProperty[];\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  fontFamily?: FontFamilyProperty | FontFamilyProperty[];\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  fontFeatureSettings?: FontFeatureSettingsProperty | FontFeatureSettingsProperty[];\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **33** | **32**  |  **9**  | **79** | No  |\n   * |        |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  fontKerning?: FontKerningProperty | FontKerningProperty[];\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   |  No  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  fontLanguageOverride?: FontLanguageOverrideProperty | FontLanguageOverrideProperty[];\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes. This only works for fonts that have an optical size variation axis.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  fontOpticalSizing?: FontOpticalSizingProperty | FontOpticalSizingProperty[];\n  /**\n   * The **`font-size`** CSS property sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative `<length>` units.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  fontSize?: FontSizeProperty<TLength> | FontSizeProperty<TLength>[];\n  /**\n   * The **`font-size-adjust`** CSS property sets how the font size should be chosen based on the height of lowercase rather than capital letters.\n   *\n   * **Syntax**: `none | <number>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |  **1**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  fontSizeAdjust?: FontSizeAdjustProperty | FontSizeAdjustProperty[];\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  fontStretch?: FontStretchProperty | FontStretchProperty[];\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  fontStyle?: FontStyleProperty | FontStyleProperty[];\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style ]`\n   *\n   * **Initial value**: `weight style`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  | **9**  |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  fontSynthesis?: FontSynthesisProperty | FontSynthesisProperty[];\n  /**\n   * The **font-variant** CSS property is a shorthand for the longhand properties `font-variant-caps`, `font-variant-numeric`, `font-variant-alternates`, `font-variant-ligatures`, and `font-variant-east-asian`. You can also set the CSS Level 2 (Revision 1) values of `font-variant`, (that is, `normal` or `small-caps`), by using the `font` shorthand.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  fontVariant?: FontVariantProperty | FontVariantProperty[];\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **52** | **34**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  fontVariantCaps?: FontVariantCapsProperty | FontVariantCapsProperty[];\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **34**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  fontVariantEastAsian?: FontVariantEastAsianProperty | FontVariantEastAsianProperty[];\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **34**  | **34**  | **9.1** | **79** | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  fontVariantLigatures?: FontVariantLigaturesProperty | FontVariantLigaturesProperty[];\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **52** | **34**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  fontVariantNumeric?: FontVariantNumericProperty | FontVariantNumericProperty[];\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  fontVariantPosition?: FontVariantPositionProperty | FontVariantPositionProperty[];\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  fontVariationSettings?: FontVariationSettingsProperty | FontVariationSettingsProperty[];\n  /**\n   * The **`font-weight`** CSS property specifies the weight (or boldness) of the font. The font weights available to you will depend on the `font-family` you are using. Some fonts are only available in `normal` and `bold`.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  fontWeight?: FontWeightProperty | FontWeightProperty[];\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |          Edge           |             IE              |\n   * | :----: | :-----: | :------: | :---------------------: | :-------------------------: |\n   * | **57** | **70**  | **10.1** |         **16**          | **10** _(-ms-grid-columns)_ |\n   * |        |         |          | 12 _(-ms-grid-columns)_ |                             |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  gridAutoColumns?: GridAutoColumnsProperty<TLength> | GridAutoColumnsProperty<TLength>[];\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  gridAutoFlow?: GridAutoFlowProperty | GridAutoFlowProperty[];\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |         Edge         |            IE            |\n   * | :----: | :-----: | :------: | :------------------: | :----------------------: |\n   * | **57** | **70**  | **10.1** |        **16**        | **10** _(-ms-grid-rows)_ |\n   * |        |         |          | 12 _(-ms-grid-rows)_ |                          |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  gridAutoRows?: GridAutoRowsProperty<TLength> | GridAutoRowsProperty<TLength>[];\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  gridColumnEnd?: GridColumnEndProperty | GridColumnEndProperty[];\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  gridColumnStart?: GridColumnStartProperty | GridColumnStartProperty[];\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item’s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  gridRowEnd?: GridRowEndProperty | GridRowEndProperty[];\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item’s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  gridRowStart?: GridRowStartProperty | GridRowStartProperty[];\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  gridTemplateAreas?: GridTemplateAreasProperty | GridTemplateAreasProperty[];\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  gridTemplateColumns?: GridTemplateColumnsProperty<TLength> | GridTemplateColumnsProperty<TLength>[];\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  gridTemplateRows?: GridTemplateRowsProperty<TLength> | GridTemplateRowsProperty<TLength>[];\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  hangingPunctuation?: HangingPunctuationProperty | HangingPunctuationProperty[];\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: HeightProperty<TLength> | HeightProperty<TLength>[];\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |    Safari     |     Edge     |      IE      |\n   * | :------: | :-----: | :-----------: | :----------: | :----------: |\n   * |  **55**  | **43**  | **5.1** _-x-_ | **12** _-x-_ | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ |               |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: HyphensProperty | HyphensProperty[];\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image. It should _not_ be used for any other orientation adjustments; instead, the `transform` property should be used with the `rotate` `<transform-function>`.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `0deg`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **81** | **26**  | **13.1** | **81** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  imageOrientation?: ImageOrientationProperty | ImageOrientationProperty[];\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **13** | **3.6** | **6**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  imageRendering?: ImageRenderingProperty | ImageRenderingProperty[];\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  imageResolution?: ImageResolutionProperty | ImageResolutionProperty[];\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **9**  |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  initialLetter?: InitialLetterProperty | InitialLetterProperty[];\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  inlineSize?: InlineSizeProperty<TLength> | InlineSizeProperty<TLength>[];\n  /**\n   * The **`inset`** CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: InsetProperty<TLength> | InsetProperty<TLength>[];\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  insetBlock?: InsetBlockProperty<TLength> | InsetBlockProperty<TLength>[];\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  insetBlockEnd?: InsetBlockEndProperty<TLength> | InsetBlockEndProperty<TLength>[];\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  insetBlockStart?: InsetBlockStartProperty<TLength> | InsetBlockStartProperty<TLength>[];\n  /**\n   * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  insetInline?: InsetInlineProperty<TLength> | InsetInlineProperty<TLength>[];\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  insetInlineEnd?: InsetInlineEndProperty<TLength> | InsetInlineEndProperty<TLength>[];\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  insetInlineStart?: InsetInlineStartProperty<TLength> | InsetInlineStartProperty<TLength>[];\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **41** | **36**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: IsolationProperty | IsolationProperty[];\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **52**  | **20**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  justifyContent?: JustifyContentProperty | JustifyContentProperty[];\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  justifyItems?: JustifyItemsProperty | JustifyItemsProperty[];\n  /**\n   * The CSS **`justify-self`** property set the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  justifySelf?: JustifySelfProperty | JustifySelfProperty[];\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: LeftProperty<TLength> | LeftProperty<TLength>[];\n  /**\n   * The **`letter-spacing`** CSS property sets the spacing behavior between text characters.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  letterSpacing?: LetterSpacingProperty<TLength> | LetterSpacingProperty<TLength>[];\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |  Edge  |   IE    |\n   * | :-----: | :-----: | :---------: | :----: | :-----: |\n   * | **58**  | **69**  | **3** _-x-_ | **14** | **5.5** |\n   * | 1 _-x-_ |         |             |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  lineBreak?: LineBreakProperty | LineBreakProperty[];\n  /**\n   * The **`line-height`** CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  lineHeight?: LineHeightProperty<TLength> | LineHeightProperty<TLength>[];\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  lineHeightStep?: LineHeightStepProperty<TLength> | LineHeightStepProperty<TLength>[];\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  listStyleImage?: ListStyleImageProperty | ListStyleImageProperty[];\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  listStylePosition?: ListStylePositionProperty | ListStylePositionProperty[];\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  listStyleType?: ListStyleTypeProperty | ListStyleTypeProperty[];\n  /**\n   * The **`margin-block`** CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  marginBlock?: MarginBlockProperty<TLength> | MarginBlockProperty<TLength>[];\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  marginBlockEnd?: MarginBlockEndProperty<TLength> | MarginBlockEndProperty<TLength>[];\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  marginBlockStart?: MarginBlockStartProperty<TLength> | MarginBlockStartProperty<TLength>[];\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  marginBottom?: MarginBottomProperty<TLength> | MarginBottomProperty<TLength>[];\n  /**\n   * The **`margin-inline`** CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  marginInline?: MarginInlineProperty<TLength> | MarginInlineProperty<TLength>[];\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          |  Edge  | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :----: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | **79** | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  marginInlineEnd?: MarginInlineEndProperty<TLength> | MarginInlineEndProperty<TLength>[];\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           |  Edge  | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :----: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | **79** | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  marginInlineStart?: MarginInlineStartProperty<TLength> | MarginInlineStartProperty<TLength>[];\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  marginLeft?: MarginLeftProperty<TLength> | MarginLeftProperty<TLength>[];\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  marginRight?: MarginRightProperty<TLength> | MarginRightProperty<TLength>[];\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  marginTop?: MarginTopProperty<TLength> | MarginTopProperty<TLength>[];\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  maskBorderMode?: MaskBorderModeProperty | MaskBorderModeProperty[];\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  maskBorderOutset?: MaskBorderOutsetProperty<TLength> | MaskBorderOutsetProperty<TLength>[];\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  maskBorderRepeat?: MaskBorderRepeatProperty | MaskBorderRepeatProperty[];\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  maskBorderSlice?: MaskBorderSliceProperty | MaskBorderSliceProperty[];\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  maskBorderSource?: MaskBorderSourceProperty | MaskBorderSourceProperty[];\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  maskBorderWidth?: MaskBorderWidthProperty<TLength> | MaskBorderWidthProperty<TLength>[];\n  /**\n   * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |\n   * | :---------: | :-----: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  maskClip?: MaskClipProperty | MaskClipProperty[];\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome | Firefox | Safari | Edge  | IE  |\n   * | :----: | :-----: | :----: | :---: | :-: |\n   * |   No   | **53**  |   No   | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  maskComposite?: MaskCompositeProperty | MaskCompositeProperty[];\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |\n   * | :---------: | :-----: | :---------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  maskImage?: MaskImageProperty | MaskImageProperty[];\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **53**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  maskMode?: MaskModeProperty | MaskModeProperty[];\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |\n   * | :---------: | :-----: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  maskOrigin?: MaskOriginProperty | MaskOriginProperty[];\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |\n   * | :---------: | :-----: | :-----------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  maskPosition?: MaskPositionProperty<TLength> | MaskPositionProperty<TLength>[];\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `no-repeat`\n   *\n   * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |\n   * | :---------: | :-----: | :-----------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  maskRepeat?: MaskRepeatProperty | MaskRepeatProperty[];\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |\n   * | :---------: | :-----: | :---------: | :----: | :-: |\n   * | **4** _-x-_ | **53**  | **4** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  maskSize?: MaskSizeProperty<TLength> | MaskSizeProperty<TLength>[];\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **24** | **35**  | **6.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  maskType?: MaskTypeProperty | MaskTypeProperty[];\n  /**\n   * The `**max-block-size**` CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  maxBlockSize?: MaxBlockSizeProperty<TLength> | MaxBlockSizeProperty<TLength>[];\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  maxHeight?: MaxHeightProperty<TLength> | MaxHeightProperty<TLength>[];\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |   Safari   |  Edge  | IE  |\n   * | :----: | :-----: | :--------: | :----: | :-: |\n   * | **57** | **41**  |  **12.1**  | **79** | No  |\n   * |        |         | 10.1 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  maxInlineSize?: MaxInlineSizeProperty<TLength> | MaxInlineSizeProperty<TLength>[];\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  maxLines?: MaxLinesProperty | MaxLinesProperty[];\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  maxWidth?: MaxWidthProperty<TLength> | MaxWidthProperty<TLength>[];\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  minBlockSize?: MinBlockSizeProperty<TLength> | MinBlockSizeProperty<TLength>[];\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  minHeight?: MinHeightProperty<TLength> | MinHeightProperty<TLength>[];\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  minInlineSize?: MinInlineSizeProperty<TLength> | MinInlineSizeProperty<TLength>[];\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  minWidth?: MinWidthProperty<TLength> | MinWidthProperty<TLength>[];\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **41** | **32**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  mixBlendMode?: MixBlendModeProperty | MixBlendModeProperty[];\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **55**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-distance)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  motionDistance?: OffsetDistanceProperty<TLength> | OffsetDistanceProperty<TLength>[];\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox | Safari |  Edge  | IE  |\n   * | :----------------: | :-----: | :----: | :----: | :-: |\n   * |       **55**       | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-path)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  motionPath?: OffsetPathProperty | OffsetPathProperty[];\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  motionRotation?: OffsetRotateProperty | OffsetRotateProperty[];\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **31** | **36**  | **10** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  objectFit?: ObjectFitProperty | ObjectFitProperty[];\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **31** | **36**  | **10** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  objectPosition?: ObjectPositionProperty<TLength> | ObjectPositionProperty<TLength>[];\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **72**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  offsetAnchor?: OffsetAnchorProperty<TLength> | OffsetAnchorProperty<TLength>[];\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **55**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-distance)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  offsetDistance?: OffsetDistanceProperty<TLength> | OffsetDistanceProperty<TLength>[];\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox | Safari |  Edge  | IE  |\n   * | :----------------: | :-----: | :----: | :----: | :-: |\n   * |       **55**       | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-path)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  offsetPath?: OffsetPathProperty | OffsetPathProperty[];\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotate?: OffsetRotateProperty | OffsetRotateProperty[];\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotation?: OffsetRotateProperty | OffsetRotateProperty[];\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: OpacityProperty | OpacityProperty[];\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  outlineColor?: OutlineColorProperty | OutlineColorProperty[];\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  outlineOffset?: OutlineOffsetProperty<TLength> | OutlineOffsetProperty<TLength>[];\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  outlineStyle?: OutlineStyleProperty | OutlineStyleProperty[];\n  /**\n   * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  outlineWidth?: OutlineWidthProperty<TLength> | OutlineWidthProperty<TLength>[];\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **56** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  overflowAnchor?: OverflowAnchorProperty | OverflowAnchorProperty[];\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  overflowBlock?: OverflowBlockProperty | OverflowBlockProperty[];\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **29**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box\n   */\n  overflowClipBox?: OverflowClipBoxProperty | OverflowClipBoxProperty[];\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  overflowInline?: OverflowInlineProperty | OverflowInlineProperty[];\n  /**\n   * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |     **6.1**     |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  overflowWrap?: OverflowWrapProperty | OverflowWrapProperty[];\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  overflowX?: OverflowXProperty | OverflowXProperty[];\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **1.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  overflowY?: OverflowYProperty | OverflowYProperty[];\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  overscrollBehavior?: OverscrollBehaviorProperty | OverscrollBehaviorProperty[];\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **77** | **73**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  overscrollBehaviorBlock?: OverscrollBehaviorBlockProperty | OverscrollBehaviorBlockProperty[];\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **77** | **73**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  overscrollBehaviorInline?: OverscrollBehaviorInlineProperty | OverscrollBehaviorInlineProperty[];\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  overscrollBehaviorX?: OverscrollBehaviorXProperty | OverscrollBehaviorXProperty[];\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  overscrollBehaviorY?: OverscrollBehaviorYProperty | OverscrollBehaviorYProperty[];\n  /**\n   * The **`padding-block`** CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  paddingBlock?: PaddingBlockProperty<TLength> | PaddingBlockProperty<TLength>[];\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  paddingBlockEnd?: PaddingBlockEndProperty<TLength> | PaddingBlockEndProperty<TLength>[];\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  paddingBlockStart?: PaddingBlockStartProperty<TLength> | PaddingBlockStartProperty<TLength>[];\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  paddingBottom?: PaddingBottomProperty<TLength> | PaddingBottomProperty<TLength>[];\n  /**\n   * The **`padding-inline`** CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  paddingInline?: PaddingInlineProperty<TLength> | PaddingInlineProperty<TLength>[];\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           |  Edge  | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :----: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | **79** | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  paddingInlineEnd?: PaddingInlineEndProperty<TLength> | PaddingInlineEndProperty<TLength>[];\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            |  Edge  | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :----: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | **79** | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  paddingInlineStart?: PaddingInlineStartProperty<TLength> | PaddingInlineStartProperty<TLength>[];\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area on the left side of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  paddingLeft?: PaddingLeftProperty<TLength> | PaddingLeftProperty<TLength>[];\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right side of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  paddingRight?: PaddingRightProperty<TLength> | PaddingRightProperty<TLength>[];\n  /**\n   * The **`padding-top`** padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  paddingTop?: PaddingTopProperty<TLength> | PaddingTopProperty<TLength>[];\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  pageBreakAfter?: PageBreakAfterProperty | PageBreakAfterProperty[];\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  pageBreakBefore?: PageBreakBeforeProperty | PageBreakBeforeProperty[];\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  pageBreakInside?: PageBreakInsideProperty | PageBreakInsideProperty[];\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  paintOrder?: PaintOrderProperty | PaintOrderProperty[];\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: PerspectiveProperty<TLength> | PerspectiveProperty<TLength>[];\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  perspectiveOrigin?: PerspectiveOriginProperty<TLength> | PerspectiveOriginProperty<TLength>[];\n  /**\n   * The `**place-content**` CSS property is a shorthand for `align-content` and `justify-content`. It can be used in any layout method which utilizes both of these alignment values.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **9**  | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **53**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  placeContent?: PlaceContentProperty | PlaceContentProperty[];\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of mouse events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  pointerEvents?: PointerEventsProperty | PointerEventsProperty[];\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: PositionProperty | PositionProperty[];\n  /**\n   * The **`quotes`** CSS property sets how quotation marks appear.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: QuotesProperty | QuotesProperty[];\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **1**  |  **4**  | **3**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: ResizeProperty | ResizeProperty[];\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: RightProperty<TLength> | RightProperty<TLength>[];\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: RotateProperty | RotateProperty[];\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **63**  |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |       Chrome        |       Firefox       |          Safari           |  Edge  | IE  |\n   * | :-----------------: | :-----------------: | :-----------------------: | :----: | :-: |\n   * |       **66**        |       **61**        | **10.1** _(grid-row-gap)_ | **16** | No  |\n   * | 57 _(grid-row-gap)_ | 52 _(grid-row-gap)_ |                           |        |     |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  rowGap?: RowGapProperty<TLength> | RowGapProperty<TLength>[];\n  /**\n   * The `**ruby-align**` CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  rubyAlign?: RubyAlignProperty | RubyAlignProperty[];\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  rubyMerge?: RubyMergeProperty | RubyMergeProperty[];\n  /**\n   * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).\n   *\n   * **Syntax**: `over | under | inter-character`\n   *\n   * **Initial value**: `over`\n   *\n   * | Chrome | Firefox | Safari | Edge  | IE  |\n   * | :----: | :-----: | :----: | :---: | :-: |\n   * |   No   | **38**  |   No   | 12-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  rubyPosition?: RubyPositionProperty | RubyPositionProperty[];\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: ScaleProperty | ScaleProperty[];\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **61** | **36**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  scrollBehavior?: ScrollBehaviorProperty | ScrollBehaviorProperty[];\n  /**\n   * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollMargin?: ScrollMarginProperty<TLength> | ScrollMarginProperty<TLength>[];\n  /**\n   * The `scroll-margin-block` property is a shorthand property which sets the scroll-margin longhands in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  scrollMarginBlock?: ScrollMarginBlockProperty<TLength> | ScrollMarginBlockProperty<TLength>[];\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  scrollMarginBlockEnd?: ScrollMarginBlockEndProperty<TLength> | ScrollMarginBlockEndProperty<TLength>[];\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  scrollMarginBlockStart?: ScrollMarginBlockStartProperty<TLength> | ScrollMarginBlockStartProperty<TLength>[];\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |                Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :----------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollMarginBottom?: ScrollMarginBottomProperty<TLength> | ScrollMarginBottomProperty<TLength>[];\n  /**\n   * The `scroll-margin-inline` property is a shorthand property which sets the scroll-margin longhands in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **68**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  scrollMarginInline?: ScrollMarginInlineProperty<TLength> | ScrollMarginInlineProperty<TLength>[];\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  scrollMarginInlineEnd?: ScrollMarginInlineEndProperty<TLength> | ScrollMarginInlineEndProperty<TLength>[];\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  scrollMarginInlineStart?: ScrollMarginInlineStartProperty<TLength> | ScrollMarginInlineStartProperty<TLength>[];\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :--------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollMarginLeft?: ScrollMarginLeftProperty<TLength> | ScrollMarginLeftProperty<TLength>[];\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollMarginRight?: ScrollMarginRightProperty<TLength> | ScrollMarginRightProperty<TLength>[];\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :-------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollMarginTop?: ScrollMarginTopProperty<TLength> | ScrollMarginTopProperty<TLength>[];\n  /**\n * The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-\\* longhands.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  | **11** | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n */\n  scrollPadding?: ScrollPaddingProperty<TLength> | ScrollPaddingProperty<TLength>[];\n  /**\n * The `scroll-padding-block` property is a shorthand property which sets the scroll-padding longhands for the block dimension.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  |   No   | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n */\n  scrollPaddingBlock?: ScrollPaddingBlockProperty<TLength> | ScrollPaddingBlockProperty<TLength>[];\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  scrollPaddingBlockEnd?: ScrollPaddingBlockEndProperty<TLength> | ScrollPaddingBlockEndProperty<TLength>[];\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  scrollPaddingBlockStart?: ScrollPaddingBlockStartProperty<TLength> | ScrollPaddingBlockStartProperty<TLength>[];\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  scrollPaddingBottom?: ScrollPaddingBottomProperty<TLength> | ScrollPaddingBottomProperty<TLength>[];\n  /**\n * The `scroll-padding-inline` property is a shorthand property which sets the scroll-padding longhands for the inline dimension.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  |   No   | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n */\n  scrollPaddingInline?: ScrollPaddingInlineProperty<TLength> | ScrollPaddingInlineProperty<TLength>[];\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  scrollPaddingInlineEnd?: ScrollPaddingInlineEndProperty<TLength> | ScrollPaddingInlineEndProperty<TLength>[];\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  scrollPaddingInlineStart?: ScrollPaddingInlineStartProperty<TLength> | ScrollPaddingInlineStartProperty<TLength>[];\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  scrollPaddingLeft?: ScrollPaddingLeftProperty<TLength> | ScrollPaddingLeftProperty<TLength>[];\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  scrollPaddingRight?: ScrollPaddingRightProperty<TLength> | ScrollPaddingRightProperty<TLength>[];\n  /**\n   * The `scroll-padding-top` property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  scrollPaddingTop?: ScrollPaddingTopProperty<TLength> | ScrollPaddingTopProperty<TLength>[];\n  /**\n   * The `scroll-snap-align` property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  scrollSnapAlign?: ScrollSnapAlignProperty | ScrollSnapAlignProperty[];\n  /**\n   * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollSnapMargin?: ScrollMarginProperty<TLength> | ScrollMarginProperty<TLength>[];\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |                Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :----------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollSnapMarginBottom?: ScrollMarginBottomProperty<TLength> | ScrollMarginBottomProperty<TLength>[];\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :--------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollSnapMarginLeft?: ScrollMarginLeftProperty<TLength> | ScrollMarginLeftProperty<TLength>[];\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollSnapMarginRight?: ScrollMarginRightProperty<TLength> | ScrollMarginRightProperty<TLength>[];\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :-------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollSnapMarginTop?: ScrollMarginTopProperty<TLength> | ScrollMarginTopProperty<TLength>[];\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **75** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  scrollSnapStop?: ScrollSnapStopProperty | ScrollSnapStopProperty[];\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |     Edge     |      IE      |\n   * | :----: | :-----: | :-----: | :----------: | :----------: |\n   * | **69** |  39-68  | **11**  | **12** _-x-_ | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  scrollSnapType?: ScrollSnapTypeProperty | ScrollSnapTypeProperty[];\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | dark | light | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  scrollbarColor?: ScrollbarColorProperty | ScrollbarColorProperty[];\n  /**\n   * The `scrollbar-width` property allows the author to set the maximum thickness of an element’s scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  scrollbarWidth?: ScrollbarWidthProperty | ScrollbarWidthProperty[];\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  shapeImageThreshold?: ShapeImageThresholdProperty | ShapeImageThresholdProperty[];\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |     Safari     |  Edge  | IE  |\n   * | :----: | :-----: | :------------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** _-x-_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  shapeMargin?: ShapeMarginProperty<TLength> | ShapeMarginProperty<TLength>[];\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | <shape-box> || <basic-shape> | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  shapeOutside?: ShapeOutsideProperty | ShapeOutsideProperty[];\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome |   Firefox   | Safari  |  Edge  | IE  |\n   * | :----: | :---------: | :-----: | :----: | :-: |\n   * | **21** | **4** _-x-_ | **6.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  tabSize?: TabSizeProperty<TLength> | TabSizeProperty<TLength>[];\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  tableLayout?: TableLayoutProperty | TableLayoutProperty[];\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  textAlign?: TextAlignProperty | TextAlignProperty[];\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  |   No   | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  textAlignLast?: TextAlignLastProperty | TextAlignLastProperty[];\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |              Safari              |                  Edge                  |                   IE                   |\n   * | :------------------------: | :-----: | :------------------------------: | :------------------------------------: | :------------------------------------: |\n   * |           **48**           | **48**  | **5.1** _(-webkit-text-combine)_ | **12** _(-ms-text-combine-horizontal)_ | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         |                                  |                                        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  textCombineUpright?: TextCombineUprightProperty | TextCombineUprightProperty[];\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  textDecorationColor?: TextDecorationColorProperty | TextDecorationColorProperty[];\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  textDecorationLine?: TextDecorationLineProperty | TextDecorationLineProperty[];\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** |  No  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  textDecorationSkip?: TextDecorationSkipProperty | TextDecorationSkipProperty[];\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **64** | **70**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  textDecorationSkipInk?: TextDecorationSkipInkProperty | TextDecorationSkipInkProperty[];\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  textDecorationStyle?: TextDecorationStyleProperty | TextDecorationStyleProperty[];\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  textDecorationThickness?: TextDecorationThicknessProperty<TLength> | TextDecorationThicknessProperty<TLength>[];\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  textDecorationWidth?: TextDecorationThicknessProperty<TLength> | TextDecorationThicknessProperty<TLength>[];\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  textEmphasisColor?: TextEmphasisColorProperty | TextEmphasisColorProperty[];\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  textEmphasisPosition?: GlobalsString | GlobalsString[];\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  textEmphasisStyle?: TextEmphasisStyleProperty | TextEmphasisStyleProperty[];\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  textIndent?: TextIndentProperty<TLength> | TextIndentProperty<TLength>[];\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * |  n/a   | **55**  |   No   | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  textJustify?: TextJustifyProperty | TextJustifyProperty[];\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |    Safari     |  Edge  | IE  |\n   * | :------: | :-----: | :-----------: | :----: | :-: |\n   * |  **48**  | **41**  | **5.1** _-x-_ | **79** | No  |\n   * | 11 _-x-_ |         |               |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  textOrientation?: TextOrientationProperty | TextOrientationProperty[];\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  textOverflow?: TextOverflowProperty | TextOverflowProperty[];\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **4**  |  **1**  | **5**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  textRendering?: TextRenderingProperty | TextRenderingProperty[];\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  textShadow?: TextShadowProperty | TextShadowProperty[];\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  textSizeAdjust?: TextSizeAdjustProperty | TextSizeAdjustProperty[];\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  textTransform?: TextTransformProperty | TextTransformProperty[];\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  textUnderlineOffset?: TextUnderlineOffsetProperty<TLength> | TextUnderlineOffsetProperty<TLength>[];\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  textUnderlinePosition?: TextUnderlinePositionProperty | TextUnderlinePositionProperty[];\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: TopProperty<TLength> | TopProperty<TLength>[];\n  /**\n   * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  touchAction?: TouchActionProperty | TouchActionProperty[];\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: TransformProperty | TransformProperty[];\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform` and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **64** | **55**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  transformBox?: TransformBoxProperty | TransformBoxProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |\n   * | :-----: | :-------: | :-----: | :----: | :-----: |\n   * | **36**  |  **16**   |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  transformOrigin?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |\n   * | :------: | :------: | :-----: | :----: | :-: |\n   * |  **36**  |  **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  transformStyle?: TransformStyleProperty | TransformStyleProperty[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  transitionDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  transitionDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  transitionProperty?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  transitionTimingFunction?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: TranslateProperty<TLength> | TranslateProperty<TLength>[];\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  unicodeBidi?: UnicodeBidiProperty | UnicodeBidiProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |     Edge     |      IE      |\n   * | :-----: | :-----: | :---------: | :----------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ | **12** _-x-_ | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  userSelect?: UserSelectProperty | UserSelectProperty[];\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  verticalAlign?: VerticalAlignProperty<TLength> | VerticalAlignProperty<TLength>[];\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: VisibilityProperty | VisibilityProperty[];\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  whiteSpace?: WhiteSpaceProperty | WhiteSpaceProperty[];\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`width`** CSS property sets an element's width. By default it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: WidthProperty<TLength> | WidthProperty<TLength>[];\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **36** | **36**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  willChange?: WillChangeProperty | WillChangeProperty[];\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  wordBreak?: WordBreakProperty | WordBreakProperty[];\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  wordSpacing?: WordSpacingProperty<TLength> | WordSpacingProperty<TLength>[];\n  /**\n   * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **3.5** | **2**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  wordWrap?: WordWrapProperty | WordWrapProperty[];\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |     IE      |\n   * | :-----: | :-----: | :-------: | :----: | :---------: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** _-x-_ |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |             |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  writingMode?: WritingModeProperty | WritingModeProperty[];\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  zIndex?: ZIndexProperty | ZIndexProperty[];\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   No    | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: ZoomProperty | ZoomProperty[];\n}\n\nexport interface StandardShorthandPropertiesFallback<TLength = string | 0> {\n  /**\n   * The `**all**` CSS shorthand property sets all of an element's properties (other than `unicode-bidi` and `direction`) to their initial or inherited values, or to the values specified in another stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **37** | **27**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Globals | Globals[];\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: AnimationProperty | AnimationProperty[];\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: BackgroundProperty<TLength> | BackgroundProperty<TLength>[];\n  /**\n   * The **`border`** CSS property sets an element's border. It's a shorthand for `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: BorderProperty<TLength> | BorderProperty<TLength>[];\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  borderBlock?: BorderBlockProperty<TLength> | BorderBlockProperty<TLength>[];\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  borderBlockEnd?: BorderBlockEndProperty<TLength> | BorderBlockEndProperty<TLength>[];\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  borderBlockStart?: BorderBlockStartProperty<TLength> | BorderBlockStartProperty<TLength>[];\n  /**\n   * The **`border-bottom`** CSS property is a shorthand that sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`. These properties set an element's bottom border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  borderBottom?: BorderBottomProperty<TLength> | BorderBottomProperty<TLength>[];\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of all sides of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  borderColor?: BorderColorProperty | BorderColorProperty[];\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  borderImage?: BorderImageProperty | BorderImageProperty[];\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  borderInline?: BorderInlineProperty<TLength> | BorderInlineProperty<TLength>[];\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  borderInlineEnd?: BorderInlineEndProperty<TLength> | BorderInlineEndProperty<TLength>[];\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  borderInlineStart?: BorderInlineStartProperty<TLength> | BorderInlineStartProperty<TLength>[];\n  /**\n   * The **`border-left`** CSS property is a shorthand that sets the values of `border-left-width`, `border-left-style` and `border-left-color`. These properties set an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  borderLeft?: BorderLeftProperty<TLength> | BorderLeftProperty<TLength>[];\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  borderRadius?: BorderRadiusProperty<TLength> | BorderRadiusProperty<TLength>[];\n  /**\n   * The **`border-right`** CSS property is a shorthand that sets the values of `border-right-width`, `border-right-style` and `border-right-color`. These properties set an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  borderRight?: BorderRightProperty<TLength> | BorderRightProperty<TLength>[];\n  /**\n   * The **`border-style`** CSS property is a shorthand property that sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  borderStyle?: BorderStyleProperty | BorderStyleProperty[];\n  /**\n   * The **`border-top`** CSS property is a shorthand that sets the values of `border-top-width`, `border-top-style` and `border-top-color`. These properties set an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  borderTop?: BorderTopProperty<TLength> | BorderTopProperty<TLength>[];\n  /**\n   * The **`border-width`** shorthand CSS property sets the widths of all four sides of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  borderWidth?: BorderWidthProperty<TLength> | BorderWidthProperty<TLength>[];\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  columnRule?: ColumnRuleProperty<TLength> | ColumnRuleProperty<TLength>[];\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: ColumnsProperty<TLength> | ColumnsProperty<TLength>[];\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |    IE    |\n   * | :------: | :-----: | :-------: | :----: | :------: |\n   * |  **29**  | **20**  |   **9**   | **12** |  **11**  |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: FlexProperty<TLength> | FlexProperty<TLength>[];\n  /**\n   * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  flexFlow?: FlexFlowProperty | FlexFlowProperty[];\n  /**\n   * The **`font`** CSS property is a shorthand for `font-style`, `font-variant`, `font-weight`, `font-size`, `line-height`, and `font-family`. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: FontProperty | FontProperty[];\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **84** | **63**  |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |     Chrome      |     Firefox     |      Safari       |  Edge  | IE  |\n   * | :-------------: | :-------------: | :---------------: | :----: | :-: |\n   * |     **66**      |     **61**      |      **12**       | **16** | No  |\n   * | 57 _(grid-gap)_ | 52 _(grid-gap)_ | 10.1 _(grid-gap)_ |        |     |\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **66** | **61**  |   No   | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: GapProperty<TLength> | GapProperty<TLength>[];\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit grid properties (`grid-template-rows`, `grid-template-columns`, and `grid-template-areas`), and all the implicit grid properties (`grid-auto-rows`, `grid-auto-columns`, and `grid-auto-flow`), in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: GridProperty | GridProperty[];\n  /**\n   * The **`grid-area`** CSS property is a shorthand property for `grid-row-start`, `grid-column-start`, `grid-row-end` and `grid-column-end`, specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  gridArea?: GridAreaProperty | GridAreaProperty[];\n  /**\n   * The **`grid-column`** CSS property is a shorthand property for `grid-column-start` and `grid-column-end` specifying a grid item's size and location within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  gridColumn?: GridColumnProperty | GridColumnProperty[];\n  /**\n   * The **`grid-row`** CSS property is a shorthand property for `grid-row-start` and `grid-row-end` specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  gridRow?: GridRowProperty | GridRowProperty[];\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, rows, and areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  gridTemplate?: GridTemplateProperty | GridTemplateProperty[];\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  lineClamp?: LineClampProperty | LineClampProperty[];\n  /**\n   * The **`list-style`** CSS property is a shorthand to set list style properties `list-style-type`, `list-style-image`, and `list-style-position`.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  listStyle?: ListStyleProperty | ListStyleProperty[];\n  /**\n   * The **`margin`** CSS property sets the margin area on all four sides of an element. It is a shorthand for `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: MarginProperty<TLength> | MarginProperty<TLength>[];\n  /**\n   * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  |  **2**  | **3.2** | **12** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: MaskProperty<TLength> | MaskProperty<TLength>[];\n  /**\n   * The **`mask-border`** CSS property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  maskBorder?: MaskBorderProperty | MaskBorderProperty[];\n  /**\n   * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari |  Edge  | IE  |\n   * | :-----------: | :-----: | :----: | :----: | :-: |\n   * |    **55**     | **72**  |   No   | **79** | No  |\n   * | 46 _(motion)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: OffsetProperty<TLength> | OffsetProperty<TLength>[];\n  /**\n   * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari |  Edge  | IE  |\n   * | :-----------: | :-----: | :----: | :----: | :-: |\n   * |    **55**     | **72**  |   No   | **79** | No  |\n   * | 46 _(motion)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: OffsetProperty<TLength> | OffsetProperty<TLength>[];\n  /**\n   * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: OutlineProperty<TLength> | OutlineProperty<TLength>[];\n  /**\n   * The **`overflow`** CSS property sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflow-x` and `overflow-y`.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: OverflowProperty | OverflowProperty[];\n  /**\n   * The **`padding`** CSS property sets the padding area on all four sides of an element. It is a shorthand for `padding-top`, `padding-right`, `padding-bottom`, and `padding-left`.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: PaddingProperty<TLength> | PaddingProperty<TLength>[];\n  /**\n   * The CSS **`place-items`** shorthand property sets the `align-items` and `justify-items` properties, respectively. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  placeItems?: PlaceItemsProperty | PlaceItemsProperty[];\n  /**\n   * The **`place-self`** CSS property is a shorthand property sets both the `align-self` and `justify-self` properties. The first value is the `align-self` property value, the second the `justify-self` one. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  |   No   | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  |   No   | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  placeSelf?: PlaceSelfProperty | PlaceSelfProperty[];\n  /**\n   * The **`text-decoration`** CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, and `text-decoration-style`.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  textDecoration?: TextDecorationProperty<TLength> | TextDecorationProperty<TLength>[];\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  textEmphasis?: TextEmphasisProperty | TextEmphasisProperty[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: TransitionProperty | TransitionProperty[];\n}\n\nexport interface StandardPropertiesFallback<TLength = string | 0> extends StandardLonghandPropertiesFallback<TLength>, StandardShorthandPropertiesFallback<TLength> {}\n\nexport interface VendorLonghandPropertiesFallback<TLength = string | 0> {\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozAnimationDirection?: AnimationDirectionProperty | AnimationDirectionProperty[];\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationFillMode?: AnimationFillModeProperty | AnimationFillModeProperty[];\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  MozAnimationIterationCount?: AnimationIterationCountProperty | AnimationIterationCountProperty[];\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationName?: AnimationNameProperty | AnimationNameProperty[];\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  MozAnimationPlayState?: AnimationPlayStateProperty | AnimationPlayStateProperty[];\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozAnimationTimingFunction?: AnimationTimingFunctionProperty | AnimationTimingFunctionProperty[];\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  MozAppearance?: MozAppearanceProperty | MozAppearanceProperty[];\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  MozBackfaceVisibility?: BackfaceVisibilityProperty | BackfaceVisibilityProperty[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderBottomColors?: MozBorderBottomColorsProperty | MozBorderBottomColorsProperty[];\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderEndColor?: BorderInlineEndColorProperty | BorderInlineEndColorProperty[];\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderEndStyle?: BorderInlineEndStyleProperty | BorderInlineEndStyleProperty[];\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozBorderEndWidth?: BorderInlineEndWidthProperty<TLength> | BorderInlineEndWidthProperty<TLength>[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderLeftColors?: MozBorderLeftColorsProperty | MozBorderLeftColorsProperty[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderRightColors?: MozBorderRightColorsProperty | MozBorderRightColorsProperty[];\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderStartColor?: BorderInlineStartColorProperty | BorderInlineStartColorProperty[];\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderStartStyle?: BorderInlineStartStyleProperty | BorderInlineStartStyleProperty[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderTopColors?: MozBorderTopColorsProperty | MozBorderTopColorsProperty[];\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  MozBoxSizing?: BoxSizingProperty | BoxSizingProperty[];\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnCount?: ColumnCountProperty | ColumnCountProperty[];\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  MozColumnFill?: ColumnFillProperty | ColumnFillProperty[];\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   */\n  MozColumnGap?: ColumnGapProperty<TLength> | ColumnGapProperty<TLength>[];\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozColumnRuleColor?: ColumnRuleColorProperty | ColumnRuleColorProperty[];\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozColumnRuleStyle?: ColumnRuleStyleProperty | ColumnRuleStyleProperty[];\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozColumnRuleWidth?: ColumnRuleWidthProperty<TLength> | ColumnRuleWidthProperty<TLength>[];\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnWidth?: ColumnWidthProperty<TLength> | ColumnWidthProperty<TLength>[];\n  /**\n   * If you reference an SVG image in a webpage (such as with the `<img>` element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the **`-moz-context-properties`** property, and the image needs to opt in to using those properties by using values such as the `context-fill` value.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozContextProperties?: MozContextPropertiesProperty | MozContextPropertiesProperty[];\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  MozFloatEdge?: MozFloatEdgeProperty | MozFloatEdgeProperty[];\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontFeatureSettings?: FontFeatureSettingsProperty | FontFeatureSettingsProperty[];\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontLanguageOverride?: FontLanguageOverrideProperty | FontLanguageOverrideProperty[];\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  MozForceBrokenImageIcon?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  MozHyphens?: HyphensProperty | HyphensProperty[];\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozImageRegion?: MozImageRegionProperty | MozImageRegionProperty[];\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginEnd?: MarginInlineEndProperty<TLength> | MarginInlineEndProperty<TLength>[];\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginStart?: MarginInlineStartProperty<TLength> | MarginInlineStartProperty<TLength>[];\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  MozOrient?: MozOrientProperty | MozOrientProperty[];\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomleft?: MozOutlineRadiusBottomleftProperty<TLength> | MozOutlineRadiusBottomleftProperty<TLength>[];\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomright?: MozOutlineRadiusBottomrightProperty<TLength> | MozOutlineRadiusBottomrightProperty<TLength>[];\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopleft?: MozOutlineRadiusTopleftProperty<TLength> | MozOutlineRadiusTopleftProperty<TLength>[];\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopright?: MozOutlineRadiusToprightProperty<TLength> | MozOutlineRadiusToprightProperty<TLength>[];\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingEnd?: PaddingInlineEndProperty<TLength> | PaddingInlineEndProperty<TLength>[];\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingStart?: PaddingInlineStartProperty<TLength> | PaddingInlineStartProperty<TLength>[];\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  MozPerspective?: PerspectiveProperty<TLength> | PerspectiveProperty<TLength>[];\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  MozPerspectiveOrigin?: PerspectiveOriginProperty<TLength> | PerspectiveOriginProperty<TLength>[];\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `stack` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  MozStackSizing?: MozStackSizingProperty | MozStackSizingProperty[];\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  MozTabSize?: TabSizeProperty<TLength> | TabSizeProperty<TLength>[];\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  MozTextBlink?: MozTextBlinkProperty | MozTextBlinkProperty[];\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  MozTextSizeAdjust?: TextSizeAdjustProperty | TextSizeAdjustProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  MozTransformOrigin?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  MozTransformStyle?: TransformStyleProperty | TransformStyleProperty[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozTransitionDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozTransitionDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  MozTransitionProperty?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozTransitionTimingFunction?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozUserFocus?: MozUserFocusProperty | MozUserFocusProperty[];\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  MozUserModify?: MozUserModifyProperty | MozUserModifyProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  MozUserSelect?: UserSelectProperty | UserSelectProperty[];\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  MozWindowDragging?: MozWindowDraggingProperty | MozWindowDraggingProperty[];\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  MozWindowShadow?: MozWindowShadowProperty | MozWindowShadowProperty[];\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  msAccelerator?: MsAcceleratorProperty | MsAcceleratorProperty[];\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  msAlignSelf?: AlignSelfProperty | AlignSelfProperty[];\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  msBlockProgression?: MsBlockProgressionProperty | MsBlockProgressionProperty[];\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomChaining?: MsContentZoomChainingProperty | MsContentZoomChainingProperty[];\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  msContentZoomLimitMax?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  msContentZoomLimitMin?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  msContentZoomSnapPoints?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomSnapType?: MsContentZoomSnapTypeProperty | MsContentZoomSnapTypeProperty[];\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  msContentZooming?: MsContentZoomingProperty | MsContentZoomingProperty[];\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  msFilter?: GlobalsString | GlobalsString[];\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  msFlexDirection?: FlexDirectionProperty | FlexDirectionProperty[];\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  msFlexPositive?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowFrom?: MsFlowFromProperty | MsFlowFromProperty[];\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowInto?: MsFlowIntoProperty | MsFlowIntoProperty[];\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   */\n  msGridColumns?: GridAutoColumnsProperty<TLength> | GridAutoColumnsProperty<TLength>[];\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   */\n  msGridRows?: GridAutoRowsProperty<TLength> | GridAutoRowsProperty<TLength>[];\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  msHighContrastAdjust?: MsHighContrastAdjustProperty | MsHighContrastAdjustProperty[];\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  msHyphenateLimitChars?: MsHyphenateLimitCharsProperty | MsHyphenateLimitCharsProperty[];\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  msHyphenateLimitLines?: MsHyphenateLimitLinesProperty | MsHyphenateLimitLinesProperty[];\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  msHyphenateLimitZone?: MsHyphenateLimitZoneProperty<TLength> | MsHyphenateLimitZoneProperty<TLength>[];\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  msHyphens?: HyphensProperty | HyphensProperty[];\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  msImeAlign?: MsImeAlignProperty | MsImeAlignProperty[];\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  msLineBreak?: LineBreakProperty | LineBreakProperty[];\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  msOrder?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  msOverflowStyle?: MsOverflowStyleProperty | MsOverflowStyleProperty[];\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowX?: OverflowXProperty | OverflowXProperty[];\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowY?: OverflowYProperty | OverflowYProperty[];\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  msScrollChaining?: MsScrollChainingProperty | MsScrollChainingProperty[];\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitXMax?: MsScrollLimitXMaxProperty<TLength> | MsScrollLimitXMaxProperty<TLength>[];\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitXMin?: MsScrollLimitXMinProperty<TLength> | MsScrollLimitXMinProperty<TLength>[];\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitYMax?: MsScrollLimitYMaxProperty<TLength> | MsScrollLimitYMaxProperty<TLength>[];\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitYMin?: MsScrollLimitYMinProperty<TLength> | MsScrollLimitYMinProperty<TLength>[];\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  msScrollRails?: MsScrollRailsProperty | MsScrollRailsProperty[];\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsX?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsY?: GlobalsString | GlobalsString[];\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollSnapType?: MsScrollSnapTypeProperty | MsScrollSnapTypeProperty[];\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollTranslation?: MsScrollTranslationProperty | MsScrollTranslationProperty[];\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbar3dlightColor?: MsScrollbar3dlightColorProperty | MsScrollbar3dlightColorProperty[];\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  msScrollbarArrowColor?: MsScrollbarArrowColorProperty | MsScrollbarArrowColorProperty[];\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbarBaseColor?: MsScrollbarBaseColorProperty | MsScrollbarBaseColorProperty[];\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarDarkshadowColor?: MsScrollbarDarkshadowColorProperty | MsScrollbarDarkshadowColorProperty[];\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  msScrollbarFaceColor?: MsScrollbarFaceColorProperty | MsScrollbarFaceColorProperty[];\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  msScrollbarHighlightColor?: MsScrollbarHighlightColorProperty | MsScrollbarHighlightColorProperty[];\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarShadowColor?: MsScrollbarShadowColorProperty | MsScrollbarShadowColorProperty[];\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  msTextAutospace?: MsTextAutospaceProperty | MsTextAutospaceProperty[];\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  msTextCombineHorizontal?: TextCombineUprightProperty | TextCombineUprightProperty[];\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  msTextOverflow?: TextOverflowProperty | TextOverflowProperty[];\n  /**\n   * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  msTouchAction?: TouchActionProperty | TouchActionProperty[];\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  msTouchSelect?: MsTouchSelectProperty | MsTouchSelectProperty[];\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msTransform?: TransformProperty | TransformProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  msTransformOrigin?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  msTransitionProperty?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  msTransitionTimingFunction?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  msUserSelect?: MsUserSelectProperty | MsUserSelectProperty[];\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  msWordBreak?: WordBreakProperty | WordBreakProperty[];\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  msWrapFlow?: MsWrapFlowProperty | MsWrapFlowProperty[];\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msWrapMargin?: MsWrapMarginProperty<TLength> | MsWrapMarginProperty<TLength>[];\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  msWrapThrough?: MsWrapThroughProperty | MsWrapThroughProperty[];\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  msWritingMode?: WritingModeProperty | WritingModeProperty[];\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   */\n  OObjectFit?: ObjectFitProperty | ObjectFitProperty[];\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  OObjectPosition?: ObjectPositionProperty<TLength> | ObjectPositionProperty<TLength>[];\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  OTabSize?: TabSizeProperty<TLength> | TabSizeProperty<TLength>[];\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  OTextOverflow?: TextOverflowProperty | TextOverflowProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  OTransformOrigin?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignContent?: AlignContentProperty | AlignContentProperty[];\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignItems?: AlignItemsProperty | AlignItemsProperty[];\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitAlignSelf?: AlignSelfProperty | AlignSelfProperty[];\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAnimationDirection?: AnimationDirectionProperty | AnimationDirectionProperty[];\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationFillMode?: AnimationFillModeProperty | AnimationFillModeProperty[];\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitAnimationIterationCount?: AnimationIterationCountProperty | AnimationIterationCountProperty[];\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationName?: AnimationNameProperty | AnimationNameProperty[];\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  WebkitAnimationPlayState?: AnimationPlayStateProperty | AnimationPlayStateProperty[];\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitAnimationTimingFunction?: AnimationTimingFunctionProperty | AnimationTimingFunctionProperty[];\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  WebkitAppearance?: WebkitAppearanceProperty | WebkitAppearanceProperty[];\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBackdropFilter?: BackdropFilterProperty | BackdropFilterProperty[];\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  WebkitBackfaceVisibility?: BackfaceVisibilityProperty | BackfaceVisibilityProperty[];\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  WebkitBackgroundClip?: BackgroundClipProperty | BackgroundClipProperty[];\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  WebkitBackgroundOrigin?: BackgroundOriginProperty | BackgroundOriginProperty[];\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitBackgroundSize?: BackgroundSizeProperty<TLength> | BackgroundSizeProperty<TLength>[];\n  /**\n   * **Syntax**: `<'color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitBorderBeforeColor?: WebkitBorderBeforeColorProperty | WebkitBorderBeforeColorProperty[];\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBorderBeforeStyle?: WebkitBorderBeforeStyleProperty | WebkitBorderBeforeStyleProperty[];\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitBorderBeforeWidth?: WebkitBorderBeforeWidthProperty<TLength> | WebkitBorderBeforeWidthProperty<TLength>[];\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomLeftRadius?: BorderBottomLeftRadiusProperty<TLength> | BorderBottomLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomRightRadius?: BorderBottomRightRadiusProperty<TLength> | BorderBottomRightRadiusProperty<TLength>[];\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  WebkitBorderImageSlice?: BorderImageSliceProperty | BorderImageSliceProperty[];\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopLeftRadius?: BorderTopLeftRadiusProperty<TLength> | BorderTopLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopRightRadius?: BorderTopRightRadiusProperty<TLength> | BorderTopRightRadiusProperty<TLength>[];\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  WebkitBoxDecorationBreak?: BoxDecorationBreakProperty | BoxDecorationBreakProperty[];\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxReflect?: WebkitBoxReflectProperty<TLength> | WebkitBoxReflectProperty<TLength>[];\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxShadow?: BoxShadowProperty | BoxShadowProperty[];\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  WebkitBoxSizing?: BoxSizingProperty | BoxSizingProperty[];\n  /**\n   * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitClipPath?: ClipPathProperty | ClipPathProperty[];\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnCount?: ColumnCountProperty | ColumnCountProperty[];\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  WebkitColumnFill?: ColumnFillProperty | ColumnFillProperty[];\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitColumnGap?: ColumnGapProperty<TLength> | ColumnGapProperty<TLength>[];\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitColumnRuleColor?: ColumnRuleColorProperty | ColumnRuleColorProperty[];\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnRuleStyle?: ColumnRuleStyleProperty | ColumnRuleStyleProperty[];\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitColumnRuleWidth?: ColumnRuleWidthProperty<TLength> | ColumnRuleWidthProperty<TLength>[];\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnSpan?: ColumnSpanProperty | ColumnSpanProperty[];\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnWidth?: ColumnWidthProperty<TLength> | ColumnWidthProperty<TLength>[];\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitFilter?: FilterProperty | FilterProperty[];\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFlexBasis?: FlexBasisProperty<TLength> | FlexBasisProperty<TLength>[];\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  WebkitFlexDirection?: FlexDirectionProperty | FlexDirectionProperty[];\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitFlexGrow?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitFlexShrink?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  WebkitFlexWrap?: FlexWrapProperty | FlexWrapProperty[];\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontFeatureSettings?: FontFeatureSettingsProperty | FontFeatureSettingsProperty[];\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontKerning?: FontKerningProperty | FontKerningProperty[];\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontVariantLigatures?: FontVariantLigaturesProperty | FontVariantLigaturesProperty[];\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  WebkitHyphens?: HyphensProperty | HyphensProperty[];\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitJustifyContent?: JustifyContentProperty | JustifyContentProperty[];\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitLineBreak?: LineBreakProperty | LineBreakProperty[];\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block container to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitLineClamp?: WebkitLineClampProperty | WebkitLineClampProperty[];\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginEnd?: MarginInlineEndProperty<TLength> | MarginInlineEndProperty<TLength>[];\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginStart?: MarginInlineStartProperty<TLength> | MarginInlineStartProperty<TLength>[];\n  /**\n   * If a `-webkit-mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  WebkitMaskAttachment?: WebkitMaskAttachmentProperty | WebkitMaskAttachmentProperty[];\n  /**\n   * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  WebkitMaskClip?: WebkitMaskClipProperty | WebkitMaskClipProperty[];\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  WebkitMaskComposite?: WebkitMaskCompositeProperty | WebkitMaskCompositeProperty[];\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskImage?: WebkitMaskImageProperty | WebkitMaskImageProperty[];\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  WebkitMaskOrigin?: WebkitMaskOriginProperty | WebkitMaskOriginProperty[];\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  WebkitMaskPosition?: WebkitMaskPositionProperty<TLength> | WebkitMaskPositionProperty<TLength>[];\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionX?: WebkitMaskPositionXProperty<TLength> | WebkitMaskPositionXProperty<TLength>[];\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionY?: WebkitMaskPositionYProperty<TLength> | WebkitMaskPositionYProperty<TLength>[];\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeat?: WebkitMaskRepeatProperty | WebkitMaskRepeatProperty[];\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatX?: WebkitMaskRepeatXProperty | WebkitMaskRepeatXProperty[];\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatY?: WebkitMaskRepeatYProperty | WebkitMaskRepeatYProperty[];\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitMaskSize?: WebkitMaskSizeProperty<TLength> | WebkitMaskSizeProperty<TLength>[];\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaxInlineSize?: MaxInlineSizeProperty<TLength> | MaxInlineSizeProperty<TLength>[];\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitOrder?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitOverflowScrolling?: WebkitOverflowScrollingProperty | WebkitOverflowScrollingProperty[];\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingEnd?: PaddingInlineEndProperty<TLength> | PaddingInlineEndProperty<TLength>[];\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingStart?: PaddingInlineStartProperty<TLength> | PaddingInlineStartProperty<TLength>[];\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitPerspective?: PerspectiveProperty<TLength> | PerspectiveProperty<TLength>[];\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  WebkitPerspectiveOrigin?: PerspectiveOriginProperty<TLength> | PerspectiveOriginProperty<TLength>[];\n  /**\n   * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  WebkitPrintColorAdjust?: ColorAdjustProperty | ColorAdjustProperty[];\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitScrollSnapType?: ScrollSnapTypeProperty | ScrollSnapTypeProperty[];\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitShapeMargin?: ShapeMarginProperty<TLength> | ShapeMarginProperty<TLength>[];\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  WebkitTapHighlightColor?: WebkitTapHighlightColorProperty | WebkitTapHighlightColorProperty[];\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextCombine?: TextCombineUprightProperty | TextCombineUprightProperty[];\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextDecorationColor?: TextDecorationColorProperty | TextDecorationColorProperty[];\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextDecorationLine?: TextDecorationLineProperty | TextDecorationLineProperty[];\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  WebkitTextDecorationSkip?: TextDecorationSkipProperty | TextDecorationSkipProperty[];\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  WebkitTextDecorationStyle?: TextDecorationStyleProperty | TextDecorationStyleProperty[];\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextEmphasisColor?: TextEmphasisColorProperty | TextEmphasisColorProperty[];\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  WebkitTextEmphasisPosition?: GlobalsString | GlobalsString[];\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextEmphasisStyle?: TextEmphasisStyleProperty | TextEmphasisStyleProperty[];\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextFillColor?: WebkitTextFillColorProperty | WebkitTextFillColorProperty[];\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  WebkitTextOrientation?: TextOrientationProperty | TextOrientationProperty[];\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  WebkitTextSizeAdjust?: TextSizeAdjustProperty | TextSizeAdjustProperty[];\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextStrokeColor?: WebkitTextStrokeColorProperty | WebkitTextStrokeColorProperty[];\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitTextStrokeWidth?: WebkitTextStrokeWidthProperty<TLength> | WebkitTextStrokeWidthProperty<TLength>[];\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitTextUnderlinePosition?: TextUnderlinePositionProperty | TextUnderlinePositionProperty[];\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  WebkitTouchCallout?: WebkitTouchCalloutProperty | WebkitTouchCalloutProperty[];\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTransform?: TransformProperty | TransformProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  WebkitTransformOrigin?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  WebkitTransformStyle?: TransformStyleProperty | TransformStyleProperty[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  WebkitTransitionProperty?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitTransitionTimingFunction?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  WebkitUserModify?: WebkitUserModifyProperty | WebkitUserModifyProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitUserSelect?: UserSelectProperty | UserSelectProperty[];\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  WebkitWritingMode?: WritingModeProperty | WritingModeProperty[];\n}\n\nexport interface VendorShorthandPropertiesFallback<TLength = string | 0> {\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  MozAnimation?: AnimationProperty | AnimationProperty[];\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  MozBorderImage?: BorderImageProperty | BorderImageProperty[];\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  MozColumnRule?: ColumnRuleProperty<TLength> | ColumnRuleProperty<TLength>[];\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  MozColumns?: ColumnsProperty<TLength> | ColumnsProperty<TLength>[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  MozTransition?: TransitionProperty | TransitionProperty[];\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  msContentZoomLimit?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  msContentZoomSnap?: MsContentZoomSnapProperty | MsContentZoomSnapProperty[];\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  msFlex?: FlexProperty<TLength> | FlexProperty<TLength>[];\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  msScrollLimit?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  msScrollSnapX?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  msScrollSnapY?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  msTransition?: TransitionProperty | TransitionProperty[];\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  WebkitAnimation?: AnimationProperty | AnimationProperty[];\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <'color'>`\n   */\n  WebkitBorderBefore?: WebkitBorderBeforeProperty<TLength> | WebkitBorderBeforeProperty<TLength>[];\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  WebkitBorderImage?: BorderImageProperty | BorderImageProperty[];\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  WebkitBorderRadius?: BorderRadiusProperty<TLength> | BorderRadiusProperty<TLength>[];\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  WebkitColumnRule?: ColumnRuleProperty<TLength> | ColumnRuleProperty<TLength>[];\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  WebkitColumns?: ColumnsProperty<TLength> | ColumnsProperty<TLength>[];\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  WebkitFlex?: FlexProperty<TLength> | FlexProperty<TLength>[];\n  /**\n   * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  WebkitFlexFlow?: FlexFlowProperty | FlexFlowProperty[];\n  /**\n   * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  WebkitMask?: WebkitMaskProperty<TLength> | WebkitMaskProperty<TLength>[];\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  WebkitTextEmphasis?: TextEmphasisProperty | TextEmphasisProperty[];\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  WebkitTextStroke?: WebkitTextStrokeProperty<TLength> | WebkitTextStrokeProperty<TLength>[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  WebkitTransition?: TransitionProperty | TransitionProperty[];\n}\n\nexport interface VendorPropertiesFallback<TLength = string | 0> extends VendorLonghandPropertiesFallback<TLength>, VendorShorthandPropertiesFallback<TLength> {}\n\nexport interface ObsoletePropertiesFallback<TLength = string | 0> {\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  boxAlign?: BoxAlignProperty | BoxAlignProperty[];\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  boxDirection?: BoxDirectionProperty | BoxDirectionProperty[];\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  boxFlex?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxFlexGroup?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  boxLines?: BoxLinesProperty | BoxLinesProperty[];\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxOrdinalGroup?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  boxOrient?: BoxOrientProperty | BoxOrientProperty[];\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  boxPack?: BoxPackProperty | BoxPackProperty[];\n  /**\n   * The **`clip`** CSS property defines what portion of an element is visible. The `clip` property applies only to absolutely positioned elements, that is elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: ClipProperty | ClipProperty[];\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  fontVariantAlternates?: FontVariantAlternatesProperty | FontVariantAlternatesProperty[];\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridColumnGap?: GridColumnGapProperty<TLength> | GridColumnGapProperty<TLength>[];\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  gridGap?: GridGapProperty<TLength> | GridGapProperty<TLength>[];\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridRowGap?: GridRowGapProperty<TLength> | GridRowGapProperty<TLength>[];\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  imeMode?: ImeModeProperty | ImeModeProperty[];\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlock?: InsetBlockProperty<TLength> | InsetBlockProperty<TLength>[];\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockEnd?: InsetBlockEndProperty<TLength> | InsetBlockEndProperty<TLength>[];\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockStart?: InsetBlockStartProperty<TLength> | InsetBlockStartProperty<TLength>[];\n  /**\n   * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInline?: InsetInlineProperty<TLength> | InsetInlineProperty<TLength>[];\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineEnd?: InsetInlineEndProperty<TLength> | InsetInlineEndProperty<TLength>[];\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineStart?: InsetInlineStartProperty<TLength> | InsetInlineStartProperty<TLength>[];\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapCoordinate?: ScrollSnapCoordinateProperty<TLength> | ScrollSnapCoordinateProperty<TLength>[];\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  scrollSnapDestination?: ScrollSnapDestinationProperty<TLength> | ScrollSnapDestinationProperty<TLength>[];\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsX?: ScrollSnapPointsXProperty | ScrollSnapPointsXProperty[];\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsY?: ScrollSnapPointsYProperty | ScrollSnapPointsYProperty[];\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeX?: ScrollSnapTypeXProperty | ScrollSnapTypeXProperty[];\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeY?: ScrollSnapTypeYProperty | ScrollSnapTypeYProperty[];\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   *\n   * @deprecated\n   */\n  scrollbarTrackColor?: MsScrollbarTrackColorProperty | MsScrollbarTrackColorProperty[];\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  textCombineHorizontal?: TextCombineUprightProperty | TextCombineUprightProperty[];\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  KhtmlBoxAlign?: BoxAlignProperty | BoxAlignProperty[];\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  KhtmlBoxDirection?: BoxDirectionProperty | BoxDirectionProperty[];\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlex?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlexGroup?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  KhtmlBoxLines?: BoxLinesProperty | BoxLinesProperty[];\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrdinalGroup?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrient?: BoxOrientProperty | BoxOrientProperty[];\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  KhtmlBoxPack?: BoxPackProperty | BoxPackProperty[];\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlLineBreak?: LineBreakProperty | LineBreakProperty[];\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * @deprecated\n   */\n  KhtmlOpacity?: OpacityProperty | OpacityProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlUserSelect?: UserSelectProperty | UserSelectProperty[];\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundClip?: BackgroundClipProperty | BackgroundClipProperty[];\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  MozBackgroundInlinePolicy?: BoxDecorationBreakProperty | BoxDecorationBreakProperty[];\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundOrigin?: BackgroundOriginProperty | BackgroundOriginProperty[];\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  MozBackgroundSize?: BackgroundSizeProperty<TLength> | BackgroundSizeProperty<TLength>[];\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozBinding?: MozBindingProperty | MozBindingProperty[];\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozBorderRadius?: BorderRadiusProperty<TLength> | BorderRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomleft?: BorderBottomLeftRadiusProperty<TLength> | BorderBottomLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomright?: BorderBottomRightRadiusProperty<TLength> | BorderBottomRightRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopleft?: BorderTopLeftRadiusProperty<TLength> | BorderTopLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopright?: BorderTopRightRadiusProperty<TLength> | BorderTopRightRadiusProperty<TLength>[];\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  MozBoxAlign?: BoxAlignProperty | BoxAlignProperty[];\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  MozBoxDirection?: BoxDirectionProperty | BoxDirectionProperty[];\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBoxFlex?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozBoxOrdinalGroup?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  MozBoxOrient?: BoxOrientProperty | BoxOrientProperty[];\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  MozBoxPack?: BoxPackProperty | BoxPackProperty[];\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozBoxShadow?: BoxShadowProperty | BoxShadowProperty[];\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * @deprecated\n   */\n  MozOpacity?: OpacityProperty | OpacityProperty[];\n  /**\n   * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  MozOutline?: OutlineProperty<TLength> | OutlineProperty<TLength>[];\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  MozOutlineColor?: OutlineColorProperty | OutlineColorProperty[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozOutlineRadius?: MozOutlineRadiusProperty<TLength> | MozOutlineRadiusProperty<TLength>[];\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozOutlineStyle?: OutlineStyleProperty | OutlineStyleProperty[];\n  /**\n   * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  MozOutlineWidth?: OutlineWidthProperty<TLength> | OutlineWidthProperty<TLength>[];\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozTextAlignLast?: TextAlignLastProperty | TextAlignLastProperty[];\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  MozTextDecorationColor?: TextDecorationColorProperty | TextDecorationColorProperty[];\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTextDecorationLine?: TextDecorationLineProperty | TextDecorationLineProperty[];\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  MozTextDecorationStyle?: TextDecorationStyleProperty | TextDecorationStyleProperty[];\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozUserInput?: MozUserInputProperty | MozUserInputProperty[];\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  msImeMode?: ImeModeProperty | ImeModeProperty[];\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   *\n   * @deprecated\n   */\n  msScrollbarTrackColor?: MsScrollbarTrackColorProperty | MsScrollbarTrackColorProperty[];\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  OAnimation?: AnimationProperty | AnimationProperty[];\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  OAnimationDirection?: AnimationDirectionProperty | AnimationDirectionProperty[];\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationFillMode?: AnimationFillModeProperty | AnimationFillModeProperty[];\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  OAnimationIterationCount?: AnimationIterationCountProperty | AnimationIterationCountProperty[];\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationName?: AnimationNameProperty | AnimationNameProperty[];\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  OAnimationPlayState?: AnimationPlayStateProperty | AnimationPlayStateProperty[];\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OAnimationTimingFunction?: AnimationTimingFunctionProperty | AnimationTimingFunctionProperty[];\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  OBackgroundSize?: BackgroundSizeProperty<TLength> | BackgroundSizeProperty<TLength>[];\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  OBorderImage?: BorderImageProperty | BorderImageProperty[];\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OTransform?: TransformProperty | TransformProperty[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  OTransition?: TransitionProperty | TransitionProperty[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDelay?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDuration?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  OTransitionProperty?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OTransitionTimingFunction?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  WebkitBoxAlign?: BoxAlignProperty | BoxAlignProperty[];\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  WebkitBoxDirection?: BoxDirectionProperty | BoxDirectionProperty[];\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlex?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlexGroup?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  WebkitBoxLines?: BoxLinesProperty | BoxLinesProperty[];\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxOrdinalGroup?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  WebkitBoxOrient?: BoxOrientProperty | BoxOrientProperty[];\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  WebkitBoxPack?: BoxPackProperty | BoxPackProperty[];\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  WebkitScrollSnapPointsX?: ScrollSnapPointsXProperty | ScrollSnapPointsXProperty[];\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  WebkitScrollSnapPointsY?: ScrollSnapPointsYProperty | ScrollSnapPointsYProperty[];\n}\n\nexport interface SvgPropertiesFallback<TLength = string | 0> {\n  alignmentBaseline?: AlignmentBaselineProperty | AlignmentBaselineProperty[];\n  baselineShift?: BaselineShiftProperty<TLength> | BaselineShiftProperty<TLength>[];\n  clip?: ClipProperty | ClipProperty[];\n  clipPath?: ClipPathProperty | ClipPathProperty[];\n  clipRule?: ClipRuleProperty | ClipRuleProperty[];\n  color?: ColorProperty | ColorProperty[];\n  colorInterpolation?: ColorInterpolationProperty | ColorInterpolationProperty[];\n  colorRendering?: ColorRenderingProperty | ColorRenderingProperty[];\n  cursor?: CursorProperty | CursorProperty[];\n  direction?: DirectionProperty | DirectionProperty[];\n  display?: DisplayProperty | DisplayProperty[];\n  dominantBaseline?: DominantBaselineProperty | DominantBaselineProperty[];\n  fill?: FillProperty | FillProperty[];\n  fillOpacity?: GlobalsNumber | GlobalsNumber[];\n  fillRule?: FillRuleProperty | FillRuleProperty[];\n  filter?: FilterProperty | FilterProperty[];\n  floodColor?: FloodColorProperty | FloodColorProperty[];\n  floodOpacity?: GlobalsNumber | GlobalsNumber[];\n  font?: FontProperty | FontProperty[];\n  fontFamily?: FontFamilyProperty | FontFamilyProperty[];\n  fontSize?: FontSizeProperty<TLength> | FontSizeProperty<TLength>[];\n  fontSizeAdjust?: FontSizeAdjustProperty | FontSizeAdjustProperty[];\n  fontStretch?: FontStretchProperty | FontStretchProperty[];\n  fontStyle?: FontStyleProperty | FontStyleProperty[];\n  fontVariant?: FontVariantProperty | FontVariantProperty[];\n  fontWeight?: FontWeightProperty | FontWeightProperty[];\n  glyphOrientationVertical?: GlyphOrientationVerticalProperty | GlyphOrientationVerticalProperty[];\n  imageRendering?: ImageRenderingProperty | ImageRenderingProperty[];\n  letterSpacing?: LetterSpacingProperty<TLength> | LetterSpacingProperty<TLength>[];\n  lightingColor?: LightingColorProperty | LightingColorProperty[];\n  lineHeight?: LineHeightProperty<TLength> | LineHeightProperty<TLength>[];\n  marker?: MarkerProperty | MarkerProperty[];\n  markerEnd?: MarkerEndProperty | MarkerEndProperty[];\n  markerMid?: MarkerMidProperty | MarkerMidProperty[];\n  markerStart?: MarkerStartProperty | MarkerStartProperty[];\n  mask?: MaskProperty<TLength> | MaskProperty<TLength>[];\n  opacity?: OpacityProperty | OpacityProperty[];\n  overflow?: OverflowProperty | OverflowProperty[];\n  paintOrder?: PaintOrderProperty | PaintOrderProperty[];\n  pointerEvents?: PointerEventsProperty | PointerEventsProperty[];\n  shapeRendering?: ShapeRenderingProperty | ShapeRenderingProperty[];\n  stopColor?: StopColorProperty | StopColorProperty[];\n  stopOpacity?: GlobalsNumber | GlobalsNumber[];\n  stroke?: StrokeProperty | StrokeProperty[];\n  strokeDasharray?: StrokeDasharrayProperty<TLength> | StrokeDasharrayProperty<TLength>[];\n  strokeDashoffset?: StrokeDashoffsetProperty<TLength> | StrokeDashoffsetProperty<TLength>[];\n  strokeLinecap?: StrokeLinecapProperty | StrokeLinecapProperty[];\n  strokeLinejoin?: StrokeLinejoinProperty | StrokeLinejoinProperty[];\n  strokeMiterlimit?: GlobalsNumber | GlobalsNumber[];\n  strokeOpacity?: GlobalsNumber | GlobalsNumber[];\n  strokeWidth?: StrokeWidthProperty<TLength> | StrokeWidthProperty<TLength>[];\n  textAnchor?: TextAnchorProperty | TextAnchorProperty[];\n  textDecoration?: TextDecorationProperty<TLength> | TextDecorationProperty<TLength>[];\n  textRendering?: TextRenderingProperty | TextRenderingProperty[];\n  unicodeBidi?: UnicodeBidiProperty | UnicodeBidiProperty[];\n  vectorEffect?: VectorEffectProperty | VectorEffectProperty[];\n  visibility?: VisibilityProperty | VisibilityProperty[];\n  whiteSpace?: WhiteSpaceProperty | WhiteSpaceProperty[];\n  wordSpacing?: WordSpacingProperty<TLength> | WordSpacingProperty<TLength>[];\n  writingMode?: WritingModeProperty | WritingModeProperty[];\n}\n\nexport interface PropertiesFallback<TLength = string | 0>\n  extends StandardPropertiesFallback<TLength>,\n    VendorPropertiesFallback<TLength>,\n    ObsoletePropertiesFallback<TLength>,\n    SvgPropertiesFallback<TLength> {}\n\nexport interface StandardLonghandPropertiesHyphenFallback<TLength = string | 0> {\n  /**\n   * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  \"align-content\"?: AlignContentProperty | AlignContentProperty[];\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **52**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  \"align-items\"?: AlignItemsProperty | AlignItemsProperty[];\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **20**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :------: | :----: | :----------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _-x-_ |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  \"align-self\"?: AlignSelfProperty | AlignSelfProperty[];\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  \"animation-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  \"animation-direction\"?: AnimationDirectionProperty | AnimationDirectionProperty[];\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  \"animation-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  \"animation-fill-mode\"?: AnimationFillModeProperty | AnimationFillModeProperty[];\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  \"animation-iteration-count\"?: AnimationIterationCountProperty | AnimationIterationCountProperty[];\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  \"animation-name\"?: AnimationNameProperty | AnimationNameProperty[];\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  \"animation-play-state\"?: AnimationPlayStateProperty | AnimationPlayStateProperty[];\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  \"animation-timing-function\"?: AnimationTimingFunctionProperty | AnimationTimingFunctionProperty[];\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | auto | button | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    |   Firefox   |   Safari    |     Edge     | IE  |\n   * | :---------: | :---------: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **1** _-x-_ | **3** _-x-_ | **12** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: AppearanceProperty | AppearanceProperty[];\n  /**\n   * The **`aspect-ratio`**    CSS property sets a _**preferred aspect ratio**_ for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **71**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  \"aspect-ratio\"?: AspectRatioProperty | AspectRatioProperty[];\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** |   n/a   | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  \"backdrop-filter\"?: BackdropFilterProperty | BackdropFilterProperty[];\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox  |    Safari     |  Edge  |   IE   |\n   * | :------: | :------: | :-----------: | :----: | :----: |\n   * |  **36**  |  **16**  | **5.1** _-x-_ | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ |               |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  \"backface-visibility\"?: BackfaceVisibilityProperty | BackfaceVisibilityProperty[];\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  \"background-attachment\"?: BackgroundAttachmentProperty | BackgroundAttachmentProperty[];\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **30**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  \"background-blend-mode\"?: BackgroundBlendModeProperty | BackgroundBlendModeProperty[];\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  |  IE   |\n   * | :----: | :-----: | :---------: | :----: | :---: |\n   * | **1**  |  **4**  | **3** _-x-_ | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  \"background-clip\"?: BackgroundClipProperty | BackgroundClipProperty[];\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  \"background-color\"?: BackgroundColorProperty | BackgroundColorProperty[];\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  \"background-image\"?: BackgroundImageProperty | BackgroundImageProperty[];\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  \"background-origin\"?: BackgroundOriginProperty | BackgroundOriginProperty[];\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  \"background-position\"?: BackgroundPositionProperty<TLength> | BackgroundPositionProperty<TLength>[];\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `left`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  \"background-position-x\"?: BackgroundPositionXProperty<TLength> | BackgroundPositionXProperty<TLength>[];\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position, relative to the background position layer defined by `background-origin`, for each defined background image.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  \"background-position-y\"?: BackgroundPositionYProperty<TLength> | BackgroundPositionYProperty<TLength>[];\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  \"background-repeat\"?: BackgroundRepeatProperty | BackgroundRepeatProperty[];\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  \"background-size\"?: BackgroundSizeProperty<TLength> | BackgroundSizeProperty<TLength>[];\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  \"block-overflow\"?: BlockOverflowProperty | BlockOverflowProperty[];\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  \"block-size\"?: BlockSizeProperty<TLength> | BlockSizeProperty<TLength>[];\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  \"border-block-color\"?: BorderBlockColorProperty | BorderBlockColorProperty[];\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  \"border-block-end-color\"?: BorderBlockEndColorProperty | BorderBlockEndColorProperty[];\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  \"border-block-end-style\"?: BorderBlockEndStyleProperty | BorderBlockEndStyleProperty[];\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  \"border-block-end-width\"?: BorderBlockEndWidthProperty<TLength> | BorderBlockEndWidthProperty<TLength>[];\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  \"border-block-start-color\"?: BorderBlockStartColorProperty | BorderBlockStartColorProperty[];\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  \"border-block-start-style\"?: BorderBlockStartStyleProperty | BorderBlockStartStyleProperty[];\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  \"border-block-start-width\"?: BorderBlockStartWidthProperty<TLength> | BorderBlockStartWidthProperty<TLength>[];\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  \"border-block-style\"?: BorderBlockStyleProperty | BorderBlockStyleProperty[];\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  \"border-block-width\"?: BorderBlockWidthProperty<TLength> | BorderBlockWidthProperty<TLength>[];\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  \"border-bottom-color\"?: BorderBottomColorProperty | BorderBottomColorProperty[];\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  \"border-bottom-left-radius\"?: BorderBottomLeftRadiusProperty<TLength> | BorderBottomLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  \"border-bottom-right-radius\"?: BorderBottomRightRadiusProperty<TLength> | BorderBottomRightRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  \"border-bottom-style\"?: BorderBottomStyleProperty | BorderBottomStyleProperty[];\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of a box.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  \"border-bottom-width\"?: BorderBottomWidthProperty<TLength> | BorderBottomWidthProperty<TLength>[];\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  \"border-collapse\"?: BorderCollapseProperty | BorderCollapseProperty[];\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  \"border-end-end-radius\"?: BorderEndEndRadiusProperty<TLength> | BorderEndEndRadiusProperty<TLength>[];\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  \"border-end-start-radius\"?: BorderEndStartRadiusProperty<TLength> | BorderEndStartRadiusProperty<TLength>[];\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  \"border-image-outset\"?: BorderImageOutsetProperty<TLength> | BorderImageOutsetProperty<TLength>[];\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  \"border-image-repeat\"?: BorderImageRepeatProperty | BorderImageRepeatProperty[];\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  \"border-image-slice\"?: BorderImageSliceProperty | BorderImageSliceProperty[];\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  \"border-image-source\"?: BorderImageSourceProperty | BorderImageSourceProperty[];\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  \"border-image-width\"?: BorderImageWidthProperty<TLength> | BorderImageWidthProperty<TLength>[];\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  \"border-inline-color\"?: BorderInlineColorProperty | BorderInlineColorProperty[];\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  \"border-inline-end-color\"?: BorderInlineEndColorProperty | BorderInlineEndColorProperty[];\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  \"border-inline-end-style\"?: BorderInlineEndStyleProperty | BorderInlineEndStyleProperty[];\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |\n   * | :----: | :-------------------------: | :------: | :----: | :-: |\n   * | **69** |           **41**            | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  \"border-inline-end-width\"?: BorderInlineEndWidthProperty<TLength> | BorderInlineEndWidthProperty<TLength>[];\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |\n   * | :----: | :---------------------------: | :------: | :----: | :-: |\n   * | **69** |            **41**             | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  \"border-inline-start-color\"?: BorderInlineStartColorProperty | BorderInlineStartColorProperty[];\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |\n   * | :----: | :---------------------------: | :------: | :----: | :-: |\n   * | **69** |            **41**             | **12.1** | **79** | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  \"border-inline-start-style\"?: BorderInlineStartStyleProperty | BorderInlineStartStyleProperty[];\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  \"border-inline-start-width\"?: BorderInlineStartWidthProperty<TLength> | BorderInlineStartWidthProperty<TLength>[];\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  \"border-inline-style\"?: BorderInlineStyleProperty | BorderInlineStyleProperty[];\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  \"border-inline-width\"?: BorderInlineWidthProperty<TLength> | BorderInlineWidthProperty<TLength>[];\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  \"border-left-color\"?: BorderLeftColorProperty | BorderLeftColorProperty[];\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  \"border-left-style\"?: BorderLeftStyleProperty | BorderLeftStyleProperty[];\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  \"border-left-width\"?: BorderLeftWidthProperty<TLength> | BorderLeftWidthProperty<TLength>[];\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  \"border-right-color\"?: BorderRightColorProperty | BorderRightColorProperty[];\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  \"border-right-style\"?: BorderRightStyleProperty | BorderRightStyleProperty[];\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  \"border-right-width\"?: BorderRightWidthProperty<TLength> | BorderRightWidthProperty<TLength>[];\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent `<table>` cells. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  \"border-spacing\"?: BorderSpacingProperty<TLength> | BorderSpacingProperty<TLength>[];\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  \"border-start-end-radius\"?: BorderStartEndRadiusProperty<TLength> | BorderStartEndRadiusProperty<TLength>[];\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  \"border-start-start-radius\"?: BorderStartStartRadiusProperty<TLength> | BorderStartStartRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  \"border-top-color\"?: BorderTopColorProperty | BorderTopColorProperty[];\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  \"border-top-left-radius\"?: BorderTopLeftRadiusProperty<TLength> | BorderTopLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  \"border-top-right-radius\"?: BorderTopRightRadiusProperty<TLength> | BorderTopRightRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  \"border-top-style\"?: BorderTopStyleProperty | BorderTopStyleProperty[];\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  \"border-top-width\"?: BorderTopWidthProperty<TLength> | BorderTopWidthProperty<TLength>[];\n  /**\n   * The **`bottom`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: BottomProperty<TLength> | BottomProperty<TLength>[];\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |    Safari     |     Edge     | IE  |\n   * | :----------: | :-----: | :-----------: | :----------: | :-: |\n   * | **22** _-x-_ | **32**  | **6.1** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  \"box-decoration-break\"?: BoxDecorationBreakProperty | BoxDecorationBreakProperty[];\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  \"box-shadow\"?: BoxShadowProperty | BoxShadowProperty[];\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  \"box-sizing\"?: BoxSizingProperty | BoxSizingProperty[];\n  /**\n   * The **`break-after`** CSS property defines how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** |   No    |   No   | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  \"break-after\"?: BreakAfterProperty | BreakAfterProperty[];\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  |   No   | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  \"break-before\"?: BreakBeforeProperty | BreakBeforeProperty[];\n  /**\n   * The **`break-inside`** CSS property defines how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in Paged Media_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * ---\n   *\n   * _Supported in CSS Regions_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  \"break-inside\"?: BreakInsideProperty | BreakInsideProperty[];\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  \"caption-side\"?: CaptionSideProperty | CaptionSideProperty[];\n  /**\n   * The **`caret-color`** CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **53**  | **11.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  \"caret-color\"?: CaretColorProperty | CaretColorProperty[];\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: ClearProperty | ClearProperty[];\n  /**\n   * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **55**  | **3.5** |  **9.1**  | **12** | **10** |\n   * | 23 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  \"clip-path\"?: ClipPathProperty | ClipPathProperty[];\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: Varies from one browser to another\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: ColorProperty | ColorProperty[];\n  /**\n   * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |                Chrome                 | Firefox |                Safari                |                 Edge                  | IE  |\n   * | :-----------------------------------: | :-----: | :----------------------------------: | :-----------------------------------: | :-: |\n   * | **49** _(-webkit-print-color-adjust)_ | **48**  | **6** _(-webkit-print-color-adjust)_ | **79** _(-webkit-print-color-adjust)_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-adjust\n   */\n  \"color-adjust\"?: ColorAdjustProperty | ColorAdjustProperty[];\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  \"column-count\"?: ColumnCountProperty | ColumnCountProperty[];\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  \"column-fill\"?: ColumnFillProperty | ColumnFillProperty[];\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   | **63**  | **3** _-x-_ |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |     Chrome      |     Firefox     |        Safari         |  Edge  | IE  |\n   * | :-------------: | :-------------: | :-------------------: | :----: | :-: |\n   * |     **66**      |     **61**      | **10.1** _(grid-gap)_ | **16** | No  |\n   * | 57 _(grid-gap)_ | 52 _(grid-gap)_ |                       |        |     |\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  | **10**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  \"column-gap\"?: ColumnGapProperty<TLength> | ColumnGapProperty<TLength>[];\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  \"column-rule-color\"?: ColumnRuleColorProperty | ColumnRuleColorProperty[];\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  \"column-rule-style\"?: ColumnRuleStyleProperty | ColumnRuleStyleProperty[];\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  \"column-rule-width\"?: ColumnRuleWidthProperty<TLength> | ColumnRuleWidthProperty<TLength>[];\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  \"column-span\"?: ColumnSpanProperty | ColumnSpanProperty[];\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  \"column-width\"?: ColumnWidthProperty<TLength> | ColumnWidthProperty<TLength>[];\n  /**\n   * The **`contain`** CSS property allows an author to indicate that an element and its contents are, as much as possible, _independent_ of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page.\n   *\n   * **Syntax**: `none | strict | content | [ size || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **52** | **69**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: ContainProperty | ContainProperty[];\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are _anonymous replaced elements._\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: ContentProperty | ContentProperty[];\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  \"counter-increment\"?: CounterIncrementProperty | CounterIncrementProperty[];\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  \"counter-reset\"?: CounterResetProperty | CounterResetProperty[];\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **68**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  \"counter-set\"?: CounterSetProperty | CounterSetProperty[];\n  /**\n   * The **`cursor`** CSS property sets mouse cursor to display when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: CursorProperty | CursorProperty[];\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: DirectionProperty | DirectionProperty[];\n  /**\n   * The **`display`** CSS property defines the _display type_ of an element, which consists of the two basic qualities of how an element generates boxes — the **outer display type** defining how the box participates in flow layout, and the **inner display type** defining how the children of the box are laid out.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: DisplayProperty | DisplayProperty[];\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  \"empty-cells\"?: EmptyCellsProperty | EmptyCellsProperty[];\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: FilterProperty | FilterProperty[];\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  \"flex-basis\"?: FlexBasisProperty<TLength> | FlexBasisProperty<TLength>[];\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  \"flex-direction\"?: FlexDirectionProperty | FlexDirectionProperty[];\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |            IE            |\n   * | :------: | :-----: | :-------: | :----: | :----------------------: |\n   * |  **29**  | **20**  |   **9**   | **12** |          **11**          |\n   * | 22 _-x-_ |         | 6.1 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  \"flex-grow\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  \"flex-shrink\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  \"flex-wrap\"?: FlexWrapProperty | FlexWrapProperty[];\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: FloatProperty | FloatProperty[];\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  \"font-family\"?: FontFamilyProperty | FontFamilyProperty[];\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  \"font-feature-settings\"?: FontFeatureSettingsProperty | FontFeatureSettingsProperty[];\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **33** | **32**  |  **9**  | **79** | No  |\n   * |        |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  \"font-kerning\"?: FontKerningProperty | FontKerningProperty[];\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   |  No  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  \"font-language-override\"?: FontLanguageOverrideProperty | FontLanguageOverrideProperty[];\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes. This only works for fonts that have an optical size variation axis.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  \"font-optical-sizing\"?: FontOpticalSizingProperty | FontOpticalSizingProperty[];\n  /**\n   * The **`font-size`** CSS property sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative `<length>` units.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  \"font-size\"?: FontSizeProperty<TLength> | FontSizeProperty<TLength>[];\n  /**\n   * The **`font-size-adjust`** CSS property sets how the font size should be chosen based on the height of lowercase rather than capital letters.\n   *\n   * **Syntax**: `none | <number>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |  **1**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  \"font-size-adjust\"?: FontSizeAdjustProperty | FontSizeAdjustProperty[];\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  \"font-stretch\"?: FontStretchProperty | FontStretchProperty[];\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  \"font-style\"?: FontStyleProperty | FontStyleProperty[];\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style ]`\n   *\n   * **Initial value**: `weight style`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  | **9**  |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  \"font-synthesis\"?: FontSynthesisProperty | FontSynthesisProperty[];\n  /**\n   * The **font-variant** CSS property is a shorthand for the longhand properties `font-variant-caps`, `font-variant-numeric`, `font-variant-alternates`, `font-variant-ligatures`, and `font-variant-east-asian`. You can also set the CSS Level 2 (Revision 1) values of `font-variant`, (that is, `normal` or `small-caps`), by using the `font` shorthand.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  \"font-variant\"?: FontVariantProperty | FontVariantProperty[];\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **52** | **34**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  \"font-variant-caps\"?: FontVariantCapsProperty | FontVariantCapsProperty[];\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **34**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  \"font-variant-east-asian\"?: FontVariantEastAsianProperty | FontVariantEastAsianProperty[];\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **34**  | **34**  | **9.1** | **79** | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  \"font-variant-ligatures\"?: FontVariantLigaturesProperty | FontVariantLigaturesProperty[];\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **52** | **34**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  \"font-variant-numeric\"?: FontVariantNumericProperty | FontVariantNumericProperty[];\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  \"font-variant-position\"?: FontVariantPositionProperty | FontVariantPositionProperty[];\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  \"font-variation-settings\"?: FontVariationSettingsProperty | FontVariationSettingsProperty[];\n  /**\n   * The **`font-weight`** CSS property specifies the weight (or boldness) of the font. The font weights available to you will depend on the `font-family` you are using. Some fonts are only available in `normal` and `bold`.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  \"font-weight\"?: FontWeightProperty | FontWeightProperty[];\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |          Edge           |             IE              |\n   * | :----: | :-----: | :------: | :---------------------: | :-------------------------: |\n   * | **57** | **70**  | **10.1** |         **16**          | **10** _(-ms-grid-columns)_ |\n   * |        |         |          | 12 _(-ms-grid-columns)_ |                             |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  \"grid-auto-columns\"?: GridAutoColumnsProperty<TLength> | GridAutoColumnsProperty<TLength>[];\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  \"grid-auto-flow\"?: GridAutoFlowProperty | GridAutoFlowProperty[];\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |         Edge         |            IE            |\n   * | :----: | :-----: | :------: | :------------------: | :----------------------: |\n   * | **57** | **70**  | **10.1** |        **16**        | **10** _(-ms-grid-rows)_ |\n   * |        |         |          | 12 _(-ms-grid-rows)_ |                          |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  \"grid-auto-rows\"?: GridAutoRowsProperty<TLength> | GridAutoRowsProperty<TLength>[];\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  \"grid-column-end\"?: GridColumnEndProperty | GridColumnEndProperty[];\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  \"grid-column-start\"?: GridColumnStartProperty | GridColumnStartProperty[];\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item’s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  \"grid-row-end\"?: GridRowEndProperty | GridRowEndProperty[];\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item’s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  \"grid-row-start\"?: GridRowStartProperty | GridRowStartProperty[];\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  \"grid-template-areas\"?: GridTemplateAreasProperty | GridTemplateAreasProperty[];\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  \"grid-template-columns\"?: GridTemplateColumnsProperty<TLength> | GridTemplateColumnsProperty<TLength>[];\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  \"grid-template-rows\"?: GridTemplateRowsProperty<TLength> | GridTemplateRowsProperty<TLength>[];\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  \"hanging-punctuation\"?: HangingPunctuationProperty | HangingPunctuationProperty[];\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: HeightProperty<TLength> | HeightProperty<TLength>[];\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |    Safari     |     Edge     |      IE      |\n   * | :------: | :-----: | :-----------: | :----------: | :----------: |\n   * |  **55**  | **43**  | **5.1** _-x-_ | **12** _-x-_ | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ |               |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: HyphensProperty | HyphensProperty[];\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image. It should _not_ be used for any other orientation adjustments; instead, the `transform` property should be used with the `rotate` `<transform-function>`.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `0deg`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **81** | **26**  | **13.1** | **81** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  \"image-orientation\"?: ImageOrientationProperty | ImageOrientationProperty[];\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **13** | **3.6** | **6**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  \"image-rendering\"?: ImageRenderingProperty | ImageRenderingProperty[];\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  \"image-resolution\"?: ImageResolutionProperty | ImageResolutionProperty[];\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **9**  |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  \"initial-letter\"?: InitialLetterProperty | InitialLetterProperty[];\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  \"inline-size\"?: InlineSizeProperty<TLength> | InlineSizeProperty<TLength>[];\n  /**\n   * The **`inset`** CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **66**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: InsetProperty<TLength> | InsetProperty<TLength>[];\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  \"inset-block\"?: InsetBlockProperty<TLength> | InsetBlockProperty<TLength>[];\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  \"inset-block-end\"?: InsetBlockEndProperty<TLength> | InsetBlockEndProperty<TLength>[];\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  \"inset-block-start\"?: InsetBlockStartProperty<TLength> | InsetBlockStartProperty<TLength>[];\n  /**\n   * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  \"inset-inline\"?: InsetInlineProperty<TLength> | InsetInlineProperty<TLength>[];\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  \"inset-inline-end\"?: InsetInlineEndProperty<TLength> | InsetInlineEndProperty<TLength>[];\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **63**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  \"inset-inline-start\"?: InsetInlineStartProperty<TLength> | InsetInlineStartProperty<TLength>[];\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **41** | **36**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: IsolationProperty | IsolationProperty[];\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **52**  | **20**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  \"justify-content\"?: JustifyContentProperty | JustifyContentProperty[];\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  \"justify-items\"?: JustifyItemsProperty | JustifyItemsProperty[];\n  /**\n   * The CSS **`justify-self`** property set the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **45**  | **10.1** | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  \"justify-self\"?: JustifySelfProperty | JustifySelfProperty[];\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: LeftProperty<TLength> | LeftProperty<TLength>[];\n  /**\n   * The **`letter-spacing`** CSS property sets the spacing behavior between text characters.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  \"letter-spacing\"?: LetterSpacingProperty<TLength> | LetterSpacingProperty<TLength>[];\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |  Edge  |   IE    |\n   * | :-----: | :-----: | :---------: | :----: | :-----: |\n   * | **58**  | **69**  | **3** _-x-_ | **14** | **5.5** |\n   * | 1 _-x-_ |         |             |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  \"line-break\"?: LineBreakProperty | LineBreakProperty[];\n  /**\n   * The **`line-height`** CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  \"line-height\"?: LineHeightProperty<TLength> | LineHeightProperty<TLength>[];\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  \"line-height-step\"?: LineHeightStepProperty<TLength> | LineHeightStepProperty<TLength>[];\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  \"list-style-image\"?: ListStyleImageProperty | ListStyleImageProperty[];\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  \"list-style-position\"?: ListStylePositionProperty | ListStylePositionProperty[];\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  \"list-style-type\"?: ListStyleTypeProperty | ListStyleTypeProperty[];\n  /**\n   * The **`margin-block`** CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  \"margin-block\"?: MarginBlockProperty<TLength> | MarginBlockProperty<TLength>[];\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  \"margin-block-end\"?: MarginBlockEndProperty<TLength> | MarginBlockEndProperty<TLength>[];\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  \"margin-block-start\"?: MarginBlockStartProperty<TLength> | MarginBlockStartProperty<TLength>[];\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  \"margin-bottom\"?: MarginBottomProperty<TLength> | MarginBottomProperty<TLength>[];\n  /**\n   * The **`margin-inline`** CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  \"margin-inline\"?: MarginInlineProperty<TLength> | MarginInlineProperty<TLength>[];\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          |  Edge  | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :----: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | **79** | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  \"margin-inline-end\"?: MarginInlineEndProperty<TLength> | MarginInlineEndProperty<TLength>[];\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           |  Edge  | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :----: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | **79** | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  \"margin-inline-start\"?: MarginInlineStartProperty<TLength> | MarginInlineStartProperty<TLength>[];\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  \"margin-left\"?: MarginLeftProperty<TLength> | MarginLeftProperty<TLength>[];\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  \"margin-right\"?: MarginRightProperty<TLength> | MarginRightProperty<TLength>[];\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  \"margin-top\"?: MarginTopProperty<TLength> | MarginTopProperty<TLength>[];\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  \"mask-border-mode\"?: MaskBorderModeProperty | MaskBorderModeProperty[];\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  \"mask-border-outset\"?: MaskBorderOutsetProperty<TLength> | MaskBorderOutsetProperty<TLength>[];\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  \"mask-border-repeat\"?: MaskBorderRepeatProperty | MaskBorderRepeatProperty[];\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  \"mask-border-slice\"?: MaskBorderSliceProperty | MaskBorderSliceProperty[];\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  \"mask-border-source\"?: MaskBorderSourceProperty | MaskBorderSourceProperty[];\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"mask-border-width\"?: MaskBorderWidthProperty<TLength> | MaskBorderWidthProperty<TLength>[];\n  /**\n   * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |\n   * | :---------: | :-----: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  \"mask-clip\"?: MaskClipProperty | MaskClipProperty[];\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome | Firefox | Safari | Edge  | IE  |\n   * | :----: | :-----: | :----: | :---: | :-: |\n   * |   No   | **53**  |   No   | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  \"mask-composite\"?: MaskCompositeProperty | MaskCompositeProperty[];\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |\n   * | :---------: | :-----: | :---------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  \"mask-image\"?: MaskImageProperty | MaskImageProperty[];\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **53**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  \"mask-mode\"?: MaskModeProperty | MaskModeProperty[];\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |\n   * | :---------: | :-----: | :---------: | :----------: | :-: |\n   * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  \"mask-origin\"?: MaskOriginProperty | MaskOriginProperty[];\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |\n   * | :---------: | :-----: | :-----------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  \"mask-position\"?: MaskPositionProperty<TLength> | MaskPositionProperty<TLength>[];\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `no-repeat`\n   *\n   * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |\n   * | :---------: | :-----: | :-----------: | :----: | :-: |\n   * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  \"mask-repeat\"?: MaskRepeatProperty | MaskRepeatProperty[];\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |\n   * | :---------: | :-----: | :---------: | :----: | :-: |\n   * | **4** _-x-_ | **53**  | **4** _-x-_ | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  \"mask-size\"?: MaskSizeProperty<TLength> | MaskSizeProperty<TLength>[];\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **24** | **35**  | **6.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  \"mask-type\"?: MaskTypeProperty | MaskTypeProperty[];\n  /**\n   * The `**max-block-size**` CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  \"max-block-size\"?: MaxBlockSizeProperty<TLength> | MaxBlockSizeProperty<TLength>[];\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  \"max-height\"?: MaxHeightProperty<TLength> | MaxHeightProperty<TLength>[];\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |   Safari   |  Edge  | IE  |\n   * | :----: | :-----: | :--------: | :----: | :-: |\n   * | **57** | **41**  |  **12.1**  | **79** | No  |\n   * |        |         | 10.1 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  \"max-inline-size\"?: MaxInlineSizeProperty<TLength> | MaxInlineSizeProperty<TLength>[];\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"max-lines\"?: MaxLinesProperty | MaxLinesProperty[];\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  \"max-width\"?: MaxWidthProperty<TLength> | MaxWidthProperty<TLength>[];\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  \"min-block-size\"?: MinBlockSizeProperty<TLength> | MinBlockSizeProperty<TLength>[];\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  \"min-height\"?: MinHeightProperty<TLength> | MinHeightProperty<TLength>[];\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  \"min-inline-size\"?: MinInlineSizeProperty<TLength> | MinInlineSizeProperty<TLength>[];\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  \"min-width\"?: MinWidthProperty<TLength> | MinWidthProperty<TLength>[];\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **41** | **32**  | **8**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  \"mix-blend-mode\"?: MixBlendModeProperty | MixBlendModeProperty[];\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **55**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-distance)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"motion-distance\"?: OffsetDistanceProperty<TLength> | OffsetDistanceProperty<TLength>[];\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox | Safari |  Edge  | IE  |\n   * | :----------------: | :-----: | :----: | :----: | :-: |\n   * |       **55**       | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-path)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"motion-path\"?: OffsetPathProperty | OffsetPathProperty[];\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"motion-rotation\"?: OffsetRotateProperty | OffsetRotateProperty[];\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **31** | **36**  | **10** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  \"object-fit\"?: ObjectFitProperty | ObjectFitProperty[];\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **31** | **36**  | **10** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  \"object-position\"?: ObjectPositionProperty<TLength> | ObjectPositionProperty<TLength>[];\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **72**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  \"offset-anchor\"?: OffsetAnchorProperty<TLength> | OffsetAnchorProperty<TLength>[];\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **55**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-distance)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"offset-distance\"?: OffsetDistanceProperty<TLength> | OffsetDistanceProperty<TLength>[];\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox | Safari |  Edge  | IE  |\n   * | :----------------: | :-----: | :----: | :----: | :-: |\n   * |       **55**       | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-path)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"offset-path\"?: OffsetPathProperty | OffsetPathProperty[];\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotate\"?: OffsetRotateProperty | OffsetRotateProperty[];\n  /**\n   * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari |  Edge  | IE  |\n   * | :--------------------: | :-----: | :----: | :----: | :-: |\n   * |         **56**         | **72**  |   No   | **79** | No  |\n   * | 46 _(motion-rotation)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotation\"?: OffsetRotateProperty | OffsetRotateProperty[];\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: OpacityProperty | OpacityProperty[];\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  \"outline-color\"?: OutlineColorProperty | OutlineColorProperty[];\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  \"outline-offset\"?: OutlineOffsetProperty<TLength> | OutlineOffsetProperty<TLength>[];\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  \"outline-style\"?: OutlineStyleProperty | OutlineStyleProperty[];\n  /**\n   * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  \"outline-width\"?: OutlineWidthProperty<TLength> | OutlineWidthProperty<TLength>[];\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **56** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  \"overflow-anchor\"?: OverflowAnchorProperty | OverflowAnchorProperty[];\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  \"overflow-block\"?: OverflowBlockProperty | OverflowBlockProperty[];\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **29**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box\n   */\n  \"overflow-clip-box\"?: OverflowClipBoxProperty | OverflowClipBoxProperty[];\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  \"overflow-inline\"?: OverflowInlineProperty | OverflowInlineProperty[];\n  /**\n   * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |     **6.1**     |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  \"overflow-wrap\"?: OverflowWrapProperty | OverflowWrapProperty[];\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  \"overflow-x\"?: OverflowXProperty | OverflowXProperty[];\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **1.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  \"overflow-y\"?: OverflowYProperty | OverflowYProperty[];\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  \"overscroll-behavior\"?: OverscrollBehaviorProperty | OverscrollBehaviorProperty[];\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **77** | **73**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  \"overscroll-behavior-block\"?: OverscrollBehaviorBlockProperty | OverscrollBehaviorBlockProperty[];\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **77** | **73**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  \"overscroll-behavior-inline\"?: OverscrollBehaviorInlineProperty | OverscrollBehaviorInlineProperty[];\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  \"overscroll-behavior-x\"?: OverscrollBehaviorXProperty | OverscrollBehaviorXProperty[];\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  |   No   | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  \"overscroll-behavior-y\"?: OverscrollBehaviorYProperty | OverscrollBehaviorYProperty[];\n  /**\n   * The **`padding-block`** CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  \"padding-block\"?: PaddingBlockProperty<TLength> | PaddingBlockProperty<TLength>[];\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  \"padding-block-end\"?: PaddingBlockEndProperty<TLength> | PaddingBlockEndProperty<TLength>[];\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  \"padding-block-start\"?: PaddingBlockStartProperty<TLength> | PaddingBlockStartProperty<TLength>[];\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  \"padding-bottom\"?: PaddingBottomProperty<TLength> | PaddingBottomProperty<TLength>[];\n  /**\n   * The **`padding-inline`** CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  \"padding-inline\"?: PaddingInlineProperty<TLength> | PaddingInlineProperty<TLength>[];\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           |  Edge  | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :----: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | **79** | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  \"padding-inline-end\"?: PaddingInlineEndProperty<TLength> | PaddingInlineEndProperty<TLength>[];\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            |  Edge  | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :----: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | **79** | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  \"padding-inline-start\"?: PaddingInlineStartProperty<TLength> | PaddingInlineStartProperty<TLength>[];\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area on the left side of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  \"padding-left\"?: PaddingLeftProperty<TLength> | PaddingLeftProperty<TLength>[];\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right side of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  \"padding-right\"?: PaddingRightProperty<TLength> | PaddingRightProperty<TLength>[];\n  /**\n   * The **`padding-top`** padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  \"padding-top\"?: PaddingTopProperty<TLength> | PaddingTopProperty<TLength>[];\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  \"page-break-after\"?: PageBreakAfterProperty | PageBreakAfterProperty[];\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  \"page-break-before\"?: PageBreakBeforeProperty | PageBreakBeforeProperty[];\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  \"page-break-inside\"?: PageBreakInsideProperty | PageBreakInsideProperty[];\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  \"paint-order\"?: PaintOrderProperty | PaintOrderProperty[];\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: PerspectiveProperty<TLength> | PerspectiveProperty<TLength>[];\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  \"perspective-origin\"?: PerspectiveOriginProperty<TLength> | PerspectiveOriginProperty<TLength>[];\n  /**\n   * The `**place-content**` CSS property is a shorthand for `align-content` and `justify-content`. It can be used in any layout method which utilizes both of these alignment values.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **9**  | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **53**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  \"place-content\"?: PlaceContentProperty | PlaceContentProperty[];\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of mouse events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  \"pointer-events\"?: PointerEventsProperty | PointerEventsProperty[];\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: PositionProperty | PositionProperty[];\n  /**\n   * The **`quotes`** CSS property sets how quotation marks appear.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: QuotesProperty | QuotesProperty[];\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **1**  |  **4**  | **3**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: ResizeProperty | ResizeProperty[];\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: RightProperty<TLength> | RightProperty<TLength>[];\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: RotateProperty | RotateProperty[];\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **63**  |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |       Chrome        |       Firefox       |          Safari           |  Edge  | IE  |\n   * | :-----------------: | :-----------------: | :-----------------------: | :----: | :-: |\n   * |       **66**        |       **61**        | **10.1** _(grid-row-gap)_ | **16** | No  |\n   * | 57 _(grid-row-gap)_ | 52 _(grid-row-gap)_ |                           |        |     |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  \"row-gap\"?: RowGapProperty<TLength> | RowGapProperty<TLength>[];\n  /**\n   * The `**ruby-align**` CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  \"ruby-align\"?: RubyAlignProperty | RubyAlignProperty[];\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  \"ruby-merge\"?: RubyMergeProperty | RubyMergeProperty[];\n  /**\n   * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).\n   *\n   * **Syntax**: `over | under | inter-character`\n   *\n   * **Initial value**: `over`\n   *\n   * | Chrome | Firefox | Safari | Edge  | IE  |\n   * | :----: | :-----: | :----: | :---: | :-: |\n   * |   No   | **38**  |   No   | 12-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  \"ruby-position\"?: RubyPositionProperty | RubyPositionProperty[];\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: ScaleProperty | ScaleProperty[];\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **61** | **36**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  \"scroll-behavior\"?: ScrollBehaviorProperty | ScrollBehaviorProperty[];\n  /**\n   * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-margin\"?: ScrollMarginProperty<TLength> | ScrollMarginProperty<TLength>[];\n  /**\n   * The `scroll-margin-block` property is a shorthand property which sets the scroll-margin longhands in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  \"scroll-margin-block\"?: ScrollMarginBlockProperty<TLength> | ScrollMarginBlockProperty<TLength>[];\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  \"scroll-margin-block-end\"?: ScrollMarginBlockEndProperty<TLength> | ScrollMarginBlockEndProperty<TLength>[];\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  \"scroll-margin-block-start\"?: ScrollMarginBlockStartProperty<TLength> | ScrollMarginBlockStartProperty<TLength>[];\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |                Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :----------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-margin-bottom\"?: ScrollMarginBottomProperty<TLength> | ScrollMarginBottomProperty<TLength>[];\n  /**\n   * The `scroll-margin-inline` property is a shorthand property which sets the scroll-margin longhands in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **68**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  \"scroll-margin-inline\"?: ScrollMarginInlineProperty<TLength> | ScrollMarginInlineProperty<TLength>[];\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  \"scroll-margin-inline-end\"?: ScrollMarginInlineEndProperty<TLength> | ScrollMarginInlineEndProperty<TLength>[];\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  \"scroll-margin-inline-start\"?: ScrollMarginInlineStartProperty<TLength> | ScrollMarginInlineStartProperty<TLength>[];\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :--------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-margin-left\"?: ScrollMarginLeftProperty<TLength> | ScrollMarginLeftProperty<TLength>[];\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-margin-right\"?: ScrollMarginRightProperty<TLength> | ScrollMarginRightProperty<TLength>[];\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :-------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-margin-top\"?: ScrollMarginTopProperty<TLength> | ScrollMarginTopProperty<TLength>[];\n  /**\n * The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-\\* longhands.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  | **11** | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n */\n  \"scroll-padding\"?: ScrollPaddingProperty<TLength> | ScrollPaddingProperty<TLength>[];\n  /**\n * The `scroll-padding-block` property is a shorthand property which sets the scroll-padding longhands for the block dimension.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  |   No   | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n */\n  \"scroll-padding-block\"?: ScrollPaddingBlockProperty<TLength> | ScrollPaddingBlockProperty<TLength>[];\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  \"scroll-padding-block-end\"?: ScrollPaddingBlockEndProperty<TLength> | ScrollPaddingBlockEndProperty<TLength>[];\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  \"scroll-padding-block-start\"?: ScrollPaddingBlockStartProperty<TLength> | ScrollPaddingBlockStartProperty<TLength>[];\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  \"scroll-padding-bottom\"?: ScrollPaddingBottomProperty<TLength> | ScrollPaddingBottomProperty<TLength>[];\n  /**\n * The `scroll-padding-inline` property is a shorthand property which sets the scroll-padding longhands for the inline dimension.  \n  \nThe scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n * \n * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n * \n * **Initial value**: `auto`\n * \n * | Chrome | Firefox | Safari |  Edge  | IE  |\n * | :----: | :-----: | :----: | :----: | :-: |\n * | **69** | **68**  |   No   | **79** | No  |\n * \n * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n */\n  \"scroll-padding-inline\"?: ScrollPaddingInlineProperty<TLength> | ScrollPaddingInlineProperty<TLength>[];\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  \"scroll-padding-inline-end\"?: ScrollPaddingInlineEndProperty<TLength> | ScrollPaddingInlineEndProperty<TLength>[];\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  \"scroll-padding-inline-start\"?: ScrollPaddingInlineStartProperty<TLength> | ScrollPaddingInlineStartProperty<TLength>[];\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  \"scroll-padding-left\"?: ScrollPaddingLeftProperty<TLength> | ScrollPaddingLeftProperty<TLength>[];\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  \"scroll-padding-right\"?: ScrollPaddingRightProperty<TLength> | ScrollPaddingRightProperty<TLength>[];\n  /**\n   * The `scroll-padding-top` property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  \"scroll-padding-top\"?: ScrollPaddingTopProperty<TLength> | ScrollPaddingTopProperty<TLength>[];\n  /**\n   * The `scroll-snap-align` property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **68**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  \"scroll-snap-align\"?: ScrollSnapAlignProperty | ScrollSnapAlignProperty[];\n  /**\n   * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-snap-margin\"?: ScrollMarginProperty<TLength> | ScrollMarginProperty<TLength>[];\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |                Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :----------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-snap-margin-bottom\"?: ScrollMarginBottomProperty<TLength> | ScrollMarginBottomProperty<TLength>[];\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :--------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-snap-margin-left\"?: ScrollMarginLeftProperty<TLength> | ScrollMarginLeftProperty<TLength>[];\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |               Safari                |  Edge  | IE  |\n   * | :----: | :-----: | :---------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-snap-margin-right\"?: ScrollMarginRightProperty<TLength> | ScrollMarginRightProperty<TLength>[];\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari               |  Edge  | IE  |\n   * | :----: | :-----: | :-------------------------------: | :----: | :-: |\n   * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-snap-margin-top\"?: ScrollMarginTopProperty<TLength> | ScrollMarginTopProperty<TLength>[];\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **75** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  \"scroll-snap-stop\"?: ScrollSnapStopProperty | ScrollSnapStopProperty[];\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |     Edge     |      IE      |\n   * | :----: | :-----: | :-----: | :----------: | :----------: |\n   * | **69** |  39-68  | **11**  | **12** _-x-_ | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  \"scroll-snap-type\"?: ScrollSnapTypeProperty | ScrollSnapTypeProperty[];\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | dark | light | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  \"scrollbar-color\"?: ScrollbarColorProperty | ScrollbarColorProperty[];\n  /**\n   * The `scrollbar-width` property allows the author to set the maximum thickness of an element’s scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  \"scrollbar-width\"?: ScrollbarWidthProperty | ScrollbarWidthProperty[];\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  \"shape-image-threshold\"?: ShapeImageThresholdProperty | ShapeImageThresholdProperty[];\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |     Safari     |  Edge  | IE  |\n   * | :----: | :-----: | :------------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** _-x-_ | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  \"shape-margin\"?: ShapeMarginProperty<TLength> | ShapeMarginProperty<TLength>[];\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | <shape-box> || <basic-shape> | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **37** | **62**  | **10.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  \"shape-outside\"?: ShapeOutsideProperty | ShapeOutsideProperty[];\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome |   Firefox   | Safari  |  Edge  | IE  |\n   * | :----: | :---------: | :-----: | :----: | :-: |\n   * | **21** | **4** _-x-_ | **6.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  \"tab-size\"?: TabSizeProperty<TLength> | TabSizeProperty<TLength>[];\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  \"table-layout\"?: TableLayoutProperty | TableLayoutProperty[];\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  \"text-align\"?: TextAlignProperty | TextAlignProperty[];\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  |   No   | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  \"text-align-last\"?: TextAlignLastProperty | TextAlignLastProperty[];\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |              Safari              |                  Edge                  |                   IE                   |\n   * | :------------------------: | :-----: | :------------------------------: | :------------------------------------: | :------------------------------------: |\n   * |           **48**           | **48**  | **5.1** _(-webkit-text-combine)_ | **12** _(-ms-text-combine-horizontal)_ | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         |                                  |                                        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  \"text-combine-upright\"?: TextCombineUprightProperty | TextCombineUprightProperty[];\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  \"text-decoration-color\"?: TextDecorationColorProperty | TextDecorationColorProperty[];\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  \"text-decoration-line\"?: TextDecorationLineProperty | TextDecorationLineProperty[];\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** |  No  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  \"text-decoration-skip\"?: TextDecorationSkipProperty | TextDecorationSkipProperty[];\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **64** | **70**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  \"text-decoration-skip-ink\"?: TextDecorationSkipInkProperty | TextDecorationSkipInkProperty[];\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **36**  | **12.1** | **79** | No  |\n   * |        |         | 8 _-x-_  |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  \"text-decoration-style\"?: TextDecorationStyleProperty | TextDecorationStyleProperty[];\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  \"text-decoration-thickness\"?: TextDecorationThicknessProperty<TLength> | TextDecorationThicknessProperty<TLength>[];\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  \"text-decoration-width\"?: TextDecorationThicknessProperty<TLength> | TextDecorationThicknessProperty<TLength>[];\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  \"text-emphasis-color\"?: TextEmphasisColorProperty | TextEmphasisColorProperty[];\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  \"text-emphasis-position\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  \"text-emphasis-style\"?: TextEmphasisStyleProperty | TextEmphasisStyleProperty[];\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  \"text-indent\"?: TextIndentProperty<TLength> | TextIndentProperty<TLength>[];\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * |  n/a   | **55**  |   No   | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  \"text-justify\"?: TextJustifyProperty | TextJustifyProperty[];\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |    Safari     |  Edge  | IE  |\n   * | :------: | :-----: | :-----------: | :----: | :-: |\n   * |  **48**  | **41**  | **5.1** _-x-_ | **79** | No  |\n   * | 11 _-x-_ |         |               |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  \"text-orientation\"?: TextOrientationProperty | TextOrientationProperty[];\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  \"text-overflow\"?: TextOverflowProperty | TextOverflowProperty[];\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **4**  |  **1**  | **5**  | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  \"text-rendering\"?: TextRenderingProperty | TextRenderingProperty[];\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  \"text-shadow\"?: TextShadowProperty | TextShadowProperty[];\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  \"text-size-adjust\"?: TextSizeAdjustProperty | TextSizeAdjustProperty[];\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  \"text-transform\"?: TextTransformProperty | TextTransformProperty[];\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **70**  | **12.1** |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  \"text-underline-offset\"?: TextUnderlineOffsetProperty<TLength> | TextUnderlineOffsetProperty<TLength>[];\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  \"text-underline-position\"?: TextUnderlinePositionProperty | TextUnderlinePositionProperty[];\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: TopProperty<TLength> | TopProperty<TLength>[];\n  /**\n   * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  \"touch-action\"?: TouchActionProperty | TouchActionProperty[];\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: TransformProperty | TransformProperty[];\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform` and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **64** | **55**  | **11** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  \"transform-box\"?: TransformBoxProperty | TransformBoxProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |\n   * | :-----: | :-------: | :-----: | :----: | :-----: |\n   * | **36**  |  **16**   |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  \"transform-origin\"?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |\n   * | :------: | :------: | :-----: | :----: | :-: |\n   * |  **36**  |  **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  \"transform-style\"?: TransformStyleProperty | TransformStyleProperty[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  \"transition-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  \"transition-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  \"transition-property\"?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  \"transition-timing-function\"?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **72**  |   No   |  No  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: TranslateProperty<TLength> | TranslateProperty<TLength>[];\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  \"unicode-bidi\"?: UnicodeBidiProperty | UnicodeBidiProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |     Edge     |      IE      |\n   * | :-----: | :-----: | :---------: | :----------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ | **12** _-x-_ | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             |              |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  \"user-select\"?: UserSelectProperty | UserSelectProperty[];\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  \"vertical-align\"?: VerticalAlignProperty<TLength> | VerticalAlignProperty<TLength>[];\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: VisibilityProperty | VisibilityProperty[];\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  \"white-space\"?: WhiteSpaceProperty | WhiteSpaceProperty[];\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`width`** CSS property sets an element's width. By default it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: WidthProperty<TLength> | WidthProperty<TLength>[];\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **36** | **36**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  \"will-change\"?: WillChangeProperty | WillChangeProperty[];\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  \"word-break\"?: WordBreakProperty | WordBreakProperty[];\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  \"word-spacing\"?: WordSpacingProperty<TLength> | WordSpacingProperty<TLength>[];\n  /**\n   * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **3.5** | **2**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  \"word-wrap\"?: WordWrapProperty | WordWrapProperty[];\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |     IE      |\n   * | :-----: | :-----: | :-------: | :----: | :---------: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** _-x-_ |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |             |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  \"writing-mode\"?: WritingModeProperty | WritingModeProperty[];\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  \"z-index\"?: ZIndexProperty | ZIndexProperty[];\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   No    | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: ZoomProperty | ZoomProperty[];\n}\n\nexport interface StandardShorthandPropertiesHyphenFallback<TLength = string | 0> {\n  /**\n   * The `**all**` CSS shorthand property sets all of an element's properties (other than `unicode-bidi` and `direction`) to their initial or inherited values, or to the values specified in another stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **37** | **27**  | **9.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Globals | Globals[];\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: AnimationProperty | AnimationProperty[];\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: BackgroundProperty<TLength> | BackgroundProperty<TLength>[];\n  /**\n   * The **`border`** CSS property sets an element's border. It's a shorthand for `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: BorderProperty<TLength> | BorderProperty<TLength>[];\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  \"border-block\"?: BorderBlockProperty<TLength> | BorderBlockProperty<TLength>[];\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  \"border-block-end\"?: BorderBlockEndProperty<TLength> | BorderBlockEndProperty<TLength>[];\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  \"border-block-start\"?: BorderBlockStartProperty<TLength> | BorderBlockStartProperty<TLength>[];\n  /**\n   * The **`border-bottom`** CSS property is a shorthand that sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`. These properties set an element's bottom border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  \"border-bottom\"?: BorderBottomProperty<TLength> | BorderBottomProperty<TLength>[];\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of all sides of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  \"border-color\"?: BorderColorProperty | BorderColorProperty[];\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  \"border-image\"?: BorderImageProperty | BorderImageProperty[];\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **69** | **66**  |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  \"border-inline\"?: BorderInlineProperty<TLength> | BorderInlineProperty<TLength>[];\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  \"border-inline-end\"?: BorderInlineEndProperty<TLength> | BorderInlineEndProperty<TLength>[];\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **69** | **41**  | **12.1** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  \"border-inline-start\"?: BorderInlineStartProperty<TLength> | BorderInlineStartProperty<TLength>[];\n  /**\n   * The **`border-left`** CSS property is a shorthand that sets the values of `border-left-width`, `border-left-style` and `border-left-color`. These properties set an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  \"border-left\"?: BorderLeftProperty<TLength> | BorderLeftProperty<TLength>[];\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  \"border-radius\"?: BorderRadiusProperty<TLength> | BorderRadiusProperty<TLength>[];\n  /**\n   * The **`border-right`** CSS property is a shorthand that sets the values of `border-right-width`, `border-right-style` and `border-right-color`. These properties set an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  \"border-right\"?: BorderRightProperty<TLength> | BorderRightProperty<TLength>[];\n  /**\n   * The **`border-style`** CSS property is a shorthand property that sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  \"border-style\"?: BorderStyleProperty | BorderStyleProperty[];\n  /**\n   * The **`border-top`** CSS property is a shorthand that sets the values of `border-top-width`, `border-top-style` and `border-top-color`. These properties set an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  \"border-top\"?: BorderTopProperty<TLength> | BorderTopProperty<TLength>[];\n  /**\n   * The **`border-width`** shorthand CSS property sets the widths of all four sides of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  \"border-width\"?: BorderWidthProperty<TLength> | BorderWidthProperty<TLength>[];\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  \"column-rule\"?: ColumnRuleProperty<TLength> | ColumnRuleProperty<TLength>[];\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: ColumnsProperty<TLength> | ColumnsProperty<TLength>[];\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |    IE    |\n   * | :------: | :-----: | :-------: | :----: | :------: |\n   * |  **29**  | **20**  |   **9**   | **12** |  **11**  |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: FlexProperty<TLength> | FlexProperty<TLength>[];\n  /**\n   * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **29**  | **28**  |   **9**   | **12** | **11** |\n   * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  \"flex-flow\"?: FlexFlowProperty | FlexFlowProperty[];\n  /**\n   * The **`font`** CSS property is a shorthand for `font-style`, `font-variant`, `font-weight`, `font-size`, `line-height`, and `font-family`. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: FontProperty | FontProperty[];\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **84** | **63**  |   No   |  No  | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * |     Chrome      |     Firefox     |      Safari       |  Edge  | IE  |\n   * | :-------------: | :-------------: | :---------------: | :----: | :-: |\n   * |     **66**      |     **61**      |      **12**       | **16** | No  |\n   * | 57 _(grid-gap)_ | 52 _(grid-gap)_ | 10.1 _(grid-gap)_ |        |     |\n   *\n   * ---\n   *\n   * _Supported in Multi-column Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **66** | **61**  |   No   | **16** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: GapProperty<TLength> | GapProperty<TLength>[];\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit grid properties (`grid-template-rows`, `grid-template-columns`, and `grid-template-areas`), and all the implicit grid properties (`grid-auto-rows`, `grid-auto-columns`, and `grid-auto-flow`), in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: GridProperty | GridProperty[];\n  /**\n   * The **`grid-area`** CSS property is a shorthand property for `grid-row-start`, `grid-column-start`, `grid-row-end` and `grid-column-end`, specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  \"grid-area\"?: GridAreaProperty | GridAreaProperty[];\n  /**\n   * The **`grid-column`** CSS property is a shorthand property for `grid-column-start` and `grid-column-end` specifying a grid item's size and location within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  \"grid-column\"?: GridColumnProperty | GridColumnProperty[];\n  /**\n   * The **`grid-row`** CSS property is a shorthand property for `grid-row-start` and `grid-row-end` specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  \"grid-row\"?: GridRowProperty | GridRowProperty[];\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, rows, and areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  \"grid-template\"?: GridTemplateProperty | GridTemplateProperty[];\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"line-clamp\"?: LineClampProperty | LineClampProperty[];\n  /**\n   * The **`list-style`** CSS property is a shorthand to set list style properties `list-style-type`, `list-style-image`, and `list-style-position`.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  \"list-style\"?: ListStyleProperty | ListStyleProperty[];\n  /**\n   * The **`margin`** CSS property sets the margin area on all four sides of an element. It is a shorthand for `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: MarginProperty<TLength> | MarginProperty<TLength>[];\n  /**\n   * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  |  **2**  | **3.2** | **12** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: MaskProperty<TLength> | MaskProperty<TLength>[];\n  /**\n   * The **`mask-border`** CSS property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  \"mask-border\"?: MaskBorderProperty | MaskBorderProperty[];\n  /**\n   * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari |  Edge  | IE  |\n   * | :-----------: | :-----: | :----: | :----: | :-: |\n   * |    **55**     | **72**  |   No   | **79** | No  |\n   * | 46 _(motion)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: OffsetProperty<TLength> | OffsetProperty<TLength>[];\n  /**\n   * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari |  Edge  | IE  |\n   * | :-----------: | :-----: | :----: | :----: | :-: |\n   * |    **55**     | **72**  |   No   | **79** | No  |\n   * | 46 _(motion)_ |         |        |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: OffsetProperty<TLength> | OffsetProperty<TLength>[];\n  /**\n   * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: OutlineProperty<TLength> | OutlineProperty<TLength>[];\n  /**\n   * The **`overflow`** CSS property sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflow-x` and `overflow-y`.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: OverflowProperty | OverflowProperty[];\n  /**\n   * The **`padding`** CSS property sets the padding area on all four sides of an element. It is a shorthand for `padding-top`, `padding-right`, `padding-bottom`, and `padding-left`.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: PaddingProperty<TLength> | PaddingProperty<TLength>[];\n  /**\n   * The CSS **`place-items`** shorthand property sets the `align-items` and `justify-items` properties, respectively. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  | **11** | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  \"place-items\"?: PlaceItemsProperty | PlaceItemsProperty[];\n  /**\n   * The **`place-self`** CSS property is a shorthand property sets both the `align-self` and `justify-self` properties. The first value is the `align-self` property value, the second the `justify-self` one. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * ---\n   *\n   * _Supported in Flex Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  |   No   | **79** | No  |\n   *\n   * ---\n   *\n   * _Supported in Grid Layout_\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **59** | **45**  |   No   | **79** | No  |\n   *\n   * ---\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  \"place-self\"?: PlaceSelfProperty | PlaceSelfProperty[];\n  /**\n   * The **`text-decoration`** CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, and `text-decoration-style`.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  \"text-decoration\"?: TextDecorationProperty<TLength> | TextDecorationProperty<TLength>[];\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |    Chrome    | Firefox | Safari  |     Edge     | IE  |\n   * | :----------: | :-----: | :-----: | :----------: | :-: |\n   * | **25** _-x-_ | **46**  | **6.1** | **79** _-x-_ | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  \"text-emphasis\"?: TextEmphasisProperty | TextEmphasisProperty[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: TransitionProperty | TransitionProperty[];\n}\n\nexport interface StandardPropertiesHyphenFallback<TLength = string | 0>\n  extends StandardLonghandPropertiesHyphenFallback<TLength>,\n    StandardShorthandPropertiesHyphenFallback<TLength> {}\n\nexport interface VendorLonghandPropertiesHyphenFallback<TLength = string | 0> {\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-animation-direction\"?: AnimationDirectionProperty | AnimationDirectionProperty[];\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-fill-mode\"?: AnimationFillModeProperty | AnimationFillModeProperty[];\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-moz-animation-iteration-count\"?: AnimationIterationCountProperty | AnimationIterationCountProperty[];\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-name\"?: AnimationNameProperty | AnimationNameProperty[];\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-moz-animation-play-state\"?: AnimationPlayStateProperty | AnimationPlayStateProperty[];\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-animation-timing-function\"?: AnimationTimingFunctionProperty | AnimationTimingFunctionProperty[];\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-moz-appearance\"?: MozAppearanceProperty | MozAppearanceProperty[];\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-moz-backface-visibility\"?: BackfaceVisibilityProperty | BackfaceVisibilityProperty[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-bottom-colors\"?: MozBorderBottomColorsProperty | MozBorderBottomColorsProperty[];\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-end-color\"?: BorderInlineEndColorProperty | BorderInlineEndColorProperty[];\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-end-style\"?: BorderInlineEndStyleProperty | BorderInlineEndStyleProperty[];\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-border-end-width\"?: BorderInlineEndWidthProperty<TLength> | BorderInlineEndWidthProperty<TLength>[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-left-colors\"?: MozBorderLeftColorsProperty | MozBorderLeftColorsProperty[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-right-colors\"?: MozBorderRightColorsProperty | MozBorderRightColorsProperty[];\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-start-color\"?: BorderInlineStartColorProperty | BorderInlineStartColorProperty[];\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-start-style\"?: BorderInlineStartStyleProperty | BorderInlineStartStyleProperty[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-top-colors\"?: MozBorderTopColorsProperty | MozBorderTopColorsProperty[];\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-moz-box-sizing\"?: BoxSizingProperty | BoxSizingProperty[];\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-count\"?: ColumnCountProperty | ColumnCountProperty[];\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-moz-column-fill\"?: ColumnFillProperty | ColumnFillProperty[];\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-column-gap\"?: ColumnGapProperty<TLength> | ColumnGapProperty<TLength>[];\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-column-rule-color\"?: ColumnRuleColorProperty | ColumnRuleColorProperty[];\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-column-rule-style\"?: ColumnRuleStyleProperty | ColumnRuleStyleProperty[];\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-column-rule-width\"?: ColumnRuleWidthProperty<TLength> | ColumnRuleWidthProperty<TLength>[];\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-width\"?: ColumnWidthProperty<TLength> | ColumnWidthProperty<TLength>[];\n  /**\n   * If you reference an SVG image in a webpage (such as with the `<img>` element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the **`-moz-context-properties`** property, and the image needs to opt in to using those properties by using values such as the `context-fill` value.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-context-properties\"?: MozContextPropertiesProperty | MozContextPropertiesProperty[];\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-moz-float-edge\"?: MozFloatEdgeProperty | MozFloatEdgeProperty[];\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-feature-settings\"?: FontFeatureSettingsProperty | FontFeatureSettingsProperty[];\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-language-override\"?: FontLanguageOverrideProperty | FontLanguageOverrideProperty[];\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-force-broken-image-icon\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-moz-hyphens\"?: HyphensProperty | HyphensProperty[];\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-image-region\"?: MozImageRegionProperty | MozImageRegionProperty[];\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-end\"?: MarginInlineEndProperty<TLength> | MarginInlineEndProperty<TLength>[];\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-start\"?: MarginInlineStartProperty<TLength> | MarginInlineStartProperty<TLength>[];\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  \"-moz-orient\"?: MozOrientProperty | MozOrientProperty[];\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomleft\"?: MozOutlineRadiusBottomleftProperty<TLength> | MozOutlineRadiusBottomleftProperty<TLength>[];\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomright\"?: MozOutlineRadiusBottomrightProperty<TLength> | MozOutlineRadiusBottomrightProperty<TLength>[];\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topleft\"?: MozOutlineRadiusTopleftProperty<TLength> | MozOutlineRadiusTopleftProperty<TLength>[];\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topright\"?: MozOutlineRadiusToprightProperty<TLength> | MozOutlineRadiusToprightProperty<TLength>[];\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-end\"?: PaddingInlineEndProperty<TLength> | PaddingInlineEndProperty<TLength>[];\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-start\"?: PaddingInlineStartProperty<TLength> | PaddingInlineStartProperty<TLength>[];\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-perspective\"?: PerspectiveProperty<TLength> | PerspectiveProperty<TLength>[];\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-moz-perspective-origin\"?: PerspectiveOriginProperty<TLength> | PerspectiveOriginProperty<TLength>[];\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `stack` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  \"-moz-stack-sizing\"?: MozStackSizingProperty | MozStackSizingProperty[];\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  \"-moz-tab-size\"?: TabSizeProperty<TLength> | TabSizeProperty<TLength>[];\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-text-blink\"?: MozTextBlinkProperty | MozTextBlinkProperty[];\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-moz-text-size-adjust\"?: TextSizeAdjustProperty | TextSizeAdjustProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-moz-transform-origin\"?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-moz-transform-style\"?: TransformStyleProperty | TransformStyleProperty[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-transition-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-transition-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-moz-transition-property\"?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-transition-timing-function\"?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-user-focus\"?: MozUserFocusProperty | MozUserFocusProperty[];\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-moz-user-modify\"?: MozUserModifyProperty | MozUserModifyProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-user-select\"?: UserSelectProperty | UserSelectProperty[];\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  \"-moz-window-dragging\"?: MozWindowDraggingProperty | MozWindowDraggingProperty[];\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-moz-window-shadow\"?: MozWindowShadowProperty | MozWindowShadowProperty[];\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  \"-ms-accelerator\"?: MsAcceleratorProperty | MsAcceleratorProperty[];\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-align-self\"?: AlignSelfProperty | AlignSelfProperty[];\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  \"-ms-block-progression\"?: MsBlockProgressionProperty | MsBlockProgressionProperty[];\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-chaining\"?: MsContentZoomChainingProperty | MsContentZoomChainingProperty[];\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  \"-ms-content-zoom-limit-max\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-ms-content-zoom-limit-min\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  \"-ms-content-zoom-snap-points\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-snap-type\"?: MsContentZoomSnapTypeProperty | MsContentZoomSnapTypeProperty[];\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  \"-ms-content-zooming\"?: MsContentZoomingProperty | MsContentZoomingProperty[];\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  \"-ms-filter\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-ms-flex-direction\"?: FlexDirectionProperty | FlexDirectionProperty[];\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-flex-positive\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-from\"?: MsFlowFromProperty | MsFlowFromProperty[];\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-into\"?: MsFlowIntoProperty | MsFlowIntoProperty[];\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-grid-columns\"?: GridAutoColumnsProperty<TLength> | GridAutoColumnsProperty<TLength>[];\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-grid-rows\"?: GridAutoRowsProperty<TLength> | GridAutoRowsProperty<TLength>[];\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-high-contrast-adjust\"?: MsHighContrastAdjustProperty | MsHighContrastAdjustProperty[];\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-hyphenate-limit-chars\"?: MsHyphenateLimitCharsProperty | MsHyphenateLimitCharsProperty[];\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  \"-ms-hyphenate-limit-lines\"?: MsHyphenateLimitLinesProperty | MsHyphenateLimitLinesProperty[];\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-hyphenate-limit-zone\"?: MsHyphenateLimitZoneProperty<TLength> | MsHyphenateLimitZoneProperty<TLength>[];\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-ms-hyphens\"?: HyphensProperty | HyphensProperty[];\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-ime-align\"?: MsImeAlignProperty | MsImeAlignProperty[];\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-line-break\"?: LineBreakProperty | LineBreakProperty[];\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-order\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-overflow-style\"?: MsOverflowStyleProperty | MsOverflowStyleProperty[];\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-x\"?: OverflowXProperty | OverflowXProperty[];\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-y\"?: OverflowYProperty | OverflowYProperty[];\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  \"-ms-scroll-chaining\"?: MsScrollChainingProperty | MsScrollChainingProperty[];\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-x-max\"?: MsScrollLimitXMaxProperty<TLength> | MsScrollLimitXMaxProperty<TLength>[];\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-x-min\"?: MsScrollLimitXMinProperty<TLength> | MsScrollLimitXMinProperty<TLength>[];\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-y-max\"?: MsScrollLimitYMaxProperty<TLength> | MsScrollLimitYMaxProperty<TLength>[];\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-y-min\"?: MsScrollLimitYMinProperty<TLength> | MsScrollLimitYMinProperty<TLength>[];\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  \"-ms-scroll-rails\"?: MsScrollRailsProperty | MsScrollRailsProperty[];\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-x\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-y\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-snap-type\"?: MsScrollSnapTypeProperty | MsScrollSnapTypeProperty[];\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-translation\"?: MsScrollTranslationProperty | MsScrollTranslationProperty[];\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-3dlight-color\"?: MsScrollbar3dlightColorProperty | MsScrollbar3dlightColorProperty[];\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  \"-ms-scrollbar-arrow-color\"?: MsScrollbarArrowColorProperty | MsScrollbarArrowColorProperty[];\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-base-color\"?: MsScrollbarBaseColorProperty | MsScrollbarBaseColorProperty[];\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-darkshadow-color\"?: MsScrollbarDarkshadowColorProperty | MsScrollbarDarkshadowColorProperty[];\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  \"-ms-scrollbar-face-color\"?: MsScrollbarFaceColorProperty | MsScrollbarFaceColorProperty[];\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  \"-ms-scrollbar-highlight-color\"?: MsScrollbarHighlightColorProperty | MsScrollbarHighlightColorProperty[];\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-shadow-color\"?: MsScrollbarShadowColorProperty | MsScrollbarShadowColorProperty[];\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-autospace\"?: MsTextAutospaceProperty | MsTextAutospaceProperty[];\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-combine-horizontal\"?: TextCombineUprightProperty | TextCombineUprightProperty[];\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  \"-ms-text-overflow\"?: TextOverflowProperty | TextOverflowProperty[];\n  /**\n   * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-touch-action\"?: TouchActionProperty | TouchActionProperty[];\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  \"-ms-touch-select\"?: MsTouchSelectProperty | MsTouchSelectProperty[];\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-transform\"?: TransformProperty | TransformProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-ms-transform-origin\"?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-ms-transition-property\"?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-ms-transition-timing-function\"?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  \"-ms-user-select\"?: MsUserSelectProperty | MsUserSelectProperty[];\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-ms-word-break\"?: WordBreakProperty | WordBreakProperty[];\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-wrap-flow\"?: MsWrapFlowProperty | MsWrapFlowProperty[];\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-wrap-margin\"?: MsWrapMarginProperty<TLength> | MsWrapMarginProperty<TLength>[];\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  \"-ms-wrap-through\"?: MsWrapThroughProperty | MsWrapThroughProperty[];\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-ms-writing-mode\"?: WritingModeProperty | WritingModeProperty[];\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   */\n  \"-o-object-fit\"?: ObjectFitProperty | ObjectFitProperty[];\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-o-object-position\"?: ObjectPositionProperty<TLength> | ObjectPositionProperty<TLength>[];\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  \"-o-tab-size\"?: TabSizeProperty<TLength> | TabSizeProperty<TLength>[];\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  \"-o-text-overflow\"?: TextOverflowProperty | TextOverflowProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-o-transform-origin\"?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-content\"?: AlignContentProperty | AlignContentProperty[];\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-items\"?: AlignItemsProperty | AlignItemsProperty[];\n  /**\n   * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-align-self\"?: AlignSelfProperty | AlignSelfProperty[];\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-animation-direction\"?: AnimationDirectionProperty | AnimationDirectionProperty[];\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-fill-mode\"?: AnimationFillModeProperty | AnimationFillModeProperty[];\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-animation-iteration-count\"?: AnimationIterationCountProperty | AnimationIterationCountProperty[];\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-name\"?: AnimationNameProperty | AnimationNameProperty[];\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-webkit-animation-play-state\"?: AnimationPlayStateProperty | AnimationPlayStateProperty[];\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-animation-timing-function\"?: AnimationTimingFunctionProperty | AnimationTimingFunctionProperty[];\n  /**\n   * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-webkit-appearance\"?: WebkitAppearanceProperty | WebkitAppearanceProperty[];\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-backdrop-filter\"?: BackdropFilterProperty | BackdropFilterProperty[];\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-webkit-backface-visibility\"?: BackfaceVisibilityProperty | BackfaceVisibilityProperty[];\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  \"-webkit-background-clip\"?: BackgroundClipProperty | BackgroundClipProperty[];\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"-webkit-background-origin\"?: BackgroundOriginProperty | BackgroundOriginProperty[];\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-background-size\"?: BackgroundSizeProperty<TLength> | BackgroundSizeProperty<TLength>[];\n  /**\n   * **Syntax**: `<'color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-border-before-color\"?: WebkitBorderBeforeColorProperty | WebkitBorderBeforeColorProperty[];\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-border-before-style\"?: WebkitBorderBeforeStyleProperty | WebkitBorderBeforeStyleProperty[];\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-border-before-width\"?: WebkitBorderBeforeWidthProperty<TLength> | WebkitBorderBeforeWidthProperty<TLength>[];\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-left-radius\"?: BorderBottomLeftRadiusProperty<TLength> | BorderBottomLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-right-radius\"?: BorderBottomRightRadiusProperty<TLength> | BorderBottomRightRadiusProperty<TLength>[];\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-webkit-border-image-slice\"?: BorderImageSliceProperty | BorderImageSliceProperty[];\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-left-radius\"?: BorderTopLeftRadiusProperty<TLength> | BorderTopLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-right-radius\"?: BorderTopRightRadiusProperty<TLength> | BorderTopRightRadiusProperty<TLength>[];\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  \"-webkit-box-decoration-break\"?: BoxDecorationBreakProperty | BoxDecorationBreakProperty[];\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-reflect\"?: WebkitBoxReflectProperty<TLength> | WebkitBoxReflectProperty<TLength>[];\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-shadow\"?: BoxShadowProperty | BoxShadowProperty[];\n  /**\n   * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-webkit-box-sizing\"?: BoxSizingProperty | BoxSizingProperty[];\n  /**\n   * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-clip-path\"?: ClipPathProperty | ClipPathProperty[];\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-count\"?: ColumnCountProperty | ColumnCountProperty[];\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-webkit-column-fill\"?: ColumnFillProperty | ColumnFillProperty[];\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-column-gap\"?: ColumnGapProperty<TLength> | ColumnGapProperty<TLength>[];\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-column-rule-color\"?: ColumnRuleColorProperty | ColumnRuleColorProperty[];\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-rule-style\"?: ColumnRuleStyleProperty | ColumnRuleStyleProperty[];\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-column-rule-width\"?: ColumnRuleWidthProperty<TLength> | ColumnRuleWidthProperty<TLength>[];\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-span\"?: ColumnSpanProperty | ColumnSpanProperty[];\n  /**\n   * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-width\"?: ColumnWidthProperty<TLength> | ColumnWidthProperty<TLength>[];\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-filter\"?: FilterProperty | FilterProperty[];\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-flex-basis\"?: FlexBasisProperty<TLength> | FlexBasisProperty<TLength>[];\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-webkit-flex-direction\"?: FlexDirectionProperty | FlexDirectionProperty[];\n  /**\n   * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-flex-grow\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-flex-shrink\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  \"-webkit-flex-wrap\"?: FlexWrapProperty | FlexWrapProperty[];\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-feature-settings\"?: FontFeatureSettingsProperty | FontFeatureSettingsProperty[];\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-kerning\"?: FontKerningProperty | FontKerningProperty[];\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-variant-ligatures\"?: FontVariantLigaturesProperty | FontVariantLigaturesProperty[];\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-webkit-hyphens\"?: HyphensProperty | HyphensProperty[];\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-justify-content\"?: JustifyContentProperty | JustifyContentProperty[];\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-line-break\"?: LineBreakProperty | LineBreakProperty[];\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block container to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-line-clamp\"?: WebkitLineClampProperty | WebkitLineClampProperty[];\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-end\"?: MarginInlineEndProperty<TLength> | MarginInlineEndProperty<TLength>[];\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-start\"?: MarginInlineStartProperty<TLength> | MarginInlineStartProperty<TLength>[];\n  /**\n   * If a `-webkit-mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  \"-webkit-mask-attachment\"?: WebkitMaskAttachmentProperty | WebkitMaskAttachmentProperty[];\n  /**\n   * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  \"-webkit-mask-clip\"?: WebkitMaskClipProperty | WebkitMaskClipProperty[];\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  \"-webkit-mask-composite\"?: WebkitMaskCompositeProperty | WebkitMaskCompositeProperty[];\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-image\"?: WebkitMaskImageProperty | WebkitMaskImageProperty[];\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  \"-webkit-mask-origin\"?: WebkitMaskOriginProperty | WebkitMaskOriginProperty[];\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  \"-webkit-mask-position\"?: WebkitMaskPositionProperty<TLength> | WebkitMaskPositionProperty<TLength>[];\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-x\"?: WebkitMaskPositionXProperty<TLength> | WebkitMaskPositionXProperty<TLength>[];\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-y\"?: WebkitMaskPositionYProperty<TLength> | WebkitMaskPositionYProperty<TLength>[];\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat\"?: WebkitMaskRepeatProperty | WebkitMaskRepeatProperty[];\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-x\"?: WebkitMaskRepeatXProperty | WebkitMaskRepeatXProperty[];\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-y\"?: WebkitMaskRepeatYProperty | WebkitMaskRepeatYProperty[];\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-mask-size\"?: WebkitMaskSizeProperty<TLength> | WebkitMaskSizeProperty<TLength>[];\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-max-inline-size\"?: MaxInlineSizeProperty<TLength> | MaxInlineSizeProperty<TLength>[];\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-order\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-overflow-scrolling\"?: WebkitOverflowScrollingProperty | WebkitOverflowScrollingProperty[];\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-end\"?: PaddingInlineEndProperty<TLength> | PaddingInlineEndProperty<TLength>[];\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-start\"?: PaddingInlineStartProperty<TLength> | PaddingInlineStartProperty<TLength>[];\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-perspective\"?: PerspectiveProperty<TLength> | PerspectiveProperty<TLength>[];\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-webkit-perspective-origin\"?: PerspectiveOriginProperty<TLength> | PerspectiveOriginProperty<TLength>[];\n  /**\n   * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  \"-webkit-print-color-adjust\"?: ColorAdjustProperty | ColorAdjustProperty[];\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-scroll-snap-type\"?: ScrollSnapTypeProperty | ScrollSnapTypeProperty[];\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-shape-margin\"?: ShapeMarginProperty<TLength> | ShapeMarginProperty<TLength>[];\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  \"-webkit-tap-highlight-color\"?: WebkitTapHighlightColorProperty | WebkitTapHighlightColorProperty[];\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-combine\"?: TextCombineUprightProperty | TextCombineUprightProperty[];\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-decoration-color\"?: TextDecorationColorProperty | TextDecorationColorProperty[];\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-decoration-line\"?: TextDecorationLineProperty | TextDecorationLineProperty[];\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  \"-webkit-text-decoration-skip\"?: TextDecorationSkipProperty | TextDecorationSkipProperty[];\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  \"-webkit-text-decoration-style\"?: TextDecorationStyleProperty | TextDecorationStyleProperty[];\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-emphasis-color\"?: TextEmphasisColorProperty | TextEmphasisColorProperty[];\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  \"-webkit-text-emphasis-position\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-emphasis-style\"?: TextEmphasisStyleProperty | TextEmphasisStyleProperty[];\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-fill-color\"?: WebkitTextFillColorProperty | WebkitTextFillColorProperty[];\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  \"-webkit-text-orientation\"?: TextOrientationProperty | TextOrientationProperty[];\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-webkit-text-size-adjust\"?: TextSizeAdjustProperty | TextSizeAdjustProperty[];\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-stroke-color\"?: WebkitTextStrokeColorProperty | WebkitTextStrokeColorProperty[];\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-text-stroke-width\"?: WebkitTextStrokeWidthProperty<TLength> | WebkitTextStrokeWidthProperty<TLength>[];\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-text-underline-position\"?: TextUnderlinePositionProperty | TextUnderlinePositionProperty[];\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-webkit-touch-callout\"?: WebkitTouchCalloutProperty | WebkitTouchCalloutProperty[];\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-transform\"?: TransformProperty | TransformProperty[];\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-webkit-transform-origin\"?: TransformOriginProperty<TLength> | TransformOriginProperty<TLength>[];\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-webkit-transform-style\"?: TransformStyleProperty | TransformStyleProperty[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-webkit-transition-property\"?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-transition-timing-function\"?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-webkit-user-modify\"?: WebkitUserModifyProperty | WebkitUserModifyProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-user-select\"?: UserSelectProperty | UserSelectProperty[];\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-webkit-writing-mode\"?: WritingModeProperty | WritingModeProperty[];\n}\n\nexport interface VendorShorthandPropertiesHyphenFallback<TLength = string | 0> {\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-moz-animation\"?: AnimationProperty | AnimationProperty[];\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-moz-border-image\"?: BorderImageProperty | BorderImageProperty[];\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-moz-column-rule\"?: ColumnRuleProperty<TLength> | ColumnRuleProperty<TLength>[];\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-moz-columns\"?: ColumnsProperty<TLength> | ColumnsProperty<TLength>[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-moz-transition\"?: TransitionProperty | TransitionProperty[];\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  \"-ms-content-zoom-limit\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  \"-ms-content-zoom-snap\"?: MsContentZoomSnapProperty | MsContentZoomSnapProperty[];\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-ms-flex\"?: FlexProperty<TLength> | FlexProperty<TLength>[];\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  \"-ms-scroll-limit\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  \"-ms-scroll-snap-x\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  \"-ms-scroll-snap-y\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-ms-transition\"?: TransitionProperty | TransitionProperty[];\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-webkit-animation\"?: AnimationProperty | AnimationProperty[];\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <'color'>`\n   */\n  \"-webkit-border-before\"?: WebkitBorderBeforeProperty<TLength> | WebkitBorderBeforeProperty<TLength>[];\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-webkit-border-image\"?: BorderImageProperty | BorderImageProperty[];\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  \"-webkit-border-radius\"?: BorderRadiusProperty<TLength> | BorderRadiusProperty<TLength>[];\n  /**\n   * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-webkit-column-rule\"?: ColumnRuleProperty<TLength> | ColumnRuleProperty<TLength>[];\n  /**\n   * The **`columns`** CSS property sets the column width and column count of an element.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-webkit-columns\"?: ColumnsProperty<TLength> | ColumnsProperty<TLength>[];\n  /**\n   * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-webkit-flex\"?: FlexProperty<TLength> | FlexProperty<TLength>[];\n  /**\n   * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  \"-webkit-flex-flow\"?: FlexFlowProperty | FlexFlowProperty[];\n  /**\n   * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  \"-webkit-mask\"?: WebkitMaskProperty<TLength> | WebkitMaskProperty<TLength>[];\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  \"-webkit-text-emphasis\"?: TextEmphasisProperty | TextEmphasisProperty[];\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  \"-webkit-text-stroke\"?: WebkitTextStrokeProperty<TLength> | WebkitTextStrokeProperty<TLength>[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-webkit-transition\"?: TransitionProperty | TransitionProperty[];\n}\n\nexport interface VendorPropertiesHyphenFallback<TLength = string | 0> extends VendorLonghandPropertiesHyphenFallback<TLength>, VendorShorthandPropertiesHyphenFallback<TLength> {}\n\nexport interface ObsoletePropertiesHyphenFallback<TLength = string | 0> {\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"box-align\"?: BoxAlignProperty | BoxAlignProperty[];\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"box-direction\"?: BoxDirectionProperty | BoxDirectionProperty[];\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"box-flex\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-flex-group\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"box-lines\"?: BoxLinesProperty | BoxLinesProperty[];\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-ordinal-group\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"box-orient\"?: BoxOrientProperty | BoxOrientProperty[];\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"box-pack\"?: BoxPackProperty | BoxPackProperty[];\n  /**\n   * The **`clip`** CSS property defines what portion of an element is visible. The `clip` property applies only to absolutely positioned elements, that is elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: ClipProperty | ClipProperty[];\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"font-variant-alternates\"?: FontVariantAlternatesProperty | FontVariantAlternatesProperty[];\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-column-gap\"?: GridColumnGapProperty<TLength> | GridColumnGapProperty<TLength>[];\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  \"grid-gap\"?: GridGapProperty<TLength> | GridGapProperty<TLength>[];\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-row-gap\"?: GridRowGapProperty<TLength> | GridRowGapProperty<TLength>[];\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"ime-mode\"?: ImeModeProperty | ImeModeProperty[];\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block\"?: InsetBlockProperty<TLength> | InsetBlockProperty<TLength>[];\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-end\"?: InsetBlockEndProperty<TLength> | InsetBlockEndProperty<TLength>[];\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-start\"?: InsetBlockStartProperty<TLength> | InsetBlockStartProperty<TLength>[];\n  /**\n   * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline\"?: InsetInlineProperty<TLength> | InsetInlineProperty<TLength>[];\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-end\"?: InsetInlineEndProperty<TLength> | InsetInlineEndProperty<TLength>[];\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-start\"?: InsetInlineStartProperty<TLength> | InsetInlineStartProperty<TLength>[];\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-coordinate\"?: ScrollSnapCoordinateProperty<TLength> | ScrollSnapCoordinateProperty<TLength>[];\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-destination\"?: ScrollSnapDestinationProperty<TLength> | ScrollSnapDestinationProperty<TLength>[];\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-x\"?: ScrollSnapPointsXProperty | ScrollSnapPointsXProperty[];\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-y\"?: ScrollSnapPointsYProperty | ScrollSnapPointsYProperty[];\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-x\"?: ScrollSnapTypeXProperty | ScrollSnapTypeXProperty[];\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-y\"?: ScrollSnapTypeYProperty | ScrollSnapTypeYProperty[];\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   *\n   * @deprecated\n   */\n  \"scrollbar-track-color\"?: MsScrollbarTrackColorProperty | MsScrollbarTrackColorProperty[];\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"text-combine-horizontal\"?: TextCombineUprightProperty | TextCombineUprightProperty[];\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-align\"?: BoxAlignProperty | BoxAlignProperty[];\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-direction\"?: BoxDirectionProperty | BoxDirectionProperty[];\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex-group\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-lines\"?: BoxLinesProperty | BoxLinesProperty[];\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-ordinal-group\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-khtml-box-orient\"?: BoxOrientProperty | BoxOrientProperty[];\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-pack\"?: BoxPackProperty | BoxPackProperty[];\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-line-break\"?: LineBreakProperty | LineBreakProperty[];\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * @deprecated\n   */\n  \"-khtml-opacity\"?: OpacityProperty | OpacityProperty[];\n  /**\n   * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-user-select\"?: UserSelectProperty | UserSelectProperty[];\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-clip\"?: BackgroundClipProperty | BackgroundClipProperty[];\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  \"-moz-background-inline-policy\"?: BoxDecorationBreakProperty | BoxDecorationBreakProperty[];\n  /**\n   * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-origin\"?: BackgroundOriginProperty | BackgroundOriginProperty[];\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-moz-background-size\"?: BackgroundSizeProperty<TLength> | BackgroundSizeProperty<TLength>[];\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-binding\"?: MozBindingProperty | MozBindingProperty[];\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius\"?: BorderRadiusProperty<TLength> | BorderRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomleft\"?: BorderBottomLeftRadiusProperty<TLength> | BorderBottomLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomright\"?: BorderBottomRightRadiusProperty<TLength> | BorderBottomRightRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topleft\"?: BorderTopLeftRadiusProperty<TLength> | BorderTopLeftRadiusProperty<TLength>[];\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topright\"?: BorderTopRightRadiusProperty<TLength> | BorderTopRightRadiusProperty<TLength>[];\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-moz-box-align\"?: BoxAlignProperty | BoxAlignProperty[];\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-moz-box-direction\"?: BoxDirectionProperty | BoxDirectionProperty[];\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-box-flex\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-box-ordinal-group\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-moz-box-orient\"?: BoxOrientProperty | BoxOrientProperty[];\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-moz-box-pack\"?: BoxPackProperty | BoxPackProperty[];\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-box-shadow\"?: BoxShadowProperty | BoxShadowProperty[];\n  /**\n   * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1.0`\n   *\n   * @deprecated\n   */\n  \"-moz-opacity\"?: OpacityProperty | OpacityProperty[];\n  /**\n   * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  \"-moz-outline\"?: OutlineProperty<TLength> | OutlineProperty<TLength>[];\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  \"-moz-outline-color\"?: OutlineColorProperty | OutlineColorProperty[];\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-radius\"?: MozOutlineRadiusProperty<TLength> | MozOutlineRadiusProperty<TLength>[];\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-style\"?: OutlineStyleProperty | OutlineStyleProperty[];\n  /**\n   * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-width\"?: OutlineWidthProperty<TLength> | OutlineWidthProperty<TLength>[];\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-text-align-last\"?: TextAlignLastProperty | TextAlignLastProperty[];\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-color\"?: TextDecorationColorProperty | TextDecorationColorProperty[];\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-line\"?: TextDecorationLineProperty | TextDecorationLineProperty[];\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-style\"?: TextDecorationStyleProperty | TextDecorationStyleProperty[];\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-user-input\"?: MozUserInputProperty | MozUserInputProperty[];\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-ms-ime-mode\"?: ImeModeProperty | ImeModeProperty[];\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   *\n   * @deprecated\n   */\n  \"-ms-scrollbar-track-color\"?: MsScrollbarTrackColorProperty | MsScrollbarTrackColorProperty[];\n  /**\n   * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  \"-o-animation\"?: AnimationProperty | AnimationProperty[];\n  /**\n   * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-o-animation-direction\"?: AnimationDirectionProperty | AnimationDirectionProperty[];\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-fill-mode\"?: AnimationFillModeProperty | AnimationFillModeProperty[];\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-o-animation-iteration-count\"?: AnimationIterationCountProperty | AnimationIterationCountProperty[];\n  /**\n   * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-name\"?: AnimationNameProperty | AnimationNameProperty[];\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  \"-o-animation-play-state\"?: AnimationPlayStateProperty | AnimationPlayStateProperty[];\n  /**\n   * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-animation-timing-function\"?: AnimationTimingFunctionProperty | AnimationTimingFunctionProperty[];\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-o-background-size\"?: BackgroundSizeProperty<TLength> | BackgroundSizeProperty<TLength>[];\n  /**\n   * The **`border-image`** CSS property draws an image in place of an element's `border-style`.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  \"-o-border-image\"?: BorderImageProperty | BorderImageProperty[];\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-transform\"?: TransformProperty | TransformProperty[];\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-o-transition\"?: TransitionProperty | TransitionProperty[];\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-delay\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-duration\"?: GlobalsString | GlobalsString[];\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-o-transition-property\"?: TransitionPropertyProperty | TransitionPropertyProperty[];\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<timing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-transition-timing-function\"?: TransitionTimingFunctionProperty | TransitionTimingFunctionProperty[];\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-align\"?: BoxAlignProperty | BoxAlignProperty[];\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-direction\"?: BoxDirectionProperty | BoxDirectionProperty[];\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex-group\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-lines\"?: BoxLinesProperty | BoxLinesProperty[];\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-ordinal-group\"?: GlobalsNumber | GlobalsNumber[];\n  /**\n   * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-webkit-box-orient\"?: BoxOrientProperty | BoxOrientProperty[];\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-pack\"?: BoxPackProperty | BoxPackProperty[];\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-webkit-scroll-snap-points-x\"?: ScrollSnapPointsXProperty | ScrollSnapPointsXProperty[];\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-webkit-scroll-snap-points-y\"?: ScrollSnapPointsYProperty | ScrollSnapPointsYProperty[];\n}\n\nexport interface SvgPropertiesHyphenFallback<TLength = string | 0> {\n  \"alignment-baseline\"?: AlignmentBaselineProperty | AlignmentBaselineProperty[];\n  \"baseline-shift\"?: BaselineShiftProperty<TLength> | BaselineShiftProperty<TLength>[];\n  clip?: ClipProperty | ClipProperty[];\n  \"clip-path\"?: ClipPathProperty | ClipPathProperty[];\n  \"clip-rule\"?: ClipRuleProperty | ClipRuleProperty[];\n  color?: ColorProperty | ColorProperty[];\n  \"color-interpolation\"?: ColorInterpolationProperty | ColorInterpolationProperty[];\n  \"color-rendering\"?: ColorRenderingProperty | ColorRenderingProperty[];\n  cursor?: CursorProperty | CursorProperty[];\n  direction?: DirectionProperty | DirectionProperty[];\n  display?: DisplayProperty | DisplayProperty[];\n  \"dominant-baseline\"?: DominantBaselineProperty | DominantBaselineProperty[];\n  fill?: FillProperty | FillProperty[];\n  \"fill-opacity\"?: GlobalsNumber | GlobalsNumber[];\n  \"fill-rule\"?: FillRuleProperty | FillRuleProperty[];\n  filter?: FilterProperty | FilterProperty[];\n  \"flood-color\"?: FloodColorProperty | FloodColorProperty[];\n  \"flood-opacity\"?: GlobalsNumber | GlobalsNumber[];\n  font?: FontProperty | FontProperty[];\n  \"font-family\"?: FontFamilyProperty | FontFamilyProperty[];\n  \"font-size\"?: FontSizeProperty<TLength> | FontSizeProperty<TLength>[];\n  \"font-size-adjust\"?: FontSizeAdjustProperty | FontSizeAdjustProperty[];\n  \"font-stretch\"?: FontStretchProperty | FontStretchProperty[];\n  \"font-style\"?: FontStyleProperty | FontStyleProperty[];\n  \"font-variant\"?: FontVariantProperty | FontVariantProperty[];\n  \"font-weight\"?: FontWeightProperty | FontWeightProperty[];\n  \"glyph-orientation-vertical\"?: GlyphOrientationVerticalProperty | GlyphOrientationVerticalProperty[];\n  \"image-rendering\"?: ImageRenderingProperty | ImageRenderingProperty[];\n  \"letter-spacing\"?: LetterSpacingProperty<TLength> | LetterSpacingProperty<TLength>[];\n  \"lighting-color\"?: LightingColorProperty | LightingColorProperty[];\n  \"line-height\"?: LineHeightProperty<TLength> | LineHeightProperty<TLength>[];\n  marker?: MarkerProperty | MarkerProperty[];\n  \"marker-end\"?: MarkerEndProperty | MarkerEndProperty[];\n  \"marker-mid\"?: MarkerMidProperty | MarkerMidProperty[];\n  \"marker-start\"?: MarkerStartProperty | MarkerStartProperty[];\n  mask?: MaskProperty<TLength> | MaskProperty<TLength>[];\n  opacity?: OpacityProperty | OpacityProperty[];\n  overflow?: OverflowProperty | OverflowProperty[];\n  \"paint-order\"?: PaintOrderProperty | PaintOrderProperty[];\n  \"pointer-events\"?: PointerEventsProperty | PointerEventsProperty[];\n  \"shape-rendering\"?: ShapeRenderingProperty | ShapeRenderingProperty[];\n  \"stop-color\"?: StopColorProperty | StopColorProperty[];\n  \"stop-opacity\"?: GlobalsNumber | GlobalsNumber[];\n  stroke?: StrokeProperty | StrokeProperty[];\n  \"stroke-dasharray\"?: StrokeDasharrayProperty<TLength> | StrokeDasharrayProperty<TLength>[];\n  \"stroke-dashoffset\"?: StrokeDashoffsetProperty<TLength> | StrokeDashoffsetProperty<TLength>[];\n  \"stroke-linecap\"?: StrokeLinecapProperty | StrokeLinecapProperty[];\n  \"stroke-linejoin\"?: StrokeLinejoinProperty | StrokeLinejoinProperty[];\n  \"stroke-miterlimit\"?: GlobalsNumber | GlobalsNumber[];\n  \"stroke-opacity\"?: GlobalsNumber | GlobalsNumber[];\n  \"stroke-width\"?: StrokeWidthProperty<TLength> | StrokeWidthProperty<TLength>[];\n  \"text-anchor\"?: TextAnchorProperty | TextAnchorProperty[];\n  \"text-decoration\"?: TextDecorationProperty<TLength> | TextDecorationProperty<TLength>[];\n  \"text-rendering\"?: TextRenderingProperty | TextRenderingProperty[];\n  \"unicode-bidi\"?: UnicodeBidiProperty | UnicodeBidiProperty[];\n  \"vector-effect\"?: VectorEffectProperty | VectorEffectProperty[];\n  visibility?: VisibilityProperty | VisibilityProperty[];\n  \"white-space\"?: WhiteSpaceProperty | WhiteSpaceProperty[];\n  \"word-spacing\"?: WordSpacingProperty<TLength> | WordSpacingProperty<TLength>[];\n  \"writing-mode\"?: WritingModeProperty | WritingModeProperty[];\n}\n\nexport interface PropertiesHyphenFallback<TLength = string | 0>\n  extends StandardPropertiesHyphenFallback<TLength>,\n    VendorPropertiesHyphenFallback<TLength>,\n    ObsoletePropertiesHyphenFallback<TLength>,\n    SvgPropertiesHyphenFallback<TLength> {}\n\nexport interface CounterStyle {\n  additiveSymbols?: string;\n  fallback?: string;\n  negative?: string;\n  pad?: string;\n  prefix?: string;\n  range?: CounterStyleRangeProperty;\n  speakAs?: CounterStyleSpeakAsProperty;\n  suffix?: string;\n  symbols?: string;\n  system?: CounterStyleSystemProperty;\n}\n\nexport interface CounterStyleHyphen {\n  \"additive-symbols\"?: string;\n  fallback?: string;\n  negative?: string;\n  pad?: string;\n  prefix?: string;\n  range?: CounterStyleRangeProperty;\n  \"speak-as\"?: CounterStyleSpeakAsProperty;\n  suffix?: string;\n  symbols?: string;\n  system?: CounterStyleSystemProperty;\n}\n\nexport interface CounterStyleFallback {\n  additiveSymbols?: string | string[];\n  fallback?: string | string[];\n  negative?: string | string[];\n  pad?: string | string[];\n  prefix?: string | string[];\n  range?: CounterStyleRangeProperty | CounterStyleRangeProperty[];\n  speakAs?: CounterStyleSpeakAsProperty | CounterStyleSpeakAsProperty[];\n  suffix?: string | string[];\n  symbols?: string | string[];\n  system?: CounterStyleSystemProperty | CounterStyleSystemProperty[];\n}\n\nexport interface CounterStyleHyphenFallback {\n  \"additive-symbols\"?: string | string[];\n  fallback?: string | string[];\n  negative?: string | string[];\n  pad?: string | string[];\n  prefix?: string | string[];\n  range?: CounterStyleRangeProperty | CounterStyleRangeProperty[];\n  \"speak-as\"?: CounterStyleSpeakAsProperty | CounterStyleSpeakAsProperty[];\n  suffix?: string | string[];\n  symbols?: string | string[];\n  system?: CounterStyleSystemProperty | CounterStyleSystemProperty[];\n}\n\nexport interface FontFace {\n  MozFontFeatureSettings?: FontFaceFontFeatureSettingsProperty;\n  fontDisplay?: FontFaceFontDisplayProperty;\n  fontFamily?: string;\n  fontFeatureSettings?: FontFaceFontFeatureSettingsProperty;\n  fontStretch?: FontFaceFontStretchProperty;\n  fontStyle?: FontFaceFontStyleProperty;\n  fontVariant?: FontFaceFontVariantProperty;\n  fontVariationSettings?: FontFaceFontVariationSettingsProperty;\n  fontWeight?: FontFaceFontWeightProperty;\n  src?: string;\n  unicodeRange?: string;\n}\n\nexport interface FontFaceHyphen {\n  \"-moz-font-feature-settings\"?: FontFaceFontFeatureSettingsProperty;\n  \"font-display\"?: FontFaceFontDisplayProperty;\n  \"font-family\"?: string;\n  \"font-feature-settings\"?: FontFaceFontFeatureSettingsProperty;\n  \"font-stretch\"?: FontFaceFontStretchProperty;\n  \"font-style\"?: FontFaceFontStyleProperty;\n  \"font-variant\"?: FontFaceFontVariantProperty;\n  \"font-variation-settings\"?: FontFaceFontVariationSettingsProperty;\n  \"font-weight\"?: FontFaceFontWeightProperty;\n  src?: string;\n  \"unicode-range\"?: string;\n}\n\nexport interface FontFaceFallback {\n  MozFontFeatureSettings?: FontFaceFontFeatureSettingsProperty | FontFaceFontFeatureSettingsProperty[];\n  fontDisplay?: FontFaceFontDisplayProperty | FontFaceFontDisplayProperty[];\n  fontFamily?: string | string[];\n  fontFeatureSettings?: FontFaceFontFeatureSettingsProperty | FontFaceFontFeatureSettingsProperty[];\n  fontStretch?: FontFaceFontStretchProperty | FontFaceFontStretchProperty[];\n  fontStyle?: FontFaceFontStyleProperty | FontFaceFontStyleProperty[];\n  fontVariant?: FontFaceFontVariantProperty | FontFaceFontVariantProperty[];\n  fontVariationSettings?: FontFaceFontVariationSettingsProperty | FontFaceFontVariationSettingsProperty[];\n  fontWeight?: FontFaceFontWeightProperty | FontFaceFontWeightProperty[];\n  src?: string | string[];\n  unicodeRange?: string | string[];\n}\n\nexport interface FontFaceHyphenFallback {\n  \"-moz-font-feature-settings\"?: FontFaceFontFeatureSettingsProperty | FontFaceFontFeatureSettingsProperty[];\n  \"font-display\"?: FontFaceFontDisplayProperty | FontFaceFontDisplayProperty[];\n  \"font-family\"?: string | string[];\n  \"font-feature-settings\"?: FontFaceFontFeatureSettingsProperty | FontFaceFontFeatureSettingsProperty[];\n  \"font-stretch\"?: FontFaceFontStretchProperty | FontFaceFontStretchProperty[];\n  \"font-style\"?: FontFaceFontStyleProperty | FontFaceFontStyleProperty[];\n  \"font-variant\"?: FontFaceFontVariantProperty | FontFaceFontVariantProperty[];\n  \"font-variation-settings\"?: FontFaceFontVariationSettingsProperty | FontFaceFontVariationSettingsProperty[];\n  \"font-weight\"?: FontFaceFontWeightProperty | FontFaceFontWeightProperty[];\n  src?: string | string[];\n  \"unicode-range\"?: string | string[];\n}\n\nexport interface Viewport<TLength = string | 0> {\n  msHeight?: ViewportHeightProperty<TLength>;\n  msMaxHeight?: ViewportMaxHeightProperty<TLength>;\n  msMaxWidth?: ViewportMaxWidthProperty<TLength>;\n  msMaxZoom?: ViewportMaxZoomProperty;\n  msMinHeight?: ViewportMinHeightProperty<TLength>;\n  msMinWidth?: ViewportMinWidthProperty<TLength>;\n  msMinZoom?: ViewportMinZoomProperty;\n  msOrientation?: ViewportOrientationProperty;\n  msUserZoom?: ViewportUserZoomProperty;\n  msWidth?: ViewportWidthProperty<TLength>;\n  msZoom?: ViewportZoomProperty;\n  OOrientation?: ViewportOrientationProperty;\n  height?: ViewportHeightProperty<TLength>;\n  maxHeight?: ViewportMaxHeightProperty<TLength>;\n  maxWidth?: ViewportMaxWidthProperty<TLength>;\n  maxZoom?: ViewportMaxZoomProperty;\n  minHeight?: ViewportMinHeightProperty<TLength>;\n  minWidth?: ViewportMinWidthProperty<TLength>;\n  minZoom?: ViewportMinZoomProperty;\n  orientation?: ViewportOrientationProperty;\n  userZoom?: ViewportUserZoomProperty;\n  width?: ViewportWidthProperty<TLength>;\n  zoom?: ViewportZoomProperty;\n}\n\nexport interface ViewportHyphen<TLength = string | 0> {\n  \"-ms-height\"?: ViewportHeightProperty<TLength>;\n  \"-ms-max-height\"?: ViewportMaxHeightProperty<TLength>;\n  \"-ms-max-width\"?: ViewportMaxWidthProperty<TLength>;\n  \"-ms-max-zoom\"?: ViewportMaxZoomProperty;\n  \"-ms-min-height\"?: ViewportMinHeightProperty<TLength>;\n  \"-ms-min-width\"?: ViewportMinWidthProperty<TLength>;\n  \"-ms-min-zoom\"?: ViewportMinZoomProperty;\n  \"-ms-orientation\"?: ViewportOrientationProperty;\n  \"-ms-user-zoom\"?: ViewportUserZoomProperty;\n  \"-ms-width\"?: ViewportWidthProperty<TLength>;\n  \"-ms-zoom\"?: ViewportZoomProperty;\n  \"-o-orientation\"?: ViewportOrientationProperty;\n  height?: ViewportHeightProperty<TLength>;\n  \"max-height\"?: ViewportMaxHeightProperty<TLength>;\n  \"max-width\"?: ViewportMaxWidthProperty<TLength>;\n  \"max-zoom\"?: ViewportMaxZoomProperty;\n  \"min-height\"?: ViewportMinHeightProperty<TLength>;\n  \"min-width\"?: ViewportMinWidthProperty<TLength>;\n  \"min-zoom\"?: ViewportMinZoomProperty;\n  orientation?: ViewportOrientationProperty;\n  \"user-zoom\"?: ViewportUserZoomProperty;\n  width?: ViewportWidthProperty<TLength>;\n  zoom?: ViewportZoomProperty;\n}\n\nexport interface ViewportFallback<TLength = string | 0> {\n  msHeight?: ViewportHeightProperty<TLength> | ViewportHeightProperty<TLength>[];\n  msMaxHeight?: ViewportMaxHeightProperty<TLength> | ViewportMaxHeightProperty<TLength>[];\n  msMaxWidth?: ViewportMaxWidthProperty<TLength> | ViewportMaxWidthProperty<TLength>[];\n  msMaxZoom?: ViewportMaxZoomProperty | ViewportMaxZoomProperty[];\n  msMinHeight?: ViewportMinHeightProperty<TLength> | ViewportMinHeightProperty<TLength>[];\n  msMinWidth?: ViewportMinWidthProperty<TLength> | ViewportMinWidthProperty<TLength>[];\n  msMinZoom?: ViewportMinZoomProperty | ViewportMinZoomProperty[];\n  msOrientation?: ViewportOrientationProperty | ViewportOrientationProperty[];\n  msUserZoom?: ViewportUserZoomProperty | ViewportUserZoomProperty[];\n  msWidth?: ViewportWidthProperty<TLength> | ViewportWidthProperty<TLength>[];\n  msZoom?: ViewportZoomProperty | ViewportZoomProperty[];\n  OOrientation?: ViewportOrientationProperty | ViewportOrientationProperty[];\n  height?: ViewportHeightProperty<TLength> | ViewportHeightProperty<TLength>[];\n  maxHeight?: ViewportMaxHeightProperty<TLength> | ViewportMaxHeightProperty<TLength>[];\n  maxWidth?: ViewportMaxWidthProperty<TLength> | ViewportMaxWidthProperty<TLength>[];\n  maxZoom?: ViewportMaxZoomProperty | ViewportMaxZoomProperty[];\n  minHeight?: ViewportMinHeightProperty<TLength> | ViewportMinHeightProperty<TLength>[];\n  minWidth?: ViewportMinWidthProperty<TLength> | ViewportMinWidthProperty<TLength>[];\n  minZoom?: ViewportMinZoomProperty | ViewportMinZoomProperty[];\n  orientation?: ViewportOrientationProperty | ViewportOrientationProperty[];\n  userZoom?: ViewportUserZoomProperty | ViewportUserZoomProperty[];\n  width?: ViewportWidthProperty<TLength> | ViewportWidthProperty<TLength>[];\n  zoom?: ViewportZoomProperty | ViewportZoomProperty[];\n}\n\nexport interface ViewportHyphenFallback<TLength = string | 0> {\n  \"-ms-height\"?: ViewportHeightProperty<TLength> | ViewportHeightProperty<TLength>[];\n  \"-ms-max-height\"?: ViewportMaxHeightProperty<TLength> | ViewportMaxHeightProperty<TLength>[];\n  \"-ms-max-width\"?: ViewportMaxWidthProperty<TLength> | ViewportMaxWidthProperty<TLength>[];\n  \"-ms-max-zoom\"?: ViewportMaxZoomProperty | ViewportMaxZoomProperty[];\n  \"-ms-min-height\"?: ViewportMinHeightProperty<TLength> | ViewportMinHeightProperty<TLength>[];\n  \"-ms-min-width\"?: ViewportMinWidthProperty<TLength> | ViewportMinWidthProperty<TLength>[];\n  \"-ms-min-zoom\"?: ViewportMinZoomProperty | ViewportMinZoomProperty[];\n  \"-ms-orientation\"?: ViewportOrientationProperty | ViewportOrientationProperty[];\n  \"-ms-user-zoom\"?: ViewportUserZoomProperty | ViewportUserZoomProperty[];\n  \"-ms-width\"?: ViewportWidthProperty<TLength> | ViewportWidthProperty<TLength>[];\n  \"-ms-zoom\"?: ViewportZoomProperty | ViewportZoomProperty[];\n  \"-o-orientation\"?: ViewportOrientationProperty | ViewportOrientationProperty[];\n  height?: ViewportHeightProperty<TLength> | ViewportHeightProperty<TLength>[];\n  \"max-height\"?: ViewportMaxHeightProperty<TLength> | ViewportMaxHeightProperty<TLength>[];\n  \"max-width\"?: ViewportMaxWidthProperty<TLength> | ViewportMaxWidthProperty<TLength>[];\n  \"max-zoom\"?: ViewportMaxZoomProperty | ViewportMaxZoomProperty[];\n  \"min-height\"?: ViewportMinHeightProperty<TLength> | ViewportMinHeightProperty<TLength>[];\n  \"min-width\"?: ViewportMinWidthProperty<TLength> | ViewportMinWidthProperty<TLength>[];\n  \"min-zoom\"?: ViewportMinZoomProperty | ViewportMinZoomProperty[];\n  orientation?: ViewportOrientationProperty | ViewportOrientationProperty[];\n  \"user-zoom\"?: ViewportUserZoomProperty | ViewportUserZoomProperty[];\n  width?: ViewportWidthProperty<TLength> | ViewportWidthProperty<TLength>[];\n  zoom?: ViewportZoomProperty | ViewportZoomProperty[];\n}\n\nexport type AtRules =\n  | \"@charset\"\n  | \"@counter-style\"\n  | \"@document\"\n  | \"@font-face\"\n  | \"@font-feature-values\"\n  | \"@import\"\n  | \"@keyframes\"\n  | \"@media\"\n  | \"@namespace\"\n  | \"@page\"\n  | \"@supports\"\n  | \"@viewport\";\n\nexport type AdvancedPseudos =\n  | \":-moz-any()\"\n  | \":-moz-dir\"\n  | \":-webkit-any()\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::part\"\n  | \"::slotted\"\n  | \":dir\"\n  | \":has\"\n  | \":host\"\n  | \":host-context\"\n  | \":is\"\n  | \":lang\"\n  | \":matches()\"\n  | \":not\"\n  | \":nth-child\"\n  | \":nth-last-child\"\n  | \":nth-last-of-type\"\n  | \":nth-of-type\"\n  | \":where\";\n\nexport type SimplePseudos =\n  | \":-khtml-any-link\"\n  | \":-moz-any-link\"\n  | \":-moz-focusring\"\n  | \":-moz-full-screen\"\n  | \":-moz-placeholder\"\n  | \":-moz-read-only\"\n  | \":-moz-read-write\"\n  | \":-ms-fullscreen\"\n  | \":-ms-input-placeholder\"\n  | \":-webkit-any-link\"\n  | \":-webkit-full-screen\"\n  | \"::-moz-placeholder\"\n  | \"::-moz-progress-bar\"\n  | \"::-moz-range-progress\"\n  | \"::-moz-range-thumb\"\n  | \"::-moz-range-track\"\n  | \"::-moz-selection\"\n  | \"::-ms-backdrop\"\n  | \"::-ms-browse\"\n  | \"::-ms-check\"\n  | \"::-ms-clear\"\n  | \"::-ms-fill\"\n  | \"::-ms-fill-lower\"\n  | \"::-ms-fill-upper\"\n  | \"::-ms-input-placeholder\"\n  | \"::-ms-reveal\"\n  | \"::-ms-thumb\"\n  | \"::-ms-ticks-after\"\n  | \"::-ms-ticks-before\"\n  | \"::-ms-tooltip\"\n  | \"::-ms-track\"\n  | \"::-ms-value\"\n  | \"::-webkit-backdrop\"\n  | \"::-webkit-input-placeholder\"\n  | \"::-webkit-progress-bar\"\n  | \"::-webkit-progress-inner-value\"\n  | \"::-webkit-progress-value\"\n  | \"::-webkit-slider-runnable-track\"\n  | \"::-webkit-slider-thumb\"\n  | \"::after\"\n  | \"::backdrop\"\n  | \"::before\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::first-letter\"\n  | \"::first-line\"\n  | \"::grammar-error\"\n  | \"::marker\"\n  | \"::placeholder\"\n  | \"::selection\"\n  | \"::spelling-error\"\n  | \":active\"\n  | \":after\"\n  | \":any-link\"\n  | \":before\"\n  | \":blank\"\n  | \":checked\"\n  | \":default\"\n  | \":defined\"\n  | \":disabled\"\n  | \":empty\"\n  | \":enabled\"\n  | \":first\"\n  | \":first-child\"\n  | \":first-letter\"\n  | \":first-line\"\n  | \":first-of-type\"\n  | \":focus\"\n  | \":focus-visible\"\n  | \":focus-within\"\n  | \":fullscreen\"\n  | \":hover\"\n  | \":in-range\"\n  | \":indeterminate\"\n  | \":invalid\"\n  | \":last-child\"\n  | \":last-of-type\"\n  | \":left\"\n  | \":link\"\n  | \":only-child\"\n  | \":only-of-type\"\n  | \":optional\"\n  | \":out-of-range\"\n  | \":placeholder-shown\"\n  | \":read-only\"\n  | \":read-write\"\n  | \":required\"\n  | \":right\"\n  | \":root\"\n  | \":scope\"\n  | \":target\"\n  | \":valid\"\n  | \":visited\";\n\nexport type Pseudos = AdvancedPseudos | SimplePseudos;\n\nexport type HtmlAttributes =\n  | \"[-webkit-dropzone]\"\n  | \"[abbr]\"\n  | \"[accept-charset]\"\n  | \"[accept]\"\n  | \"[accesskey]\"\n  | \"[action]\"\n  | \"[align]\"\n  | \"[alink]\"\n  | \"[allow]\"\n  | \"[allowfullscreen]\"\n  | \"[allowpaymentrequest]\"\n  | \"[alt]\"\n  | \"[archive]\"\n  | \"[async]\"\n  | \"[autobuffer]\"\n  | \"[autocapitalize]\"\n  | \"[autocomplete]\"\n  | \"[autofocus]\"\n  | \"[autoplay]\"\n  | \"[axis]\"\n  | \"[background]\"\n  | \"[behavior]\"\n  | \"[bgcolor]\"\n  | \"[border]\"\n  | \"[bottommargin]\"\n  | \"[buffered]\"\n  | \"[cellpadding]\"\n  | \"[cellspacing]\"\n  | \"[char]\"\n  | \"[charoff]\"\n  | \"[charset]\"\n  | \"[checked]\"\n  | \"[cite]\"\n  | \"[class]\"\n  | \"[classid]\"\n  | \"[clear]\"\n  | \"[code]\"\n  | \"[codebase]\"\n  | \"[codetype]\"\n  | \"[color]\"\n  | \"[cols]\"\n  | \"[colspan]\"\n  | \"[command]\"\n  | \"[compact]\"\n  | \"[content]\"\n  | \"[contenteditable]\"\n  | \"[contextmenu]\"\n  | \"[controls]\"\n  | \"[coords]\"\n  | \"[crossorigin]\"\n  | \"[data]\"\n  | \"[datafld]\"\n  | \"[datasrc]\"\n  | \"[datetime]\"\n  | \"[declare]\"\n  | \"[decoding]\"\n  | \"[default]\"\n  | \"[defer]\"\n  | \"[dir]\"\n  | \"[direction]\"\n  | \"[disabled]\"\n  | \"[download]\"\n  | \"[draggable]\"\n  | \"[dropzone]\"\n  | \"[enctype]\"\n  | \"[enterkeyhint]\"\n  | \"[exportparts]\"\n  | \"[face]\"\n  | \"[for]\"\n  | \"[form]\"\n  | \"[formaction]\"\n  | \"[formenctype]\"\n  | \"[formmethod]\"\n  | \"[formnovalidate]\"\n  | \"[formtarget]\"\n  | \"[frame]\"\n  | \"[frameborder]\"\n  | \"[headers]\"\n  | \"[height]\"\n  | \"[hidden]\"\n  | \"[high]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[hspace]\"\n  | \"[http-equiv]\"\n  | \"[icon]\"\n  | \"[id]\"\n  | \"[inputmode]\"\n  | \"[integrity]\"\n  | \"[intrinsicsize]\"\n  | \"[is]\"\n  | \"[ismap]\"\n  | \"[itemid]\"\n  | \"[itemprop]\"\n  | \"[itemref]\"\n  | \"[itemscope]\"\n  | \"[itemtype]\"\n  | \"[kind]\"\n  | \"[label]\"\n  | \"[lang]\"\n  | \"[language]\"\n  | \"[leftmargin]\"\n  | \"[link]\"\n  | \"[loading]\"\n  | \"[longdesc]\"\n  | \"[loop]\"\n  | \"[low]\"\n  | \"[manifest]\"\n  | \"[marginheight]\"\n  | \"[marginwidth]\"\n  | \"[max]\"\n  | \"[maxlength]\"\n  | \"[mayscript]\"\n  | \"[media]\"\n  | \"[method]\"\n  | \"[methods]\"\n  | \"[min]\"\n  | \"[minlength]\"\n  | \"[moz-opaque]\"\n  | \"[mozallowfullscreen]\"\n  | \"[mozcurrentsampleoffset]\"\n  | \"[msallowfullscreen]\"\n  | \"[multiple]\"\n  | \"[muted]\"\n  | \"[name]\"\n  | \"[nohref]\"\n  | \"[nomodule]\"\n  | \"[noresize]\"\n  | \"[noshade]\"\n  | \"[novalidate]\"\n  | \"[nowrap]\"\n  | \"[object]\"\n  | \"[onafterprint]\"\n  | \"[onbeforeprint]\"\n  | \"[onbeforeunload]\"\n  | \"[onblur]\"\n  | \"[onerror]\"\n  | \"[onfocus]\"\n  | \"[onhashchange]\"\n  | \"[onlanguagechange]\"\n  | \"[onload]\"\n  | \"[onmessage]\"\n  | \"[onoffline]\"\n  | \"[ononline]\"\n  | \"[onpopstate]\"\n  | \"[onredo]\"\n  | \"[onresize]\"\n  | \"[onstorage]\"\n  | \"[onundo]\"\n  | \"[onunload]\"\n  | \"[open]\"\n  | \"[optimum]\"\n  | \"[part]\"\n  | \"[ping]\"\n  | \"[placeholder]\"\n  | \"[played]\"\n  | \"[poster]\"\n  | \"[prefetch]\"\n  | \"[preload]\"\n  | \"[profile]\"\n  | \"[prompt]\"\n  | \"[radiogroup]\"\n  | \"[readonly]\"\n  | \"[referrerPolicy]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[required]\"\n  | \"[rev]\"\n  | \"[reversed]\"\n  | \"[rightmargin]\"\n  | \"[rows]\"\n  | \"[rowspan]\"\n  | \"[rules]\"\n  | \"[sandbox-allow-modals]\"\n  | \"[sandbox-allow-popups-to-escape-sandbox]\"\n  | \"[sandbox-allow-popups]\"\n  | \"[sandbox-allow-presentation]\"\n  | \"[sandbox-allow-storage-access-by-user-activation]\"\n  | \"[sandbox-allow-top-navigation-by-user-activation]\"\n  | \"[sandbox]\"\n  | \"[scope]\"\n  | \"[scoped]\"\n  | \"[scrollamount]\"\n  | \"[scrolldelay]\"\n  | \"[scrolling]\"\n  | \"[selected]\"\n  | \"[shape]\"\n  | \"[size]\"\n  | \"[sizes]\"\n  | \"[slot]\"\n  | \"[span]\"\n  | \"[spellcheck]\"\n  | \"[src]\"\n  | \"[srcdoc]\"\n  | \"[srclang]\"\n  | \"[srcset]\"\n  | \"[standby]\"\n  | \"[start]\"\n  | \"[style]\"\n  | \"[summary]\"\n  | \"[tabindex]\"\n  | \"[target]\"\n  | \"[text]\"\n  | \"[title]\"\n  | \"[topmargin]\"\n  | \"[translate]\"\n  | \"[truespeed]\"\n  | \"[type]\"\n  | \"[typemustmatch]\"\n  | \"[usemap]\"\n  | \"[valign]\"\n  | \"[value]\"\n  | \"[valuetype]\"\n  | \"[version]\"\n  | \"[vlink]\"\n  | \"[volume]\"\n  | \"[vspace]\"\n  | \"[webkitallowfullscreen]\"\n  | \"[width]\"\n  | \"[wrap]\"\n  | \"[xmlns]\";\n\nexport type SvgAttributes =\n  | \"[accent-height]\"\n  | \"[alignment-baseline]\"\n  | \"[allowReorder]\"\n  | \"[alphabetic]\"\n  | \"[animation]\"\n  | \"[arabic-form]\"\n  | \"[ascent]\"\n  | \"[attributeName]\"\n  | \"[attributeType]\"\n  | \"[azimuth]\"\n  | \"[baseFrequency]\"\n  | \"[baseProfile]\"\n  | \"[baseline-shift]\"\n  | \"[bbox]\"\n  | \"[begin]\"\n  | \"[bias]\"\n  | \"[by]\"\n  | \"[calcMode]\"\n  | \"[cap-height]\"\n  | \"[class]\"\n  | \"[clip-path]\"\n  | \"[clip-rule]\"\n  | \"[clipPathUnits]\"\n  | \"[clip]\"\n  | \"[color-interpolation-filters]\"\n  | \"[color-interpolation]\"\n  | \"[color-profile]\"\n  | \"[color-rendering]\"\n  | \"[color]\"\n  | \"[contentScriptType]\"\n  | \"[contentStyleType]\"\n  | \"[cursor]\"\n  | \"[cx]\"\n  | \"[cy]\"\n  | \"[d]\"\n  | \"[descent]\"\n  | \"[diffuseConstant]\"\n  | \"[direction]\"\n  | \"[display]\"\n  | \"[divisor]\"\n  | \"[document]\"\n  | \"[dominant-baseline]\"\n  | \"[download]\"\n  | \"[dur]\"\n  | \"[dx]\"\n  | \"[dy]\"\n  | \"[edgeMode]\"\n  | \"[elevation]\"\n  | \"[enable-background]\"\n  | \"[externalResourcesRequired]\"\n  | \"[fill-opacity]\"\n  | \"[fill-rule]\"\n  | \"[fill]\"\n  | \"[filterRes]\"\n  | \"[filterUnits]\"\n  | \"[filter]\"\n  | \"[flood-color]\"\n  | \"[flood-opacity]\"\n  | \"[font-family]\"\n  | \"[font-size-adjust]\"\n  | \"[font-size]\"\n  | \"[font-stretch]\"\n  | \"[font-style]\"\n  | \"[font-variant]\"\n  | \"[font-weight]\"\n  | \"[format]\"\n  | \"[fr]\"\n  | \"[from]\"\n  | \"[fx]\"\n  | \"[fy]\"\n  | \"[g1]\"\n  | \"[g2]\"\n  | \"[global]\"\n  | \"[glyph-name]\"\n  | \"[glyph-orientation-horizontal]\"\n  | \"[glyph-orientation-vertical]\"\n  | \"[glyphRef]\"\n  | \"[gradientTransform]\"\n  | \"[gradientUnits]\"\n  | \"[graphical]\"\n  | \"[hanging]\"\n  | \"[hatchContentUnits]\"\n  | \"[hatchUnits]\"\n  | \"[height]\"\n  | \"[horiz-adv-x]\"\n  | \"[horiz-origin-x]\"\n  | \"[horiz-origin-y]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[id]\"\n  | \"[ideographic]\"\n  | \"[image-rendering]\"\n  | \"[in2]\"\n  | \"[in]\"\n  | \"[k1]\"\n  | \"[k2]\"\n  | \"[k3]\"\n  | \"[k4]\"\n  | \"[k]\"\n  | \"[kernelMatrix]\"\n  | \"[kernelUnitLength]\"\n  | \"[kerning]\"\n  | \"[keyPoints]\"\n  | \"[lang]\"\n  | \"[lengthAdjust]\"\n  | \"[letter-spacing]\"\n  | \"[lighterForError]\"\n  | \"[lighting-color]\"\n  | \"[limitingConeAngle]\"\n  | \"[local]\"\n  | \"[marker-end]\"\n  | \"[marker-mid]\"\n  | \"[marker-start]\"\n  | \"[markerHeight]\"\n  | \"[markerUnits]\"\n  | \"[markerWidth]\"\n  | \"[maskContentUnits]\"\n  | \"[maskUnits]\"\n  | \"[mask]\"\n  | \"[mathematical]\"\n  | \"[media]\"\n  | \"[method]\"\n  | \"[mode]\"\n  | \"[name]\"\n  | \"[numOctaves]\"\n  | \"[offset]\"\n  | \"[opacity]\"\n  | \"[operator]\"\n  | \"[order]\"\n  | \"[orient]\"\n  | \"[orientation]\"\n  | \"[origin]\"\n  | \"[overflow]\"\n  | \"[overline-position]\"\n  | \"[overline-thickness]\"\n  | \"[paint-order]\"\n  | \"[panose-1]\"\n  | \"[path]\"\n  | \"[patternContentUnits]\"\n  | \"[patternTransform]\"\n  | \"[patternUnits]\"\n  | \"[ping]\"\n  | \"[pitch]\"\n  | \"[pointer-events]\"\n  | \"[pointsAtX]\"\n  | \"[pointsAtY]\"\n  | \"[pointsAtZ]\"\n  | \"[points]\"\n  | \"[preserveAlpha]\"\n  | \"[preserveAspectRatio]\"\n  | \"[primitiveUnits]\"\n  | \"[r]\"\n  | \"[radius]\"\n  | \"[refX]\"\n  | \"[refY]\"\n  | \"[referrerPolicy]\"\n  | \"[rel]\"\n  | \"[rendering-intent]\"\n  | \"[repeatCount]\"\n  | \"[requiredExtensions]\"\n  | \"[requiredFeatures]\"\n  | \"[rotate]\"\n  | \"[rx]\"\n  | \"[ry]\"\n  | \"[scale]\"\n  | \"[seed]\"\n  | \"[shape-rendering]\"\n  | \"[side]\"\n  | \"[slope]\"\n  | \"[solid-color]\"\n  | \"[solid-opacity]\"\n  | \"[spacing]\"\n  | \"[specularConstant]\"\n  | \"[specularExponent]\"\n  | \"[spreadMethod]\"\n  | \"[startOffset]\"\n  | \"[stdDeviation]\"\n  | \"[stemh]\"\n  | \"[stemv]\"\n  | \"[stitchTiles]\"\n  | \"[stop-color]\"\n  | \"[stop-opacity]\"\n  | \"[strikethrough-position]\"\n  | \"[strikethrough-thickness]\"\n  | \"[string]\"\n  | \"[stroke-dasharray]\"\n  | \"[stroke-dashoffset]\"\n  | \"[stroke-linecap]\"\n  | \"[stroke-linejoin]\"\n  | \"[stroke-miterlimit]\"\n  | \"[stroke-opacity]\"\n  | \"[stroke-width]\"\n  | \"[stroke]\"\n  | \"[style]\"\n  | \"[surfaceScale]\"\n  | \"[systemLanguage]\"\n  | \"[tabindex]\"\n  | \"[targetX]\"\n  | \"[targetY]\"\n  | \"[target]\"\n  | \"[text-anchor]\"\n  | \"[text-decoration]\"\n  | \"[text-overflow]\"\n  | \"[text-rendering]\"\n  | \"[textLength]\"\n  | \"[title]\"\n  | \"[to]\"\n  | \"[transform-origin]\"\n  | \"[transform]\"\n  | \"[type]\"\n  | \"[u1]\"\n  | \"[u2]\"\n  | \"[underline-position]\"\n  | \"[underline-thickness]\"\n  | \"[unicode-bidi]\"\n  | \"[unicode-range]\"\n  | \"[unicode]\"\n  | \"[units-per-em]\"\n  | \"[v-alphabetic]\"\n  | \"[v-hanging]\"\n  | \"[v-ideographic]\"\n  | \"[v-mathematical]\"\n  | \"[values]\"\n  | \"[vector-effect]\"\n  | \"[version]\"\n  | \"[vert-adv-y]\"\n  | \"[vert-origin-x]\"\n  | \"[vert-origin-y]\"\n  | \"[viewBox]\"\n  | \"[viewTarget]\"\n  | \"[visibility]\"\n  | \"[white-space]\"\n  | \"[width]\"\n  | \"[widths]\"\n  | \"[word-spacing]\"\n  | \"[writing-mode]\"\n  | \"[x-height]\"\n  | \"[x1]\"\n  | \"[x2]\"\n  | \"[xChannelSelector]\"\n  | \"[x]\"\n  | \"[y1]\"\n  | \"[y2]\"\n  | \"[yChannelSelector]\"\n  | \"[y]\"\n  | \"[z]\"\n  | \"[zoomAndPan]\";\n\nexport type Globals = \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"unset\";\n\ntype GlobalsString = Globals | string;\n\ntype GlobalsNumber = Globals | number;\n\nexport type AlignContentProperty = Globals | ContentDistribution | ContentPosition | \"baseline\" | \"normal\" | string;\n\nexport type AlignItemsProperty = Globals | SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | string;\n\nexport type AlignSelfProperty = Globals | SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | string;\n\nexport type AnimationProperty = Globals | SingleAnimation | string;\n\nexport type AnimationDirectionProperty = Globals | SingleAnimationDirection | string;\n\nexport type AnimationFillModeProperty = Globals | SingleAnimationFillMode | string;\n\nexport type AnimationIterationCountProperty = Globals | \"infinite\" | string | number;\n\nexport type AnimationNameProperty = Globals | \"none\" | string;\n\nexport type AnimationPlayStateProperty = Globals | \"paused\" | \"running\" | string;\n\nexport type AnimationTimingFunctionProperty = Globals | TimingFunction | string;\n\nexport type AppearanceProperty = Globals | CompatAuto | \"button\" | \"menulist-button\" | \"none\" | \"textfield\";\n\nexport type AspectRatioProperty = Globals | \"auto\" | string;\n\nexport type BackdropFilterProperty = Globals | \"none\" | string;\n\nexport type BackfaceVisibilityProperty = Globals | \"hidden\" | \"visible\";\n\nexport type BackgroundProperty<TLength> = Globals | FinalBgLayer<TLength> | string;\n\nexport type BackgroundAttachmentProperty = Globals | Attachment | string;\n\nexport type BackgroundBlendModeProperty = Globals | BlendMode | string;\n\nexport type BackgroundClipProperty = Globals | Box | string;\n\nexport type BackgroundColorProperty = Globals | Color;\n\nexport type BackgroundImageProperty = Globals | \"none\" | string;\n\nexport type BackgroundOriginProperty = Globals | Box | string;\n\nexport type BackgroundPositionProperty<TLength> = Globals | BgPosition<TLength> | string;\n\nexport type BackgroundPositionXProperty<TLength> = Globals | TLength | \"center\" | \"left\" | \"right\" | \"x-end\" | \"x-start\" | string;\n\nexport type BackgroundPositionYProperty<TLength> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | \"y-end\" | \"y-start\" | string;\n\nexport type BackgroundRepeatProperty = Globals | RepeatStyle | string;\n\nexport type BackgroundSizeProperty<TLength> = Globals | BgSize<TLength> | string;\n\nexport type BlockOverflowProperty = Globals | \"clip\" | \"ellipsis\" | string;\n\nexport type BlockSizeProperty<TLength> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"auto\" | \"max-content\" | \"min-content\" | string;\n\nexport type BorderProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderBlockProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderBlockColorProperty = Globals | Color | string;\n\nexport type BorderBlockEndProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderBlockEndColorProperty = Globals | Color;\n\nexport type BorderBlockEndStyleProperty = Globals | LineStyle;\n\nexport type BorderBlockEndWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderBlockStartProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderBlockStartColorProperty = Globals | Color;\n\nexport type BorderBlockStartStyleProperty = Globals | LineStyle;\n\nexport type BorderBlockStartWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderBlockStyleProperty = Globals | LineStyle;\n\nexport type BorderBlockWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderBottomProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderBottomColorProperty = Globals | Color;\n\nexport type BorderBottomLeftRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderBottomRightRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderBottomStyleProperty = Globals | LineStyle;\n\nexport type BorderBottomWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderCollapseProperty = Globals | \"collapse\" | \"separate\";\n\nexport type BorderColorProperty = Globals | Color | string;\n\nexport type BorderEndEndRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderEndStartRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderImageProperty = Globals | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | string | number;\n\nexport type BorderImageOutsetProperty<TLength> = Globals | TLength | string | number;\n\nexport type BorderImageRepeatProperty = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | string;\n\nexport type BorderImageSliceProperty = Globals | string | number;\n\nexport type BorderImageSourceProperty = Globals | \"none\" | string;\n\nexport type BorderImageWidthProperty<TLength> = Globals | TLength | \"auto\" | string | number;\n\nexport type BorderInlineProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderInlineColorProperty = Globals | Color | string;\n\nexport type BorderInlineEndProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderInlineEndColorProperty = Globals | Color;\n\nexport type BorderInlineEndStyleProperty = Globals | LineStyle;\n\nexport type BorderInlineEndWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderInlineStartProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderInlineStartColorProperty = Globals | Color;\n\nexport type BorderInlineStartStyleProperty = Globals | LineStyle;\n\nexport type BorderInlineStartWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderInlineStyleProperty = Globals | LineStyle;\n\nexport type BorderInlineWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderLeftProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderLeftColorProperty = Globals | Color;\n\nexport type BorderLeftStyleProperty = Globals | LineStyle;\n\nexport type BorderLeftWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderRightProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderRightColorProperty = Globals | Color;\n\nexport type BorderRightStyleProperty = Globals | LineStyle;\n\nexport type BorderRightWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderSpacingProperty<TLength> = Globals | TLength | string;\n\nexport type BorderStartEndRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderStartStartRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderStyleProperty = Globals | LineStyle | string;\n\nexport type BorderTopProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type BorderTopColorProperty = Globals | Color;\n\nexport type BorderTopLeftRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderTopRightRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type BorderTopStyleProperty = Globals | LineStyle;\n\nexport type BorderTopWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type BorderWidthProperty<TLength> = Globals | LineWidth<TLength> | string;\n\nexport type BottomProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type BoxAlignProperty = Globals | \"baseline\" | \"center\" | \"end\" | \"start\" | \"stretch\";\n\nexport type BoxDecorationBreakProperty = Globals | \"clone\" | \"slice\";\n\nexport type BoxDirectionProperty = Globals | \"inherit\" | \"normal\" | \"reverse\";\n\nexport type BoxLinesProperty = Globals | \"multiple\" | \"single\";\n\nexport type BoxOrientProperty = Globals | \"block-axis\" | \"horizontal\" | \"inherit\" | \"inline-axis\" | \"vertical\";\n\nexport type BoxPackProperty = Globals | \"center\" | \"end\" | \"justify\" | \"start\";\n\nexport type BoxShadowProperty = Globals | \"none\" | string;\n\nexport type BoxSizingProperty = Globals | \"border-box\" | \"content-box\";\n\nexport type BreakAfterProperty =\n  | Globals\n  | \"all\"\n  | \"always\"\n  | \"auto\"\n  | \"avoid\"\n  | \"avoid-column\"\n  | \"avoid-page\"\n  | \"avoid-region\"\n  | \"column\"\n  | \"left\"\n  | \"page\"\n  | \"recto\"\n  | \"region\"\n  | \"right\"\n  | \"verso\";\n\nexport type BreakBeforeProperty =\n  | Globals\n  | \"all\"\n  | \"always\"\n  | \"auto\"\n  | \"avoid\"\n  | \"avoid-column\"\n  | \"avoid-page\"\n  | \"avoid-region\"\n  | \"column\"\n  | \"left\"\n  | \"page\"\n  | \"recto\"\n  | \"region\"\n  | \"right\"\n  | \"verso\";\n\nexport type BreakInsideProperty = Globals | \"auto\" | \"avoid\" | \"avoid-column\" | \"avoid-page\" | \"avoid-region\";\n\nexport type CaptionSideProperty = Globals | \"block-end\" | \"block-start\" | \"bottom\" | \"inline-end\" | \"inline-start\" | \"top\";\n\nexport type CaretColorProperty = Globals | Color | \"auto\";\n\nexport type ClearProperty = Globals | \"both\" | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\nexport type ClipProperty = Globals | \"auto\" | string;\n\nexport type ClipPathProperty = Globals | GeometryBox | \"none\" | string;\n\nexport type ColorProperty = Globals | Color;\n\nexport type ColorAdjustProperty = Globals | \"economy\" | \"exact\";\n\nexport type ColumnCountProperty = Globals | \"auto\" | number;\n\nexport type ColumnFillProperty = Globals | \"auto\" | \"balance\";\n\nexport type ColumnGapProperty<TLength> = Globals | TLength | \"normal\" | string;\n\nexport type ColumnRuleProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type ColumnRuleColorProperty = Globals | Color;\n\nexport type ColumnRuleStyleProperty = Globals | LineStyle | string;\n\nexport type ColumnRuleWidthProperty<TLength> = Globals | LineWidth<TLength> | string;\n\nexport type ColumnSpanProperty = Globals | \"all\" | \"none\";\n\nexport type ColumnWidthProperty<TLength> = Globals | TLength | \"auto\";\n\nexport type ColumnsProperty<TLength> = Globals | TLength | \"auto\" | string | number;\n\nexport type ContainProperty = Globals | \"content\" | \"layout\" | \"none\" | \"paint\" | \"size\" | \"strict\" | \"style\" | string;\n\nexport type ContentProperty = Globals | ContentList | \"none\" | \"normal\" | string;\n\nexport type CounterIncrementProperty = Globals | \"none\" | string;\n\nexport type CounterResetProperty = Globals | \"none\" | string;\n\nexport type CounterSetProperty = Globals | \"none\" | string;\n\nexport type CursorProperty =\n  | Globals\n  | \"-moz-grab\"\n  | \"-webkit-grab\"\n  | \"alias\"\n  | \"all-scroll\"\n  | \"auto\"\n  | \"cell\"\n  | \"col-resize\"\n  | \"context-menu\"\n  | \"copy\"\n  | \"crosshair\"\n  | \"default\"\n  | \"e-resize\"\n  | \"ew-resize\"\n  | \"grab\"\n  | \"grabbing\"\n  | \"help\"\n  | \"move\"\n  | \"n-resize\"\n  | \"ne-resize\"\n  | \"nesw-resize\"\n  | \"no-drop\"\n  | \"none\"\n  | \"not-allowed\"\n  | \"ns-resize\"\n  | \"nw-resize\"\n  | \"nwse-resize\"\n  | \"pointer\"\n  | \"progress\"\n  | \"row-resize\"\n  | \"s-resize\"\n  | \"se-resize\"\n  | \"sw-resize\"\n  | \"text\"\n  | \"vertical-text\"\n  | \"w-resize\"\n  | \"wait\"\n  | \"zoom-in\"\n  | \"zoom-out\"\n  | string;\n\nexport type DirectionProperty = Globals | \"ltr\" | \"rtl\";\n\nexport type DisplayProperty = Globals | DisplayOutside | DisplayInside | DisplayInternal | DisplayLegacy | \"contents\" | \"list-item\" | \"none\" | string;\n\nexport type EmptyCellsProperty = Globals | \"hide\" | \"show\";\n\nexport type FilterProperty = Globals | \"none\" | string;\n\nexport type FlexProperty<TLength> = Globals | TLength | \"auto\" | \"content\" | \"max-content\" | \"min-content\" | \"none\" | string | number;\n\nexport type FlexBasisProperty<TLength> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-auto\" | \"auto\" | \"content\" | \"max-content\" | \"min-content\" | string;\n\nexport type FlexDirectionProperty = Globals | \"column\" | \"column-reverse\" | \"row\" | \"row-reverse\";\n\nexport type FlexFlowProperty = Globals | \"column\" | \"column-reverse\" | \"nowrap\" | \"row\" | \"row-reverse\" | \"wrap\" | \"wrap-reverse\" | string;\n\nexport type FlexWrapProperty = Globals | \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n\nexport type FloatProperty = Globals | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\nexport type FontProperty = Globals | \"caption\" | \"icon\" | \"menu\" | \"message-box\" | \"small-caption\" | \"status-bar\" | string;\n\nexport type FontFamilyProperty = Globals | GenericFamily | string;\n\nexport type FontFeatureSettingsProperty = Globals | \"normal\" | string;\n\nexport type FontKerningProperty = Globals | \"auto\" | \"none\" | \"normal\";\n\nexport type FontLanguageOverrideProperty = Globals | \"normal\" | string;\n\nexport type FontOpticalSizingProperty = Globals | \"auto\" | \"none\";\n\nexport type FontSizeProperty<TLength> = Globals | AbsoluteSize | TLength | \"larger\" | \"smaller\" | string;\n\nexport type FontSizeAdjustProperty = Globals | \"none\" | number;\n\nexport type FontStretchProperty = Globals | FontStretchAbsolute;\n\nexport type FontStyleProperty = Globals | \"italic\" | \"normal\" | \"oblique\" | string;\n\nexport type FontSynthesisProperty = Globals | \"none\" | \"style\" | \"weight\" | string;\n\nexport type FontVariantProperty =\n  | Globals\n  | EastAsianVariantValues\n  | \"all-petite-caps\"\n  | \"all-small-caps\"\n  | \"common-ligatures\"\n  | \"contextual\"\n  | \"diagonal-fractions\"\n  | \"discretionary-ligatures\"\n  | \"full-width\"\n  | \"historical-forms\"\n  | \"historical-ligatures\"\n  | \"lining-nums\"\n  | \"no-common-ligatures\"\n  | \"no-contextual\"\n  | \"no-discretionary-ligatures\"\n  | \"no-historical-ligatures\"\n  | \"none\"\n  | \"normal\"\n  | \"oldstyle-nums\"\n  | \"ordinal\"\n  | \"petite-caps\"\n  | \"proportional-nums\"\n  | \"proportional-width\"\n  | \"ruby\"\n  | \"slashed-zero\"\n  | \"small-caps\"\n  | \"stacked-fractions\"\n  | \"tabular-nums\"\n  | \"titling-caps\"\n  | \"unicase\"\n  | string;\n\nexport type FontVariantAlternatesProperty = Globals | \"historical-forms\" | \"normal\" | string;\n\nexport type FontVariantCapsProperty = Globals | \"all-petite-caps\" | \"all-small-caps\" | \"normal\" | \"petite-caps\" | \"small-caps\" | \"titling-caps\" | \"unicase\";\n\nexport type FontVariantEastAsianProperty = Globals | EastAsianVariantValues | \"full-width\" | \"normal\" | \"proportional-width\" | \"ruby\" | string;\n\nexport type FontVariantLigaturesProperty =\n  | Globals\n  | \"common-ligatures\"\n  | \"contextual\"\n  | \"discretionary-ligatures\"\n  | \"historical-ligatures\"\n  | \"no-common-ligatures\"\n  | \"no-contextual\"\n  | \"no-discretionary-ligatures\"\n  | \"no-historical-ligatures\"\n  | \"none\"\n  | \"normal\"\n  | string;\n\nexport type FontVariantNumericProperty =\n  | Globals\n  | \"diagonal-fractions\"\n  | \"lining-nums\"\n  | \"normal\"\n  | \"oldstyle-nums\"\n  | \"ordinal\"\n  | \"proportional-nums\"\n  | \"slashed-zero\"\n  | \"stacked-fractions\"\n  | \"tabular-nums\"\n  | string;\n\nexport type FontVariantPositionProperty = Globals | \"normal\" | \"sub\" | \"super\";\n\nexport type FontVariationSettingsProperty = Globals | \"normal\" | string;\n\nexport type FontWeightProperty = Globals | FontWeightAbsolute | \"bolder\" | \"lighter\";\n\nexport type GapProperty<TLength> = Globals | TLength | \"normal\" | string;\n\nexport type GridProperty = Globals | \"none\" | string;\n\nexport type GridAreaProperty = Globals | GridLine | string;\n\nexport type GridAutoColumnsProperty<TLength> = Globals | TrackBreadth<TLength> | string;\n\nexport type GridAutoFlowProperty = Globals | \"column\" | \"dense\" | \"row\" | string;\n\nexport type GridAutoRowsProperty<TLength> = Globals | TrackBreadth<TLength> | string;\n\nexport type GridColumnProperty = Globals | GridLine | string;\n\nexport type GridColumnEndProperty = Globals | GridLine;\n\nexport type GridColumnGapProperty<TLength> = Globals | TLength | string;\n\nexport type GridColumnStartProperty = Globals | GridLine;\n\nexport type GridGapProperty<TLength> = Globals | TLength | string;\n\nexport type GridRowProperty = Globals | GridLine | string;\n\nexport type GridRowEndProperty = Globals | GridLine;\n\nexport type GridRowGapProperty<TLength> = Globals | TLength | string;\n\nexport type GridRowStartProperty = Globals | GridLine;\n\nexport type GridTemplateProperty = Globals | \"none\" | string;\n\nexport type GridTemplateAreasProperty = Globals | \"none\" | string;\n\nexport type GridTemplateColumnsProperty<TLength> = Globals | TrackBreadth<TLength> | \"none\" | \"subgrid\" | string;\n\nexport type GridTemplateRowsProperty<TLength> = Globals | TrackBreadth<TLength> | \"none\" | \"subgrid\" | string;\n\nexport type HangingPunctuationProperty = Globals | \"allow-end\" | \"first\" | \"force-end\" | \"last\" | \"none\" | string;\n\nexport type HeightProperty<TLength> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"auto\" | \"max-content\" | \"min-content\" | string;\n\nexport type HyphensProperty = Globals | \"auto\" | \"manual\" | \"none\";\n\nexport type ImageOrientationProperty = Globals | \"flip\" | \"from-image\" | string;\n\nexport type ImageRenderingProperty = Globals | \"-moz-crisp-edges\" | \"-webkit-optimize-contrast\" | \"auto\" | \"crisp-edges\" | \"pixelated\";\n\nexport type ImageResolutionProperty = Globals | \"from-image\" | string;\n\nexport type ImeModeProperty = Globals | \"active\" | \"auto\" | \"disabled\" | \"inactive\" | \"normal\";\n\nexport type InitialLetterProperty = Globals | \"normal\" | string | number;\n\nexport type InlineSizeProperty<TLength> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"auto\" | \"max-content\" | \"min-content\" | string;\n\nexport type InsetProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type InsetBlockProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type InsetBlockEndProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type InsetBlockStartProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type InsetInlineProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type InsetInlineEndProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type InsetInlineStartProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type IsolationProperty = Globals | \"auto\" | \"isolate\";\n\nexport type JustifyContentProperty = Globals | ContentDistribution | ContentPosition | \"left\" | \"normal\" | \"right\" | string;\n\nexport type JustifyItemsProperty = Globals | SelfPosition | \"baseline\" | \"left\" | \"legacy\" | \"normal\" | \"right\" | \"stretch\" | string;\n\nexport type JustifySelfProperty = Globals | SelfPosition | \"auto\" | \"baseline\" | \"left\" | \"normal\" | \"right\" | \"stretch\" | string;\n\nexport type LeftProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type LetterSpacingProperty<TLength> = Globals | TLength | \"normal\";\n\nexport type LineBreakProperty = Globals | \"anywhere\" | \"auto\" | \"loose\" | \"normal\" | \"strict\";\n\nexport type LineClampProperty = Globals | \"none\" | number;\n\nexport type LineHeightProperty<TLength> = Globals | TLength | \"normal\" | string | number;\n\nexport type LineHeightStepProperty<TLength> = Globals | TLength;\n\nexport type ListStyleProperty = Globals | \"inside\" | \"none\" | \"outside\" | string;\n\nexport type ListStyleImageProperty = Globals | \"none\" | string;\n\nexport type ListStylePositionProperty = Globals | \"inside\" | \"outside\";\n\nexport type ListStyleTypeProperty = Globals | \"none\" | string;\n\nexport type MarginProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginBlockProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginBlockEndProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginBlockStartProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginBottomProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginInlineProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginInlineEndProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginInlineStartProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginLeftProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginRightProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MarginTopProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type MaskProperty<TLength> = Globals | MaskLayer<TLength> | string;\n\nexport type MaskBorderProperty = Globals | \"alpha\" | \"luminance\" | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | string | number;\n\nexport type MaskBorderModeProperty = Globals | \"alpha\" | \"luminance\";\n\nexport type MaskBorderOutsetProperty<TLength> = Globals | TLength | string | number;\n\nexport type MaskBorderRepeatProperty = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | string;\n\nexport type MaskBorderSliceProperty = Globals | string | number;\n\nexport type MaskBorderSourceProperty = Globals | \"none\" | string;\n\nexport type MaskBorderWidthProperty<TLength> = Globals | TLength | \"auto\" | string | number;\n\nexport type MaskClipProperty = Globals | GeometryBox | \"no-clip\" | string;\n\nexport type MaskCompositeProperty = Globals | CompositingOperator | string;\n\nexport type MaskImageProperty = Globals | \"none\" | string;\n\nexport type MaskModeProperty = Globals | MaskingMode | string;\n\nexport type MaskOriginProperty = Globals | Box | \"margin-box\" | string;\n\nexport type MaskPositionProperty<TLength> = Globals | Position<TLength> | string;\n\nexport type MaskRepeatProperty = Globals | RepeatStyle | string;\n\nexport type MaskSizeProperty<TLength> = Globals | BgSize<TLength> | string;\n\nexport type MaskTypeProperty = Globals | \"alpha\" | \"luminance\";\n\nexport type MaxBlockSizeProperty<TLength> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"auto\" | \"max-content\" | \"min-content\" | string;\n\nexport type MaxHeightProperty<TLength> =\n  | Globals\n  | TLength\n  | \"-moz-max-content\"\n  | \"-moz-min-content\"\n  | \"-webkit-max-content\"\n  | \"-webkit-min-content\"\n  | \"auto\"\n  | \"max-content\"\n  | \"min-content\"\n  | string;\n\nexport type MaxInlineSizeProperty<TLength> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"auto\" | \"max-content\" | \"min-content\" | string;\n\nexport type MaxLinesProperty = Globals | \"none\" | number;\n\nexport type MaxWidthProperty<TLength> =\n  | Globals\n  | TLength\n  | \"-moz-max-content\"\n  | \"-moz-min-content\"\n  | \"-webkit-max-content\"\n  | \"-webkit-min-content\"\n  | \"auto\"\n  | \"intrinsic\"\n  | \"max-content\"\n  | \"min-content\"\n  | string;\n\nexport type MinBlockSizeProperty<TLength> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"auto\" | \"max-content\" | \"min-content\" | string;\n\nexport type MinHeightProperty<TLength> =\n  | Globals\n  | TLength\n  | \"-moz-max-content\"\n  | \"-moz-min-content\"\n  | \"-webkit-max-content\"\n  | \"-webkit-min-content\"\n  | \"auto\"\n  | \"max-content\"\n  | \"min-content\"\n  | string;\n\nexport type MinInlineSizeProperty<TLength> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"auto\" | \"max-content\" | \"min-content\" | string;\n\nexport type MinWidthProperty<TLength> =\n  | Globals\n  | TLength\n  | \"-moz-max-content\"\n  | \"-moz-min-content\"\n  | \"-webkit-max-content\"\n  | \"-webkit-min-content\"\n  | \"auto\"\n  | \"intrinsic\"\n  | \"max-content\"\n  | \"min-content\"\n  | \"min-intrinsic\"\n  | string;\n\nexport type MixBlendModeProperty = Globals | BlendMode;\n\nexport type OffsetProperty<TLength> = Globals | Position<TLength> | GeometryBox | \"auto\" | \"none\" | string;\n\nexport type OffsetDistanceProperty<TLength> = Globals | TLength | string;\n\nexport type OffsetPathProperty = Globals | GeometryBox | \"none\" | string;\n\nexport type OffsetRotateProperty = Globals | \"auto\" | \"reverse\" | string;\n\nexport type ObjectFitProperty = Globals | \"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\";\n\nexport type ObjectPositionProperty<TLength> = Globals | Position<TLength>;\n\nexport type OffsetAnchorProperty<TLength> = Globals | Position<TLength> | \"auto\";\n\nexport type OpacityProperty = Globals | string | number;\n\nexport type OutlineProperty<TLength> = Globals | Color | LineStyle | LineWidth<TLength> | \"auto\" | \"invert\" | string;\n\nexport type OutlineColorProperty = Globals | Color | \"invert\";\n\nexport type OutlineOffsetProperty<TLength> = Globals | TLength;\n\nexport type OutlineStyleProperty = Globals | LineStyle | \"auto\" | string;\n\nexport type OutlineWidthProperty<TLength> = Globals | LineWidth<TLength>;\n\nexport type OverflowProperty = Globals | \"auto\" | \"hidden\" | \"scroll\" | \"visible\" | string;\n\nexport type OverflowAnchorProperty = Globals | \"auto\" | \"none\";\n\nexport type OverflowBlockProperty = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\nexport type OverflowClipBoxProperty = Globals | \"content-box\" | \"padding-box\";\n\nexport type OverflowInlineProperty = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\nexport type OverflowWrapProperty = Globals | \"anywhere\" | \"break-word\" | \"normal\";\n\nexport type OverflowXProperty = Globals | \"auto\" | \"hidden\" | \"scroll\" | \"visible\";\n\nexport type OverflowYProperty = Globals | \"auto\" | \"hidden\" | \"scroll\" | \"visible\";\n\nexport type OverscrollBehaviorProperty = Globals | \"auto\" | \"contain\" | \"none\" | string;\n\nexport type OverscrollBehaviorBlockProperty = Globals | \"auto\" | \"contain\" | \"none\";\n\nexport type OverscrollBehaviorInlineProperty = Globals | \"auto\" | \"contain\" | \"none\";\n\nexport type OverscrollBehaviorXProperty = Globals | \"auto\" | \"contain\" | \"none\";\n\nexport type OverscrollBehaviorYProperty = Globals | \"auto\" | \"contain\" | \"none\";\n\nexport type PaddingProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingBlockProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingBlockEndProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingBlockStartProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingBottomProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingInlineProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingInlineEndProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingInlineStartProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingLeftProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingRightProperty<TLength> = Globals | TLength | string;\n\nexport type PaddingTopProperty<TLength> = Globals | TLength | string;\n\nexport type PageBreakAfterProperty = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\nexport type PageBreakBeforeProperty = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\nexport type PageBreakInsideProperty = Globals | \"auto\" | \"avoid\";\n\nexport type PaintOrderProperty = Globals | \"fill\" | \"markers\" | \"normal\" | \"stroke\" | string;\n\nexport type PerspectiveProperty<TLength> = Globals | TLength | \"none\";\n\nexport type PerspectiveOriginProperty<TLength> = Globals | Position<TLength>;\n\nexport type PlaceContentProperty = Globals | ContentDistribution | ContentPosition | \"baseline\" | \"normal\" | string;\n\nexport type PlaceItemsProperty = Globals | SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | string;\n\nexport type PlaceSelfProperty = Globals | SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | string;\n\nexport type PointerEventsProperty = Globals | \"all\" | \"auto\" | \"fill\" | \"inherit\" | \"none\" | \"painted\" | \"stroke\" | \"visible\" | \"visibleFill\" | \"visiblePainted\" | \"visibleStroke\";\n\nexport type PositionProperty = Globals | \"-webkit-sticky\" | \"absolute\" | \"fixed\" | \"relative\" | \"static\" | \"sticky\";\n\nexport type QuotesProperty = Globals | \"auto\" | \"none\" | string;\n\nexport type ResizeProperty = Globals | \"block\" | \"both\" | \"horizontal\" | \"inline\" | \"none\" | \"vertical\";\n\nexport type RightProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type RotateProperty = Globals | \"none\" | string;\n\nexport type RowGapProperty<TLength> = Globals | TLength | \"normal\" | string;\n\nexport type RubyAlignProperty = Globals | \"center\" | \"space-around\" | \"space-between\" | \"start\";\n\nexport type RubyMergeProperty = Globals | \"auto\" | \"collapse\" | \"separate\";\n\nexport type RubyPositionProperty = Globals | \"over\" | \"under\";\n\nexport type ScaleProperty = Globals | \"none\" | string | number;\n\nexport type ScrollBehaviorProperty = Globals | \"auto\" | \"smooth\";\n\nexport type ScrollMarginProperty<TLength> = Globals | TLength | string;\n\nexport type ScrollMarginBlockProperty<TLength> = Globals | TLength | string;\n\nexport type ScrollMarginBlockEndProperty<TLength> = Globals | TLength;\n\nexport type ScrollMarginBlockStartProperty<TLength> = Globals | TLength;\n\nexport type ScrollMarginBottomProperty<TLength> = Globals | TLength;\n\nexport type ScrollMarginInlineProperty<TLength> = Globals | TLength | string;\n\nexport type ScrollMarginInlineEndProperty<TLength> = Globals | TLength;\n\nexport type ScrollMarginInlineStartProperty<TLength> = Globals | TLength;\n\nexport type ScrollMarginLeftProperty<TLength> = Globals | TLength;\n\nexport type ScrollMarginRightProperty<TLength> = Globals | TLength;\n\nexport type ScrollMarginTopProperty<TLength> = Globals | TLength;\n\nexport type ScrollPaddingProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingBlockProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingBlockEndProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingBlockStartProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingBottomProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingInlineProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingInlineEndProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingInlineStartProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingLeftProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingRightProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollPaddingTopProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type ScrollSnapAlignProperty = Globals | \"center\" | \"end\" | \"none\" | \"start\" | string;\n\nexport type ScrollSnapCoordinateProperty<TLength> = Globals | Position<TLength> | \"none\" | string;\n\nexport type ScrollSnapDestinationProperty<TLength> = Globals | Position<TLength>;\n\nexport type ScrollSnapPointsXProperty = Globals | \"none\" | string;\n\nexport type ScrollSnapPointsYProperty = Globals | \"none\" | string;\n\nexport type ScrollSnapStopProperty = Globals | \"always\" | \"normal\";\n\nexport type ScrollSnapTypeProperty = Globals | \"block\" | \"both\" | \"inline\" | \"none\" | \"x\" | \"y\" | string;\n\nexport type ScrollSnapTypeXProperty = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\nexport type ScrollSnapTypeYProperty = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\nexport type ScrollbarColorProperty = Globals | Color | \"auto\" | \"dark\" | \"light\";\n\nexport type MsScrollbarTrackColorProperty = Globals | Color;\n\nexport type ScrollbarWidthProperty = Globals | \"auto\" | \"none\" | \"thin\";\n\nexport type ShapeImageThresholdProperty = Globals | string | number;\n\nexport type ShapeMarginProperty<TLength> = Globals | TLength | string;\n\nexport type ShapeOutsideProperty = Globals | Box | \"margin-box\" | \"none\" | string;\n\nexport type TabSizeProperty<TLength> = Globals | TLength | number;\n\nexport type TableLayoutProperty = Globals | \"auto\" | \"fixed\";\n\nexport type TextAlignProperty = Globals | \"center\" | \"end\" | \"justify\" | \"left\" | \"match-parent\" | \"right\" | \"start\";\n\nexport type TextAlignLastProperty = Globals | \"auto\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"right\" | \"start\";\n\nexport type TextCombineUprightProperty = Globals | \"all\" | \"digits\" | \"none\" | string;\n\nexport type TextDecorationProperty<TLength> =\n  | Globals\n  | Color\n  | TLength\n  | \"auto\"\n  | \"blink\"\n  | \"dashed\"\n  | \"dotted\"\n  | \"double\"\n  | \"from-font\"\n  | \"grammar-error\"\n  | \"line-through\"\n  | \"none\"\n  | \"overline\"\n  | \"solid\"\n  | \"spelling-error\"\n  | \"underline\"\n  | \"wavy\"\n  | string;\n\nexport type TextDecorationColorProperty = Globals | Color;\n\nexport type TextDecorationLineProperty = Globals | \"blink\" | \"grammar-error\" | \"line-through\" | \"none\" | \"overline\" | \"spelling-error\" | \"underline\" | string;\n\nexport type TextDecorationSkipProperty = Globals | \"box-decoration\" | \"edges\" | \"leading-spaces\" | \"none\" | \"objects\" | \"spaces\" | \"trailing-spaces\" | string;\n\nexport type TextDecorationSkipInkProperty = Globals | \"all\" | \"auto\" | \"none\";\n\nexport type TextDecorationStyleProperty = Globals | \"dashed\" | \"dotted\" | \"double\" | \"solid\" | \"wavy\";\n\nexport type TextDecorationThicknessProperty<TLength> = Globals | TLength | \"auto\" | \"from-font\" | string;\n\nexport type TextEmphasisProperty = Globals | Color | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | string;\n\nexport type TextEmphasisColorProperty = Globals | Color;\n\nexport type TextEmphasisStyleProperty = Globals | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | string;\n\nexport type TextIndentProperty<TLength> = Globals | TLength | string;\n\nexport type TextJustifyProperty = Globals | \"auto\" | \"inter-character\" | \"inter-word\" | \"none\";\n\nexport type TextOrientationProperty = Globals | \"mixed\" | \"sideways\" | \"upright\";\n\nexport type TextOverflowProperty = Globals | \"clip\" | \"ellipsis\" | string;\n\nexport type TextRenderingProperty = Globals | \"auto\" | \"geometricPrecision\" | \"optimizeLegibility\" | \"optimizeSpeed\";\n\nexport type TextShadowProperty = Globals | \"none\" | string;\n\nexport type TextSizeAdjustProperty = Globals | \"auto\" | \"none\" | string;\n\nexport type TextTransformProperty = Globals | \"capitalize\" | \"full-size-kana\" | \"full-width\" | \"lowercase\" | \"none\" | \"uppercase\";\n\nexport type TextUnderlineOffsetProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type TextUnderlinePositionProperty = Globals | \"auto\" | \"from-font\" | \"left\" | \"right\" | \"under\" | string;\n\nexport type TopProperty<TLength> = Globals | TLength | \"auto\" | string;\n\nexport type TouchActionProperty =\n  | Globals\n  | \"-ms-manipulation\"\n  | \"-ms-none\"\n  | \"-ms-pinch-zoom\"\n  | \"auto\"\n  | \"manipulation\"\n  | \"none\"\n  | \"pan-down\"\n  | \"pan-left\"\n  | \"pan-right\"\n  | \"pan-up\"\n  | \"pan-x\"\n  | \"pan-y\"\n  | \"pinch-zoom\"\n  | string;\n\nexport type TransformProperty = Globals | \"none\" | string;\n\nexport type TransformBoxProperty = Globals | \"border-box\" | \"content-box\" | \"fill-box\" | \"stroke-box\" | \"view-box\";\n\nexport type TransformOriginProperty<TLength> = Globals | TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | string;\n\nexport type TransformStyleProperty = Globals | \"flat\" | \"preserve-3d\";\n\nexport type TransitionProperty = Globals | SingleTransition | string;\n\nexport type TransitionPropertyProperty = Globals | \"all\" | \"none\" | string;\n\nexport type TransitionTimingFunctionProperty = Globals | TimingFunction | string;\n\nexport type TranslateProperty<TLength> = Globals | TLength | \"none\" | string;\n\nexport type UnicodeBidiProperty =\n  | Globals\n  | \"-moz-isolate\"\n  | \"-moz-isolate-override\"\n  | \"-moz-plaintext\"\n  | \"-webkit-isolate\"\n  | \"bidi-override\"\n  | \"embed\"\n  | \"isolate\"\n  | \"isolate-override\"\n  | \"normal\"\n  | \"plaintext\";\n\nexport type UserSelectProperty = Globals | \"-moz-none\" | \"all\" | \"auto\" | \"contain\" | \"element\" | \"none\" | \"text\";\n\nexport type VerticalAlignProperty<TLength> = Globals | TLength | \"baseline\" | \"bottom\" | \"middle\" | \"sub\" | \"super\" | \"text-bottom\" | \"text-top\" | \"top\" | string;\n\nexport type VisibilityProperty = Globals | \"collapse\" | \"hidden\" | \"visible\";\n\nexport type WhiteSpaceProperty = Globals | \"-moz-pre-wrap\" | \"break-spaces\" | \"normal\" | \"nowrap\" | \"pre\" | \"pre-line\" | \"pre-wrap\";\n\nexport type WidthProperty<TLength> =\n  | Globals\n  | TLength\n  | \"-moz-max-content\"\n  | \"-moz-min-content\"\n  | \"-webkit-max-content\"\n  | \"auto\"\n  | \"intrinsic\"\n  | \"max-content\"\n  | \"min-content\"\n  | \"min-intrinsic\"\n  | string;\n\nexport type WillChangeProperty = Globals | AnimateableFeature | \"auto\" | string;\n\nexport type WordBreakProperty = Globals | \"break-all\" | \"break-word\" | \"keep-all\" | \"normal\";\n\nexport type WordSpacingProperty<TLength> = Globals | TLength | \"normal\" | string;\n\nexport type WordWrapProperty = Globals | \"break-word\" | \"normal\";\n\nexport type WritingModeProperty = Globals | \"horizontal-tb\" | \"sideways-lr\" | \"sideways-rl\" | \"vertical-lr\" | \"vertical-rl\";\n\nexport type ZIndexProperty = Globals | \"auto\" | number;\n\nexport type ZoomProperty = Globals | \"normal\" | \"reset\" | string | number;\n\nexport type MozAppearanceProperty =\n  | Globals\n  | \"-moz-mac-unified-toolbar\"\n  | \"-moz-win-borderless-glass\"\n  | \"-moz-win-browsertabbar-toolbox\"\n  | \"-moz-win-communications-toolbox\"\n  | \"-moz-win-communicationstext\"\n  | \"-moz-win-exclude-glass\"\n  | \"-moz-win-glass\"\n  | \"-moz-win-media-toolbox\"\n  | \"-moz-win-mediatext\"\n  | \"-moz-window-button-box\"\n  | \"-moz-window-button-box-maximized\"\n  | \"-moz-window-button-close\"\n  | \"-moz-window-button-maximize\"\n  | \"-moz-window-button-minimize\"\n  | \"-moz-window-button-restore\"\n  | \"-moz-window-frame-bottom\"\n  | \"-moz-window-frame-left\"\n  | \"-moz-window-frame-right\"\n  | \"-moz-window-titlebar\"\n  | \"-moz-window-titlebar-maximized\"\n  | \"button\"\n  | \"button-arrow-down\"\n  | \"button-arrow-next\"\n  | \"button-arrow-previous\"\n  | \"button-arrow-up\"\n  | \"button-bevel\"\n  | \"button-focus\"\n  | \"caret\"\n  | \"checkbox\"\n  | \"checkbox-container\"\n  | \"checkbox-label\"\n  | \"checkmenuitem\"\n  | \"dualbutton\"\n  | \"groupbox\"\n  | \"listbox\"\n  | \"listitem\"\n  | \"menuarrow\"\n  | \"menubar\"\n  | \"menucheckbox\"\n  | \"menuimage\"\n  | \"menuitem\"\n  | \"menuitemtext\"\n  | \"menulist\"\n  | \"menulist-button\"\n  | \"menulist-text\"\n  | \"menulist-textfield\"\n  | \"menupopup\"\n  | \"menuradio\"\n  | \"menuseparator\"\n  | \"meterbar\"\n  | \"meterchunk\"\n  | \"none\"\n  | \"progressbar\"\n  | \"progressbar-vertical\"\n  | \"progresschunk\"\n  | \"progresschunk-vertical\"\n  | \"radio\"\n  | \"radio-container\"\n  | \"radio-label\"\n  | \"radiomenuitem\"\n  | \"range\"\n  | \"range-thumb\"\n  | \"resizer\"\n  | \"resizerpanel\"\n  | \"scale-horizontal\"\n  | \"scale-vertical\"\n  | \"scalethumb-horizontal\"\n  | \"scalethumb-vertical\"\n  | \"scalethumbend\"\n  | \"scalethumbstart\"\n  | \"scalethumbtick\"\n  | \"scrollbarbutton-down\"\n  | \"scrollbarbutton-left\"\n  | \"scrollbarbutton-right\"\n  | \"scrollbarbutton-up\"\n  | \"scrollbarthumb-horizontal\"\n  | \"scrollbarthumb-vertical\"\n  | \"scrollbartrack-horizontal\"\n  | \"scrollbartrack-vertical\"\n  | \"searchfield\"\n  | \"separator\"\n  | \"sheet\"\n  | \"spinner\"\n  | \"spinner-downbutton\"\n  | \"spinner-textfield\"\n  | \"spinner-upbutton\"\n  | \"splitter\"\n  | \"statusbar\"\n  | \"statusbarpanel\"\n  | \"tab\"\n  | \"tab-scroll-arrow-back\"\n  | \"tab-scroll-arrow-forward\"\n  | \"tabpanel\"\n  | \"tabpanels\"\n  | \"textfield\"\n  | \"textfield-multiline\"\n  | \"toolbar\"\n  | \"toolbarbutton\"\n  | \"toolbarbutton-dropdown\"\n  | \"toolbargripper\"\n  | \"toolbox\"\n  | \"tooltip\"\n  | \"treeheader\"\n  | \"treeheadercell\"\n  | \"treeheadersortarrow\"\n  | \"treeitem\"\n  | \"treeline\"\n  | \"treetwisty\"\n  | \"treetwistyopen\"\n  | \"treeview\";\n\nexport type MozBindingProperty = Globals | \"none\" | string;\n\nexport type MozBorderBottomColorsProperty = Globals | Color | \"none\" | string;\n\nexport type MozBorderLeftColorsProperty = Globals | Color | \"none\" | string;\n\nexport type MozBorderRightColorsProperty = Globals | Color | \"none\" | string;\n\nexport type MozBorderTopColorsProperty = Globals | Color | \"none\" | string;\n\nexport type MozContextPropertiesProperty = Globals | \"fill\" | \"fill-opacity\" | \"none\" | \"stroke\" | \"stroke-opacity\" | string;\n\nexport type MozFloatEdgeProperty = Globals | \"border-box\" | \"content-box\" | \"margin-box\" | \"padding-box\";\n\nexport type MozImageRegionProperty = Globals | \"auto\" | string;\n\nexport type MozOrientProperty = Globals | \"block\" | \"horizontal\" | \"inline\" | \"vertical\";\n\nexport type MozOutlineRadiusProperty<TLength> = Globals | TLength | string;\n\nexport type MozOutlineRadiusBottomleftProperty<TLength> = Globals | TLength | string;\n\nexport type MozOutlineRadiusBottomrightProperty<TLength> = Globals | TLength | string;\n\nexport type MozOutlineRadiusTopleftProperty<TLength> = Globals | TLength | string;\n\nexport type MozOutlineRadiusToprightProperty<TLength> = Globals | TLength | string;\n\nexport type MozStackSizingProperty = Globals | \"ignore\" | \"stretch-to-fit\";\n\nexport type MozTextBlinkProperty = Globals | \"blink\" | \"none\";\n\nexport type MozUserFocusProperty = Globals | \"ignore\" | \"none\" | \"normal\" | \"select-after\" | \"select-all\" | \"select-before\" | \"select-menu\" | \"select-same\";\n\nexport type MozUserInputProperty = Globals | \"auto\" | \"disabled\" | \"enabled\" | \"none\";\n\nexport type MozUserModifyProperty = Globals | \"read-only\" | \"read-write\" | \"write-only\";\n\nexport type MozWindowDraggingProperty = Globals | \"drag\" | \"no-drag\";\n\nexport type MozWindowShadowProperty = Globals | \"default\" | \"menu\" | \"none\" | \"sheet\" | \"tooltip\";\n\nexport type MsAcceleratorProperty = Globals | \"false\" | \"true\";\n\nexport type MsBlockProgressionProperty = Globals | \"bt\" | \"lr\" | \"rl\" | \"tb\";\n\nexport type MsContentZoomChainingProperty = Globals | \"chained\" | \"none\";\n\nexport type MsContentZoomSnapProperty = Globals | \"mandatory\" | \"none\" | \"proximity\" | string;\n\nexport type MsContentZoomSnapTypeProperty = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\nexport type MsContentZoomingProperty = Globals | \"none\" | \"zoom\";\n\nexport type MsFlowFromProperty = Globals | \"none\" | string;\n\nexport type MsFlowIntoProperty = Globals | \"none\" | string;\n\nexport type MsHighContrastAdjustProperty = Globals | \"auto\" | \"none\";\n\nexport type MsHyphenateLimitCharsProperty = Globals | \"auto\" | string | number;\n\nexport type MsHyphenateLimitLinesProperty = Globals | \"no-limit\" | number;\n\nexport type MsHyphenateLimitZoneProperty<TLength> = Globals | TLength | string;\n\nexport type MsImeAlignProperty = Globals | \"after\" | \"auto\";\n\nexport type MsOverflowStyleProperty = Globals | \"-ms-autohiding-scrollbar\" | \"auto\" | \"none\" | \"scrollbar\";\n\nexport type MsScrollChainingProperty = Globals | \"chained\" | \"none\";\n\nexport type MsScrollLimitXMaxProperty<TLength> = Globals | TLength | \"auto\";\n\nexport type MsScrollLimitXMinProperty<TLength> = Globals | TLength;\n\nexport type MsScrollLimitYMaxProperty<TLength> = Globals | TLength | \"auto\";\n\nexport type MsScrollLimitYMinProperty<TLength> = Globals | TLength;\n\nexport type MsScrollRailsProperty = Globals | \"none\" | \"railed\";\n\nexport type MsScrollSnapTypeProperty = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\nexport type MsScrollTranslationProperty = Globals | \"none\" | \"vertical-to-horizontal\";\n\nexport type MsScrollbar3dlightColorProperty = Globals | Color;\n\nexport type MsScrollbarArrowColorProperty = Globals | Color;\n\nexport type MsScrollbarBaseColorProperty = Globals | Color;\n\nexport type MsScrollbarDarkshadowColorProperty = Globals | Color;\n\nexport type MsScrollbarFaceColorProperty = Globals | Color;\n\nexport type MsScrollbarHighlightColorProperty = Globals | Color;\n\nexport type MsScrollbarShadowColorProperty = Globals | Color;\n\nexport type MsTextAutospaceProperty = Globals | \"ideograph-alpha\" | \"ideograph-numeric\" | \"ideograph-parenthesis\" | \"ideograph-space\" | \"none\";\n\nexport type MsTouchSelectProperty = Globals | \"grippers\" | \"none\";\n\nexport type MsUserSelectProperty = Globals | \"element\" | \"none\" | \"text\";\n\nexport type MsWrapFlowProperty = Globals | \"auto\" | \"both\" | \"clear\" | \"end\" | \"maximum\" | \"start\";\n\nexport type MsWrapMarginProperty<TLength> = Globals | TLength;\n\nexport type MsWrapThroughProperty = Globals | \"none\" | \"wrap\";\n\nexport type WebkitAppearanceProperty =\n  | Globals\n  | \"button\"\n  | \"button-bevel\"\n  | \"caret\"\n  | \"checkbox\"\n  | \"default-button\"\n  | \"inner-spin-button\"\n  | \"listbox\"\n  | \"listitem\"\n  | \"media-controls-background\"\n  | \"media-controls-fullscreen-background\"\n  | \"media-current-time-display\"\n  | \"media-enter-fullscreen-button\"\n  | \"media-exit-fullscreen-button\"\n  | \"media-fullscreen-button\"\n  | \"media-mute-button\"\n  | \"media-overlay-play-button\"\n  | \"media-play-button\"\n  | \"media-seek-back-button\"\n  | \"media-seek-forward-button\"\n  | \"media-slider\"\n  | \"media-sliderthumb\"\n  | \"media-time-remaining-display\"\n  | \"media-toggle-closed-captions-button\"\n  | \"media-volume-slider\"\n  | \"media-volume-slider-container\"\n  | \"media-volume-sliderthumb\"\n  | \"menulist\"\n  | \"menulist-button\"\n  | \"menulist-text\"\n  | \"menulist-textfield\"\n  | \"meter\"\n  | \"none\"\n  | \"progress-bar\"\n  | \"progress-bar-value\"\n  | \"push-button\"\n  | \"radio\"\n  | \"searchfield\"\n  | \"searchfield-cancel-button\"\n  | \"searchfield-decoration\"\n  | \"searchfield-results-button\"\n  | \"searchfield-results-decoration\"\n  | \"slider-horizontal\"\n  | \"slider-vertical\"\n  | \"sliderthumb-horizontal\"\n  | \"sliderthumb-vertical\"\n  | \"square-button\"\n  | \"textarea\"\n  | \"textfield\";\n\nexport type WebkitBorderBeforeProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;\n\nexport type WebkitBorderBeforeColorProperty = Globals | Color;\n\nexport type WebkitBorderBeforeStyleProperty = Globals | LineStyle | string;\n\nexport type WebkitBorderBeforeWidthProperty<TLength> = Globals | LineWidth<TLength> | string;\n\nexport type WebkitBoxReflectProperty<TLength> = Globals | TLength | \"above\" | \"below\" | \"left\" | \"right\" | string;\n\nexport type WebkitLineClampProperty = Globals | \"none\" | number;\n\nexport type WebkitMaskProperty<TLength> = Globals | Position<TLength> | RepeatStyle | Box | \"border\" | \"content\" | \"none\" | \"padding\" | \"text\" | string;\n\nexport type WebkitMaskAttachmentProperty = Globals | Attachment | string;\n\nexport type WebkitMaskClipProperty = Globals | Box | \"border\" | \"content\" | \"padding\" | \"text\" | string;\n\nexport type WebkitMaskCompositeProperty = Globals | CompositeStyle | string;\n\nexport type WebkitMaskImageProperty = Globals | \"none\" | string;\n\nexport type WebkitMaskOriginProperty = Globals | Box | \"border\" | \"content\" | \"padding\" | string;\n\nexport type WebkitMaskPositionProperty<TLength> = Globals | Position<TLength> | string;\n\nexport type WebkitMaskPositionXProperty<TLength> = Globals | TLength | \"center\" | \"left\" | \"right\" | string;\n\nexport type WebkitMaskPositionYProperty<TLength> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | string;\n\nexport type WebkitMaskRepeatProperty = Globals | RepeatStyle | string;\n\nexport type WebkitMaskRepeatXProperty = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\nexport type WebkitMaskRepeatYProperty = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\nexport type WebkitMaskSizeProperty<TLength> = Globals | BgSize<TLength> | string;\n\nexport type WebkitOverflowScrollingProperty = Globals | \"auto\" | \"touch\";\n\nexport type WebkitTapHighlightColorProperty = Globals | Color;\n\nexport type WebkitTextFillColorProperty = Globals | Color;\n\nexport type WebkitTextStrokeProperty<TLength> = Globals | Color | TLength | string;\n\nexport type WebkitTextStrokeColorProperty = Globals | Color;\n\nexport type WebkitTextStrokeWidthProperty<TLength> = Globals | TLength;\n\nexport type WebkitTouchCalloutProperty = Globals | \"default\" | \"none\";\n\nexport type WebkitUserModifyProperty = Globals | \"read-only\" | \"read-write\" | \"read-write-plaintext-only\";\n\nexport type AlignmentBaselineProperty =\n  | Globals\n  | \"after-edge\"\n  | \"alphabetic\"\n  | \"auto\"\n  | \"baseline\"\n  | \"before-edge\"\n  | \"central\"\n  | \"hanging\"\n  | \"ideographic\"\n  | \"mathematical\"\n  | \"middle\"\n  | \"text-after-edge\"\n  | \"text-before-edge\";\n\nexport type BaselineShiftProperty<TLength> = Globals | TLength | \"baseline\" | \"sub\" | \"super\" | string;\n\nexport type ClipRuleProperty = Globals | \"evenodd\" | \"nonzero\";\n\nexport type ColorInterpolationProperty = Globals | \"auto\" | \"linearRGB\" | \"sRGB\";\n\nexport type ColorRenderingProperty = Globals | \"auto\" | \"optimizeQuality\" | \"optimizeSpeed\";\n\nexport type DominantBaselineProperty =\n  | Globals\n  | \"alphabetic\"\n  | \"auto\"\n  | \"central\"\n  | \"hanging\"\n  | \"ideographic\"\n  | \"mathematical\"\n  | \"middle\"\n  | \"no-change\"\n  | \"reset-size\"\n  | \"text-after-edge\"\n  | \"text-before-edge\"\n  | \"use-script\";\n\nexport type FillProperty = Globals | Paint;\n\nexport type FillRuleProperty = Globals | \"evenodd\" | \"nonzero\";\n\nexport type FloodColorProperty = Globals | Color | \"currentColor\";\n\nexport type GlyphOrientationVerticalProperty = Globals | \"auto\" | string | number;\n\nexport type LightingColorProperty = Globals | Color | \"currentColor\";\n\nexport type MarkerProperty = Globals | \"none\" | string;\n\nexport type MarkerEndProperty = Globals | \"none\" | string;\n\nexport type MarkerMidProperty = Globals | \"none\" | string;\n\nexport type MarkerStartProperty = Globals | \"none\" | string;\n\nexport type ShapeRenderingProperty = Globals | \"auto\" | \"crispEdges\" | \"geometricPrecision\" | \"optimizeSpeed\";\n\nexport type StopColorProperty = Globals | Color | \"currentColor\";\n\nexport type StrokeProperty = Globals | Paint;\n\nexport type StrokeDasharrayProperty<TLength> = Globals | Dasharray<TLength> | \"none\";\n\nexport type StrokeDashoffsetProperty<TLength> = Globals | TLength | string;\n\nexport type StrokeLinecapProperty = Globals | \"butt\" | \"round\" | \"square\";\n\nexport type StrokeLinejoinProperty = Globals | \"bevel\" | \"miter\" | \"round\";\n\nexport type StrokeWidthProperty<TLength> = Globals | TLength | string;\n\nexport type TextAnchorProperty = Globals | \"end\" | \"middle\" | \"start\";\n\nexport type VectorEffectProperty = Globals | \"non-scaling-stroke\" | \"none\";\n\ntype CounterStyleRangeProperty = \"auto\" | \"infinite\" | string | number;\n\ntype CounterStyleSpeakAsProperty = \"auto\" | \"bullets\" | \"numbers\" | \"spell-out\" | \"words\" | string;\n\ntype CounterStyleSystemProperty = \"additive\" | \"alphabetic\" | \"cyclic\" | \"fixed\" | \"numeric\" | \"symbolic\" | string;\n\ntype FontFaceFontFeatureSettingsProperty = \"normal\" | string;\n\ntype FontFaceFontDisplayProperty = \"auto\" | \"block\" | \"fallback\" | \"optional\" | \"swap\";\n\ntype FontFaceFontStretchProperty = FontStretchAbsolute | string;\n\ntype FontFaceFontStyleProperty = \"italic\" | \"normal\" | \"oblique\" | string;\n\ntype FontFaceFontVariantProperty =\n  | EastAsianVariantValues\n  | \"all-petite-caps\"\n  | \"all-small-caps\"\n  | \"common-ligatures\"\n  | \"contextual\"\n  | \"diagonal-fractions\"\n  | \"discretionary-ligatures\"\n  | \"full-width\"\n  | \"historical-forms\"\n  | \"historical-ligatures\"\n  | \"lining-nums\"\n  | \"no-common-ligatures\"\n  | \"no-contextual\"\n  | \"no-discretionary-ligatures\"\n  | \"no-historical-ligatures\"\n  | \"none\"\n  | \"normal\"\n  | \"oldstyle-nums\"\n  | \"ordinal\"\n  | \"petite-caps\"\n  | \"proportional-nums\"\n  | \"proportional-width\"\n  | \"ruby\"\n  | \"slashed-zero\"\n  | \"small-caps\"\n  | \"stacked-fractions\"\n  | \"tabular-nums\"\n  | \"titling-caps\"\n  | \"unicase\"\n  | string;\n\ntype FontFaceFontVariationSettingsProperty = \"normal\" | string;\n\ntype FontFaceFontWeightProperty = FontWeightAbsolute | string;\n\ntype ViewportHeightProperty<TLength> = ViewportLength<TLength> | string;\n\ntype ViewportMaxHeightProperty<TLength> = ViewportLength<TLength>;\n\ntype ViewportMaxWidthProperty<TLength> = ViewportLength<TLength>;\n\ntype ViewportMaxZoomProperty = \"auto\" | string | number;\n\ntype ViewportMinHeightProperty<TLength> = ViewportLength<TLength>;\n\ntype ViewportMinWidthProperty<TLength> = ViewportLength<TLength>;\n\ntype ViewportMinZoomProperty = \"auto\" | string | number;\n\ntype ViewportOrientationProperty = \"auto\" | \"landscape\" | \"portrait\";\n\ntype ViewportUserZoomProperty = \"-ms-zoom\" | \"fixed\" | \"zoom\";\n\ntype ViewportWidthProperty<TLength> = ViewportLength<TLength> | string;\n\ntype ViewportZoomProperty = \"auto\" | string | number;\n\ntype AbsoluteSize = \"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\";\n\ntype AnimateableFeature = \"contents\" | \"scroll-position\" | string;\n\ntype Attachment = \"fixed\" | \"local\" | \"scroll\";\n\ntype BgPosition<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | string;\n\ntype BgSize<TLength> = TLength | \"auto\" | \"contain\" | \"cover\" | string;\n\ntype BlendMode =\n  | \"color\"\n  | \"color-burn\"\n  | \"color-dodge\"\n  | \"darken\"\n  | \"difference\"\n  | \"exclusion\"\n  | \"hard-light\"\n  | \"hue\"\n  | \"lighten\"\n  | \"luminosity\"\n  | \"multiply\"\n  | \"normal\"\n  | \"overlay\"\n  | \"saturation\"\n  | \"screen\"\n  | \"soft-light\";\n\ntype Box = \"border-box\" | \"content-box\" | \"padding-box\";\n\ntype Color = NamedColor | DeprecatedSystemColor | \"currentcolor\" | string;\n\ntype CompatAuto = \"checkbox\" | \"listbox\" | \"menulist\" | \"meter\" | \"progress-bar\" | \"push-button\" | \"radio\" | \"searchfield\" | \"slider-horizontal\" | \"square-button\" | \"textarea\";\n\ntype CompositeStyle =\n  | \"clear\"\n  | \"copy\"\n  | \"destination-atop\"\n  | \"destination-in\"\n  | \"destination-out\"\n  | \"destination-over\"\n  | \"source-atop\"\n  | \"source-in\"\n  | \"source-out\"\n  | \"source-over\"\n  | \"xor\";\n\ntype CompositingOperator = \"add\" | \"exclude\" | \"intersect\" | \"subtract\";\n\ntype ContentDistribution = \"space-around\" | \"space-between\" | \"space-evenly\" | \"stretch\";\n\ntype ContentList = Quote | \"contents\" | string;\n\ntype ContentPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"start\";\n\ntype CubicBezierTimingFunction = \"ease\" | \"ease-in\" | \"ease-in-out\" | \"ease-out\" | string;\n\ntype Dasharray<TLength> = TLength | string | number;\n\ntype DeprecatedSystemColor =\n  | \"ActiveBorder\"\n  | \"ActiveCaption\"\n  | \"AppWorkspace\"\n  | \"Background\"\n  | \"ButtonFace\"\n  | \"ButtonHighlight\"\n  | \"ButtonShadow\"\n  | \"ButtonText\"\n  | \"CaptionText\"\n  | \"GrayText\"\n  | \"Highlight\"\n  | \"HighlightText\"\n  | \"InactiveBorder\"\n  | \"InactiveCaption\"\n  | \"InactiveCaptionText\"\n  | \"InfoBackground\"\n  | \"InfoText\"\n  | \"Menu\"\n  | \"MenuText\"\n  | \"Scrollbar\"\n  | \"ThreeDDarkShadow\"\n  | \"ThreeDFace\"\n  | \"ThreeDHighlight\"\n  | \"ThreeDLightShadow\"\n  | \"ThreeDShadow\"\n  | \"Window\"\n  | \"WindowFrame\"\n  | \"WindowText\";\n\ntype DisplayInside = \"-ms-flexbox\" | \"-ms-grid\" | \"-webkit-flex\" | \"flex\" | \"flow\" | \"flow-root\" | \"grid\" | \"ruby\" | \"table\";\n\ntype DisplayInternal =\n  | \"ruby-base\"\n  | \"ruby-base-container\"\n  | \"ruby-text\"\n  | \"ruby-text-container\"\n  | \"table-caption\"\n  | \"table-cell\"\n  | \"table-column\"\n  | \"table-column-group\"\n  | \"table-footer-group\"\n  | \"table-header-group\"\n  | \"table-row\"\n  | \"table-row-group\";\n\ntype DisplayLegacy = \"-ms-inline-flexbox\" | \"-ms-inline-grid\" | \"-webkit-inline-flex\" | \"inline-block\" | \"inline-flex\" | \"inline-grid\" | \"inline-list-item\" | \"inline-table\";\n\ntype DisplayOutside = \"block\" | \"inline\" | \"run-in\";\n\ntype EastAsianVariantValues = \"jis04\" | \"jis78\" | \"jis83\" | \"jis90\" | \"simplified\" | \"traditional\";\n\ntype FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | \"none\" | string;\n\ntype FontStretchAbsolute =\n  | \"condensed\"\n  | \"expanded\"\n  | \"extra-condensed\"\n  | \"extra-expanded\"\n  | \"normal\"\n  | \"semi-condensed\"\n  | \"semi-expanded\"\n  | \"ultra-condensed\"\n  | \"ultra-expanded\"\n  | string;\n\ntype FontWeightAbsolute = \"bold\" | \"normal\" | number;\n\ntype GenericFamily = \"cursive\" | \"fantasy\" | \"monospace\" | \"sans-serif\" | \"serif\";\n\ntype GeometryBox = Box | \"fill-box\" | \"margin-box\" | \"stroke-box\" | \"view-box\";\n\ntype GridLine = \"auto\" | string | number;\n\ntype LineStyle = \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"hidden\" | \"inset\" | \"none\" | \"outset\" | \"ridge\" | \"solid\";\n\ntype LineWidth<TLength> = TLength | \"medium\" | \"thick\" | \"thin\";\n\ntype MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | \"no-clip\" | \"none\" | string;\n\ntype MaskingMode = \"alpha\" | \"luminance\" | \"match-source\";\n\ntype NamedColor =\n  | \"aliceblue\"\n  | \"antiquewhite\"\n  | \"aqua\"\n  | \"aquamarine\"\n  | \"azure\"\n  | \"beige\"\n  | \"bisque\"\n  | \"black\"\n  | \"blanchedalmond\"\n  | \"blue\"\n  | \"blueviolet\"\n  | \"brown\"\n  | \"burlywood\"\n  | \"cadetblue\"\n  | \"chartreuse\"\n  | \"chocolate\"\n  | \"coral\"\n  | \"cornflowerblue\"\n  | \"cornsilk\"\n  | \"crimson\"\n  | \"cyan\"\n  | \"darkblue\"\n  | \"darkcyan\"\n  | \"darkgoldenrod\"\n  | \"darkgray\"\n  | \"darkgreen\"\n  | \"darkgrey\"\n  | \"darkkhaki\"\n  | \"darkmagenta\"\n  | \"darkolivegreen\"\n  | \"darkorange\"\n  | \"darkorchid\"\n  | \"darkred\"\n  | \"darksalmon\"\n  | \"darkseagreen\"\n  | \"darkslateblue\"\n  | \"darkslategray\"\n  | \"darkslategrey\"\n  | \"darkturquoise\"\n  | \"darkviolet\"\n  | \"deeppink\"\n  | \"deepskyblue\"\n  | \"dimgray\"\n  | \"dimgrey\"\n  | \"dodgerblue\"\n  | \"firebrick\"\n  | \"floralwhite\"\n  | \"forestgreen\"\n  | \"fuchsia\"\n  | \"gainsboro\"\n  | \"ghostwhite\"\n  | \"gold\"\n  | \"goldenrod\"\n  | \"gray\"\n  | \"green\"\n  | \"greenyellow\"\n  | \"grey\"\n  | \"honeydew\"\n  | \"hotpink\"\n  | \"indianred\"\n  | \"indigo\"\n  | \"ivory\"\n  | \"khaki\"\n  | \"lavender\"\n  | \"lavenderblush\"\n  | \"lawngreen\"\n  | \"lemonchiffon\"\n  | \"lightblue\"\n  | \"lightcoral\"\n  | \"lightcyan\"\n  | \"lightgoldenrodyellow\"\n  | \"lightgray\"\n  | \"lightgreen\"\n  | \"lightgrey\"\n  | \"lightpink\"\n  | \"lightsalmon\"\n  | \"lightseagreen\"\n  | \"lightskyblue\"\n  | \"lightslategray\"\n  | \"lightslategrey\"\n  | \"lightsteelblue\"\n  | \"lightyellow\"\n  | \"lime\"\n  | \"limegreen\"\n  | \"linen\"\n  | \"magenta\"\n  | \"maroon\"\n  | \"mediumaquamarine\"\n  | \"mediumblue\"\n  | \"mediumorchid\"\n  | \"mediumpurple\"\n  | \"mediumseagreen\"\n  | \"mediumslateblue\"\n  | \"mediumspringgreen\"\n  | \"mediumturquoise\"\n  | \"mediumvioletred\"\n  | \"midnightblue\"\n  | \"mintcream\"\n  | \"mistyrose\"\n  | \"moccasin\"\n  | \"navajowhite\"\n  | \"navy\"\n  | \"oldlace\"\n  | \"olive\"\n  | \"olivedrab\"\n  | \"orange\"\n  | \"orangered\"\n  | \"orchid\"\n  | \"palegoldenrod\"\n  | \"palegreen\"\n  | \"paleturquoise\"\n  | \"palevioletred\"\n  | \"papayawhip\"\n  | \"peachpuff\"\n  | \"peru\"\n  | \"pink\"\n  | \"plum\"\n  | \"powderblue\"\n  | \"purple\"\n  | \"rebeccapurple\"\n  | \"red\"\n  | \"rosybrown\"\n  | \"royalblue\"\n  | \"saddlebrown\"\n  | \"salmon\"\n  | \"sandybrown\"\n  | \"seagreen\"\n  | \"seashell\"\n  | \"sienna\"\n  | \"silver\"\n  | \"skyblue\"\n  | \"slateblue\"\n  | \"slategray\"\n  | \"slategrey\"\n  | \"snow\"\n  | \"springgreen\"\n  | \"steelblue\"\n  | \"tan\"\n  | \"teal\"\n  | \"thistle\"\n  | \"tomato\"\n  | \"transparent\"\n  | \"turquoise\"\n  | \"violet\"\n  | \"wheat\"\n  | \"white\"\n  | \"whitesmoke\"\n  | \"yellow\"\n  | \"yellowgreen\";\n\ntype Paint = Color | \"child\" | \"context-fill\" | \"context-stroke\" | \"none\" | string;\n\ntype Position<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | string;\n\ntype Quote = \"close-quote\" | \"no-close-quote\" | \"no-open-quote\" | \"open-quote\";\n\ntype RepeatStyle = \"no-repeat\" | \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"round\" | \"space\" | string;\n\ntype SelfPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"self-end\" | \"self-start\" | \"start\";\n\ntype SingleAnimation = TimingFunction | SingleAnimationDirection | SingleAnimationFillMode | \"infinite\" | \"none\" | \"paused\" | \"running\" | string | number;\n\ntype SingleAnimationDirection = \"alternate\" | \"alternate-reverse\" | \"normal\" | \"reverse\";\n\ntype SingleAnimationFillMode = \"backwards\" | \"both\" | \"forwards\" | \"none\";\n\ntype SingleTransition = TimingFunction | \"all\" | \"none\" | string;\n\ntype StepTimingFunction = \"step-end\" | \"step-start\" | string;\n\ntype TimingFunction = CubicBezierTimingFunction | StepTimingFunction | \"linear\";\n\ntype TrackBreadth<TLength> = TLength | \"auto\" | \"max-content\" | \"min-content\" | string;\n\ntype ViewportLength<TLength> = TLength | \"auto\" | string;\n"
    },
    "make-plural": {
      "cardinals.d.ts": "export type PluralCategory = \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\n\nexport function af(n: number | string): \"one\" | \"other\";\nexport function ak(n: number | string): \"one\" | \"other\";\nexport function am(n: number | string): \"one\" | \"other\";\nexport function an(n: number | string): \"one\" | \"other\";\nexport function ar(n: number | string): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function ars(n: number | string): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function as(n: number | string): \"one\" | \"other\";\nexport function asa(n: number | string): \"one\" | \"other\";\nexport function ast(n: number | string): \"one\" | \"other\";\nexport function az(n: number | string): \"one\" | \"other\";\nexport function be(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function bem(n: number | string): \"one\" | \"other\";\nexport function bez(n: number | string): \"one\" | \"other\";\nexport function bg(n: number | string): \"one\" | \"other\";\nexport function bho(n: number | string): \"one\" | \"other\";\nexport function bm(n: number | string): \"other\";\nexport function bn(n: number | string): \"one\" | \"other\";\nexport function bo(n: number | string): \"other\";\nexport function br(n: number | string): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function brx(n: number | string): \"one\" | \"other\";\nexport function bs(n: number | string): \"one\" | \"few\" | \"other\";\nexport function ca(n: number | string): \"one\" | \"other\";\nexport function ce(n: number | string): \"one\" | \"other\";\nexport function ceb(n: number | string): \"one\" | \"other\";\nexport function cgg(n: number | string): \"one\" | \"other\";\nexport function chr(n: number | string): \"one\" | \"other\";\nexport function ckb(n: number | string): \"one\" | \"other\";\nexport function cs(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function cy(n: number | string): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function da(n: number | string): \"one\" | \"other\";\nexport function de(n: number | string): \"one\" | \"other\";\nexport function dsb(n: number | string): \"one\" | \"two\" | \"few\" | \"other\";\nexport function dv(n: number | string): \"one\" | \"other\";\nexport function dz(n: number | string): \"other\";\nexport function ee(n: number | string): \"one\" | \"other\";\nexport function el(n: number | string): \"one\" | \"other\";\nexport function en(n: number | string): \"one\" | \"other\";\nexport function eo(n: number | string): \"one\" | \"other\";\nexport function es(n: number | string): \"one\" | \"other\";\nexport function et(n: number | string): \"one\" | \"other\";\nexport function eu(n: number | string): \"one\" | \"other\";\nexport function fa(n: number | string): \"one\" | \"other\";\nexport function ff(n: number | string): \"one\" | \"other\";\nexport function fi(n: number | string): \"one\" | \"other\";\nexport function fil(n: number | string): \"one\" | \"other\";\nexport function fo(n: number | string): \"one\" | \"other\";\nexport function fr(n: number | string): \"one\" | \"other\";\nexport function fur(n: number | string): \"one\" | \"other\";\nexport function fy(n: number | string): \"one\" | \"other\";\nexport function ga(n: number | string): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function gd(n: number | string): \"one\" | \"two\" | \"few\" | \"other\";\nexport function gl(n: number | string): \"one\" | \"other\";\nexport function gsw(n: number | string): \"one\" | \"other\";\nexport function gu(n: number | string): \"one\" | \"other\";\nexport function guw(n: number | string): \"one\" | \"other\";\nexport function gv(n: number | string): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function ha(n: number | string): \"one\" | \"other\";\nexport function haw(n: number | string): \"one\" | \"other\";\nexport function he(n: number | string): \"one\" | \"two\" | \"many\" | \"other\";\nexport function hi(n: number | string): \"one\" | \"other\";\nexport function hr(n: number | string): \"one\" | \"few\" | \"other\";\nexport function hsb(n: number | string): \"one\" | \"two\" | \"few\" | \"other\";\nexport function hu(n: number | string): \"one\" | \"other\";\nexport function hy(n: number | string): \"one\" | \"other\";\nexport function ia(n: number | string): \"one\" | \"other\";\nexport function id(n: number | string): \"other\";\nexport function ig(n: number | string): \"other\";\nexport function ii(n: number | string): \"other\";\nexport function _in(n: number | string): \"other\";\nexport function io(n: number | string): \"one\" | \"other\";\nexport function is(n: number | string): \"one\" | \"other\";\nexport function it(n: number | string): \"one\" | \"other\";\nexport function iu(n: number | string): \"one\" | \"two\" | \"other\";\nexport function iw(n: number | string): \"one\" | \"two\" | \"many\" | \"other\";\nexport function ja(n: number | string): \"other\";\nexport function jbo(n: number | string): \"other\";\nexport function jgo(n: number | string): \"one\" | \"other\";\nexport function ji(n: number | string): \"one\" | \"other\";\nexport function jmc(n: number | string): \"one\" | \"other\";\nexport function jv(n: number | string): \"other\";\nexport function jw(n: number | string): \"other\";\nexport function ka(n: number | string): \"one\" | \"other\";\nexport function kab(n: number | string): \"one\" | \"other\";\nexport function kaj(n: number | string): \"one\" | \"other\";\nexport function kcg(n: number | string): \"one\" | \"other\";\nexport function kde(n: number | string): \"other\";\nexport function kea(n: number | string): \"other\";\nexport function kk(n: number | string): \"one\" | \"other\";\nexport function kkj(n: number | string): \"one\" | \"other\";\nexport function kl(n: number | string): \"one\" | \"other\";\nexport function km(n: number | string): \"other\";\nexport function kn(n: number | string): \"one\" | \"other\";\nexport function ko(n: number | string): \"other\";\nexport function ks(n: number | string): \"one\" | \"other\";\nexport function ksb(n: number | string): \"one\" | \"other\";\nexport function ksh(n: number | string): \"zero\" | \"one\" | \"other\";\nexport function ku(n: number | string): \"one\" | \"other\";\nexport function kw(n: number | string): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function ky(n: number | string): \"one\" | \"other\";\nexport function lag(n: number | string): \"zero\" | \"one\" | \"other\";\nexport function lb(n: number | string): \"one\" | \"other\";\nexport function lg(n: number | string): \"one\" | \"other\";\nexport function lkt(n: number | string): \"other\";\nexport function ln(n: number | string): \"one\" | \"other\";\nexport function lo(n: number | string): \"other\";\nexport function lt(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function lv(n: number | string): \"zero\" | \"one\" | \"other\";\nexport function mas(n: number | string): \"one\" | \"other\";\nexport function mg(n: number | string): \"one\" | \"other\";\nexport function mgo(n: number | string): \"one\" | \"other\";\nexport function mk(n: number | string): \"one\" | \"other\";\nexport function ml(n: number | string): \"one\" | \"other\";\nexport function mn(n: number | string): \"one\" | \"other\";\nexport function mo(n: number | string): \"one\" | \"few\" | \"other\";\nexport function mr(n: number | string): \"one\" | \"other\";\nexport function ms(n: number | string): \"other\";\nexport function mt(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function my(n: number | string): \"other\";\nexport function nah(n: number | string): \"one\" | \"other\";\nexport function naq(n: number | string): \"one\" | \"two\" | \"other\";\nexport function nb(n: number | string): \"one\" | \"other\";\nexport function nd(n: number | string): \"one\" | \"other\";\nexport function ne(n: number | string): \"one\" | \"other\";\nexport function nl(n: number | string): \"one\" | \"other\";\nexport function nn(n: number | string): \"one\" | \"other\";\nexport function nnh(n: number | string): \"one\" | \"other\";\nexport function no(n: number | string): \"one\" | \"other\";\nexport function nqo(n: number | string): \"other\";\nexport function nr(n: number | string): \"one\" | \"other\";\nexport function nso(n: number | string): \"one\" | \"other\";\nexport function ny(n: number | string): \"one\" | \"other\";\nexport function nyn(n: number | string): \"one\" | \"other\";\nexport function om(n: number | string): \"one\" | \"other\";\nexport function or(n: number | string): \"one\" | \"other\";\nexport function os(n: number | string): \"one\" | \"other\";\nexport function osa(n: number | string): \"other\";\nexport function pa(n: number | string): \"one\" | \"other\";\nexport function pap(n: number | string): \"one\" | \"other\";\nexport function pl(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function prg(n: number | string): \"zero\" | \"one\" | \"other\";\nexport function ps(n: number | string): \"one\" | \"other\";\nexport function pt(n: number | string): \"one\" | \"other\";\nexport function pt_PT(n: number | string): \"one\" | \"other\";\nexport function rm(n: number | string): \"one\" | \"other\";\nexport function ro(n: number | string): \"one\" | \"few\" | \"other\";\nexport function rof(n: number | string): \"one\" | \"other\";\nexport function root(n: number | string): \"other\";\nexport function ru(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function rwk(n: number | string): \"one\" | \"other\";\nexport function sah(n: number | string): \"other\";\nexport function saq(n: number | string): \"one\" | \"other\";\nexport function sc(n: number | string): \"one\" | \"other\";\nexport function scn(n: number | string): \"one\" | \"other\";\nexport function sd(n: number | string): \"one\" | \"other\";\nexport function sdh(n: number | string): \"one\" | \"other\";\nexport function se(n: number | string): \"one\" | \"two\" | \"other\";\nexport function seh(n: number | string): \"one\" | \"other\";\nexport function ses(n: number | string): \"other\";\nexport function sg(n: number | string): \"other\";\nexport function sh(n: number | string): \"one\" | \"few\" | \"other\";\nexport function shi(n: number | string): \"one\" | \"few\" | \"other\";\nexport function si(n: number | string): \"one\" | \"other\";\nexport function sk(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function sl(n: number | string): \"one\" | \"two\" | \"few\" | \"other\";\nexport function sma(n: number | string): \"one\" | \"two\" | \"other\";\nexport function smi(n: number | string): \"one\" | \"two\" | \"other\";\nexport function smj(n: number | string): \"one\" | \"two\" | \"other\";\nexport function smn(n: number | string): \"one\" | \"two\" | \"other\";\nexport function sms(n: number | string): \"one\" | \"two\" | \"other\";\nexport function sn(n: number | string): \"one\" | \"other\";\nexport function so(n: number | string): \"one\" | \"other\";\nexport function sq(n: number | string): \"one\" | \"other\";\nexport function sr(n: number | string): \"one\" | \"few\" | \"other\";\nexport function ss(n: number | string): \"one\" | \"other\";\nexport function ssy(n: number | string): \"one\" | \"other\";\nexport function st(n: number | string): \"one\" | \"other\";\nexport function su(n: number | string): \"other\";\nexport function sv(n: number | string): \"one\" | \"other\";\nexport function sw(n: number | string): \"one\" | \"other\";\nexport function syr(n: number | string): \"one\" | \"other\";\nexport function ta(n: number | string): \"one\" | \"other\";\nexport function te(n: number | string): \"one\" | \"other\";\nexport function teo(n: number | string): \"one\" | \"other\";\nexport function th(n: number | string): \"other\";\nexport function ti(n: number | string): \"one\" | \"other\";\nexport function tig(n: number | string): \"one\" | \"other\";\nexport function tk(n: number | string): \"one\" | \"other\";\nexport function tl(n: number | string): \"one\" | \"other\";\nexport function tn(n: number | string): \"one\" | \"other\";\nexport function to(n: number | string): \"other\";\nexport function tr(n: number | string): \"one\" | \"other\";\nexport function ts(n: number | string): \"one\" | \"other\";\nexport function tzm(n: number | string): \"one\" | \"other\";\nexport function ug(n: number | string): \"one\" | \"other\";\nexport function uk(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function ur(n: number | string): \"one\" | \"other\";\nexport function uz(n: number | string): \"one\" | \"other\";\nexport function ve(n: number | string): \"one\" | \"other\";\nexport function vi(n: number | string): \"other\";\nexport function vo(n: number | string): \"one\" | \"other\";\nexport function vun(n: number | string): \"one\" | \"other\";\nexport function wa(n: number | string): \"one\" | \"other\";\nexport function wae(n: number | string): \"one\" | \"other\";\nexport function wo(n: number | string): \"other\";\nexport function xh(n: number | string): \"one\" | \"other\";\nexport function xog(n: number | string): \"one\" | \"other\";\nexport function yi(n: number | string): \"one\" | \"other\";\nexport function yo(n: number | string): \"other\";\nexport function yue(n: number | string): \"other\";\nexport function zh(n: number | string): \"other\";\nexport function zu(n: number | string): \"one\" | \"other\";\n",
      "ordinals.d.ts": "export type PluralCategory = \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\n\nexport function af(n: number | string): \"other\";\nexport function am(n: number | string): \"other\";\nexport function an(n: number | string): \"other\";\nexport function ar(n: number | string): \"other\";\nexport function as(n: number | string): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function az(n: number | string): \"one\" | \"few\" | \"many\" | \"other\";\nexport function be(n: number | string): \"few\" | \"other\";\nexport function bg(n: number | string): \"other\";\nexport function bn(n: number | string): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function bs(n: number | string): \"other\";\nexport function ca(n: number | string): \"one\" | \"two\" | \"few\" | \"other\";\nexport function ce(n: number | string): \"other\";\nexport function cs(n: number | string): \"other\";\nexport function cy(n: number | string): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function da(n: number | string): \"other\";\nexport function de(n: number | string): \"other\";\nexport function dsb(n: number | string): \"other\";\nexport function el(n: number | string): \"other\";\nexport function en(n: number | string): \"one\" | \"two\" | \"few\" | \"other\";\nexport function es(n: number | string): \"other\";\nexport function et(n: number | string): \"other\";\nexport function eu(n: number | string): \"other\";\nexport function fa(n: number | string): \"other\";\nexport function fi(n: number | string): \"other\";\nexport function fil(n: number | string): \"one\" | \"other\";\nexport function fr(n: number | string): \"one\" | \"other\";\nexport function fy(n: number | string): \"other\";\nexport function ga(n: number | string): \"one\" | \"other\";\nexport function gd(n: number | string): \"one\" | \"two\" | \"few\" | \"other\";\nexport function gl(n: number | string): \"other\";\nexport function gsw(n: number | string): \"other\";\nexport function gu(n: number | string): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function he(n: number | string): \"other\";\nexport function hi(n: number | string): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function hr(n: number | string): \"other\";\nexport function hsb(n: number | string): \"other\";\nexport function hu(n: number | string): \"one\" | \"other\";\nexport function hy(n: number | string): \"one\" | \"other\";\nexport function ia(n: number | string): \"other\";\nexport function id(n: number | string): \"other\";\nexport function _in(n: number | string): \"other\";\nexport function is(n: number | string): \"other\";\nexport function it(n: number | string): \"many\" | \"other\";\nexport function iw(n: number | string): \"other\";\nexport function ja(n: number | string): \"other\";\nexport function ka(n: number | string): \"one\" | \"many\" | \"other\";\nexport function kk(n: number | string): \"many\" | \"other\";\nexport function km(n: number | string): \"other\";\nexport function kn(n: number | string): \"other\";\nexport function ko(n: number | string): \"other\";\nexport function kw(n: number | string): \"one\" | \"many\" | \"other\";\nexport function ky(n: number | string): \"other\";\nexport function lo(n: number | string): \"one\" | \"other\";\nexport function lt(n: number | string): \"other\";\nexport function lv(n: number | string): \"other\";\nexport function mk(n: number | string): \"one\" | \"two\" | \"many\" | \"other\";\nexport function ml(n: number | string): \"other\";\nexport function mn(n: number | string): \"other\";\nexport function mo(n: number | string): \"one\" | \"other\";\nexport function mr(n: number | string): \"one\" | \"two\" | \"few\" | \"other\";\nexport function ms(n: number | string): \"one\" | \"other\";\nexport function my(n: number | string): \"other\";\nexport function nb(n: number | string): \"other\";\nexport function ne(n: number | string): \"one\" | \"other\";\nexport function nl(n: number | string): \"other\";\nexport function or(n: number | string): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function pa(n: number | string): \"other\";\nexport function pl(n: number | string): \"other\";\nexport function prg(n: number | string): \"other\";\nexport function ps(n: number | string): \"other\";\nexport function pt(n: number | string): \"other\";\nexport function ro(n: number | string): \"one\" | \"other\";\nexport function root(n: number | string): \"other\";\nexport function ru(n: number | string): \"other\";\nexport function sc(n: number | string): \"many\" | \"other\";\nexport function scn(n: number | string): \"many\" | \"other\";\nexport function sd(n: number | string): \"other\";\nexport function sh(n: number | string): \"other\";\nexport function si(n: number | string): \"other\";\nexport function sk(n: number | string): \"other\";\nexport function sl(n: number | string): \"other\";\nexport function sq(n: number | string): \"one\" | \"many\" | \"other\";\nexport function sr(n: number | string): \"other\";\nexport function sv(n: number | string): \"one\" | \"other\";\nexport function sw(n: number | string): \"other\";\nexport function ta(n: number | string): \"other\";\nexport function te(n: number | string): \"other\";\nexport function th(n: number | string): \"other\";\nexport function tk(n: number | string): \"few\" | \"other\";\nexport function tl(n: number | string): \"one\" | \"other\";\nexport function tr(n: number | string): \"other\";\nexport function uk(n: number | string): \"few\" | \"other\";\nexport function ur(n: number | string): \"other\";\nexport function uz(n: number | string): \"other\";\nexport function vi(n: number | string): \"one\" | \"other\";\nexport function yue(n: number | string): \"other\";\nexport function zh(n: number | string): \"other\";\nexport function zu(n: number | string): \"other\";\n",
      "pluralCategories.d.ts": "export type PluralCategory = \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\n\nexport const _in: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const af: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ak: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const am: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const an: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ar: {cardinal:[\"zero\",\"one\",\"two\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const ars: {cardinal:[\"zero\",\"one\",\"two\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const as: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"many\",\"other\"]};\nexport const asa: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ast: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const az: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"few\",\"many\",\"other\"]};\nexport const be: {cardinal:[\"one\",\"few\",\"many\",\"other\"],ordinal:[\"few\",\"other\"]};\nexport const bem: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const bez: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const bg: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const bho: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const bm: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const bn: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"many\",\"other\"]};\nexport const bo: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const br: {cardinal:[\"one\",\"two\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const brx: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const bs: {cardinal:[\"one\",\"few\",\"other\"],ordinal:[\"other\"]};\nexport const ca: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"other\"]};\nexport const ce: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ceb: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const cgg: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const chr: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ckb: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const cs: {cardinal:[\"one\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const cy: {cardinal:[\"zero\",\"one\",\"two\",\"few\",\"many\",\"other\"],ordinal:[\"zero\",\"one\",\"two\",\"few\",\"many\",\"other\"]};\nexport const da: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const de: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const dsb: {cardinal:[\"one\",\"two\",\"few\",\"other\"],ordinal:[\"other\"]};\nexport const dv: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const dz: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const ee: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const el: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const en: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"other\"]};\nexport const eo: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const es: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const et: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const eu: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const fa: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ff: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const fi: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const fil: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const fo: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const fr: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const fur: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const fy: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ga: {cardinal:[\"one\",\"two\",\"few\",\"many\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const gd: {cardinal:[\"one\",\"two\",\"few\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"other\"]};\nexport const gl: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const gsw: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const gu: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"many\",\"other\"]};\nexport const guw: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const gv: {cardinal:[\"one\",\"two\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const ha: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const haw: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const he: {cardinal:[\"one\",\"two\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const hi: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"many\",\"other\"]};\nexport const hr: {cardinal:[\"one\",\"few\",\"other\"],ordinal:[\"other\"]};\nexport const hsb: {cardinal:[\"one\",\"two\",\"few\",\"other\"],ordinal:[\"other\"]};\nexport const hu: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const hy: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const ia: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const id: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const ig: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const ii: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const io: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const is: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const it: {cardinal:[\"one\",\"other\"],ordinal:[\"many\",\"other\"]};\nexport const iu: {cardinal:[\"one\",\"two\",\"other\"],ordinal:[\"other\"]};\nexport const iw: {cardinal:[\"one\",\"two\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const ja: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const jbo: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const jgo: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ji: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const jmc: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const jv: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const jw: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const ka: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"many\",\"other\"]};\nexport const kab: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const kaj: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const kcg: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const kde: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const kea: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const kk: {cardinal:[\"one\",\"other\"],ordinal:[\"many\",\"other\"]};\nexport const kkj: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const kl: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const km: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const kn: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ko: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const ks: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ksb: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ksh: {cardinal:[\"zero\",\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ku: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const kw: {cardinal:[\"zero\",\"one\",\"two\",\"few\",\"many\",\"other\"],ordinal:[\"one\",\"many\",\"other\"]};\nexport const ky: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const lag: {cardinal:[\"zero\",\"one\",\"other\"],ordinal:[\"other\"]};\nexport const lb: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const lg: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const lkt: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const ln: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const lo: {cardinal:[\"other\"],ordinal:[\"one\",\"other\"]};\nexport const lt: {cardinal:[\"one\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const lv: {cardinal:[\"zero\",\"one\",\"other\"],ordinal:[\"other\"]};\nexport const mas: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const mg: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const mgo: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const mk: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"many\",\"other\"]};\nexport const ml: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const mn: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const mo: {cardinal:[\"one\",\"few\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const mr: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"other\"]};\nexport const ms: {cardinal:[\"other\"],ordinal:[\"one\",\"other\"]};\nexport const mt: {cardinal:[\"one\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const my: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const nah: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const naq: {cardinal:[\"one\",\"two\",\"other\"],ordinal:[\"other\"]};\nexport const nb: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const nd: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ne: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const nl: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const nn: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const nnh: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const no: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const nqo: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const nr: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const nso: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ny: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const nyn: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const om: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const or: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"two\",\"few\",\"many\",\"other\"]};\nexport const os: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const osa: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const pa: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const pap: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const pl: {cardinal:[\"one\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const prg: {cardinal:[\"zero\",\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ps: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const pt: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const pt_PT: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const rm: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ro: {cardinal:[\"one\",\"few\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const rof: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const root: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const ru: {cardinal:[\"one\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const rwk: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const sah: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const saq: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const sc: {cardinal:[\"one\",\"other\"],ordinal:[\"many\",\"other\"]};\nexport const scn: {cardinal:[\"one\",\"other\"],ordinal:[\"many\",\"other\"]};\nexport const sd: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const sdh: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const se: {cardinal:[\"one\",\"two\",\"other\"],ordinal:[\"other\"]};\nexport const seh: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ses: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const sg: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const sh: {cardinal:[\"one\",\"few\",\"other\"],ordinal:[\"other\"]};\nexport const shi: {cardinal:[\"one\",\"few\",\"other\"],ordinal:[\"other\"]};\nexport const si: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const sk: {cardinal:[\"one\",\"few\",\"many\",\"other\"],ordinal:[\"other\"]};\nexport const sl: {cardinal:[\"one\",\"two\",\"few\",\"other\"],ordinal:[\"other\"]};\nexport const sma: {cardinal:[\"one\",\"two\",\"other\"],ordinal:[\"other\"]};\nexport const smi: {cardinal:[\"one\",\"two\",\"other\"],ordinal:[\"other\"]};\nexport const smj: {cardinal:[\"one\",\"two\",\"other\"],ordinal:[\"other\"]};\nexport const smn: {cardinal:[\"one\",\"two\",\"other\"],ordinal:[\"other\"]};\nexport const sms: {cardinal:[\"one\",\"two\",\"other\"],ordinal:[\"other\"]};\nexport const sn: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const so: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const sq: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"many\",\"other\"]};\nexport const sr: {cardinal:[\"one\",\"few\",\"other\"],ordinal:[\"other\"]};\nexport const ss: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ssy: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const st: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const su: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const sv: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const sw: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const syr: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ta: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const te: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const teo: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const th: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const ti: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const tig: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const tk: {cardinal:[\"one\",\"other\"],ordinal:[\"few\",\"other\"]};\nexport const tl: {cardinal:[\"one\",\"other\"],ordinal:[\"one\",\"other\"]};\nexport const tn: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const to: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const tr: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ts: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const tzm: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ug: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const uk: {cardinal:[\"one\",\"few\",\"many\",\"other\"],ordinal:[\"few\",\"other\"]};\nexport const ur: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const uz: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const ve: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const vi: {cardinal:[\"other\"],ordinal:[\"one\",\"other\"]};\nexport const vo: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const vun: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const wa: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const wae: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const wo: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const xh: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const xog: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const yi: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\nexport const yo: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const yue: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const zh: {cardinal:[\"other\"],ordinal:[\"other\"]};\nexport const zu: {cardinal:[\"one\",\"other\"],ordinal:[\"other\"]};\n",
      "plurals.d.ts": "export type PluralCategory = \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\n\nexport function af(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ak(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function am(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function an(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ar(n: number | string, ord?: boolean): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function ars(n: number | string, ord?: boolean): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function as(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function asa(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ast(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function az(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function be(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function bem(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function bez(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function bg(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function bho(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function bm(n: number | string, ord?: boolean): \"other\";\nexport function bn(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function bo(n: number | string, ord?: boolean): \"other\";\nexport function br(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function brx(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function bs(n: number | string, ord?: boolean): \"one\" | \"few\" | \"other\";\nexport function ca(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"other\";\nexport function ce(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ceb(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function cgg(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function chr(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ckb(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function cs(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function cy(n: number | string, ord?: boolean): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function da(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function de(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function dsb(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"other\";\nexport function dv(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function dz(n: number | string, ord?: boolean): \"other\";\nexport function ee(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function el(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function en(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"other\";\nexport function eo(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function es(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function et(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function eu(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function fa(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ff(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function fi(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function fil(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function fo(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function fr(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function fur(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function fy(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ga(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function gd(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"other\";\nexport function gl(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function gsw(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function gu(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function guw(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function gv(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function ha(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function haw(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function he(n: number | string, ord?: boolean): \"one\" | \"two\" | \"many\" | \"other\";\nexport function hi(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function hr(n: number | string, ord?: boolean): \"one\" | \"few\" | \"other\";\nexport function hsb(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"other\";\nexport function hu(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function hy(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ia(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function id(n: number | string, ord?: boolean): \"other\";\nexport function ig(n: number | string, ord?: boolean): \"other\";\nexport function ii(n: number | string, ord?: boolean): \"other\";\nexport function _in(n: number | string, ord?: boolean): \"other\";\nexport function io(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function is(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function it(n: number | string, ord?: boolean): \"one\" | \"many\" | \"other\";\nexport function iu(n: number | string, ord?: boolean): \"one\" | \"two\" | \"other\";\nexport function iw(n: number | string, ord?: boolean): \"one\" | \"two\" | \"many\" | \"other\";\nexport function ja(n: number | string, ord?: boolean): \"other\";\nexport function jbo(n: number | string, ord?: boolean): \"other\";\nexport function jgo(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ji(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function jmc(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function jv(n: number | string, ord?: boolean): \"other\";\nexport function jw(n: number | string, ord?: boolean): \"other\";\nexport function ka(n: number | string, ord?: boolean): \"one\" | \"many\" | \"other\";\nexport function kab(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function kaj(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function kcg(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function kde(n: number | string, ord?: boolean): \"other\";\nexport function kea(n: number | string, ord?: boolean): \"other\";\nexport function kk(n: number | string, ord?: boolean): \"one\" | \"many\" | \"other\";\nexport function kkj(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function kl(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function km(n: number | string, ord?: boolean): \"other\";\nexport function kn(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ko(n: number | string, ord?: boolean): \"other\";\nexport function ks(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ksb(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ksh(n: number | string, ord?: boolean): \"zero\" | \"one\" | \"other\";\nexport function ku(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function kw(n: number | string, ord?: boolean): \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function ky(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function lag(n: number | string, ord?: boolean): \"zero\" | \"one\" | \"other\";\nexport function lb(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function lg(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function lkt(n: number | string, ord?: boolean): \"other\";\nexport function ln(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function lo(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function lt(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function lv(n: number | string, ord?: boolean): \"zero\" | \"one\" | \"other\";\nexport function mas(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function mg(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function mgo(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function mk(n: number | string, ord?: boolean): \"one\" | \"two\" | \"many\" | \"other\";\nexport function ml(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function mn(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function mo(n: number | string, ord?: boolean): \"one\" | \"few\" | \"other\";\nexport function mr(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"other\";\nexport function ms(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function mt(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function my(n: number | string, ord?: boolean): \"other\";\nexport function nah(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function naq(n: number | string, ord?: boolean): \"one\" | \"two\" | \"other\";\nexport function nb(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function nd(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ne(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function nl(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function nn(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function nnh(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function no(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function nqo(n: number | string, ord?: boolean): \"other\";\nexport function nr(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function nso(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ny(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function nyn(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function om(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function or(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport function os(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function osa(n: number | string, ord?: boolean): \"other\";\nexport function pa(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function pap(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function pl(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function prg(n: number | string, ord?: boolean): \"zero\" | \"one\" | \"other\";\nexport function ps(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function pt(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function pt_PT(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function rm(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ro(n: number | string, ord?: boolean): \"one\" | \"few\" | \"other\";\nexport function rof(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function root(n: number | string, ord?: boolean): \"other\";\nexport function ru(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function rwk(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function sah(n: number | string, ord?: boolean): \"other\";\nexport function saq(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function sc(n: number | string, ord?: boolean): \"one\" | \"many\" | \"other\";\nexport function scn(n: number | string, ord?: boolean): \"one\" | \"many\" | \"other\";\nexport function sd(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function sdh(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function se(n: number | string, ord?: boolean): \"one\" | \"two\" | \"other\";\nexport function seh(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ses(n: number | string, ord?: boolean): \"other\";\nexport function sg(n: number | string, ord?: boolean): \"other\";\nexport function sh(n: number | string, ord?: boolean): \"one\" | \"few\" | \"other\";\nexport function shi(n: number | string, ord?: boolean): \"one\" | \"few\" | \"other\";\nexport function si(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function sk(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function sl(n: number | string, ord?: boolean): \"one\" | \"two\" | \"few\" | \"other\";\nexport function sma(n: number | string, ord?: boolean): \"one\" | \"two\" | \"other\";\nexport function smi(n: number | string, ord?: boolean): \"one\" | \"two\" | \"other\";\nexport function smj(n: number | string, ord?: boolean): \"one\" | \"two\" | \"other\";\nexport function smn(n: number | string, ord?: boolean): \"one\" | \"two\" | \"other\";\nexport function sms(n: number | string, ord?: boolean): \"one\" | \"two\" | \"other\";\nexport function sn(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function so(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function sq(n: number | string, ord?: boolean): \"one\" | \"many\" | \"other\";\nexport function sr(n: number | string, ord?: boolean): \"one\" | \"few\" | \"other\";\nexport function ss(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ssy(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function st(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function su(n: number | string, ord?: boolean): \"other\";\nexport function sv(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function sw(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function syr(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ta(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function te(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function teo(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function th(n: number | string, ord?: boolean): \"other\";\nexport function ti(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function tig(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function tk(n: number | string, ord?: boolean): \"one\" | \"few\" | \"other\";\nexport function tl(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function tn(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function to(n: number | string, ord?: boolean): \"other\";\nexport function tr(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ts(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function tzm(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ug(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function uk(n: number | string, ord?: boolean): \"one\" | \"few\" | \"many\" | \"other\";\nexport function ur(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function uz(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function ve(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function vi(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function vo(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function vun(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function wa(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function wae(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function wo(n: number | string, ord?: boolean): \"other\";\nexport function xh(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function xog(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function yi(n: number | string, ord?: boolean): \"one\" | \"other\";\nexport function yo(n: number | string, ord?: boolean): \"other\";\nexport function yue(n: number | string, ord?: boolean): \"other\";\nexport function zh(n: number | string, ord?: boolean): \"other\";\nexport function zu(n: number | string, ord?: boolean): \"one\" | \"other\";\n"
    },
    "prismjs": {
      "index.d.ts": "// Type definitions for prismjs 1.16\n// Project: http://prismjs.com/, https://github.com/leaverou/prism\n// Definitions by: Michael Schmidt <https://github.com/RunDevelopment>\n//                 ExE Boss <https://github.com/ExE-Boss>\n//                 Erik Lieben <https://github.com/eriklieben>\n//                 Andre Wiggins <https://github.com/andrewiggins>\n//                 Michał Miszczyszyn <https://github.com/mmiszy>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\nexport as namespace Prism;\nexport const languages: Languages;\nexport const plugins: Record<string, any>;\n\n/**\n * A function which will be invoked after an element was successfully highlighted.\n *\n * @param element The element successfully highlighted.\n */\nexport type HighlightCallback = (element: Element) => void;\n\n/**\n * This is the most high-level function in Prism’s API.\n * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n * each one of them.\n *\n * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n *\n * @param [async=false] Same as in {@link Prism.highlightAllUnder}.\n * @param [callback] Same as in {@link Prism.highlightAllUnder}.\n */\nexport function highlightAll(\n    async?: boolean,\n    callback?: HighlightCallback\n): void;\n\n/**\n * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n * {@link Prism.highlightElement} on each one of them.\n *\n * The following hooks will be run:\n * 1. `before-highlightall`\n * 2. All hooks of {@link Prism.highlightElement} for each element.\n *\n * @param container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n * @param [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n * @param [callback] An optional callback to be invoked on each element after its highlighting is done.\n */\nexport function highlightAllUnder(\n    container: ParentNode,\n    async?: boolean,\n    callback?: HighlightCallback\n): void;\n\n/**\n * Highlights the code inside a single element.\n *\n * The following hooks will be run:\n * 1. `before-sanity-check`\n * 2. `before-highlight`\n * 3. All hooks of {@link Prism.highlightElement}. These hooks will only be run by the current worker if `async` is `true`.\n * 4. `before-insert`\n * 5. `after-highlight`\n * 6. `complete`\n *\n * @param element The element containing the code.\n * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n * @param [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n *\n * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n * asynchronous highlighting to work. You can build your own bundle on the\n * [Download page](https://prismjs.com/download.html).\n * @param [callback] An optional callback to be invoked after the highlighting is done.\n * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n */\nexport function highlightElement(\n    element: Element,\n    async?: boolean,\n    callback?: HighlightCallback\n): void;\n\n/**\n * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n * and the language definitions to use, and returns a string with the HTML produced.\n *\n * The following hooks will be run:\n * 1. `before-tokenize`\n * 2. `after-tokenize`\n * 3. `wrap`: On each {@link Prism.Token}.\n *\n * @param text A string with the code to be highlighted.\n * @param grammar An object containing the tokens to use.\n *\n * Usually a language definition like `Prism.languages.markup`.\n * @param language The name of the language definition passed to `grammar`.\n * @returns The highlighted HTML.\n *\n * @example\n * Prism.highlight('var foo = true;', Prism.languages.js, 'js');\n */\nexport function highlight(\n    text: string,\n    grammar: Grammar,\n    language: string\n): string;\n\n/**\n * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n * and the language definitions to use, and returns an array with the tokenized code.\n *\n * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n *\n * This method could be useful in other contexts as well, as a very crude parser.\n *\n * @param text A string with the code to be highlighted.\n * @param grammar An object containing the tokens to use.\n *\n * Usually a language definition like `Prism.languages.markup`.\n * @returns An array of strings, tokens and other arrays.\n */\nexport function tokenize(\n    text: string,\n    grammar: Grammar\n): Array<string | Token>;\n\nexport interface Environment extends Record<string, any> {\n    selector?: string;\n    element?: Element;\n    language?: string;\n    grammar?: Grammar;\n    code?: string;\n    highlightedCode?: string;\n    type?: string;\n    content?: string;\n    tag?: string;\n    classes?: string[];\n    attributes?: Record<string, string>;\n    parent?: Array<string | Token>;\n}\n\nexport namespace util {\n    interface Identifier {\n        value: number;\n    }\n\n    /** Encode raw strings in tokens in preparation to display as HTML */\n    function encode(tokens: TokenStream): TokenStream;\n\n    /** Determine the type of the object */\n    function type(o: null): \"Null\";\n    function type(o: undefined): \"Undefined\";\n    // tslint:disable:ban-types\n    function type(o: boolean | Boolean): \"Boolean\";\n    function type(o: number | Number): \"Number\";\n    function type(o: string | String): \"String\";\n    function type(o: Function): \"Function\";\n    // tslint:enable:ban-types\n    function type(o: RegExp): \"RegExp\";\n    function type(o: any[]): \"Array\";\n    function type(o: any): string;\n\n    /** Get the unique id of this object or give it one if it does not have one */\n    function objId(obj: any): Identifier;\n\n    /** Deep clone a language definition (e.g. to extend it) */\n    function clone<T>(o: T): T;\n}\n\nexport type GrammarValue = RegExp | TokenObject | Array<RegExp | TokenObject>;\nexport type Grammar = GrammarRest & Record<string, GrammarValue>;\nexport interface GrammarRest {\n    keyword?: GrammarValue;\n    number?: GrammarValue;\n    function?: GrammarValue;\n    string?: GrammarValue;\n    boolean?: GrammarValue;\n    operator?: GrammarValue;\n    punctuation?: GrammarValue;\n    atrule?: GrammarValue;\n    url?: GrammarValue;\n    selector?: GrammarValue;\n    property?: GrammarValue;\n    important?: GrammarValue;\n    style?: GrammarValue;\n    comment?: GrammarValue;\n    \"class-name\"?: GrammarValue;\n\n    /**\n     * An optional grammar object that will appended to this grammar.\n     */\n    rest?: Grammar;\n}\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n */\nexport interface TokenObject {\n    /**\n     * The regular expression of the token.\n     */\n    pattern: RegExp;\n\n    /**\n     * If `true`, then the first capturing group of `pattern` will (effectively) behave as a lookbehind\n     * group meaning that the captured text will not be part of the matched text of the new token.\n     */\n    lookbehind?: boolean;\n\n    /**\n     * Whether the token is greedy.\n     *\n     * @default false\n     */\n    greedy?: boolean;\n\n    /**\n     * An optional alias or list of aliases.\n     */\n    alias?: string | string[];\n\n    /**\n     * The nested tokens of this token.\n     *\n     * This can be used for recursive language definitions.\n     *\n     * Note that this can cause infinite recursion.\n     */\n    inside?: Grammar;\n}\nexport type Languages = LanguageMapProtocol & LanguageMap;\nexport interface LanguageMap {\n    /**\n     * Get a defined language's definition.\n     */\n    [language: string]: Grammar;\n}\nexport interface LanguageMapProtocol {\n    /**\n     * Creates a deep copy of the language with the given id and appends the given tokens.\n     *\n     * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n     * will be overwritten at its original position.\n     *\n     * @param id The id of the language to extend. This has to be a key in `Prism.languages`.\n     * @param redef The new tokens to append.\n     * @returns The new language created.\n     * @example\n     * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n     *     'color': /\\b(?:red|green|blue)\\b/\n     * });\n     */\n    extend(id: string, redef: Grammar): Grammar;\n\n    /**\n     * Inserts tokens _before_ another token in a language definition or any other grammar.\n     *\n     * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n     * we cannot just provide an object, we need an object and a key.\n     *\n     * If the grammar of `inside` and `insert` have tokens with the same name, the tokens in `inside` will be ignored.\n     *\n     * All references of the old object accessible from `Prism.languages` or `insert` will be replace with the new one.\n     *\n     * @param inside The property of `root` that contains the object to be modified.\n     *\n     * This is usually a language id.\n     * @param before The key to insert before.\n     * @param insert An object containing the key-value pairs to be inserted.\n     * @param [root] The object containing `inside`, i.e. the object that contains the object that will be modified.\n     *\n     * Defaults to `Prism.languages`.\n     * @returns The new grammar created.\n     * @example\n     * Prism.languages.insertBefore('markup', 'cdata', {\n     *     'style': { ... }\n     * });\n     */\n    insertBefore(\n        inside: string,\n        before: string,\n        insert: Grammar,\n        root: LanguageMap\n    ): Grammar;\n}\n\nexport namespace hooks {\n    /**\n     * @param env The environment variables of the hook.\n     */\n    type HookCallback = (env: Environment) => void;\n    type HookTypes = keyof HookEnvironmentMap;\n\n    interface HookEnvironmentMap {\n        \"before-highlightall\": RequiredEnvironment<\"selector\">;\n\n        \"before-sanity-check\": ElementEnvironment;\n        \"before-highlight\": ElementEnvironment;\n\n        \"before-insert\": ElementHighlightedEnvironment;\n        \"after-highlight\": ElementHighlightedEnvironment;\n        complete: ElementHighlightedEnvironment;\n\n        \"before-tokenize\": TokenizeEnvironment;\n        \"after-tokenize\": TokenizeEnvironment;\n\n        wrap: RequiredEnvironment<\n            \"type\" | \"content\" | \"tag\" | \"classes\" | \"attributes\" | \"language\"\n        >;\n    }\n\n    type RequiredEnvironment<\n        T extends keyof Environment,\n        U extends Environment = Environment\n    > = U & Required<Pick<U, T>>;\n    type ElementEnvironment = RequiredEnvironment<\n        \"element\" | \"language\" | \"grammar\" | \"code\"\n    >;\n    type ElementHighlightedEnvironment = RequiredEnvironment<\n        \"highlightedCode\",\n        ElementEnvironment\n    >;\n    type TokenizeEnvironment = RequiredEnvironment<\n        \"code\" | \"grammar\" | \"language\"\n    >;\n\n    interface RegisteredHooks {\n        [hook: string]: HookCallback[];\n    }\n\n    const all: RegisteredHooks;\n\n    /**\n     * Adds the given callback to the list of callbacks for the given hook.\n     *\n     * The callback will be invoked when the hook it is registered for is run.\n     * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n     *\n     * One callback function can be registered to multiple hooks and the same hook multiple times.\n     *\n     * @param name The name of the hook.\n     * @param callback The callback function which is given environment variables.\n     */\n    function add<K extends keyof HookEnvironmentMap>(\n        name: K,\n        callback: (env: HookEnvironmentMap[K]) => void\n    ): void;\n    function add(name: string, callback: HookCallback): void;\n\n    /**\n     * Runs a hook invoking all registered callbacks with the given environment variables.\n     *\n     * Callbacks will be invoked synchronously and in the order in which they were registered.\n     *\n     * @param name The name of the hook.\n     * @param env The environment variables of the hook passed to all callbacks registered.\n     */\n    function run<K extends keyof HookEnvironmentMap>(\n        name: K,\n        env: HookEnvironmentMap[K]\n    ): void;\n    function run(name: string, env: Environment): void;\n}\n\nexport type TokenStream = string | Token | Array<string | Token>;\n\nexport class Token {\n    /**\n     * Creates a new token.\n     *\n     * @param type See {@link Prism.Token#type type}\n     * @param content See {@link Prism.Token#content content}\n     * @param [alias] The alias(es) of the token.\n     * @param [matchedStr=\"\"] A copy of the full string this token was created from.\n     * @param [greedy=false] See {@link Prism.Token#greedy greedy}\n     */\n    constructor(\n        type: string,\n        content: TokenStream,\n        alias?: string | string[],\n        matchedStr?: string,\n        greedy?: boolean\n    );\n\n    /**\n     * The type of the token.\n     *\n     * This is usually the key of a pattern in a {@link Grammar}.\n     */\n    type: string;\n\n    /**\n     * The strings or tokens contained by this token.\n     *\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\n     */\n    content: TokenStream;\n\n    /**\n     * The alias(es) of the token.\n     *\n     * @see TokenObject\n     */\n    alias: string | string[];\n\n    /**\n     * The length of the matched string or 0.\n     */\n    length: number;\n\n    /**\n     * Whether the pattern that created this token is greedy or not.\n     *\n     * @see TokenObject\n     */\n    greedy: boolean;\n\n    // tslint:disable:no-redundant-jsdoc-2\n    /**\n     * Converts the given token or token stream to an HTML representation.\n     *\n     * The following hooks will be run:\n     * 1. `wrap`: On each {@link Prism.Token}.\n     *\n     * @param token The token or token stream to be converted.\n     * @param language The name of current language.\n     * @param [parent] The parent token stream, if any.\n     * @return The HTML representation of the token or token stream.\n     * @private\n     */\n    static stringify(\n        token: TokenStream,\n        language: string,\n        parent?: Array<string | Token>\n    ): string;\n}\n"
    },
    "refractor": {
      "core.d.ts": "import * as Prism from 'prismjs';\n\nexport interface RefractorSyntax {\n    displayName: string;\n    aliases: string[];\n    (prism: typeof Prism): void;\n}\n\nexport namespace AST {\n    namespace Unist {\n        interface Node {\n            type: string;\n        }\n\n        interface Parent extends Node {\n            children: RefractorNode[];\n        }\n\n        interface Text extends Node {\n            value: string;\n        }\n    }\n\n    interface Properties {\n        className?: string[];\n        [key: string]: any;\n    }\n\n    interface Element extends Unist.Parent {\n        type: 'element';\n        tagName: string;\n        properties: Properties;\n    }\n\n    interface Text extends Unist.Text {\n        type: 'text';\n    }\n}\n\nexport type RefractorNode = AST.Element | AST.Text;\n\n/**\n * Register a syntax. Needed if you’re using refractor/core.js.\n *\n * ```ts\n * import refractor = require('refractor/core')\n * import markdown = require('refractor/lang/markdown')\n *\n * refractor.register(markdown)\n * console.log(refractor.highlight('*Emphasis*', 'markdown'))\n *\n * // => [ { type: 'element', tagName: 'span', properties: [Object], children: [Array] } ]\n * ```\n *\n * @param syntax\n */\nexport function register(syntax: RefractorSyntax): void;\n\n/**\n * Parse value (string) according to the language (name or alias) syntax.\n *\n * @returns Virtual nodes representing the highlighted value (Array.<Node>).\n *\n * ```ts\n * import refractor = require('refractor/core')\n * console.log(refractor.highlight('em { color: red }', 'css'))\n * ```\n *\n * Yields:\n *\n * ```\n * [\n *   { type: 'element',\n *   tagName: 'span',\n *   properties: [Object],\n *   children: [Array] },\n *   { type: 'text', value: ' ' },\n *   // ...\n *   { type: 'text', value: ' red ' },\n *   { type: 'element',\n *   tagName: 'span',\n *   properties: [Object],\n *   children: [Array] }\n * ]\n * ```\n */\nexport function highlight(value: string, name: string): RefractorNode[];\n\n/**\n * Check if a language (name or alias) is registered.\n *\n * ```ts\n * import refractor = require('refractor/core')\n * import markdown = require('refractor/lang/markdown')\n *\n * console.log(registered('markdown'))\n *\n * register(markdown)\n *\n * console.log(registered('markdown'))\n *\n * // =>  true | false\n * ```\n */\nexport function registered(name: string): boolean;\n\n/**\n * List all registered languages (names and aliases).\n *\n * ```ts\n * import refractor = require('refractor/core')\n * import markdown = require('refractor/lang/markdown')\n *\n * console.log(refractor.listLanguages())\n *\n * refractor.register(markdown)\n *\n * console.log(refractor.listLanguages())\n * ```\n *\n * Yields:\n *\n * ```\n * [ 'markup',\n *   'xml',\n *   'html',\n *   'mathml',\n *   'svg',\n *   'css',\n *   'clike',\n *   'javascript',\n *   'js' ]\n * [ 'markup',\n *   'xml',\n *   'html',\n *   'mathml',\n *   'svg',\n *   'css',\n *   'clike',\n *   'javascript',\n *   'js',\n *   'markdown' ]\n * ```\n */\nexport function listLanguages(): string[];\n",
      "index.d.ts": "// Type definitions for refractor 2.8\n// Project: https://github.com/wooorm/refractor#readme\n// Definitions by: Ifiok Jr. <https://github.com/ifiokjr>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\nimport refractor = require('./core');\nexport = refractor;\n",
      "lang/abap.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/abnf.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/actionscript.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/ada.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/apacheconf.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/apl.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/applescript.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/arduino.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/arff.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/asciidoc.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/asm6502.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/aspnet.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/autohotkey.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/autoit.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/bash.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/basic.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/batch.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/bison.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/bnf.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/brainfuck.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/bro.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/c.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/cil.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/clike.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/clojure.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/cmake.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/coffeescript.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/cpp.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/crystal.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/csharp.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/csp.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/css-extras.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/css.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/d.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/dart.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/diff.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/django.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/docker.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/ebnf.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/eiffel.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/ejs.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/elixir.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/elm.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/erb.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/erlang.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/flow.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/fortran.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/fsharp.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/gcode.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/gedcom.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/gherkin.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/git.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/glsl.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/gml.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/go.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/graphql.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/groovy.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/haml.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/handlebars.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/haskell.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/haxe.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/hcl.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/hpkp.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/hsts.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/http.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/ichigojam.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/icon.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/inform7.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/ini.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/io.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/j.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/java.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/javadoc.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/javadoclike.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/javascript.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/javastacktrace.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/jolie.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/js-extras.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/jsdoc.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/json.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/json5.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/jsonp.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/jsx.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/julia.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/keyman.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/kotlin.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/latex.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/less.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/liquid.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/lisp.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/livescript.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/lolcode.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/lua.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/makefile.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/markdown.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/markup-templating.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/markup.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/matlab.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/mel.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/mizar.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/monkey.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/n1ql.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/n4js.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/nand2tetris-hdl.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/nasm.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/nginx.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/nim.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/nix.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/nsis.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/objectivec.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/ocaml.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/opencl.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/oz.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/parigp.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/parser.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/pascal.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/perl.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/php-extras.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/php.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/phpdoc.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/plsql.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/powershell.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/processing.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/prolog.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/properties.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/protobuf.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/pug.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/puppet.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/pure.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/python.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/q.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/qore.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/r.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/reason.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/regex.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/renpy.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/rest.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/rip.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/roboconf.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/ruby.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/rust.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/sas.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/sass.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/scala.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/scheme.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/scss.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/smalltalk.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/smarty.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/soy.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/sql.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/stylus.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/swift.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/t4-cs.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/t4-templating.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/t4-vb.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/tap.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/tcl.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/textile.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/toml.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/tsx.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/tt2.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/twig.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/typescript.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/vala.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/vbnet.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/velocity.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/verilog.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/vhdl.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/vim.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/visual-basic.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/wasm.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/wiki.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/xeora.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/xojo.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/xquery.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n",
      "lang/yaml.d.ts": "import { RefractorSyntax } from '../core';\ndeclare const lang: RefractorSyntax;\nexport = lang;\n"
    },
    "orderedmap": {
      "index.d.ts": "// Type definitions for orderedmap 1.0\r\n// Project: https://github.com/marijnh/orderedmap\r\n// Definitions by: Bradley Ayers <https://github.com/bradleyayers>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n// TypeScript Version: 2.1\r\n\r\nexport = OrderedMap;\r\n\r\ndeclare class OrderedMap<T> {\r\n  get(key: string): T | undefined;\r\n  update(key: string, value: T, newKey?: string): this;\r\n  remove(key: string): this;\r\n  addToStart(key: string, value: T): this;\r\n  addToEnd(key: string, value: T): this;\r\n  addBefore(place: string, key: string, value: T): this;\r\n  forEach(f: (key: string, value: T) => void): void;\r\n  prepend(map: { [key: string]: T } | OrderedMap<T>): this;\r\n  append(map: { [key: string]: T } | OrderedMap<T>): this;\r\n  subtract(map: { [key: string]: T } | OrderedMap<T>): this;\r\n  readonly size: number;\r\n\r\n  static from<T>(value?: { [key: string]: T } | OrderedMap<T>): OrderedMap<T>;\r\n}\r\n"
    },
    "throttle-debounce": {
      "index.d.ts": "// Type definitions for throttle-debounce 2.1\n// Project: https://github.com/niksy/throttle-debounce\n// Definitions by: Marek Buchar <https://github.com/czbuchi>, Frank Li <https://github.com/franklixuefei>, Thomas Oddsund <https://github.com/oddsund>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\nexport {};\n\ninterface Cancel {\n    cancel: () => void;\n}\n\nexport type throttle<T> = T & Cancel;\nexport type debounce<T> = throttle<T>;\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param delay\n * A zero-or-greater delay in milliseconds. For event callbacks, values around\n * 100 or 250 (or even higher) are most useful.\n *\n * @param noTrailing\n * If noTrailing is true, callback will only execute every `delay` milliseconds\n * while the throttled-function is being called. If noTrailing is false or\n * unspecified, callback will be executed one final time fter the last\n * throttled-function call. (After the throttled-function has not been called\n * for `delay` milliseconds, the internal counter is reset)\n *\n * @param callback\n * A function to be executed after delay milliseconds. The `this` context and\n * all arguments are passed through, as-is, to `callback` when the\n * throttled-function is executed.\n *\n * @param debounceMode If `debounceMode` is true (at begin), schedule\n * `callback` to execute after `delay` ms. If `debounceMode` is false (at end),\n * schedule `callback` to execute after `delay` ms.\n *\n * @return\n * A new, throttled, function.\n */\nexport function throttle<T extends (...args: any[]) => any>(\n    delay: number,\n    noTrailing: boolean,\n    callback: T,\n    debounceMode?: boolean\n): throttle<T>;\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param delay\n * A zero-or-greater delay in milliseconds. For event callbacks, values around\n * 100 or 250 (or even higher) are most useful.\n *\n * @param callback\n * A function to be executed after delay milliseconds. The `this` context and\n * all arguments are passed through, as-is, to `callback` when the\n * throttled-function is executed.\n *\n * @param debounceMode If `debounceMode` is true (at begin), schedule\n * `callback` to execute after `delay` ms. If `debounceMode` is false (at end),\n * schedule `callback` to execute after `delay` ms.\n *\n * @return\n * A new, throttled, function.\n */\nexport function throttle<T extends (...args: any[]) => any>(\n    delay: number,\n    callback: T,\n    debounceMode?: boolean\n): throttle<T>;\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param delay\n * A zero-or-greater delay in milliseconds. For event callbacks, values around\n * 100 or 250 (or even higher) are most useful.\n *\n * @param atBegin\n * If atBegin is false or unspecified, callback will only be executed `delay`\n * milliseconds after the last debounced-function call. If atBegin is true,\n * callback will be executed only at the first debounced-function call. (After\n * the throttled-function has not been called for `delay` milliseconds, the\n * internal counter is reset).\n *\n * @param callback\n * A function to be executed after delay milliseconds. The `this` context and\n * all arguments are passed through, as-is, to `callback` when the\n * debounced-function is executed.\n *\n * @return\n * A new, debounced function.\n */\nexport function debounce<T extends (...args: any[]) => any>(\n    delay: number,\n    atBegin: boolean,\n    callback: T\n): debounce<T>;\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param delay\n * A zero-or-greater delay in milliseconds. For event callbacks, values around\n * 100 or 250 (or even higher) are most useful.\n *\n * @param callback\n * A function to be executed after delay milliseconds. The `this` context and\n * all arguments are passed through, as-is, to `callback` when the\n * debounced-function is executed.\n *\n * @return\n * A new, debounced function.\n */\nexport function debounce<T extends (...args: any[]) => any>(\n    delay: number,\n    callback: T\n): debounce<T>;\n"
    },
    "object.omit": {
      "index.d.ts": "// Type definitions for object.omit 3.0\n// Project: https://github.com/jonschlinkert/object.omit\n// Definitions by: Ifiok Jr. <https://github.com/ifiokjr>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\ntype Omit<GType, GKeys extends keyof GType> = Pick<GType, Exclude<keyof GType, GKeys>>;\n\n/**\n * Return a copy of an object excluding the given key, or array of keys. Also accepts an optional filter function as the last argument.\"\n *\n * ```ts\n * omit({a: 'a', b: 'b', c: 'c'}, ['a', 'c'])\n * //=> { b: 'b' }\n * ```\n *\n * @param object\n * @param keys\n */\n\ndeclare function omit<GObject extends object, GKey extends keyof GObject>(\n  object: GObject,\n  key: GKey | GKey[],\n): Omit<GObject, GKey>;\n\ndeclare function omit<GObject extends object, GKey extends keyof GObject>(\n  object: GObject,\n  fn: (value: GObject[GKey], key: GKey, obj: GObject) => boolean,\n): { [key: string]: any };\n\nexport = omit;\n"
    },
    "object.pick": {
      "index.d.ts": "// Type definitions for object.pick 1.3\n// Project: https://github.com/jonschlinkert/object.pick\n// Definitions by: Ifiok Jr. <https://github.com/ifiokjr>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n/**\n * Returns a filtered copy of an object with only the specified keys, similar to `_.pick` from lodash / underscore.\n *\n * @param object\n * @param keys\n */\ndeclare function pick<T extends object, U extends keyof T>(object: T, keys: U[]): Pick<T, U>;\n\nexport = pick;\n"
    },
    "@remirror/core-constants": {
      "core-constants.d.ts": "/**\r\n * The editor class name\r\n */\r\nexport declare const EDITOR_CLASS_NAME: \"remirror-editor\";\r\n/**\r\n * The editor class selector\r\n */\r\nexport declare const EDITOR_CLASS_SELECTOR: string;\r\n/**\r\n * The css class added to a node that is selected.\r\n */\r\nexport declare const SELECTED_NODE_CLASS_NAME = \"ProseMirror-selectednode\";\r\n/**\r\n * The css selector for a selected node.\r\n */\r\nexport declare const SELECTED_NODE_CLASS_SELECTOR: string;\r\n/**\r\n * ProseMirror uses the Unicode Character 'OBJECT REPLACEMENT CHARACTER'\r\n * (U+FFFC) as text representation for leaf nodes, i.e. nodes that don't have\r\n * any content or text property (e.g. hardBreak, emoji, mention, rule) It was\r\n * introduced because of https://github.com/ProseMirror/prosemirror/issues/262\r\n * This can be used in an input rule regex to be able to include or exclude such\r\n * nodes.\r\n */\r\nexport declare const LEAF_NODE_REPLACING_CHARACTER = \"\\uFFFC\";\r\n/**\r\n * The null character.\r\n *\r\n * See {@link https://stackoverflow.com/a/6380172}\r\n */\r\nexport declare const NULL_CHARACTER = \"\\0\";\r\n/**\r\n * A character useful for separating inline nodes.\r\n *\r\n * @remarks\r\n * Typically used in decorations as follows.\r\n *\r\n * ```ts\r\n * document.createTextNode(ZERO_WIDTH_SPACE_CHAR);\r\n * ```\r\n *\r\n * This produces the html entity '8203'\r\n */\r\nexport declare const ZERO_WIDTH_SPACE_CHAR = \"\\u200B\";\r\n/**\r\n * The non breaking space character.\r\n */\r\nexport declare const NON_BREAKING_SPACE_CHAR = \"\\u00A0\";\r\n/**\r\n * A default empty object node. Useful for resetting the content of a\r\n * prosemirror document.\r\n */\r\nexport declare const EMPTY_PARAGRAPH_NODE: {\r\n    type: string;\r\n    content: {\r\n        type: string;\r\n    }[];\r\n};\r\nexport declare const EMPTY_NODE: {\r\n    type: string;\r\n    content: any[];\r\n};\r\n/**\r\n * Marks are categorized into different groups. One motivation for this was to\r\n * allow the `code` mark to exclude other marks, without needing to explicitly\r\n * name them. Explicit naming requires the named mark to exist in the schema.\r\n * This is undesirable because we want to construct different schemas that have\r\n * different sets of nodes/marks.\r\n */\r\nexport declare enum MarkGroup {\r\n    /**\r\n     * Mark group for font styling (e.g. bold, italic, underline, superscript).\r\n     */\r\n    FontStyle = \"fontStyle\",\r\n    /**\r\n     * Mark groups for links.\r\n     */\r\n    Link = \"link\",\r\n    /**\r\n     * Mark groups for colors (text-color, background-color, etc).\r\n     */\r\n    Color = \"color\",\r\n    /**\r\n     * Mark group for alignment.\r\n     */\r\n    Alignment = \"alignment\",\r\n    /**\r\n     * Mark group for indentation.\r\n     */\r\n    Indentation = \"indentation\",\r\n    /**\r\n     * Marks which affect behavior.\r\n     */\r\n    Behavior = \"behavior\",\r\n    /**\r\n     * Marks which store code.\r\n     */\r\n    Code = \"code\"\r\n}\r\nexport declare enum NodeGroup {\r\n    /**\r\n     * Whether this node is an inline node.\r\n     *\r\n     * @example\r\n     *\r\n     * `text` is an inline node, but `paragraph` is a block node.\r\n     */\r\n    Inline = \"inline\",\r\n    /**\r\n     * Sets this as a block level node.\r\n     */\r\n    Block = \"block\"\r\n}\r\n/**\r\n * These are the default supported tag strings which help categorize different\r\n * behaviors that extensions can exhibit.\r\n *\r\n * @remarks\r\n *\r\n * Any extension can register itself with multiple such behaviors and these\r\n * categorizations can be used by other extensions when running commands and\r\n * updating the document.\r\n */\r\nexport declare enum ExtensionTag {\r\n    /**\r\n     * Describes a node that can be used as the last node of a document and\r\n     * doesn't need to have anything else rendered after itself.\r\n     *\r\n     * @remarks\r\n     *\r\n     * e.g. `paragraph`\r\n     */\r\n    LastNodeCompatible = \"lastNodeCompatible\",\r\n    /**\r\n     * A mark that is used to change the formatting of the node it wraps.\r\n     *\r\n     * @remarks\r\n     *\r\n     * e.g. `bold`, `italic`\r\n     */\r\n    FormattingMark = \"formattingMark\",\r\n    /**\r\n     * A node that formats text in a non-standard way.\r\n     *\r\n     * @remarks\r\n     *\r\n     * e.g. `codeBlock`, `heading`, `blockquote`\r\n     */\r\n    FormattingNode = \"formattingNode\",\r\n    /**\r\n     * Identifies a node which has problems with cursor navigation.\r\n     *\r\n     * @remarks\r\n     *\r\n     * When this tag is added to an extension this will be picked up by\r\n     * behavioural extensions such as the NodeCursorExtension which makes hard to\r\n     * reach nodes reachable using keyboard arrows.\r\n     */\r\n    NodeCursor = \"nodeCursor\"\r\n}\r\n/**\r\n * The identifier key which is used to check objects for whether they are a\r\n * certain type.\r\n *\r\n * @remarks\r\n *\r\n * Just pretend you don't know this exists.\r\n *\r\n * @internal\r\n */\r\nexport declare const __INTERNAL_REMIRROR_IDENTIFIER_KEY__: unique symbol;\r\n/**\r\n * These constants are stored on the `REMIRROR_IDENTIFIER_KEY` property of\r\n * `remirror` related constructors and instances in order to identify them as\r\n * being internal to Remirror.\r\n *\r\n * @remarks\r\n *\r\n * This helps to prevent issues around check types via `instanceof` which can\r\n * lead to false negatives.\r\n *\r\n * @internal\r\n */\r\nexport declare enum RemirrorIdentifier {\r\n    /**\r\n     * Identifies `PlainExtension`s.\r\n     */\r\n    PlainExtension = \"RemirrorPlainExtension\",\r\n    /**\r\n     * Identifies `NodeExtension`s.\r\n     */\r\n    NodeExtension = \"RemirrorNodeExtension\",\r\n    /**\r\n     * Identifies `MarkExtension`s.\r\n     */\r\n    MarkExtension = \"RemirrorMarkExtension\",\r\n    /**\r\n     * Identifies `PlainExtensionConstructor`s.\r\n     */\r\n    PlainExtensionConstructor = \"RemirrorPlainExtensionConstructor\",\r\n    /**\r\n     * Identifies `NodeExtensionConstructor`s.\r\n     */\r\n    NodeExtensionConstructor = \"RemirrorNodeExtensionConstructor\",\r\n    /**\r\n     * Identifies `MarkExtensionConstructor`s.\r\n     */\r\n    MarkExtensionConstructor = \"RemirrorMarkExtensionConstructor\",\r\n    /**\r\n     * The string used to identify an instance of the `Manager`\r\n     */\r\n    Manager = \"RemirrorManager\",\r\n    /**\r\n     * The preset type identifier.\r\n     */\r\n    Preset = \"RemirrorPreset\",\r\n    /**\r\n     * The preset type identifier.\r\n     */\r\n    PresetConstructor = \"RemirrorPresetConstructor\"\r\n}\r\n/**\r\n * The priority of extension which determines what order it is loaded into the\r\n * editor.\r\n *\r\n * @remarks\r\n *\r\n * Higher priority extension (higher numberic value) will ensure the extension\r\n * has a higher preference in your editor. In the case where you load two\r\n * identical extensions into your editor (same name, or same constructor), the\r\n * extension with the  higher priority is the one that will be loaded.\r\n *\r\n * The higher the numeric value the higher the priority. The priority can also\r\n * be passed a number but naming things in this `enum` should help provide some\r\n * context to the numbers.\r\n *\r\n * By default all extensions are created with a `ExtensionPriority.Default`.\r\n */\r\nexport declare enum ExtensionPriority {\r\n    /**\r\n     * Use this **never** 😉\r\n     */\r\n    Critical = 1000000,\r\n    /**\r\n     * A, like super duper, high priority.\r\n     */\r\n    Highest = 100000,\r\n    /**\r\n     * The highest priority level that should be used in a publicly shared\r\n     * extension (to allow some wiggle room for downstream users overriding\r\n     * priorities).\r\n     */\r\n    High = 10000,\r\n    /**\r\n     * A medium priority extension. This is typically all you need to take\r\n     * priority over built in extensions.\r\n     */\r\n    Medium = 1000,\r\n    /**\r\n     * This is the **default** priority for most extensions.\r\n     */\r\n    Default = 100,\r\n    /**\r\n     * This is the **default** priority for builtin behavior changing extensions.\r\n     */\r\n    Low = 10,\r\n    /**\r\n     * This is useful for extensions that exist to be overridden.\r\n     */\r\n    Lowest = 0\r\n}\r\n/**\r\n * Identifies the stage the extension manager is at.\r\n */\r\nexport declare enum ManagerPhase {\r\n    /**\r\n     * The initial value for the manager phase.\r\n     */\r\n    None = 0,\r\n    /**\r\n     * When the extension manager is being created and the onCreate methods are\r\n     * being called.\r\n     *\r\n     * This happens within the RemirrorManager constructor.\r\n     */\r\n    Create = 1,\r\n    /**\r\n     * When the view is being added and all `onView` lifecycle methods are being\r\n     * called. The view is typically added before the dom is ready for it.\r\n     */\r\n    EditorView = 2,\r\n    /**\r\n     * The phases of creating this manager are completed and `onTransaction` is\r\n     * called every time the state updates.\r\n     */\r\n    Runtime = 3,\r\n    /**\r\n     * The manager is being destroyed.\r\n     *\r\n     * TODO not currently implemented\r\n     */\r\n    Destroy = 4\r\n}\r\n",
      "error-constants.d.ts": "/**\r\n * The error codes for errors used throughout the codebase.\r\n *\r\n * @remarks\r\n *\r\n * They can be removed but should never be changed since they are also used to\r\n * reference the errors within search engines.\r\n */\r\nexport declare enum ErrorConstant {\r\n    /** An error occurred in production. Details shall be hidden. */\r\n    PROD = \"RMR0000\",\r\n    /** An error happened but we're not quite sure why. */\r\n    UNKNOWN = \"RMR0001\",\r\n    /** The arguments passed to the command method were invalid. */\r\n    INVALID_COMMAND_ARGUMENTS = \"RMR0002\",\r\n    /** This is a custom error possibly thrown by an external library. */\r\n    CUSTOM = \"RMR0003\",\r\n    /**\r\n     * An error occurred in a function called from the `@remirror/core-helpers`\r\n     * library.\r\n     */\r\n    CORE_HELPERS = \"RMR0004\",\r\n    /** You have attempted to change a value that shouldn't be changed. */\r\n    MUTATION = \"RMR0005\",\r\n    /**\r\n     * This is an error which should not occur and is internal to the remirror\r\n     * codebase.\r\n     */\r\n    INTERNAL = \"RMR0006\",\r\n    /** You're editor is missing a required extension. */\r\n    MISSING_REQUIRED_EXTENSION = \"RMR0007\",\r\n    /**\r\n     * Called a method event at the wrong time. Please make sure getter functions\r\n     * are only called with within the scope of the returned functions. They\r\n     * should not be called in the outer scope of your method.\r\n     */\r\n    MANAGER_PHASE_ERROR = \"RMR0008\",\r\n    /**\r\n     * No directly invoking the editor manager with `new`. Instead use one of the\r\n     * static methods to create your instance.\r\n     */\r\n    NEW_EDITOR_MANAGER = \"RMR0009\",\r\n    /**\r\n     * The user requested an invalid extension from the preset. Please check the\r\n     * `createExtensions` return method is returning an extension with the defined\r\n     * constructor.\r\n     */\r\n    INVALID_PRESET_EXTENSION = \"RMR0010\",\r\n    /**\r\n     * Invalid value passed into `Manager constructor`. Only `Presets` and\r\n     * `Extensions` are supported.\r\n     */\r\n    INVALID_MANAGER_ARGUMENTS = \"RMR0011\",\r\n    /**\r\n     * The `commands` or `dispatch` method which is passed into the `create*`\r\n     * method should only be called within returned method since it relies on an\r\n     * active view (not present in the outer scope).\r\n     */\r\n    COMMANDS_CALLED_IN_OUTER_SCOPE = \"RMR0012\",\r\n    /**\r\n     * The `helpers` method which is passed into the ``create*` method should only\r\n     * be called within returned method since it relies on an active view (not\r\n     * present in the outer scope).\r\n     */\r\n    HELPERS_CALLED_IN_OUTER_SCOPE = \"RMR0013\",\r\n    /** The user requested an invalid extension from the manager. */\r\n    INVALID_MANAGER_EXTENSION = \"RMR0014\",\r\n    /** The user requested an invalid preset from the manager. */\r\n    INVALID_MANAGER_PRESET = \"RMR0015\",\r\n    /** Command method names must be unique within the editor. */\r\n    DUPLICATE_COMMAND_NAMES = \"RMR0016\",\r\n    /** Helper method names must be unique within the editor. */\r\n    DUPLICATE_HELPER_NAMES = \"RMR0017\",\r\n    /** Attempted to chain a non chainable command. */\r\n    NON_CHAINABLE_COMMAND = \"RMR0018\",\r\n    /** The provided extension is invalid. */\r\n    INVALID_EXTENSION = \"RMR0019\",\r\n    /** The provided preset is invalid. */\r\n    INVALID_PRESET = \"RMR0020\",\r\n    /** An invalid name was used for the extension. */\r\n    INVALID_NAME = \"RMR0050\",\r\n    /** An error occurred within an extension. */\r\n    EXTENSION = \"RMR0100\",\r\n    /** The spec was defined without calling the `defaults`, `parse` or `dom` methods. */\r\n    EXTENSION_SPEC = \"RMR0101\",\r\n    /** Extra attributes must either be a string or an object. */\r\n    EXTENSION_EXTRA_ATTRIBUTES = \"RMR0102\",\r\n    /** A call to `extension.setOptions` was made with invalid keys. */\r\n    INVALID_SET_EXTENSION_OPTIONS = \"RMR0103\",\r\n    /**\r\n     * `useRemirror` was called outside of the remirror context. It can only be used\r\n     * within an active remirror context created by the `<RemirrorProvider />`.\r\n     */\r\n    REACT_PROVIDER_CONTEXT = \"RMR0200\",\r\n    /**\r\n     * `getRootProps` has been called MULTIPLE times. It should only be called ONCE during render.\r\n     */\r\n    REACT_GET_ROOT_PROPS = \"RMR0201\",\r\n    /**\r\n     * A problem occurred adding the editor view to the dom.\r\n     */\r\n    REACT_EDITOR_VIEW = \"RMR0202\",\r\n    /**\r\n     * There is a problem with your controlled editor setup.\r\n     */\r\n    REACT_CONTROLLED = \"RMR0203\",\r\n    /**\r\n     * Something went wrong with your custom ReactNodeView Component.\r\n     */\r\n    REACT_NODE_VIEW = \"RMR0204\",\r\n    /**\r\n     * There is something wrong with your i18n setup.\r\n     */\r\n    I18N_CONTEXT = \"RMR0300\"\r\n}\r\n",
      "index.d.ts": "export { EDITOR_CLASS_NAME, EDITOR_CLASS_SELECTOR, EMPTY_NODE, EMPTY_PARAGRAPH_NODE, ExtensionPriority, ExtensionTag, LEAF_NODE_REPLACING_CHARACTER, ManagerPhase, MarkGroup, NON_BREAKING_SPACE_CHAR, NULL_CHARACTER, NodeGroup, RemirrorIdentifier, SELECTED_NODE_CLASS_NAME, SELECTED_NODE_CLASS_SELECTOR, ZERO_WIDTH_SPACE_CHAR, __INTERNAL_REMIRROR_IDENTIFIER_KEY__, } from './core-constants';\r\nexport { ErrorConstant } from './error-constants';\r\n"
    },
    "@remirror/core-helpers": {
      "core-errors.d.ts": "import { BaseError } from 'make-error';\r\nimport { ErrorConstant } from '@remirror/core-constants';\r\n/**\r\n * This marks the error as a remirror specific error, with enhanced stack\r\n * tracing capabilities.\r\n *\r\n * @remarks\r\n *\r\n * Use this when creating your own extensions and notifying the user that\r\n * something has gone wrong.\r\n */\r\nexport declare class RemirrorError extends BaseError {\r\n    /**\r\n     * A shorthand way of creating an error message.\r\n     */\r\n    static create(options?: RemirrorErrorOptions): RemirrorError;\r\n    /**\r\n     * The error code used to create this error message.\r\n     */\r\n    errorCode: ErrorConstant;\r\n    /**\r\n     * The constructor is intentionally kept private to prevent being extended from.\r\n     */\r\n    private constructor();\r\n}\r\n/**\r\n * Throw an error if the condition fails. Strip out error messages for\r\n * production. Adapted from `tiny-invariant`.\r\n */\r\nexport declare function invariant(condition: unknown, options: RemirrorErrorOptions): asserts condition;\r\n/**\r\n * The invariant options which only show up during development.\r\n */\r\nexport interface RemirrorErrorOptions {\r\n    /**\r\n     * The code for the built in error.\r\n     */\r\n    code?: ErrorConstant;\r\n    /**\r\n     * The message to add to the error.\r\n     */\r\n    message?: string;\r\n}\r\n",
      "core-helpers.d.ts": "import omit from 'object.omit';\r\nimport pick from 'object.pick';\r\nimport type { Primitive } from 'type-fest';\r\nimport type { RemirrorIdentifier } from '@remirror/core-constants';\r\nimport type { AnyConstructor, AnyFunction, Nullable, Predicate, RemirrorIdentifierShape, Shape, UnknownShape } from '@remirror/core-types';\r\n/**\r\n * Any falsy type.\r\n */\r\ndeclare type Falsy = false | 0 | '' | null | undefined;\r\n/**\r\n * Type cast an argument. If no type is provided it will default to any.\r\n *\r\n * @param arg - the arg to typecast\r\n */\r\nexport declare function Cast<Type = any>(argument: any): Type;\r\n/**\r\n * A typesafe implementation of `Object.entries()`\r\n *\r\n * Taken from\r\n * https://github.com/biggyspender/ts-entries/blob/master/src/ts-entries.ts\r\n */\r\nexport declare function entries<Type extends object, Key extends Extract<keyof Type, string>, Value extends Type[Key], Entry extends [Key, Value]>(value: Type): Entry[];\r\n/**\r\n * A typesafe implementation of `Object.keys()`\r\n */\r\nexport declare function keys<Type extends object, Key extends Extract<keyof Type, string>>(value: Type): Key[];\r\n/**\r\n * A typesafe implementation of `Object.values()`\r\n */\r\nexport declare function values<Type extends object, Key extends Extract<keyof Type, string>, Value extends Type[Key]>(value: Type): Value[];\r\n/**\r\n * A more lenient typed version of `Array.prototype.includes` which allow less\r\n * specific types to be checked.\r\n */\r\nexport declare function includes<Type>(array: Type[] | readonly Type[], item: unknown, fromIndex?: number): item is Type;\r\n/**\r\n * Creates an object with the null prototype.\r\n *\r\n * @param value - the object to create\r\n */\r\nexport declare function object<Type extends object>(value?: Type): Type;\r\n/**\r\n * Shorthand for casting a value to it's boolean equivalent.\r\n *\r\n * @param value - the value to transform into a boolean\r\n *\r\n * @public\r\n */\r\nexport declare function bool<Value>(value: Value): value is Exclude<Value, Falsy>;\r\n/**\r\n * Alias of toString for non-dom environments.\r\n *\r\n * This is a safe way of calling `toString` on objects created with\r\n * `Object.create(null)`.\r\n */\r\nexport declare function toString(value: unknown): any;\r\n/**\r\n * Negates a predicate check.\r\n *\r\n * @remarks\r\n *\r\n * Unfortunately it doesn't seem possible to automatically negate the predicate\r\n * with typescript.\r\n */\r\nexport declare function not<Type>(predicate: Predicate<Type>): (a: unknown) => boolean;\r\n/**\r\n * Check if an instance is the direct instance of the provided class.\r\n */\r\nexport declare function isDirectInstanceOf<Type>(instance: unknown, Constructor: AnyConstructor<Type>): instance is Type;\r\n/**\r\n * Predicate check that value is undefined\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare const isUndefined: (value: unknown) => value is undefined;\r\n/**\r\n * Predicate check that value is a string\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare const isString: (value: unknown) => value is string;\r\n/**\r\n * Predicate check that value is a number.\r\n *\r\n * Also by default doesn't include NaN as a valid number.\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare const isNumber: (value: unknown) => value is number;\r\n/**\r\n * Predicate check that value is a function\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare const isFunction: (value: unknown) => value is AnyFunction<any>;\r\n/**\r\n * Predicate check that value is null\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isNull(value: unknown): value is null;\r\n/**\r\n * Predicate check that value is a class\r\n *\r\n * @deprecated Due to the current build process stripping out classes\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isClass(value: unknown): value is AnyConstructor;\r\n/**\r\n * Predicate check that value is boolean\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isBoolean(value: unknown): value is boolean;\r\n/**\r\n * Predicate check that value is a symbol\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare const isSymbol: (value: unknown) => value is symbol;\r\n/**\r\n * Helper function for Number.isInteger check allowing non numbers to be tested\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isInteger(value: unknown): value is number;\r\n/**\r\n * Helper function for Number.isSafeInteger allowing for unknown values to be\r\n * tested\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isSafeInteger(value: unknown): value is number;\r\n/**\r\n * Predicate check for whether passed in value is a plain object\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isPlainObject<Type = unknown>(value: unknown): value is UnknownShape<Type>;\r\n/**\r\n * Predicate check for whether passed in value is a primitive value\r\n */\r\nexport declare function isPrimitive(value: unknown): value is Primitive;\r\n/**\r\n * Utility predicate check that value is either null or undefined\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isNullOrUndefined(value: unknown): value is null | undefined;\r\n/**\r\n * Predicate check that value is an object.\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isObject<Type extends Shape>(value: unknown): value is Type;\r\n/**\r\n * A shorthand method for creating instance of checks.\r\n */\r\nexport declare function isInstanceOf<Constructor extends AnyConstructor>(Constructor: Constructor): (value: unknown) => value is InstanceType<Constructor>;\r\n/**\r\n * Predicate check that value is a native promise\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isNativePromise(value: unknown): value is Promise<unknown>;\r\n/**\r\n * Predicate check that value has the promise api implemented\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isPromise(value: unknown): value is Promise<unknown>;\r\n/**\r\n * Predicate check that value is a RegExp\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare const isRegExp: (value: unknown) => value is RegExp;\r\n/**\r\n * Predicate check that value is a date\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare const isDate: (value: unknown) => value is Date;\r\n/**\r\n * Predicate check that value is an error\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare const isError: (value: unknown) => value is Error;\r\n/**\r\n * Predicate check that value is a `Map`\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isMap(value: unknown): value is Map<unknown, unknown>;\r\n/**\r\n * Predicate check that value is a `Set`\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isSet(value: unknown): value is Set<unknown>;\r\n/**\r\n * Predicate check that value is an empty object\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isEmptyObject(value: unknown): boolean;\r\n/**\r\n * Alias the isArray method.\r\n */\r\nexport declare const isArray: (arg: any) => arg is any[];\r\n/**\r\n * Predicate check that value is an empty array\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isEmptyArray(value: unknown): boolean;\r\n/**\r\n * Identifies the value as having a remirror identifier. This is the core\r\n * predicate check for the remirror library.\r\n *\r\n * @param value - the value to be checked\r\n *\r\n * @internal\r\n */\r\nexport declare const isRemirrorType: (value: unknown) => value is RemirrorIdentifierShape;\r\n/**\r\n * Checks that the provided remirror shape is of a given type.\r\n *\r\n * @param value - any remirror shape\r\n * @param type - the remirror identifier type to check for\r\n *\r\n * @internal\r\n */\r\nexport declare function isIdentifierOfType(value: RemirrorIdentifierShape, type: RemirrorIdentifier | RemirrorIdentifier[]): boolean;\r\n/**\r\n * Capitalizes a string value.\r\n *\r\n * @param str - the string to capitalize.\r\n * @public\r\n */\r\nexport declare function capitalize(string: string): string;\r\n/**\r\n * Removes leading and trailing whitespace from a string.\r\n *\r\n * @param str - the string to trim\r\n *\r\n * @public\r\n */\r\nexport declare function trim(string: string): string;\r\n/**\r\n * Trim and conditionally capitalize string values.\r\n *\r\n * @param str - the string to format.\r\n *\r\n * @public\r\n */\r\nexport declare function format(string: string): string;\r\n/**\r\n * Calls a function if defined and provides compile time type checking for the\r\n * passed in parameters.\r\n *\r\n * @param fn - the function to call if it exists\r\n * @param args - the rest of the parameters with types\r\n */\r\nexport declare function callIfDefined<Method extends AnyFunction>(fn: Nullable<Method>, ...args: Parameters<Method>): void;\r\n/**\r\n * Finds all the regex matches for a string\r\n *\r\n * @param text - the text to check against\r\n * @param regexp - the regex (which should include a 'g' flag)\r\n *\r\n * @public\r\n */\r\nexport declare function findMatches(text: string, regexp: RegExp, runWhile?: (match: RegExpExecArray | null) => boolean): RegExpExecArray[];\r\n/**\r\n * A utility function to clean up the Operating System name.\r\n *\r\n * @param os - the OS name to clean up.\r\n * @param pattern - a `RegExp` pattern matching the OS name.\r\n * @param label - a label for the OS.\r\n * @returns a cleaned up Operating System name\r\n *\r\n * @public\r\n */\r\nexport declare function cleanupOS(os: string, pattern?: string, label?: string): string;\r\n/**\r\n * A utility function to check whether the current browser is running on the\r\n * android platform.\r\n * @public\r\n */\r\nexport declare function isAndroidOS(): boolean;\r\n/**\r\n * Generate a random float between min and max. If only one parameter is\r\n * provided minimum is set to 0.\r\n *\r\n * @param min - the minimum value\r\n * @param max - the maximum value\r\n *\r\n * @public\r\n */\r\nexport declare function randomFloat(min: number, max?: number): number;\r\n/**\r\n * Generate a random integer between min and max. If only one parameter is\r\n * provided minimum is set to 0.\r\n *\r\n * @param min - the minimum value\r\n * @param max - the maximum value\r\n *\r\n * @public\r\n */\r\nexport declare function randomInt(min: number, max?: number): number;\r\n/**\r\n * Converts a string, including strings in camelCase or snake_case, into Start\r\n * Case (a variant of Title case where all words start with a capital letter),\r\n * it keeps original single quote and hyphen in the word.\r\n *\r\n *   'management_companies' to 'Management Companies' 'managementCompanies' to\r\n *   'Management Companies' `hell's kitchen` to `Hell's Kitchen` `co-op` to\r\n *   `Co-op`\r\n *\r\n * @param str - the string to examine\r\n */\r\nexport declare function startCase(string: string): string;\r\n/**\r\n * Generate a unique id\r\n *\r\n * @param params - the destructured params\r\n * @returns a unique string of specified length\r\n *\r\n * @public\r\n */\r\nexport declare function uniqueId(prefix?: string): string;\r\n/**\r\n * Takes a number of elements from the provided array starting from the\r\n * zero-index\r\n *\r\n * @param arr - the array to take from\r\n * @param num - the number of items to take\r\n *\r\n * @public\r\n */\r\nexport declare function take<Type extends any[]>(array: Type, number: number): any[];\r\nexport declare function omitUndefined(object: UnknownShape): any;\r\n/**\r\n * Clones a plain object using object spread notation\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function clone<Type extends object>(value: Type): Type;\r\n/**\r\n * Shallow clone an object while preserving it's getters and setters. This is a\r\n * an alternative to the spread clone.\r\n */\r\nexport declare function shallowClone<Type extends object>(value: Type): Type;\r\n/**\r\n * Alias for fast deep equal\r\n */\r\nexport declare const isEqual: any;\r\n/**\r\n * Create a unique array in a non-mutating manner\r\n *\r\n * @param array - the array which will be reduced to its unique elements\r\n * @param fromStart - when set to true the duplicates will be removed from the\r\n * beginning of the array. This defaults to false.\r\n * @return a new array containing only unique elements (by reference)\r\n *\r\n * @public\r\n */\r\nexport declare function uniqueArray<Type>(array: Type[], fromStart?: boolean): any[];\r\n/**\r\n * Flattens an array.\r\n *\r\n * @param array\r\n *\r\n * @public\r\n */\r\nexport declare function flattenArray<Type>(array: any[]): Type[];\r\n/**\r\n * noop is a shorthand way of saying `No Operation` and is a function that does\r\n * nothing.\r\n *\r\n * And Sometimes doing nothing is the best policy.\r\n */\r\nexport declare function noop(): void;\r\n/**\r\n * Use this to completely overwrite an object when merging.\r\n *\r\n * ```ts\r\n * const source = { awesome: { a: 'a' } }\r\n * const target = { awesome: { b: 'b' } }\r\n * const result = deepMerge(source, target) // => { awesome: { a: 'a', b: 'b' } }\r\n *\r\n * const overwriteTarget = { awesome: Merge.overwrite({ b: 'b' }) }\r\n * const overwriteResult = deepMerge(source, overwriteTarget) // => { awesome: { b: 'b' } }\r\n * ```\r\n *\r\n */\r\nexport declare class Merge {\r\n    /**\r\n     * Create an object that will completely replace the key when merging.\r\n     *\r\n     * @param [obj] - the object to replace the key with. When blank an empty\r\n     * object is used.\r\n     */\r\n    static overwrite<Return = any>(object_?: UnknownShape): Return;\r\n    /**\r\n     * Sets the key to undefined thus fully deleting the key.\r\n     */\r\n    static delete(): any;\r\n    private constructor();\r\n}\r\nexport interface Merge {\r\n    /**\r\n     * This can be used to mimic any object shape.\r\n     */\r\n    [key: string]: unknown;\r\n}\r\n/**\r\n * A deep merge which only merges plain objects and Arrays. It clones the object\r\n * before the merge so will not mutate any of the passed in values.\r\n *\r\n * To completely remove a key you can use the `Merge` helper class which\r\n * replaces it's key with a completely new object\r\n */\r\nexport declare function deepMerge<Type = any>(...objects: Array<UnknownShape | unknown[]>): Type;\r\ninterface ClampParameter {\r\n    min: number;\r\n    max: number;\r\n    value: number;\r\n}\r\n/**\r\n * Clamps the value to the provided range.\r\n */\r\nexport declare function clamp({ min, max, value }: ClampParameter): number;\r\n/**\r\n * Get the last element of the array.\r\n */\r\nexport declare function last<Type>(array: Type[]): Type;\r\n/**\r\n * Sorts an array while retaining the original order when the compare method\r\n * identifies the items as equal.\r\n *\r\n * `Array.prototype.sort()` is unstable and so values that are the same will\r\n * jump around in a non deterministic manner. Here I'm using the index as a\r\n * fallback. If two elements have the same priority the element with the lower\r\n * index is placed first hence retaining the original order.\r\n *\r\n * @param array - the array to sort\r\n * @param compareFn - compare the two value arguments `a` and `b` - return 0 for\r\n *                  equal - return number > 0 for a > b - return number < 0 for\r\n *                  b > a\r\n */\r\nexport declare function sort<Type>(array: Type[], compareFn: (a: Type, b: Type) => number): Type[];\r\n/**\r\n * Get a property from an object or array by a string path or an array path.\r\n *\r\n * @param path - path to property\r\n * @param obj - object to retrieve property from\r\n */\r\nexport declare function get<Return = any>(path: string | Array<string | number>, obj: any, fallback?: any): Return;\r\n/**\r\n * Set the value of a given path for the provided object. Does not mutate the\r\n * original object.\r\n */\r\nexport declare function set(path: number | string | Array<string | number>, obj: Shape, value: unknown): any;\r\n/**\r\n * Unset the value of a given path within an object.\r\n */\r\nexport declare function unset(path: Array<string | number>, obj: Shape): Shape;\r\n/**\r\n * Create a unique array of objects from a getter function or a property list.\r\n *\r\n * @param array - the array to extract unique values from\r\n * @param getValue - a getter function or a string with the path to the item\r\n * that is being used as a a test for uniqueness.\r\n * @param fromStart - when true will remove duplicates from the start rather\r\n * than from the end\r\n *\r\n * ```ts\r\n * import { uniqueBy } from '@remirror/core-helpers';\r\n *\r\n * const values = uniqueBy([{ id: 'a', value: 'Awesome' }, { id: 'a', value: 'ignored' }], item => item.id);\r\n * log(values) // => [{id: 'a', value: 'Awesome'}]\r\n *\r\n * const byKey = uniqueBy([{ id: 'a', value: 'Awesome' }, { id: 'a', value: 'ignored' }], 'id')\r\n * // Same as above\r\n * ```\r\n */\r\nexport declare function uniqueBy<Item = any, Key = any>(array: Item[], getValue: ((item: Item) => Key) | string | Array<string | number>, fromStart?: boolean): Item[];\r\n/**\r\n * Create a range from start to end.\r\n *\r\n * If only start is provided it creates an array of the size provided. if start\r\n * and end are provided it creates an array who's first position is start and\r\n * final position is end. i.e. `length = (end - start) + 1`\r\n */\r\nexport declare function range(start: number, end?: number): number[];\r\n/**\r\n * Check that a number is within the minimum and maximum bounds of a set of\r\n * numbers.\r\n *\r\n * @param value - the number to test\r\n */\r\nexport declare function within(value: number, ...rest: Array<number | undefined | null>): boolean;\r\n/**\r\n * Safe implementation of hasOwnProperty with typechecking.\r\n *\r\n * @remarks\r\n *\r\n * See {@link https://eslint.org/docs/rules/no-prototype-builtins}\r\n *\r\n * @param obj - the object to check\r\n * @param key - the property to check\r\n *\r\n * @typeParam Obj - the object type\r\n * @typeParam Property - the property which can be a string | number | symbol\r\n */\r\nexport declare function hasOwnProperty<Obj extends object, Property extends string | number | symbol>(object_: Obj, key: Property): object_ is Property extends keyof Obj ? Obj : Obj & {\r\n    Key: unknown;\r\n};\r\n/**\r\n * Helper for getting an array from a function or array.\r\n */\r\nexport declare function getLazyArray<Type>(value: Type[] | (() => Type[])): Type[];\r\nexport { camelCase, capitalCase, constantCase, kebabCase, pascalCase, pathCase, snakeCase, spaceCase, } from 'case-anything';\r\nexport { debounce, throttle } from 'throttle-debounce';\r\nexport { omit, pick };\r\n",
      "freeze.d.ts": "/**\r\n * A freeze method for objects that only runs in development. Helps prevent code\r\n * that shouldn't be mutated from being mutated will developing.\r\n *\r\n * @remarks\r\n *\r\n * This function passes the value back unchanged when in a production\r\n * environment. It's purpose is to help prevent bad practice while developing\r\n * by avoiding mutation of values that shouldn't be mutated.\r\n */\r\nexport declare const freeze: <Target extends object>(target: Target, options?: FreezeOptions) => Readonly<Target>;\r\ninterface FreezeOptions {\r\n    /**\r\n     * Whether the key that is being accessed should exist on the target object.\r\n     *\r\n     * @defaultValue undefined\r\n     */\r\n    requireKeys?: boolean;\r\n}\r\nexport {};\r\n",
      "index.d.ts": "export { invariant, RemirrorError } from './core-errors';\r\nexport { Cast, Merge, bool, callIfDefined, camelCase, capitalCase, capitalize, clamp, cleanupOS, clone, constantCase, debounce, deepMerge, entries, findMatches, flattenArray, format, get, getLazyArray, hasOwnProperty, includes, isAndroidOS, isArray, isBoolean, isClass, isDate, isDirectInstanceOf, isEmptyArray, isEmptyObject, isEqual, isError, isFunction, isIdentifierOfType, isInstanceOf, isInteger, isMap, isNativePromise, isNull, isNullOrUndefined, isNumber, isObject, isPlainObject, isPrimitive, isPromise, isRegExp, isRemirrorType, isSafeInteger, isSet, isString, isSymbol, isUndefined, kebabCase, keys, last, noop, not, object, omit, omitUndefined, pascalCase, pathCase, pick, randomFloat, randomInt, range, shallowClone, snakeCase, sort, spaceCase, startCase, take, throttle, toString, trim, uniqueArray, uniqueBy, uniqueId, values, within, } from './core-helpers';\r\nexport { freeze } from './freeze';\r\n"
    },
    "@remirror/core": {
      "builtins/attributes-extension.d.ts": "import type { ProsemirrorAttributes } from '@remirror/core-types';\r\nimport { PlainExtension } from '../extension';\r\nimport type { AnyCombinedUnion } from '../preset';\r\n/**\r\n * This extension allows others extension to add the `createAttributes` method\r\n * for adding attributes to the prosemirror dom element.\r\n *\r\n * @remarks\r\n *\r\n * Use this to include all the dynamically generated attributes provided by each\r\n * extension. High priority extensions have preference over the lower priority\r\n * extensions.\r\n *\r\n * @builtin\r\n */\r\nexport declare class AttributesExtension extends PlainExtension {\r\n    #private;\r\n    get name(): \"attributes\";\r\n    /**\r\n     * Create the attributes object on initialization.\r\n     *\r\n     * @internal\r\n     */\r\n    onCreate(): void;\r\n    private readonly updateAttributes;\r\n    private transformAttributes;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * The attributes to be added to the prosemirror editor.\r\n             */\r\n            attributes: ProsemirrorAttributes;\r\n        }\r\n        interface ExtensionStore {\r\n            /**\r\n             * Triggers a recalculation of the `view.dom` attributes for each\r\n             * extension and notifies the parent UI once done.\r\n             *\r\n             * This will also dispatch an update to the state automatically. However\r\n             * you can disable this by setting `triggerUpdate` to `false`.\r\n             *\r\n             * By not triggering an update the new value may not be capture by the view layer, e.g. `React`.\r\n             *\r\n             * @param triggerUpdate - defaults to true\r\n             */\r\n            updateAttributes: (triggerUpdate?: boolean) => void;\r\n        }\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to use the attributes provided by this extension\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            attributes?: boolean;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * Allows the extension to modify the attributes for the Prosemirror editor\r\n             * dom element.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Sometimes an extension will need to make a change to the attributes of the\r\n             * editor itself. For example a placeholder may need to do some work to make\r\n             * the editor more accessible by setting the `aria-placeholder` value to match\r\n             * the value of the placeholder.\r\n             *\r\n             * @alpha\r\n             */\r\n            createAttributes?(): ProsemirrorAttributes;\r\n        }\r\n    }\r\n}\r\n",
      "builtins/builtin-preset.d.ts": "import type { GetStaticAndDynamic } from '@remirror/core-types';\r\nimport type { AddCustomHandler } from '../extension/base-class';\r\nimport { Preset } from '../preset';\r\nimport type { OnSetOptionsParameter } from '../types';\r\nimport { AttributesExtension } from './attributes-extension';\r\nimport { CommandsExtension } from './commands-extension';\r\nimport { HelpersExtension } from './helpers-extension';\r\nimport { InputRulesExtension } from './input-rules-extension';\r\nimport { KeymapExtension, KeymapOptions } from './keymap-extension';\r\nimport { NodeViewsExtension } from './node-views-extension';\r\nimport { PasteRulesExtension } from './paste-rules-extension';\r\nimport { PluginsExtension } from './plugins-extension';\r\nimport { SchemaExtension } from './schema-extension';\r\nimport { SuggestExtension, SuggestOptions } from './suggest-extension';\r\nimport { TagsExtension } from './tags-extension';\r\nexport interface BuiltinOptions extends SuggestOptions, KeymapOptions {\r\n}\r\n/**\r\n * Provides all the builtin extensions to the editor.\r\n *\r\n * @remarks\r\n *\r\n * This is used automatically and (at the time of writing) can't be removed from\r\n * the editor. If you feel that there's a compelling reason to override these\r\n * extensions feel free to create a [discussion\r\n * here](https://github.com/remirror/remirror/discussions/category_choices) and\r\n * it can be addressed.\r\n *\r\n * @builtin\r\n */\r\nexport declare class BuiltinPreset extends Preset<BuiltinOptions> {\r\n    get name(): \"builtin\";\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<BuiltinOptions>): void;\r\n    protected onAddCustomHandler: AddCustomHandler<BuiltinOptions>;\r\n    createExtensions(): (CommandsExtension | HelpersExtension | AttributesExtension | SchemaExtension | TagsExtension | PluginsExtension | InputRulesExtension | PasteRulesExtension | NodeViewsExtension | SuggestExtension | KeymapExtension)[];\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ManagerSettings {\r\n            /**\r\n             * The options that can be passed into the built in options.\r\n             */\r\n            builtin?: GetStaticAndDynamic<BuiltinOptions>;\r\n        }\r\n    }\r\n}\r\n",
      "builtins/commands-extension.d.ts": "import type { AnyFunction, CommandFunction, EditorSchema, EmptyShape, FromToParameter, ProsemirrorAttributes, Transaction } from '@remirror/core-types';\r\nimport type { EditorView } from '@remirror/pm/view';\r\nimport { AnyExtension, ChainedFromExtensions, CommandsFromExtensions, PlainExtension } from '../extension';\r\nimport type { AnyCombinedUnion, ChainedFromCombined, CommandsFromCombined } from '../preset';\r\nimport type { CreatePluginReturn, ExtensionCommandReturn, StateUpdateLifecycleParameter } from '../types';\r\n/**\r\n * Generate chained and unchained commands for making changes to the editor.\r\n *\r\n * @remarks\r\n *\r\n * Typically actions are used to create interactive menus. For example a menu\r\n * can use a command to toggle bold formatting or to undo the last action.\r\n *\r\n * @builtin\r\n */\r\nexport declare class CommandsExtension extends PlainExtension {\r\n    #private;\r\n    get name(): \"commands\";\r\n    /**\r\n     * The current transaction which allows for making commands chainable.\r\n     */\r\n    get transaction(): Transaction;\r\n    onCreate(): void;\r\n    onView(view: EditorView<EditorSchema>): void;\r\n    /**\r\n     * Update the cached transaction whenever the state is updated.\r\n     */\r\n    onStateUpdate({ state }: StateUpdateLifecycleParameter): void;\r\n    /**\r\n     * Create the default commands available to all extensions.\r\n     */\r\n    createCommands(): {\r\n        /**\r\n         * Create a custom transaction.\r\n         *\r\n         * @param transactionUpdater - callback method for updating the\r\n         * transaction in the editor. Since transactions are mutable there is no\r\n         * return type.\r\n         *\r\n         * @remarks\r\n         *\r\n         * This is primarily intended for use within a chainable command chain.\r\n         */\r\n        customTransaction(transactionUpdater: (transaction: Transaction) => void): CommandFunction;\r\n        /**\r\n         * Insert text into the dom at the current location.\r\n         */\r\n        insertText(text: string): CommandFunction;\r\n        /**\r\n         * Delete the provided range or current selection.\r\n         */\r\n        delete(range?: FromToParameter): CommandFunction;\r\n        /**\r\n         * Fire an empty update to trigger an update to all decorations, and state\r\n         * that may not yet have run.\r\n         *\r\n         * This can be used in extensions to when certain options that affect the\r\n         * plugin state have updated.\r\n         */\r\n        emptyUpdate: () => CommandFunction;\r\n        /**\r\n         * Force an update of the specific\r\n         */\r\n        forceUpdate: (...keys: UpdatableViewProps[]) => CommandFunction;\r\n        /**\r\n         * Update the attributes for the node at the specified `pos` in the\r\n         * editor.\r\n         */\r\n        updateNodeAttributes: <Type extends object>(pos: number, attrs: ProsemirrorAttributes<Type>) => CommandFunction;\r\n        /**\r\n         * Fire an update to remove the current range selection. The cursor will\r\n         * be placed at the beginning of the current range selection.\r\n         */\r\n        clearRangeSelection: () => CommandFunction;\r\n    };\r\n    /**\r\n     * This plugin is here only to keep track of the forced updates meta data.\r\n     */\r\n    createPlugin(): CreatePluginReturn;\r\n    /**\r\n     * A helper for forcing through updates in the view layer. The view layer can\r\n     * check for the meta data of the transaction with\r\n     * `manager.store.getForcedUpdate(tr)`. If that has a value then it should use\r\n     * the unique symbol to update the key.\r\n     */\r\n    private readonly forceUpdate;\r\n    /**\r\n     * Checks if the codebase has requested for the transaction to cause a force\r\n     * update.\r\n     */\r\n    private readonly getForcedUpdates;\r\n    private getMeta;\r\n    private setMeta;\r\n    /**\r\n     * Create an unchained command method.\r\n     */\r\n    private unchainedFactory;\r\n    /**\r\n     * Get the chainable commands.\r\n     */\r\n    private readonly getChain;\r\n    /**\r\n     * Get the chainable commands.\r\n     */\r\n    private readonly getCommands;\r\n    /**\r\n     * Create a chained command method.\r\n     */\r\n    private chainedFactory;\r\n}\r\n/**\r\n * Provides the list of Prosemirror EditorView props that should be updated/\r\n */\r\nexport declare type ForcedUpdateMeta = UpdatableViewProps[];\r\nexport declare type UpdatableViewProps = 'attributes' | 'editable' | 'nodeViews';\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * Enables the use of custom commands created by the extensions for\r\n             * extending the functionality of your editor in an expressive way.\r\n             *\r\n             * @remarks\r\n             *\r\n             * There are two ways of using these commands.\r\n             *\r\n             * ### Single Time Usage\r\n             *\r\n             * The command is immediately dispatched. This can be used to create menu\r\n             * items when the functionality you need is already available by the\r\n             * commands.\r\n             *\r\n             * ```ts\r\n             * if (commands.toggleBold.isEnabled()) {\r\n             *   commands.toggleBold();\r\n             * }\r\n             * ```\r\n             *\r\n             * ### Chainable composition.\r\n             *\r\n             * The `chain` property of the commands object provides composition of\r\n             * command through `.` (dot) chaining.\r\n             *\r\n             * ```ts\r\n             * commands\r\n             *   .chain\r\n             *   .toggleBold()\r\n             *   .insertText('Hello')\r\n             *   .setSelection('start')\r\n             *   .custom((transaction) => transaction)\r\n             *   .run();\r\n             * ```\r\n             *\r\n             * The `run()` method ends the chain and dispatches the accumulated\r\n             * transaction.\r\n             *\r\n             */\r\n            commands: CommandsFromCombined<Combined>;\r\n            /**\r\n             * Chainable commands for composing functionality together in quaint and\r\n             * beautiful ways...\r\n             *\r\n             * @remarks\r\n             *\r\n             * You can use this property to create expressive and complex commands\r\n             * that build up the transaction until it can be run.\r\n             *\r\n             * ```ts\r\n             * chain\r\n             *   .toggleBold()\r\n             *   .insertText('Hi')\r\n             *   .setSelection('all')\r\n             *   .run();\r\n             * ```\r\n             *\r\n             * The `run()` method ends the chain and dispatches the command.\r\n             */\r\n            chain: ChainedFromCombined<Combined>;\r\n            /**\r\n             * Check for a forced update in the transaction. This pulls the meta data\r\n             * from the transaction and if it is true then it was a forced update.\r\n             *\r\n             * ```ts\r\n             * const forcedUpdates = this.manager.store.getForcedUpdates(tr);\r\n             *\r\n             * if (forcedUpdates) {\r\n             *   // React updates when the state is updated.\r\n             *   setState({ key: Symbol() })\r\n             * }\r\n             * ```\r\n             */\r\n            getForcedUpdates: (tr: Transaction) => UpdatableViewProps[];\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * `ExtensionCommands`\r\n             *\r\n             * This pseudo property makes it easier to infer Generic types of this\r\n             * class.\r\n             * @private\r\n             */\r\n            ['~C']: this['createCommands'] extends AnyFunction ? ReturnType<this['createCommands']> : EmptyShape;\r\n            /**\r\n             * Create and register commands for that can be called within the editor.\r\n             *\r\n             * These are typically used to create menu's actions and as a direct\r\n             * response to user actions.\r\n             *\r\n             * @remarks\r\n             *\r\n             * The `createCommands` method should return an object with each key being\r\n             * unique within the editor. To ensure that this is the case it is\r\n             * recommended that the keys of the command are namespaced with the name\r\n             * of the extension.\r\n             *\r\n             * ```ts\r\n             * import { ExtensionFactory } from '@remirror/core';\r\n             *\r\n             * const MyExtension = ExtensionFactory.plain({\r\n             *   name: 'myExtension',\r\n             *   version: '1.0.0',\r\n             *   createCommands() {\r\n             *     return {\r\n             *       haveFun() {\r\n             *         return ({ state, dispatch }) => {\r\n             *           if (dispatch) {\r\n             *             dispatch(tr.insertText(...));\r\n             *           }\r\n             *\r\n             *           return true; // True return signifies that this command is enabled.\r\n             *         }\r\n             *       },\r\n             *     }\r\n             *   }\r\n             * })\r\n             * ```\r\n             *\r\n             * The actions available in this case would be `undoHistory` and\r\n             * `redoHistory`. It is unlikely that any other extension would override\r\n             * these commands.\r\n             *\r\n             * Another benefit of commands is that they are picked up by typescript\r\n             * and can provide code completion for consumers of the extension.\r\n             *\r\n             * @param parameter - schema parameter with type included\r\n             */\r\n            createCommands?(): ExtensionCommandReturn;\r\n        }\r\n        interface ExtensionStore {\r\n            /**\r\n             * Updates the meta information of a transaction to cause that transaction\r\n             * to force through an update.\r\n             */\r\n            forceUpdate: (tr: Transaction, ...keys: UpdatableViewProps[]) => Transaction;\r\n            /**\r\n             * Get the current transaction.\r\n             *\r\n             * This transaction makes chainable commands possible.\r\n             */\r\n            getTransaction: () => Transaction;\r\n            /**\r\n             * A method to return the editor's available commands.\r\n             */\r\n            getCommands: <ExtensionUnion extends AnyExtension = AnyExtension>() => CommandsFromExtensions<CommandsExtension | ExtensionUnion>;\r\n            /**\r\n             * A method that returns an object with all the chainable commands\r\n             * available to be run.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Each chainable command mutates the states transaction so after running\r\n             * all your commands. you should dispatch the desired transaction.\r\n             *\r\n             * This should only be called when the view has been initialized (i.e.)\r\n             * within the `createCommands` method calls.\r\n             *\r\n             * ```ts\r\n             * import { ExtensionFactory } from '@remirror/core';\r\n             *\r\n             * const MyExtension = ExtensionFactory.plain({\r\n             *   name: 'myExtension',\r\n             *   version: '1.0.0',\r\n             *   createCommands: ({ commands }) => {\r\n             *     // This will throw since it can only be called within the returned methods.\r\n             *     const c = commands(); // ❌\r\n             *\r\n             *     return {\r\n             *       // This is good 😋\r\n             *       haveFun() {\r\n             *         return ({ state, dispatch }) => commands().insertText('fun!'); ✅\r\n             *       },\r\n             *     }\r\n             *   }\r\n             * })\r\n             * ```\r\n             */\r\n            getChain: <ExtensionUnion extends AnyExtension = AnyExtension>() => ChainedFromExtensions<CommandsExtension | ExtensionUnion>;\r\n        }\r\n    }\r\n}\r\n",
      "builtins/helpers-extension.d.ts": "import type { AnyFunction, EmptyShape } from '@remirror/core-types';\r\nimport { AnyExtension, HelpersFromExtensions, PlainExtension } from '../extension';\r\nimport type { ActiveFromCombined, AnyCombinedUnion, HelpersFromCombined } from '../preset';\r\nimport type { ExtensionHelperReturn } from '../types';\r\n/**\r\n * Helpers are custom methods that can provide extra functionality to the\r\n * editor.\r\n *\r\n * @remarks\r\n *\r\n * They can be used for pulling information from the editor or performing custom\r\n * async commands.\r\n *\r\n * Also provides the default helpers used within the extension.\r\n *\r\n * @builtin\r\n */\r\nexport declare class HelpersExtension extends PlainExtension {\r\n    get name(): \"helpers\";\r\n    /**\r\n     * Provide a method with access to the helpers for use in commands and\r\n     * helpers.\r\n     */\r\n    onCreate(): void;\r\n    /**\r\n     * Helpers are only available once the view has been added to\r\n     * `RemirrorManager`.\r\n     */\r\n    onView(): void;\r\n    createHelpers(): {};\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * The helpers provided by the extensions used.\r\n             */\r\n            helpers: HelpersFromCombined<Combined>;\r\n            /**\r\n             * Check which nodes and marks are active under the current user\r\n             * selection.\r\n             *\r\n             * ```ts\r\n             * const { active } = manager.store;\r\n             *\r\n             * return active.bold() ? 'bold' : 'regular';\r\n             * ```\r\n             */\r\n            active: ActiveFromCombined<Combined>;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * `ExtensionHelpers`\r\n             *\r\n             * This pseudo property makes it easier to infer Generic types of this\r\n             * class.\r\n             * @private\r\n             */\r\n            ['~H']: this['createHelpers'] extends AnyFunction ? ReturnType<this['createHelpers']> : EmptyShape;\r\n            /**\r\n             * A helper method is a function that takes in arguments and returns a\r\n             * value depicting the state of the editor specific to this extension.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Unlike commands they can return anything and may not effect the\r\n             * behavior of the editor.\r\n             *\r\n             * Below is an example which should provide some idea on how to add\r\n             * helpers to the app.\r\n             *\r\n             * ```tsx\r\n             * // extension.ts\r\n             * import { ExtensionFactory } from '@remirror/core';\r\n             *\r\n             * const MyBeautifulExtension = ExtensionFactory.plain({\r\n             *   name: 'beautiful',\r\n             *   createHelpers: () => ({\r\n             *     checkBeautyLevel: () => 100\r\n             *   }),\r\n             * })\r\n             * ```\r\n             *\r\n             * ```\r\n             * // app.tsx\r\n             * import { useRemirror } from '@remirror/react';\r\n             *\r\n             * const MyEditor = () => {\r\n             *   const { helpers } = useRemirror({ autoUpdate: true });\r\n             *\r\n             *   return helpers.beautiful.checkBeautyLevel() > 50\r\n             *     ? (<span>😍</span>)\r\n             *     : (<span>😢</span>);\r\n             * };\r\n             * ```\r\n             */\r\n            createHelpers?(): ExtensionHelperReturn;\r\n        }\r\n        interface ExtensionStore {\r\n            /**\r\n             * Helper method to provide information about the content of the editor.\r\n             * Each extension can register its own helpers.\r\n             */\r\n            getHelpers: <ExtensionUnion extends AnyExtension = AnyExtension>() => HelpersFromExtensions<ExtensionUnion | HelpersExtension>;\r\n        }\r\n    }\r\n}\r\n",
      "builtins/index.d.ts": "export * from './attributes-extension';\r\nexport * from './builtin-preset';\r\nexport * from './commands-extension';\r\nexport * from './helpers-extension';\r\nexport * from './input-rules-extension';\r\nexport * from './keymap-extension';\r\nexport * from './node-views-extension';\r\nexport * from './paste-rules-extension';\r\nexport * from './plugins-extension';\r\nexport * from './schema-extension';\r\nexport * from './suggest-extension';\r\nexport * from './tags-extension';\r\n",
      "builtins/input-rules-extension.d.ts": "import { InputRule } from '@remirror/pm/inputrules';\r\nimport { PlainExtension } from '../extension';\r\n/**\r\n * This extension allows others extension to add the `createInputRules` method\r\n * for automatically transforming text when a certain regex pattern is typed.\r\n *\r\n * @remarks\r\n *\r\n * This is an example of adding custom functionality to an extension via the\r\n * `ExtensionParameterMethods`.\r\n *\r\n * @builtin\r\n */\r\nexport declare class InputRulesExtension extends PlainExtension {\r\n    get name(): \"inputRules\";\r\n    private inputRulesPlugin;\r\n    /**\r\n     * Ensure that all ssr transformers are run.\r\n     */\r\n    onCreate(): void;\r\n    private loopExtensions;\r\n    /**\r\n     * The method for rebuilding all the input rules.\r\n     *\r\n     * 1. Rebuild inputRules.\r\n     * 2. Replace the old input rules plugin.\r\n     * 3. Update the plugins used in the state (triggers an editor update).\r\n     */\r\n    private readonly rebuildInputRules;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to use the inputRules for this particular extension.\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            inputRules?: boolean;\r\n        }\r\n        interface ExtensionStore {\r\n            /**\r\n             * When called this will run through every `createInputRules` method on every\r\n             * extension to recreate input rules.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Under the hood it updates the plugin which is used to insert the\r\n             * input rules into the editor. This causes the state to be updated and\r\n             * will cause a rerender in your ui framework.\r\n             */\r\n            rebuildInputRules: () => void;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * Register input rules which are activated if the regex matches as a user is\r\n             * typing.\r\n             *\r\n             * @param parameter - schema parameter with type included\r\n             */\r\n            createInputRules?(): InputRule[];\r\n        }\r\n    }\r\n}\r\n",
      "builtins/keymap-extension.d.ts": "import type { CustomHandler, KeyBindings } from '@remirror/core-types';\r\nimport { PlainExtension } from '../extension';\r\nimport type { AddCustomHandler } from '../extension/base-class';\r\nimport type { OnSetOptionsParameter } from '../types';\r\nexport interface KeymapOptions {\r\n    /**\r\n     * Determines whether a backspace after an input rule has been applied should\r\n     * reverse the effect of the input rule.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    undoInputRuleOnBackspace?: boolean;\r\n    /**\r\n     * Determines whether the escape key selects the current node.\r\n     *\r\n     * @defaultValue `false`\r\n     */\r\n    selectParentNodeOnEscape?: boolean;\r\n    /**\r\n     * When true will exclude the default prosemirror keymap.\r\n     *\r\n     * @remarks\r\n     *\r\n     * You might want to set this to true if you want to fully customise the\r\n     * keyboard mappings for your editor. Otherwise it is advisable to leave it\r\n     * unchanged.\r\n     *\r\n     * @default `false`\r\n     */\r\n    excludeBaseKeymap?: boolean;\r\n    /**\r\n     * The implementation for the extra keybindings added to the settings.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This allows for you to add extra key mappings which will be checked before\r\n     * the default keymaps, if they return false then the default keymaps are\r\n     * still checked.\r\n     *\r\n     * No key mappings are removed in this process.\r\n     *\r\n     * ```ts\r\n     * const extension = BaseKeymapExtension.create({ keymap: {\r\n     *   Enter({ state, dispatch }) {\r\n     *     //... Logic\r\n     *     return true;\r\n     *   },\r\n     * }});\r\n     * ```\r\n     */\r\n    keymap?: CustomHandler<KeyBindings>;\r\n}\r\n/**\r\n * This extension allows others extension to use the `createKeymaps` method.\r\n *\r\n * @remarks\r\n *\r\n * Keymaps are the way of controlling how the editor responds to a\r\n * keypress and different key combinations.\r\n *\r\n * Without this extension most of the shortcuts and behaviors we have come to\r\n * expect from text editors would not be provided.\r\n *\r\n * @builtin\r\n */\r\nexport declare class KeymapExtension extends PlainExtension<KeymapOptions> {\r\n    get name(): \"keymap\";\r\n    /**\r\n     * The base keybinding which will be generated from the provided properties.\r\n     */\r\n    private baseKeyBindings;\r\n    /**\r\n     * The custom keybindings added\r\n     */\r\n    private extraKeyBindings;\r\n    private keymap;\r\n    /**\r\n     * This adds the `createKeymap` method functionality to all extensions.\r\n     */\r\n    onCreate(): void;\r\n    /**\r\n     * Updates the stored keymap plugin on this extension.\r\n     */\r\n    private loopExtensions;\r\n    /**\r\n     * The method for rebuilding all the extension keymaps.\r\n     *\r\n     * 1. Rebuild keymaps.\r\n     * 2. Replace the old keymap plugin.\r\n     * 3. Update the plugins used in the state (triggers an editor update).\r\n     */\r\n    private readonly rebuildKeymap;\r\n    /**\r\n     * Create the base keymap and merge it with any custom keymaps provided by the\r\n     * user as CustomOptions.\r\n     */\r\n    createKeymap: () => Record<string, import(\"@remirror/core-types\").CommandFunction<import(\"@remirror/core-types\").EditorSchema<string, string>, import(\"@remirror/core-types\").NextParameter<import(\"@remirror/core-types\").EditorSchema<string, string>>>>;\r\n    /**\r\n     * TODO think about the case where bindings are being disposed and then added\r\n     * in a different position in the `extraKeyBindings` array.\r\n     */\r\n    protected onAddCustomHandler: AddCustomHandler<KeymapOptions>;\r\n    /**\r\n     * Handle changes in the dynamic properties.\r\n     */\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<KeymapOptions>): void;\r\n    private createBaseKeymap;\r\n    private buildKeymap;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to exclude the created keymap.\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            keymap?: boolean;\r\n        }\r\n        interface ExtensionStore {\r\n            /**\r\n             * When called this will run through every `createKeymap` method on every\r\n             * extension to recreate the keyboard bindings.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Under the hood it updates the plugin which is used to insert the\r\n             * keybindings into the editor. This causes the state to be updated and\r\n             * will cause a rerender in your ui framework.\r\n             *\r\n             * **NOTE** - This will not update keybinding for extensions that implement\r\n             * their own keybinding functionality (e.g. any plugin using Suggestions)\r\n             */\r\n            rebuildKeymap: () => void;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * Add keymap bindings for this extension.\r\n             *\r\n             * @param parameter - schema parameter with type included\r\n             */\r\n            createKeymap?(): KeyBindings;\r\n        }\r\n    }\r\n}\r\n",
      "builtins/node-views-extension.d.ts": "import type { NodeViewMethod } from '@remirror/core-types';\r\nimport { PlainExtension } from '../extension';\r\nimport type { AnyCombinedUnion } from '../preset';\r\n/**\r\n * This extension allows others extension to add the `createNodeView` method\r\n * for creating nodeViews which alter how the dom is rendered for the node.\r\n *\r\n * @remarks\r\n *\r\n * This is an example of adding custom functionality to an extension via the\r\n * `ExtensionParameterMethods`.\r\n *\r\n * @builtin\r\n */\r\nexport declare class NodeViewsExtension extends PlainExtension {\r\n    get name(): \"nodeView\";\r\n    /**\r\n     * Ensure that all SSR transformers are run.\r\n     */\r\n    onCreate(): void;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * The custom nodeView which can be used to replace the nodes or marks in\r\n             * the dom and change their browser behaviour.\r\n             */\r\n            nodeViews: Record<string, NodeViewMethod>;\r\n        }\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to exclude the extension's nodeView\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            nodeViews?: boolean;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * Registers one or multiple nodeViews for the extension.\r\n             *\r\n             * This is a shorthand way of registering a nodeView without the need to\r\n             * create a prosemirror plugin. It allows for the registration of one nodeView\r\n             * which has the same name as the extension.\r\n             *\r\n             * To register more than one you would need to use a custom plugin returned\r\n             * from the `plugin` method.\r\n             *\r\n             * @param parameter - schema parameter with type included\r\n             *\r\n             * @alpha\r\n             */\r\n            createNodeViews?(): NodeViewMethod | Record<string, NodeViewMethod>;\r\n        }\r\n    }\r\n}\r\n",
      "builtins/paste-rules-extension.d.ts": "import type { ProsemirrorPlugin } from '@remirror/core-types';\r\nimport { PlainExtension } from '../extension';\r\n/**\r\n * This extension allows others extension to add the `createPasteRules` method\r\n * for automatically transforming pasted text which matches a certain regex\r\n * pattern in the dom.\r\n *\r\n * @builtin\r\n */\r\nexport declare class PasteRulesExtension extends PlainExtension {\r\n    get name(): \"pasteRules\";\r\n    /**\r\n     * Ensure that all ssr transformers are run.\r\n     */\r\n    onCreate(): void;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to exclude the extension's pasteRules\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            pasteRules?: boolean;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * Register paste rules for this extension.\r\n             *\r\n             * Paste rules are activated when text is pasted into the editor.\r\n             *\r\n             * TODO - The paste plugin is currently switched off.\r\n             */\r\n            createPasteRules?(): ProsemirrorPlugin[];\r\n        }\r\n    }\r\n}\r\n",
      "builtins/plugins-extension.d.ts": "import type { ProsemirrorPlugin } from '@remirror/core-types';\r\nimport { EditorState, Plugin, PluginKey } from '@remirror/pm/state';\r\nimport { AnyExtension, PlainExtension } from '../extension';\r\nimport type { AnyCombinedUnion, InferCombinedExtensions } from '../preset';\r\nimport type { CreatePluginReturn, GetNameUnion } from '../types';\r\n/**\r\n * This extension allows others extension to add the `createPlugin` method using\r\n * Prosemirror Plugins.\r\n *\r\n * @remarks\r\n *\r\n * This is an example of adding custom functionality to an extension via the\r\n * `ExtensionParameterMethods`.\r\n *\r\n * @builtin\r\n */\r\nexport declare class PluginsExtension extends PlainExtension {\r\n    #private;\r\n    get name(): \"plugins\";\r\n    private readonly pluginKeys;\r\n    private readonly stateGetters;\r\n    onCreate(): void;\r\n    /**\r\n     * Get all the plugins from the extension.\r\n     */\r\n    private extractExtensionPlugins;\r\n    private readonly getPluginStateCreator;\r\n    /**\r\n     * Add or replace a plugin.\r\n     */\r\n    private addOrReplacePlugins;\r\n    private readonly getStateByName;\r\n    /**\r\n     * Add the plugin specific properties and methods to the manager and extension store.\r\n     */\r\n    private updateExtensionStore;\r\n    /**\r\n     * Adds a plugin to the list of plugins.\r\n     */\r\n    private readonly addPlugins;\r\n    /**\r\n     * Replace a plugin in the state.\r\n     *\r\n     * Remember to update the state to see any changes.\r\n     */\r\n    private readonly replacePlugin;\r\n    /**\r\n     * Reruns the `createPlugin` and `createExternalPlugins` methods of the\r\n     * provided extension.\r\n     *\r\n     * For the update to take effect you will need to call `reconfigureStatePlugins`\r\n     *\r\n     * ```ts\r\n     * // From within an extension\r\n     * this.store.updateExtensionPlugins(this);\r\n     * this.store.reconfigureStatePlugins();\r\n     * ```\r\n     */\r\n    private readonly updateExtensionPlugins;\r\n    /**\r\n     * Applies the store plugins to the state. If any have changed then it will be updated.\r\n     */\r\n    private readonly reconfigureStatePlugins;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ExtensionStore {\r\n            /**\r\n             * Retrieve the state for any given extension name. This will throw an\r\n             * error if the extension identified by that name doesn't implement the\r\n             * `createPlugin` method.\r\n             *\r\n             * @param name - the name of the extension\r\n             *\r\n             * @remarks\r\n             *\r\n             * ```ts\r\n             * const pluginState = getPluginState(extension.name);\r\n             * ```\r\n             */\r\n            getPluginState: <State>(name: string) => State;\r\n            /**\r\n             * Replace a plugin in the manager store.\r\n             *\r\n             * Remember to also update the state with your plugin changes.\r\n             *\r\n             * ```ts\r\n             * this.store.reconfigureStatePlugins();\r\n             * ```\r\n             */\r\n            replacePlugin: (original: ProsemirrorPlugin, replacement: ProsemirrorPlugin) => void;\r\n            /**\r\n             * Applies the store plugins to the state. If any have changed then it will be updated.\r\n             */\r\n            reconfigureStatePlugins: () => void;\r\n            /**\r\n             * Use this to push custom plugins to the store which are added to the plugin\r\n             * list after the #plugins.\r\n             *\r\n             * ```ts\r\n             * this.store.addPlugins(...plugins);\r\n             * ```\r\n             */\r\n            addPlugins: (...plugins: ProsemirrorPlugin[]) => void;\r\n            /**\r\n             * Replace the previous plugins with new plugins.\r\n             *\r\n             * ```ts\r\n             * this.store.addOrReplacePlugins(this.createExternalPlugins(), this.externalPlugins);\r\n             * ```\r\n             */\r\n            addOrReplacePlugins: (plugins: ProsemirrorPlugin[], previousPlugins?: ProsemirrorPlugin[]) => void;\r\n            /**\r\n             * Reruns the `createPlugin` and `createExternalPlugins` methods of the\r\n             * provided extension.\r\n             *\r\n             * For the update to take effect you will need to call `reconfigureStatePlugins`\r\n             *\r\n             * ```ts\r\n             * // From within an extension\r\n             * this.store.updateExtensionPlugins(this);\r\n             * this.store.reconfigureStatePlugins();\r\n             * ```\r\n             */\r\n            updateExtensionPlugins: (extension: AnyExtension) => void;\r\n        }\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * All of the plugins combined together from all sources\r\n             */\r\n            plugins: ProsemirrorPlugin[];\r\n            /**\r\n             * Retrieve the state for a given extension name. This will throw an error\r\n             * if the extension doesn't exist.\r\n             *\r\n             * @param name - the name of the extension\r\n             */\r\n            getPluginState: <State>(name: GetNameUnion<InferCombinedExtensions<Combined>>) => State;\r\n            /**\r\n             * All the plugin keys available to be used by plugins.\r\n             */\r\n            pluginKeys: Record<string, PluginKey>;\r\n        }\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to exclude the extension's plugin\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            plugins?: boolean;\r\n        }\r\n        interface BaseExtension {\r\n            /**\r\n             * The plugin key for custom plugin created by this extension. This only\r\n             * exists when there is a valid `createPlugin` method on the extension.\r\n             *\r\n             * This can be used to set and retrieve metadata.\r\n             *\r\n             * ```ts\r\n             * const meta = tr.getMeta(this.pluginKey);\r\n             * ```\r\n             */\r\n            pluginKey: PluginKey;\r\n            /**\r\n             * The plugin that was created by the `createPlugin` method. This only\r\n             * exists for extension which implement that method.\r\n             */\r\n            plugin: Plugin;\r\n            /**\r\n             * The external plugins created by the `createExternalPlugins` method.\r\n             */\r\n            externalPlugins: Plugin[];\r\n            /**\r\n             * Retrieve the state of the custom plugin for this extension. This will\r\n             * throw an error if the extension doesn't have a valid `createPlugin`\r\n             * method.\r\n             *\r\n             * @remarks\r\n             *\r\n             * ```ts\r\n             * const pluginState = this.getPluginState();\r\n             * ```\r\n             *\r\n             * This is only available after the initialize stage of the editor manager\r\n             * lifecycle.\r\n             *\r\n             * If you would like to use it before that e.g. in the decorations prop of\r\n             * the `createPlugin` method, you can call it with a current state which\r\n             * will be used to retrieve the plugin state.\r\n             */\r\n            getPluginState: <State>(state?: EditorState) => State;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * Create a custom plugin directly in the editor.\r\n             *\r\n             * @remarks\r\n             *\r\n             * A unique `key` is automatically applied to enable easier retrieval of\r\n             * the plugin state.\r\n             *\r\n             * ```ts\r\n             * import { ExtensionPluginSpec } from 'remirror/core';\r\n             *\r\n             * class MyExtension extends PlainExtension {\r\n             *   get name() {\r\n             *     return 'me' as const;\r\n             *   }\r\n             *\r\n             *   createPlugin (): ExtensionPluginSpec {\r\n             *     return  {\r\n             *       props: {\r\n             *         handleKeyDown: keydownHandler({\r\n             *           Backspace: handler,\r\n             *           'Mod-Backspace': handler,\r\n             *           Delete: handler,\r\n             *           'Mod-Delete': handler,\r\n             *           'Ctrl-h': handler,\r\n             *           'Alt-Backspace': handler,\r\n             *           'Ctrl-d': handler,\r\n             *           'Ctrl-Alt-Backspace': handler,\r\n             *           'Alt-Delete': handler,\r\n             *           'Alt-d': handler,\r\n             *         }),\r\n             *         decorations() {\r\n             *           pluginState.setDeleted(false);\r\n             *           return pluginState.decorationSet;\r\n             *         },\r\n             *       },\r\n             *     }\r\n             *   }\r\n             * }\r\n             * ```\r\n             *\r\n             * @param getPluginState - a function you can call within any of the\r\n             * `CreatePluginSpec` methods to get the latest plugin state. Don't call\r\n             * in the outer scope of the `createPlugin` function or you will get\r\n             * errors..\r\n             */\r\n            createPlugin?(): CreatePluginReturn;\r\n            /**\r\n             * Register third party plugins when this extension is placed into the\r\n             * editor.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Some plugins (like the table plugin) consume several different plugins,\r\n             * creator method allows you to return a list of plugins you'd like to\r\n             * support.\r\n             */\r\n            createExternalPlugins?(): ProsemirrorPlugin[];\r\n        }\r\n    }\r\n}\r\n",
      "builtins/schema-extension.d.ts": "import type { EditorSchema, MarkExtensionSpec, NodeExtensionSpec, SchemaAttributes, Static } from '@remirror/core-types';\r\nimport { GetMarkNameUnion, GetNodeNameUnion, PlainExtension, SchemaFromExtensionUnion } from '../extension';\r\nimport type { AnyCombinedUnion, InferCombinedExtensions } from '../preset';\r\n/**\r\n * This extension creates the schema and provides extra attributes as defined in\r\n * the manager or the extension settings.\r\n *\r\n * @builtin\r\n */\r\nexport declare class SchemaExtension extends PlainExtension {\r\n    get name(): \"schema\";\r\n    onCreate(): void;\r\n    /**\r\n     * Gather all the extra attributes that have been added by extensions.\r\n     */\r\n    private gatherExtraAttributes;\r\n}\r\n/**\r\n * The extra identifiers that can be used.\r\n */\r\nexport declare type Identifiers = 'nodes' | 'marks' | 'all' | readonly string[];\r\n/**\r\n * The interface for adding extra attributes to multiple node and mark\r\n * extensions.\r\n */\r\nexport interface IdentifierSchemaAttributes {\r\n    /**\r\n     * The nodes or marks to add extra attributes to.\r\n     *\r\n     * This can either be an array of the strings or the following specific\r\n     * identifiers:\r\n     *\r\n     * - 'nodes' for all nodes\r\n     * - 'marks' for all marks\r\n     * - 'all' for all extensions which touch the schema.\r\n     */\r\n    identifiers: Identifiers;\r\n    /**\r\n     * The attributes to be added.\r\n     */\r\n    attributes: SchemaAttributes;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * Allows the extension to create an extra attributes array that will be\r\n             * added to the extra attributes.\r\n             *\r\n             * For example the `@remirror/extension-bidi` adds a `dir` attribute to\r\n             * all node extensions which allows them to automatically infer whether\r\n             * the text direction should be right-to-left, or left-to-right.\r\n             */\r\n            createSchemaAttributes?(): IdentifierSchemaAttributes[];\r\n        }\r\n        interface BaseExtensionOptions {\r\n            /**\r\n             * Inject additional attributes into the defined mark / node schema. This\r\n             * can only be used for `NodeExtensions` and `MarkExtensions`.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Sometimes you need to add additional attributes to a node or mark. This\r\n             * property enables this without needing to create a new extension.\r\n             *\r\n             * @defaultValue `{}`\r\n             */\r\n            extraAttributes?: Static<SchemaAttributes>;\r\n            /**\r\n             * When true will disable extra attributes for this instance of the\r\n             * extension.\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            disableExtraAttributes?: Static<boolean>;\r\n        }\r\n        interface ManagerSettings {\r\n            /**\r\n             * Allows for setting extra attributes on multiple nodes and marks by\r\n             * their name or constructor. These attributes are automatically added and\r\n             * retrieved from from the dom by prosemirror.\r\n             *\r\n             * @remarks\r\n             *\r\n             * An example is shown below.\r\n             *\r\n             * ```ts\r\n             * import { RemirrorManager } from 'remirror/core';\r\n             *\r\n             * const managerSettings = {\r\n             *   extraAttributes: [\r\n             *     {\r\n             *       identifiers: ['blockquote', 'heading'],\r\n             *       attributes: { id: 'id', alignment: '0', },\r\n             *     }, {\r\n             *       identifiers: ['mention', 'codeBlock'],\r\n             *       attributes: { 'userId': { default: null } },\r\n             *     },\r\n             *   ]\r\n             * };\r\n             *\r\n             * const manager = RemirrorManager.create([], { extraAttributes })\r\n             * ```\r\n             */\r\n            extraAttributes?: IdentifierSchemaAttributes[];\r\n            /**\r\n             * Perhaps you don't need extra attributes at all in the editor. This\r\n             * allows you to disable extra attributes when set to true.\r\n             *\r\n             * @defaultValue undefined\r\n             */\r\n            disableExtraAttributes?: boolean;\r\n        }\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * The nodes to place on the schema.\r\n             */\r\n            nodes: Record<GetNodeNameUnion<InferCombinedExtensions<Combined>>, NodeExtensionSpec>;\r\n            /**\r\n             * The marks to be added to the schema.\r\n             */\r\n            marks: Record<GetMarkNameUnion<InferCombinedExtensions<Combined>>, MarkExtensionSpec>;\r\n            /**\r\n             * The schema created by this extension manager.\r\n             */\r\n            schema: SchemaFromExtensionUnion<InferCombinedExtensions<Combined>>;\r\n        }\r\n        interface MarkExtension {\r\n            /**\r\n             * Provides access to the `MarkExtensionSpec`.\r\n             */\r\n            spec: MarkExtensionSpec;\r\n        }\r\n        interface NodeExtension {\r\n            /**\r\n             * Provides access to the `NodeExtensionSpec`.\r\n             */\r\n            spec: NodeExtensionSpec;\r\n        }\r\n        interface ExtensionStore {\r\n            /**\r\n             * The Prosemirror schema being used for the current editor.\r\n             *\r\n             * @remarks\r\n             *\r\n             * The type is available when the manager initializes. So it can be used\r\n             * in the outer scope of `createCommands`, `createHelpers`, `createKeymap`\r\n             * and most of the creator methods.\r\n             *\r\n             * Available: *return function* - `onCreate`\r\n             */\r\n            schema: EditorSchema;\r\n        }\r\n        interface StaticExtensionOptions {\r\n            /**\r\n             * When true will disable extra attributes for all instances of this extension.\r\n             *\r\n             * @defaultValue `false`\r\n             */\r\n            readonly disableExtraAttributes?: boolean;\r\n        }\r\n    }\r\n}\r\n",
      "builtins/suggest-extension.d.ts": "import type { CustomHandler } from '@remirror/core-types';\r\nimport { Suggester, SuggestState } from '@remirror/pm/suggest';\r\nimport { PlainExtension } from '../extension';\r\nimport type { AddCustomHandler } from '../extension/base-class';\r\nexport interface SuggestOptions {\r\n    /**\r\n     * The custom handler which enables adding `suggesters`.\r\n     */\r\n    suggester: CustomHandler<Suggester>;\r\n}\r\n/**\r\n * This extension allows others extension to add the `createSuggesters` method\r\n * for adding the prosemirror-suggest functionality to your editor.\r\n *\r\n * @remarks\r\n *\r\n * This is an example of adding custom functionality to an extension via the\r\n * `ExtensionParameterMethods`.\r\n *\r\n * @builtin\r\n */\r\nexport declare class SuggestExtension extends PlainExtension<SuggestOptions> {\r\n    get name(): \"suggestions\";\r\n    /**\r\n     * Ensure that all ssr transformers are run.\r\n     */\r\n    onCreate: () => void;\r\n    onAddCustomHandler: AddCustomHandler<SuggestOptions>;\r\n    createHelpers(): {\r\n        /**\r\n         * Get the suggest plugin state.\r\n         */\r\n        getSuggestPluginState: () => SuggestState;\r\n        /**\r\n         * Get some helpful methods from the SuggestPluginState.\r\n         */\r\n        getSuggestPluginHelpers: () => {\r\n            addIgnored: ({ from, char, name, specific }: import(\"@remirror/pm/suggest\").AddIgnoredParameter) => void;\r\n            clearIgnored: (name?: string) => void;\r\n            removeIgnored: ({ from, char, name }: import(\"@remirror/pm/suggest\").RemoveIgnoredParameter) => void;\r\n            ignoreNextExit: () => void;\r\n            setMarkRemoved: () => void;\r\n        };\r\n    };\r\n    private getSuggestPluginState;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to exclude the suggesters plugin configuration for the\r\n             * extension.\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            suggesters?: boolean;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * Create suggesters which respond to character key combinations within\r\n             * the editor instance.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Suggesters are a  powerful way of building up the editors\r\n             * functionality. They can support `@` mentions, `#` tagging, `/` special\r\n             * command keys which trigger action menus and much more.\r\n             */\r\n            createSuggesters?(): Suggester[] | Suggester;\r\n        }\r\n    }\r\n}\r\n",
      "builtins/tags-extension.d.ts": "import { ExtensionTag } from '@remirror/core-constants';\r\nimport { ExtensionTags, PlainExtension } from '../extension';\r\nimport type { AnyCombinedUnion, InferCombinedExtensions } from '../preset';\r\nimport type { GeneralExtensionTags, MarkExtensionTags, NodeExtensionTags } from '../types';\r\n/**\r\n * Create the extension tags which are passed into each extensions method to\r\n * enable dynamically generated rules and commands.\r\n *\r\n * @builtin\r\n */\r\nexport declare class TagsExtension extends PlainExtension {\r\n    #private;\r\n    get name(): \"tags\";\r\n    get combinedTags(): {\r\n        general: GeneralExtensionTags<string>;\r\n        mark: MarkExtensionTags<string>;\r\n        node: NodeExtensionTags<string>;\r\n    };\r\n    onCreate(): void;\r\n    private resetTags;\r\n    private updateTagForExtension;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface BaseExtension {\r\n            /**\r\n             * Define the tags for this extension.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Tags are a helpful tool for categorizing the behavior of an extension. This\r\n             * behavior is later grouped in the `Manager` and passed to the\r\n             * `extensionStore`. Tags can be used by\r\n             * commands that need to remove all formatting and use the tag to identify\r\n             * which registered extensions are formatters.\r\n             *\r\n             * There are internally defined tags but it's also possible to define any\r\n             * custom string as a tag. See {@link ExtensionTag}\r\n             */\r\n            tags?: Array<ExtensionTag | string>;\r\n        }\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * Store the built in and custom tags for the editor instance.\r\n             */\r\n            tags: Readonly<ExtensionTags<InferCombinedExtensions<Combined>>>;\r\n        }\r\n        interface ExtensionStore {\r\n            /**\r\n             * The tags provided by the configured extensions.\r\n             */\r\n            tags: ExtensionTags<any>;\r\n        }\r\n    }\r\n}\r\n",
      "commands.d.ts": "import type { AttributesParameter, CommandFunction, EditorSchema, MarkTypeParameter, RangeParameter } from '@remirror/core-types';\r\nexport interface ToggleMarkParameter<Schema extends EditorSchema = any> extends MarkTypeParameter<Schema>, Partial<AttributesParameter>, Partial<RangeParameter> {\r\n}\r\n/**\r\n * A command function that works for the remirror codebase.\r\n *\r\n * Create a command function that toggles the given mark with the given\r\n * attributes. Will return `false` when the current selection doesn't support\r\n * that mark. This will remove the mark if any marks of that type exist in the\r\n * selection, or add it otherwise. If the selection is empty, this applies to\r\n * the [stored marks](#state.EditorState.storedMarks) instead of a range of the\r\n * document.\r\n *\r\n * The differences from the `prosemirror-commands` version.\r\n * - Acts on the transaction rather than the state to allow for commands to be\r\n *   chained together.\r\n * - Uses the ONE parameter function signature for compatibility with remirror.\r\n * - Supports passing a custom range.\r\n */\r\nexport declare function toggleMark(parameter: ToggleMarkParameter): CommandFunction;\r\n",
      "decorators.d.ts": "import type { ExtensionPriority } from '@remirror/core-constants';\r\nimport type { CustomHandlerKeyList, EmptyShape, GetCustomHandler, GetHandler, GetStatic, HandlerKey, HandlerKeyList, IfEmpty, IfHasRequiredProperties, Shape, StaticKeyList } from '@remirror/core-types';\r\nimport type { DefaultExtensionOptions, ExtensionConstructor } from './extension';\r\nimport type { HandlerKeyOptions } from './extension/base-class';\r\nimport type { DefaultPresetOptions, PresetConstructor } from './preset';\r\ninterface DefaultOptionsParameter<Options extends Shape = EmptyShape> {\r\n    /**\r\n     * The default options.\r\n     *\r\n     * All non required options must have a default value provided.\r\n     *\r\n     * @defaultValue `{}`\r\n     */\r\n    defaultOptions: DefaultExtensionOptions<Options>;\r\n}\r\ninterface DefaultPriorityParameter {\r\n    /**\r\n     * The default priority for this extension.\r\n     *\r\n     * @defaultValue `{}`\r\n     */\r\n    defaultPriority?: ExtensionPriority;\r\n}\r\ninterface StaticKeysParameter<Options extends Shape = EmptyShape> {\r\n    /**\r\n     * The list of all keys which are static and can only be set at the start.\r\n     */\r\n    staticKeys: StaticKeyList<Options>;\r\n}\r\ninterface HandlerKeysParameter<Options extends Shape = EmptyShape> {\r\n    /**\r\n     * The list of all keys which are event handlers.\r\n     */\r\n    handlerKeys: HandlerKeyList<Options>;\r\n    /**\r\n     * Customize how the handler should work.\r\n     */\r\n    handlerKeyOptions?: Partial<Record<HandlerKey<Options> | '__ALL__', HandlerKeyOptions>>;\r\n}\r\ninterface CustomHandlerKeysParameter<Options extends Shape = EmptyShape> {\r\n    customHandlerKeys: CustomHandlerKeyList<Options>;\r\n}\r\nexport declare type ExtensionDecoratorOptions<Options extends Shape = EmptyShape> = DefaultPriorityParameter & IfHasRequiredProperties<DefaultExtensionOptions<Options>, DefaultOptionsParameter<Options>, Partial<DefaultOptionsParameter<Options>>> & IfEmpty<GetStatic<Options>, Partial<StaticKeysParameter<Options>>, StaticKeysParameter<Options>> & IfEmpty<GetHandler<Options>, Partial<HandlerKeysParameter<Options>>, HandlerKeysParameter<Options>> & IfEmpty<GetCustomHandler<Options>, Partial<CustomHandlerKeysParameter<Options>>, CustomHandlerKeysParameter<Options>> & Partial<Remirror.StaticExtensionOptions>;\r\n/**\r\n * A decorator for the remirror extension.\r\n *\r\n * This adds static properties to the extension constructor.\r\n */\r\nexport declare function extensionDecorator<Options extends Shape = EmptyShape>(options: ExtensionDecoratorOptions<Options>): <Type extends import(\"@remirror/core-types\").Replace<ExtensionConstructor<any>, new (...args: any[]) => import(\"./extension\").AnyExtension>>(ReadonlyConstructor: Type) => Type;\r\nexport declare type PresetDecoratorOptions<Options extends Shape = EmptyShape> = IfHasRequiredProperties<DefaultPresetOptions<Options>, DefaultOptionsParameter<Options>, Partial<DefaultOptionsParameter<Options>>> & IfEmpty<GetStatic<Options>, Partial<StaticKeysParameter<Options>>, StaticKeysParameter<Options>> & IfEmpty<GetHandler<Options>, Partial<HandlerKeysParameter<Options>>, HandlerKeysParameter<Options>> & IfEmpty<GetCustomHandler<Options>, Partial<CustomHandlerKeysParameter<Options>>, CustomHandlerKeysParameter<Options>>;\r\n/**\r\n * A decorator for the remirror preset.\r\n *\r\n * This adds static properties to the preset constructor.\r\n */\r\nexport declare function presetDecorator<Options extends Shape = EmptyShape>(options: PresetDecoratorOptions<Options>): <Type extends import(\"@remirror/core-types\").Replace<PresetConstructor<any>, new (...args: any[]) => import(\"./preset\").AnyPreset>>(ReadonlyConstructor: Type) => Type;\r\ndeclare global {\r\n    namespace Remirror {\r\n        /**\r\n         * An interface for declaring static options for the extension.\r\n         */\r\n        interface StaticExtensionOptions {\r\n        }\r\n    }\r\n}\r\nexport {};\r\n",
      "editor-wrapper.d.ts": "import { Unsubscribe } from 'nanoevents';\r\nimport type { EditorSchema, EditorState, EditorStateParameter, EditorView, EditorViewParameter, FromToParameter, PrimitiveSelection, RemirrorContentType, RemirrorJSON, RenderEnvironment, Shape, StateJSON, TextParameter, Transaction, TransactionParameter, TransactionTransformer } from '@remirror/core-types';\r\nimport { CreateDocumentErrorHandler, Fallback, StringHandlerParameter } from '@remirror/core-utils';\r\nimport type { DirectEditorProps } from '@remirror/pm/view';\r\nimport type { UpdatableViewProps } from './builtins';\r\nimport type { AnyExtensionConstructor } from './extension';\r\nimport type { ManagerEvents, RemirrorManager } from './manager';\r\nimport type { AnyPresetConstructor } from './preset';\r\nimport type { AnyCombinedUnion, SchemaFromCombined } from './preset/preset-types';\r\n/**\r\n * This is the `EditorWrapper` it is new in the `1.0.0-next` versions and is a\r\n * helper class which should be extended when implementing `Remirror` into your\r\n * desired framework.\r\n *\r\n * TODO - Think of a better name than `EditorWrapper`.\r\n */\r\nexport declare abstract class EditorWrapper<Combined extends AnyCombinedUnion, Props extends EditorWrapperProps<Combined>> {\r\n    #private;\r\n    /**\r\n     * A previous state that can be overridden by the framework implementation.\r\n     */\r\n    protected previousStateOverride?: EditorState<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * The updatable view props.\r\n     */\r\n    protected get updatableViewProps(): UpdatableViewPropsObject;\r\n    /**\r\n     * The props passed in when creating or updating the `EditorWrapper` instance.\r\n     */\r\n    get props(): Props;\r\n    /**\r\n     * Returns the previous editor state. On the first render it defaults to\r\n     * returning the current state. For the first render the previous state and\r\n     * current state will always be equal.\r\n     */\r\n    protected get previousState(): EditorState<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * Create the editor state from a remirror content type. This should be passed\r\n     * in during initialization.\r\n     */\r\n    private createStateFromContent;\r\n    /**\r\n     * A utility for quickly retrieving the extension manager.\r\n     */\r\n    protected get manager(): RemirrorManager<Combined>;\r\n    /**\r\n     * The prosemirror EditorView.\r\n     */\r\n    protected get view(): EditorView<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * The document to use when rendering.\r\n     */\r\n    protected get doc(): any;\r\n    /**\r\n     * A unique id for the editor. Can be used to differentiate between editors.\r\n     *\r\n     * Please note that this ID is only locally unique, it should not be used as a\r\n     * database key.\r\n     */\r\n    protected get uid(): string;\r\n    constructor(parameter: EditorWrapperParameter<Combined, Props>);\r\n    /**\r\n     * Setup the manager event listeners which are disposed of when the manager is\r\n     * destroyed.\r\n     */\r\n    private setupEvents;\r\n    /**\r\n     * Update the constructor props passed in. Useful for frameworks like react\r\n     * where props are constantly changing and when using hooks function closures\r\n     * can become stale.\r\n     *\r\n     * You can call the update method with the new `props` to update the internal\r\n     * state of this instance.\r\n     */\r\n    update(parameter: EditorWrapperParameter<Combined, Props>): this;\r\n    /**\r\n     * Retrieve the editor state.\r\n     */\r\n    protected readonly getState: () => import(\"@remirror/pm/state\").EditorState<EditorSchema<import(\"./extension\").GetNodeNameUnion<import(\"./preset\").InferCombinedExtensions<Combined>>, import(\"./extension\").GetMarkNameUnion<import(\"./preset\").InferCombinedExtensions<Combined>>>>;\r\n    /**\r\n     * Retrieve the previous editor state.\r\n     */\r\n    protected readonly getPreviousState: () => Readonly<import(\"@remirror/pm/state\").EditorState<EditorSchema<import(\"./extension\").GetNodeNameUnion<import(\"./preset\").InferCombinedExtensions<Combined>>, import(\"./extension\").GetMarkNameUnion<import(\"./preset\").InferCombinedExtensions<Combined>>>>>;\r\n    /**\r\n     * Create the prosemirror editor view.\r\n     */\r\n    protected abstract createView(state: EditorState<SchemaFromCombined<Combined>>, element?: Element): EditorView<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * Update the view props.\r\n     */\r\n    protected updateViewProps(...keys: UpdatableViewProps[]): void;\r\n    /**\r\n     * This sets the attributes for the prosemirror dom node.\r\n     */\r\n    protected getAttributes(ssr?: false): Record<string, string>;\r\n    protected getAttributes(ssr: true): Shape;\r\n    /**\r\n     * Part of the Prosemirror API and is called whenever there is state change in\r\n     * the editor.\r\n     *\r\n     * @internalremarks\r\n     * How does it work when transactions are dispatched one after the other.\r\n     */\r\n    protected readonly dispatchTransaction: (tr: Transaction) => void;\r\n    /**\r\n     * Updates the state either by calling onStateChange when it exists or\r\n     * directly setting the internal state via a `setState` call.\r\n     */\r\n    protected abstract updateState(parameter: UpdateStateParameter<SchemaFromCombined<Combined>>): void;\r\n    /**\r\n     * Adds `onBlur` and `onFocus` listeners.\r\n     *\r\n     * When extending this class make sure to call this method once\r\n     * `ProsemirrorView` has been added to the dom.\r\n     */\r\n    protected addFocusListeners(): void;\r\n    /**\r\n     * Remove `onBlur` and `onFocus` listeners.\r\n     *\r\n     * When extending this class in your framework, make sure to call this just before the view is destroyed.\r\n     */\r\n    protected removeFocusListeners(): void;\r\n    /**\r\n     * Called when the component unmounts and is responsible for cleanup.\r\n     *\r\n     * @remarks\r\n     *\r\n     * - Removes listeners for the editor `blur` and `focus` events\r\n     * - Destroys the state for each plugin\r\n     * - Destroys the manager which destroys the editor view.\r\n     */\r\n    onDestroy(): void;\r\n    /**\r\n     * Use this method in the `onUpdate` event to run all change handlers.\r\n     */\r\n    readonly onChange: (parameter?: ListenerParameter<Combined>) => void;\r\n    /**\r\n     * Listener for editor 'blur' events\r\n     */\r\n    private readonly onBlur;\r\n    /**\r\n     * Listener for editor 'focus' events\r\n     */\r\n    private readonly onFocus;\r\n    /**\r\n     * Sets the content of the editor.\r\n     *\r\n     * @param content\r\n     * @param triggerChange\r\n     */\r\n    private readonly setContent;\r\n    /**\r\n     * Clear; the content of the editor (reset to the default empty node)\r\n     *\r\n     * @param triggerChange - whether to notify the onChange handler that the\r\n     * content has been reset\r\n     */\r\n    private readonly clearContent;\r\n    /**\r\n     * The params used in the event listeners and the state listener\r\n     */\r\n    protected baseListenerParameter(parameter: ListenerParameter<Combined>): BaseListenerParameter<Combined>;\r\n    /**\r\n     * Creates the parameters passed into all event listener handlers. e.g.\r\n     * `onChange`\r\n     */\r\n    protected eventListenerParameter(parameter?: ListenerParameter<Combined>): RemirrorEventListenerParameter<Combined>;\r\n    /**\r\n     * Set the focus for the editor.\r\n     */\r\n    protected readonly focus: (position?: FocusType) => void;\r\n    /**\r\n     * Remove the focus from the editor. If the editor is not focused it will do\r\n     * nothing.\r\n     */\r\n    protected readonly blur: () => void;\r\n    /**\r\n     * Dispatch the text selection\r\n     */\r\n    private dispatchSelection;\r\n    get editorWrapperOutput(): EditorWrapperOutput<Combined>;\r\n    private readonly getText;\r\n    /**\r\n     * Retrieve the HTML from the `doc` prosemirror node\r\n     */\r\n    private readonly getHTML;\r\n    /**\r\n     * Retrieve the full state json object\r\n     */\r\n    private readonly getJSON;\r\n    /**\r\n     * Return the json object for the prosemirror document.\r\n     */\r\n    private readonly getRemirrorJSON;\r\n}\r\nexport interface EditorWrapperParameter<Combined extends AnyCombinedUnion, Props extends EditorWrapperProps<Combined>> {\r\n    /**\r\n     * The initial editor state\r\n     */\r\n    initialEditorState: EditorState<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * A method for getting the passed in props.\r\n     */\r\n    getProps: () => Props;\r\n    /**\r\n     * A custom method for creating a prosemirror state from content. It allows\r\n     * users to manage controlled editors more easily.\r\n     */\r\n    createStateFromContent: CreateStateFromContent<Combined>;\r\n    /**\r\n     * When provided the view will immediately be inserted into the dom within\r\n     * this element.\r\n     */\r\n    element?: Element;\r\n}\r\n/**\r\n * The type of arguments acceptable for the focus parameter.\r\n *\r\n * - Can be a prosemirror selection\r\n * - A range of `{ from: number; to: number }`\r\n * - A single position with a `number`\r\n * - A string of `'start' | 'end'`\r\n * - `true` which sets the focus to the current position or start.\r\n */\r\nexport declare type FocusType = PrimitiveSelection | boolean;\r\n/**\r\n * The base options for an editor wrapper. This is used within the react and dom\r\n * implementations.\r\n */\r\nexport interface EditorWrapperProps<Combined extends AnyCombinedUnion> extends StringHandlerParameter {\r\n    /**\r\n     * Pass in the extension manager.\r\n     *\r\n     * The manager is responsible for handling all Prosemirror related\r\n     * functionality.\r\n     *\r\n     * TODO - why does this only work as `any`.\r\n     */\r\n    manager: RemirrorManager<any>;\r\n    /**\r\n     * Set the starting value object of the editor.\r\n     *\r\n     * Without setting onStateChange remirror renders as an uncontrolled\r\n     * component. Value changes are passed back out of the editor and there is now\r\n     * way to set the value via props. As a result this is the only opportunity to\r\n     * directly control the rendered text.\r\n     *\r\n     * @defaultValue `{ type: 'doc', content: [{ type: 'paragraph' }] }`\r\n     */\r\n    initialContent?: RemirrorContentType | [RemirrorContentType, PrimitiveSelection];\r\n    /**\r\n     * Adds attributes directly to the prosemirror element.\r\n     *\r\n     * @defaultValue `{}`\r\n     */\r\n    attributes?: Record<string, string> | AttributePropFunction<Combined>;\r\n    /**\r\n     * Determines whether this editor is editable or not.\r\n     *\r\n     * @defaultValue true\r\n     */\r\n    editable?: boolean;\r\n    /**\r\n     * When set to true focus will be place on the editor as soon as it first\r\n     * loads.\r\n     *\r\n     * @defaultValue false\r\n     */\r\n    autoFocus?: FocusType;\r\n    /**\r\n     * An event listener which is called whenever the editor gains focus.\r\n     */\r\n    onFocus?: (params: RemirrorEventListenerParameter<Combined>, event: Event) => void;\r\n    /**\r\n     * An event listener which is called whenever the editor is blurred.\r\n     */\r\n    onBlur?: (params: RemirrorEventListenerParameter<Combined>, event: Event) => void;\r\n    /**\r\n     * Called on every change to the Prosemirror state.\r\n     */\r\n    onChange?: RemirrorEventListener<Combined>;\r\n    /**\r\n     * A method called when the editor is dispatching the transaction.\r\n     *\r\n     * @remarks\r\n     * Use this to update the transaction which will be used to update the editor\r\n     * state.\r\n     */\r\n    onDispatchTransaction?: TransactionTransformer<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * Sets the accessibility label for the editor instance.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    label?: string;\r\n    /**\r\n     * By default remirror will work out whether this is a dom environment or\r\n     * server environment for SSR rendering. You can override this behaviour here\r\n     * when required.\r\n     */\r\n    forceEnvironment?: RenderEnvironment;\r\n    /**\r\n     * The value to use for empty content, or content with an error.\r\n     *\r\n     * This is the value used for an empty editor or when `resetContent` is\r\n     * called.\r\n     *\r\n     * @defaultValue `EMPTY_PARAGRAPH_NODE`\r\n     */\r\n    onError?: Fallback | CreateDocumentErrorHandler;\r\n}\r\n/**\r\n * These are the props passed to the render function provided when setting up\r\n * your editor.\r\n */\r\nexport interface EditorWrapperOutput<Combined extends AnyCombinedUnion> extends Remirror.ManagerStore<Combined> {\r\n    /**\r\n     * An instance of the extension manager\r\n     */\r\n    manager: RemirrorManager<Combined>;\r\n    /**\r\n     * Add event handlers to the remirror editor at runtime.\r\n     */\r\n    addHandler: <Key extends keyof EditorWrapperEvents<Combined>>(event: Key, cb: EditorWrapperEvents<Combined>[Key]) => Unsubscribe;\r\n    /**\r\n     * The unique id for the editor instance.\r\n     */\r\n    uid: string;\r\n    /**\r\n     * Clears all editor content.\r\n     *\r\n     * @param options - includes a `triggerChange` handler which should be\r\n     * triggered by the update.\r\n     */\r\n    clearContent: (options?: TriggerChangeParameter) => void;\r\n    /**\r\n     * Replace all editor content with the new content.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Allows for the editor content to be overridden by force.\r\n     *\r\n     * @param triggerOnChange - whether the `onChange` handler should be triggered\r\n     * by the update. Defaults to `false`\r\n     */\r\n    setContent: (content: RemirrorContentType, options?: TriggerChangeParameter) => void;\r\n    /**\r\n     * Focus the editor at the `start` | `end` a specific position or at a valid\r\n     * range between `{ from, to }`.\r\n     */\r\n    focus: (position?: FocusType) => void;\r\n    /**\r\n     * Blur the editor.\r\n     */\r\n    blur: () => void;\r\n    /**\r\n     * A getter function for the current editor state. It's a wrapper around\r\n     * `view.state`.\r\n     */\r\n    getState: () => EditorState<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * A getter function for the previous prosemirror editor state. It can be used\r\n     * to check what's changed between states.\r\n     */\r\n    getPreviousState: () => EditorState<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * Get an extension by it's constructor.\r\n     */\r\n    getExtension: <ExtensionConstructor extends AnyExtensionConstructor>(Constructor: ExtensionConstructor) => InstanceType<ExtensionConstructor>;\r\n    /**\r\n     * Get an extension by it's constructor.\r\n     */\r\n    getPreset: <PresetConstructor extends AnyPresetConstructor>(Constructor: PresetConstructor) => InstanceType<PresetConstructor>;\r\n}\r\nexport interface RemirrorGetterParameter {\r\n    /**\r\n     * Get the current HTML from the latest editor state.\r\n     */\r\n    getHTML: () => string;\r\n    /**\r\n     * Get the current raw text from the latest editor state.\r\n     *\r\n     * @param lineBreakDivider - the divider to use for new lines defaults to\r\n     * '\\n\\n'\r\n     */\r\n    getText: (lineBreakDivider?: string) => string;\r\n    /**\r\n     * Get the full JSON representation of the state (including the selection\r\n     * information)\r\n     */\r\n    getJSON: () => StateJSON;\r\n    /**\r\n     * Get a representation of the editor content as an ObjectNode which can be\r\n     * used to set content for and editor.\r\n     */\r\n    getRemirrorJSON: () => RemirrorJSON;\r\n}\r\nexport interface BaseListenerParameter<Combined extends AnyCombinedUnion> extends EditorViewParameter<SchemaFromCombined<Combined>>, RemirrorGetterParameter {\r\n    /**\r\n     * The original transaction which caused this state update.\r\n     *\r\n     * This allows for inspecting the reason behind the state change. When\r\n     * undefined this means that the state was updated externally.\r\n     *\r\n     * If available:\r\n     * - Metadata on the transaction can be inspected. `tr.getMeta`\r\n     * - Was the change caused by added / removed content? `tr.docChanged`\r\n     * - Was ths change caused by an updated selection? `tr.selectionSet`\r\n     * - `tr.steps` can be inspected for further granularity.\r\n     */\r\n    tr?: Transaction<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * A shorthand way of checking whether the update was triggered by editor\r\n     * usage (internal) or overwriting the state.\r\n     *\r\n     * - `true` The update was triggered by a change in the prosemirror doc or an\r\n     *   update to the selection. In these cases `tr` will have a value.\r\n     * - `false` The update was caused by a call to `setContent` or `resetContent`\r\n     */\r\n    internalUpdate: boolean;\r\n}\r\nexport declare type CreateStateFromContent<Combined extends AnyCombinedUnion> = (content: RemirrorContentType, selection?: FromToParameter) => EditorState<SchemaFromCombined<Combined>>;\r\nexport interface RemirrorEventListenerParameter<Combined extends AnyCombinedUnion> extends EditorStateParameter<SchemaFromCombined<Combined>>, BaseListenerParameter<Combined> {\r\n    /**\r\n     * True when this is the first render of the editor. This applies when the\r\n     * editor is first attached to the DOM.\r\n     */\r\n    firstRender: boolean;\r\n    /**\r\n     * The previous state.\r\n     */\r\n    previousState: EditorState<SchemaFromCombined<Combined>>;\r\n    /**\r\n     * Manually create a new state object with the desired content.\r\n     */\r\n    createStateFromContent: CreateStateFromContent<Combined>;\r\n}\r\nexport declare type RemirrorEventListener<Combined extends AnyCombinedUnion> = (params: RemirrorEventListenerParameter<Combined>) => void;\r\nexport declare type AttributePropFunction<Combined extends AnyCombinedUnion> = (params: RemirrorEventListenerParameter<Combined>) => Record<string, string>;\r\nexport interface PlaceholderConfig extends TextParameter {\r\n    className: string;\r\n}\r\nexport interface UpdateStateParameter<Schema extends EditorSchema = any> extends Partial<TransactionParameter<Schema>>, EditorStateParameter<Schema>, TriggerChangeParameter {\r\n    /**\r\n     * When the state updates are not controlled and it was a transaction that\r\n     * caused the state to be updated this value captures all the transaction\r\n     * updates caused by prosemirror plugins hook state methods like\r\n     * `filterTransactions` and `appendTransactions`.\r\n     *\r\n     * This is for advanced users only, and I personally have never needed it.\r\n     */\r\n    transactions?: Array<Transaction<Schema>>;\r\n}\r\nexport interface TriggerChangeParameter {\r\n    /**\r\n     * Whether or not to trigger this as a change and call any handlers.\r\n     *\r\n     * @defaultValue true\r\n     */\r\n    triggerChange?: boolean;\r\n}\r\nexport interface ListenerParameter<Combined extends AnyCombinedUnion> extends Partial<EditorStateParameter<SchemaFromCombined<Combined>>>, Partial<TransactionParameter<SchemaFromCombined<Combined>>> {\r\n}\r\ninterface EditorWrapperEvents<Combined extends AnyCombinedUnion> extends Pick<ManagerEvents, 'destroy'> {\r\n    /**\r\n     * An event listener which is called whenever the editor gains focus.\r\n     */\r\n    focus: (params: RemirrorEventListenerParameter<Combined>, event: Event) => void;\r\n    /**\r\n     * An event listener which is called whenever the editor is blurred.\r\n     */\r\n    blur: (params: RemirrorEventListenerParameter<Combined>, event: Event) => void;\r\n    /**\r\n     * Called on every state update after the state has been applied to the editor.\r\n     *\r\n     * This should be used to track the current editor state and check if commands\r\n     * are enabled.\r\n     */\r\n    updated: RemirrorEventListener<Combined>;\r\n}\r\ndeclare type UpdatableViewPropsObject = {\r\n    [Key in UpdatableViewProps]: DirectEditorProps[Key];\r\n};\r\nexport {};\r\n",
      "extension/base-class.d.ts": "import { __INTERNAL_REMIRROR_IDENTIFIER_KEY__, ErrorConstant, RemirrorIdentifier } from '@remirror/core-constants';\r\nimport type { AnyFunction, Dispose, EmptyShape, GetConstructorParameter, GetCustomHandler, GetFixedDynamic, GetHandler, GetPartialDynamic, GetStatic, IfNoRequiredProperties, Replace, Shape, UndefinedFlipPartialAndRequired, ValidOptions } from '@remirror/core-types';\r\nimport type { OnSetOptionsParameter } from '../types';\r\ninterface BaseClassConstructorParameter<DefaultStaticOptions extends Shape = EmptyShape> {\r\n    validator: (Constructor: unknown, code: ErrorConstant) => void;\r\n    code: ErrorConstant;\r\n    defaultOptions: DefaultStaticOptions;\r\n}\r\nexport declare abstract class BaseClass<Options extends ValidOptions = EmptyShape, DefaultStaticOptions extends Shape = EmptyShape> {\r\n    #private;\r\n    /**\r\n     * The default options for this extension.\r\n     *\r\n     * TODO see if this can be cast to something other than any and allow composition.\r\n     */\r\n    static readonly defaultOptions: any;\r\n    /**\r\n     * The static keys for this class.\r\n     */\r\n    static readonly staticKeys: string[];\r\n    /**\r\n     * The event handler keys.\r\n     */\r\n    static readonly handlerKeys: string[];\r\n    /**\r\n     * Customize the way the handler should behave.\r\n     */\r\n    static handlerKeyOptions: Partial<Record<string, HandlerKeyOptions> & {\r\n        __ALL__?: HandlerKeyOptions;\r\n    }>;\r\n    /**\r\n     * The custom keys.\r\n     */\r\n    static readonly customHandlerKeys: string[];\r\n    /**\r\n     * Not for usage. This is purely for types to make it easier to infer\r\n     * the type of `Settings` on an extension instance.\r\n     */\r\n    ['~O']: Options & DefaultStaticOptions;\r\n    /**\r\n     * The identifier for the extension which can determine whether it is a node,\r\n     * mark or plain extension.\r\n     * @internal\r\n     */\r\n    abstract readonly [__INTERNAL_REMIRROR_IDENTIFIER_KEY__]: RemirrorIdentifier;\r\n    /**\r\n     * The unique name of this extension.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Every extension **must** have a name. The name should have a distinct type\r\n     * to allow for better type inference for end users. By convention the name\r\n     * should be `camelCased` and unique within your editor instance.\r\n     *\r\n     * ```ts\r\n     * class SimpleExtension extends Extension {\r\n     *   get name() {\r\n     *     return 'simple' as const;\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    abstract get name(): string;\r\n    /**\r\n     * The options for this extension.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Options are composed of Static, Dynamic, Handlers and ObjectHandlers.\r\n     *\r\n     * - `Static` - set at instantiation by the constructor.\r\n     * - `Dynamic` - optionally set at instantiation by the constructor and also\r\n     *   set during the runtime.\r\n     * - `Handlers` - can only be set during the runtime.\r\n     * - `ObjectHandlers` - Can only be set during the runtime of the extension.\r\n     */\r\n    get options(): Readonly<Required<Options>> & DefaultStaticOptions;\r\n    /**\r\n     * Get the dynamic keys for this extension.\r\n     */\r\n    get dynamicKeys(): string[];\r\n    /**\r\n     * The options that this instance was created with, merged with all the\r\n     * default options.\r\n     */\r\n    get initialOptions(): Readonly<Required<Options>> & DefaultStaticOptions;\r\n    constructor({ validator, defaultOptions, code }: BaseClassConstructorParameter<DefaultStaticOptions>, ...parameters: ConstructorParameter<Options, DefaultStaticOptions>);\r\n    /**\r\n     * This method is called by the extension constructor. It is not strictly a\r\n     * lifecycle method since at this point the manager has not yet been\r\n     * instantiated.\r\n     *\r\n     * @remarks\r\n     *\r\n     * It should be used instead of overriding the constructor which can lead to\r\n     * problems.\r\n     *\r\n     * At this point\r\n     * - `this.store` will throw an error since it doesn't yet exist.\r\n     * - `this.type` in `NodeExtension` and `MarkExtension` will also throw an\r\n     *   error since the schema hasn't been created yet.\r\n     */\r\n    protected init(): void;\r\n    /**\r\n     * Clone the current instance with the provided options. If nothing is\r\n     * provided it uses the same initial options as the current instance.\r\n     */\r\n    abstract clone(...parameters: ConstructorParameter<Options, DefaultStaticOptions>): BaseClass<Options, DefaultStaticOptions>;\r\n    /**\r\n     * Get the dynamic keys for this extension.\r\n     */\r\n    private getDynamicKeys;\r\n    /**\r\n     * Throw an error if non dynamic keys are updated.\r\n     */\r\n    private ensureAllKeysAreDynamic;\r\n    /**\r\n     * Update the properties with the provided partial value when changed.\r\n     */\r\n    setOptions(update: GetPartialDynamic<Options>): void;\r\n    /**\r\n     * Reset the extension properties to their default values.\r\n     *\r\n     * @nonVirtual\r\n     */\r\n    resetOptions(): void;\r\n    /**\r\n     * Override this to receive updates whenever the options have been updated on\r\n     * this instance. This method is called after the updates have already been\r\n     * applied to the instance. If you need more control over exactly how the\r\n     * option should be applied you should set the option to be `Custom`.\r\n     *\r\n     * **Please Note**:\r\n     *\r\n     * This must be defined as a instance method and not a property since it is\r\n     * called in the constructor.\r\n     *\r\n     * ```ts\r\n     * class ThisPreset extends Preset {\r\n     *   // GOOD ✅\r\n     *   onSetOptions(parameter: OnSetOptionsParameter<Options>) {}\r\n     *\r\n     *    // BAD ❌\r\n     *   onSetOptions = (parameter: OnSetOptionsParameter<Options>) => {}\r\n     * }\r\n     * ```\r\n     *\r\n     * @abstract\r\n     */\r\n    protected onSetOptions?(parameter: OnSetOptionsParameter<Options>): void;\r\n    /**\r\n     * Update the private options.\r\n     */\r\n    private getDynamicOptions;\r\n    /**\r\n     * Update the dynamic options.\r\n     */\r\n    private updateDynamicOptions;\r\n    /**\r\n     * Set up the mapped handlers object with default values (an empty array);\r\n     */\r\n    private populateMappedHandlers;\r\n    /**\r\n     * This is currently fudged together, I'm not sure it will work.\r\n     */\r\n    private createDefaultHandlerOptions;\r\n    /**\r\n     * Add a handler to the event handlers so that it is called along with all\r\n     * the other handler methods.\r\n     *\r\n     * This is helpful for integrating react hooks which can be used in multiple\r\n     * places. The original problem with fixed properties is that you can only\r\n     * assign to a method once and it overwrites any other methods. This pattern\r\n     * for adding handlers allows for multiple usages of the same handler in the\r\n     * most relevant part of the code.\r\n     *\r\n     * More to come on this pattern.\r\n     *\r\n     * @nonVirtual\r\n     */\r\n    addHandler<Key extends keyof GetHandler<Options>>(key: Key, method: GetHandler<Options>[Key]): Dispose;\r\n    /**\r\n     * A method that can be used to add a custom handler. It is up to the\r\n     * extension creator to manage the handlers and dispose methods.\r\n     */\r\n    addCustomHandler<Key extends keyof GetCustomHandler<Options>>(key: Key, value: Required<GetCustomHandler<Options>>[Key]): Dispose;\r\n    /**\r\n     * Override this method if you want to set custom handlers on your extension.\r\n     *\r\n     * This must return a dispose function.\r\n     */\r\n    protected onAddCustomHandler?: AddCustomHandler<Options>;\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport declare type CustomHandlerMethod<Options extends ValidOptions> = <Key extends keyof GetCustomHandler<Options>>(key: Key, value: Required<GetCustomHandler<Options>>[Key]) => Dispose;\r\nexport declare type AddCustomHandler<Options extends ValidOptions> = (parameter: Partial<GetCustomHandler<Options>>) => Dispose | undefined;\r\nexport declare type AddHandler<Options extends ValidOptions> = <Key extends keyof GetHandler<Options>>(key: Key, method: GetHandler<Options>[Key]) => Dispose;\r\n/**\r\n * TODO see if this is needed or remove.\r\n */\r\nexport declare type AddHandlers<Options extends ValidOptions> = (parameter: Partial<GetHandler<Options>>) => Dispose;\r\nexport interface HandlerKeyOptions {\r\n    /**\r\n     * When this value is encountered the handler will exit early.\r\n     *\r\n     * Set the value to `'__IGNORE__'` to ignore it\r\n     */\r\n    earlyReturnValue?: unknown;\r\n}\r\nexport interface BaseClass<Options extends ValidOptions, DefaultStaticOptions extends Shape = EmptyShape> {\r\n    constructor: BaseClassConstructor<Options, DefaultStaticOptions>;\r\n}\r\nexport interface BaseClassConstructor<Options extends ValidOptions = EmptyShape, DefaultStaticOptions extends Shape = EmptyShape> extends Function {\r\n    new (...parameters: ConstructorParameter<Options, DefaultStaticOptions>): any;\r\n    /**\r\n     * The identifier for the constructor which can determine whether it is a node\r\n     * constructor, mark constructor or plain constructor.\r\n     * @internal\r\n     */\r\n    readonly [__INTERNAL_REMIRROR_IDENTIFIER_KEY__]: RemirrorIdentifier;\r\n    /**\r\n     * Defines the `defaultOptions` for all extension instances.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Once set it can't be updated during run time. Some of the settings are\r\n     * optional and some are not. Any non-required settings must be specified in\r\n     * the `defaultOptions`.\r\n     *\r\n     * **Please note**: There is a slight downside when setting up\r\n     * `defaultOptions`. `undefined` is not supported for partial settings at\r\n     * this point in time. As a workaround use `null` as the type and pass it as\r\n     * the value in the default settings.\r\n     *\r\n     * @defaultValue `{}`\r\n     *\r\n     * @internal\r\n     */\r\n    readonly defaultOptions: DefaultOptions<Options, DefaultStaticOptions>;\r\n    /**\r\n     * An array of the keys that are static for this extension.\r\n     *\r\n     * This is actually currently unused, but might become useful in the future.\r\n     * An auto-fix lint rule will be added should that be the case.\r\n     */\r\n    readonly staticKeys: string[];\r\n    /**\r\n     * An array of all the keys which correspond to the the event handler options.\r\n     *\r\n     * This **MUST** be present if you want to use event handlers in your extension.\r\n     *\r\n     * Every key here is automatically removed from the `setOptions` method and is\r\n     * added to the `addHandler` method for adding new handlers. The\r\n     * `this.options[key]` is automatically replaced with a method that combines\r\n     * all the handlers into one method that can be called effortlessly. All this\r\n     * work is done for you.\r\n     */\r\n    readonly handlerKeys: string[];\r\n    /**\r\n     * Customize the way the handler should behave.\r\n     */\r\n    readonly handlerKeyOptions: Partial<Record<string, HandlerKeyOptions> & {\r\n        __ALL__?: HandlerKeyOptions;\r\n    }>;\r\n    /**\r\n     * A list of the custom keys in the extension or preset options.\r\n     */\r\n    readonly customHandlerKeys: string[];\r\n}\r\nexport declare type AnyBaseClassConstructor = Replace<BaseClassConstructor<any, any>, {\r\n    new (...args: any[]): AnyFunction;\r\n}>;\r\n/**\r\n * Auto infers the parameter for the constructor. If there is a\r\n * required static option then the TypeScript compiler will error if nothing is\r\n * passed in.\r\n */\r\nexport declare type ConstructorParameter<Options extends ValidOptions, DefaultStaticOptions extends Shape> = IfNoRequiredProperties<GetStatic<Options>, [(GetConstructorParameter<Options> & DefaultStaticOptions)?], [GetConstructorParameter<Options> & DefaultStaticOptions]>;\r\n/**\r\n * Get the expected type signature for the `defaultOptions`. Requires that\r\n * every optional setting key (except for keys which are defined on the\r\n * `BaseExtensionOptions`) has a value assigned.\r\n */\r\nexport declare type DefaultOptions<Options extends ValidOptions, DefaultStaticOptions extends Shape> = UndefinedFlipPartialAndRequired<GetStatic<Options>> & Partial<DefaultStaticOptions> & GetFixedDynamic<Options>;\r\n/**\r\n * Checks that the extension has a valid constructor with the `defaultOptions`\r\n * and `defaultProperties` defined as static properties.\r\n */\r\nexport declare function isValidConstructor(Constructor: BaseClassConstructor<any, any>, code: ErrorConstant): asserts Constructor;\r\nexport interface AnyBaseClassOverrides {\r\n    addCustomHandler: AnyFunction;\r\n    addHandler: AnyFunction;\r\n    clone: AnyFunction;\r\n}\r\nexport {};\r\n",
      "extension/extension-base.d.ts": "import { __INTERNAL_REMIRROR_IDENTIFIER_KEY__, ExtensionPriority, RemirrorIdentifier } from '@remirror/core-constants';\r\nimport type { ApplySchemaAttributes, EditorSchema, EditorView, EmptyShape, MarkExtensionSpec, MarkType, NodeExtensionSpec, NodeType, Replace, Shape, ValidOptions } from '@remirror/core-types';\r\nimport type { BaseExtensionOptions, ExtensionCommandReturn, ExtensionHelperReturn, GeneralExtensionTags, GetNameUnion, MarkExtensionTags, NodeExtensionTags, StateUpdateLifecycleParameter } from '../types';\r\nimport { AnyBaseClassOverrides, BaseClass, BaseClassConstructor, ConstructorParameter, DefaultOptions } from './base-class';\r\n/**\r\n * Auto infers the parameter for the constructor. If there is a\r\n * required static option then the TypeScript compiler will error if nothing is\r\n * passed in.\r\n */\r\nexport declare type ExtensionConstructorParameter<Options extends ValidOptions> = ConstructorParameter<Options, BaseExtensionOptions>;\r\n/**\r\n * Extensions are fundamental to the way that Remirror works by grouping\r\n * together the functionality and handling the management of similar concerns.\r\n *\r\n * @remarks\r\n *\r\n *  Extension can adjust editor functionality in any way. Here are some\r\n *  examples.\r\n *\r\n * - How the editor displays certain content, i.e. **bold**, _italic_,\r\n *   **underline**.\r\n * - Which commands should be made available e.g. `commands.toggleBold()` to\r\n *   toggle the weight of the selected text.\r\n * - Check if a command is currently enabled (i.e a successful dry run) e.g.\r\n *   `commands.toggleBold.isEnabled()`.\r\n * - Register Prosemirror `Plugin`s, `keymap`s, `InputRule`s `PasteRule`s,\r\n *   `Suggestions`, and custom `nodeViews` which affect the behavior of the\r\n *   editor.\r\n *\r\n * There are three types of `Extension`.\r\n *\r\n * - `NodeExtension` - For creating Prosemirror nodes in the editor. See\r\n *   {@link NodeExtension}\r\n * - `MarkExtension` - For creating Prosemirror marks in the editor. See\r\n *   {@link MarkExtension}\r\n * - `PlainExtension` - For behavior which doesn't map to a `ProsemirrorNode` or\r\n *   `Mark` and as a result doesn't directly affect the Prosemirror `Schema` or\r\n *   content. See {@link PlainExtension}.\r\n *\r\n * This `Extension` is an abstract class that should not be used directly but\r\n * rather extended to add the intended functionality.\r\n *\r\n * ```ts\r\n * import { PlainExtension, Static } from 'remirror/core';\r\n *\r\n * interface AwesomeExtensionOptions {\r\n *   isAwesome?: Static<boolean>;\r\n *   id?: string;\r\n * }\r\n *\r\n * class AwesomeExtension extends PlainExtension<AwesomeExtensionOptions> {\r\n *   static defaultOptions: DefaultExtensionOptions<AwesomeExtensionOptions> = {\r\n *     isAwesome: true,\r\n *     id: '',\r\n *   }\r\n *\r\n *   get name() {\r\n *     return 'awesome' as const;\r\n *   }\r\n * }\r\n * ```\r\n */\r\ndeclare abstract class Extension<Options extends ValidOptions = EmptyShape> extends BaseClass<Options, BaseExtensionOptions> {\r\n    #private;\r\n    /**\r\n     * The default priority for this family of extensions.\r\n     */\r\n    static readonly defaultPriority: ExtensionPriority;\r\n    /**\r\n     * The priority level for this instance of the extension. A higher value\r\n     * corresponds to a higher priority extension\r\n     */\r\n    get priority(): ExtensionPriority;\r\n    /**\r\n     * The store is a property that's internal to extension. It include important\r\n     * items like the `view` and `schema` that are added by the extension manager\r\n     * and also the lifecycle extension methods.\r\n     *\r\n     * **NOTE** - The store is not available until the manager has been created and\r\n     * received the extension. As a result trying to access the store during\r\n     * `init` and `constructor` will result in a runtime error.\r\n     *\r\n     * Some properties of the store are available at different phases. You should\r\n     * check the inline documentation to know when a certain property is useable\r\n     * in your extension.\r\n     */\r\n    protected get store(): Readonly<Remirror.ExtensionStore>;\r\n    constructor(...parameters: ExtensionConstructorParameter<Options>);\r\n    /**\r\n     * Check if the type of this extension's constructor matches the type of the\r\n     * provided constructor.\r\n     */\r\n    isOfType<Type extends AnyExtensionConstructor>(Constructor: Type): this is InstanceType<Type>;\r\n    /**\r\n     * Pass a reference to the globally shared `ExtensionStore` for this extension.\r\n     *\r\n     * @remarks\r\n     *\r\n     * The extension store allows extensions to access important variables without\r\n     * complicating their creator methods.\r\n     *\r\n     * ```ts\r\n     * import { PlainExtension } from 'remirror/core';\r\n     *\r\n     * class Awesome extends PlainExtension {\r\n     *   customMethod() {\r\n     *     if (this.store.view.hasFocus()) {\r\n     *       log('dance dance dance');\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * This should only be called by the `RemirrorManager`.\r\n     *\r\n     * @internal\r\n     * @nonVirtual\r\n     */\r\n    setStore(store: Remirror.ExtensionStore): void;\r\n    /**\r\n     * Clone an extension.\r\n     */\r\n    clone(...parameters: ExtensionConstructorParameter<Options>): Extension<Options>;\r\n    /**\r\n     * Set the priority override for this extension. This is used in the\r\n     * `RemirrorManager` in order to override the priority of an extension.\r\n     *\r\n     * If you set the first parameter to `undefined` it will remove the priority override.\r\n     */\r\n    setPriority(priority: undefined | ExtensionPriority): void;\r\n}\r\n/**\r\n * Declaration merging since the constructor property can't be defined on the\r\n * actual class.\r\n */\r\ninterface Extension<Options extends ValidOptions = EmptyShape> extends ExtensionLifecycleMethods, Remirror.ExtensionCreatorMethods, Remirror.BaseExtension {\r\n    constructor: ExtensionConstructor<Options>;\r\n    /**\r\n     * An extension can declare the extensions it requires.\r\n     *\r\n     * @remarks\r\n     *\r\n     * When creating the extension manager the extension will be checked for\r\n     * required extension as well as a quick check to see if the required\r\n     * extension is already included. If not present a descriptive error will be\r\n     * thrown.\r\n     */\r\n    requiredExtensions?: object[];\r\n}\r\n/**\r\n * Get the expected type signature for the `defaultOptions`. Requires that\r\n * every optional setting key (except for keys which are defined on the\r\n * `BaseExtensionOptions`) has a value assigned.\r\n */\r\nexport declare type DefaultExtensionOptions<Options extends ValidOptions> = DefaultOptions<Options, BaseExtensionOptions>;\r\n/**\r\n * Here is the extension lifecycle order.\r\n *\r\n * ### Ordering\r\n *\r\n * - `onCreate`\r\n * - `onView`\r\n * - **runtime**\r\n * - `onStateUpdate` (repeats for every update to the prosemirror editor state)\r\n * - `onDestroy` (end of life)\r\n */\r\ninterface ExtensionLifecycleMethods {\r\n    /**\r\n     * This handler is called when the `RemirrorManager` is first created.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Since it is called as soon as the manager is some methods may not be\r\n     * available in the extension store. When accessing methods on `this.store` be\r\n     * shore to check when they become available in the lifecycle. It is\r\n     * recommended that you don't use this method unless absolutely required.\r\n     */\r\n    onCreate?(): void;\r\n    /**\r\n     * This event happens when the view is first received from the view layer\r\n     * (e.g. React).\r\n     */\r\n    onView?(view: EditorView<EditorSchema>): void;\r\n    /**\r\n     * Called when a transaction successfully updates the editor state.\r\n     */\r\n    onStateUpdate?(parameter: StateUpdateLifecycleParameter): void;\r\n    /**\r\n     * Called when the extension is being destroyed.\r\n     */\r\n    onDestroy?(): void;\r\n}\r\n/**\r\n * Create a plain extension which doesn't directly map to Prosemirror nodes or\r\n * marks.\r\n *\r\n * Plain extensions are a great way to add custom behavior to your editor.\r\n */\r\nexport declare abstract class PlainExtension<Options extends ValidOptions = EmptyShape> extends Extension<Options> {\r\n    static get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.PlainExtensionConstructor;\r\n    get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.PlainExtension;\r\n}\r\n/**\r\n * A mark extension is based on the `Mark` concept from from within prosemirror\r\n * {@link https://prosemirror.net/docs/guide/#schema.marks}\r\n *\r\n * @remarks\r\n *\r\n * Marks are used to add extra styling or other information to inline content.\r\n * Mark types are objects much like node types, used to tag mark objects and\r\n * provide additional information about them.\r\n */\r\nexport declare abstract class MarkExtension<Options extends ValidOptions = EmptyShape> extends Extension<Options> {\r\n    static get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.MarkExtensionConstructor;\r\n    /**\r\n     * Whether to disable extra attributes for this extension.\r\n     */\r\n    static readonly disableExtraAttributes: boolean;\r\n    get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.MarkExtension;\r\n    /**\r\n     * Provides access to the mark type from the schema.\r\n     *\r\n     * @remarks\r\n     *\r\n     * The type is available when the manager initializes. So it can be used in\r\n     * the outer scope of `createCommands`, `createHelpers`, `createKeymap` and\r\n     * most of the creator methods.\r\n     */\r\n    get type(): MarkType;\r\n    constructor(...parameters: ExtensionConstructorParameter<Options>);\r\n    /**\r\n     * Provide a method for creating the schema. This is required in order to\r\n     * create a `MarkExtension`.\r\n     *\r\n     * @remarks\r\n     *\r\n     * The main difference between the return value of this method and Prosemirror\r\n     * `MarkSpec` is that that the `toDOM` method doesn't allow dom manipulation.\r\n     * You can only return an array or string.\r\n     *\r\n     * For more advanced requirements, it may be possible to create a `nodeView`\r\n     * to manage the dom interactions.\r\n     */\r\n    abstract createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n}\r\nexport interface MarkExtension<Options extends ValidOptions = EmptyShape> extends Extension<Options>, Remirror.MarkExtension {\r\n}\r\n/**\r\n * Defines the abstract class for extensions which can place nodes into the\r\n * prosemirror state.\r\n *\r\n * @remarks\r\n *\r\n * For more information see {@link https://prosemirror.net/docs/ref/#model.Node}\r\n */\r\nexport declare abstract class NodeExtension<Options extends ValidOptions = EmptyShape> extends Extension<Options> {\r\n    static get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.NodeExtensionConstructor;\r\n    /**\r\n     * Whether to disable extra attributes for this extension.\r\n     */\r\n    static readonly disableExtraAttributes: boolean;\r\n    get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.NodeExtension;\r\n    /**\r\n     * Provides access to the node type from the schema.\r\n     */\r\n    get type(): NodeType;\r\n    constructor(...parameters: ExtensionConstructorParameter<Options>);\r\n    /**\r\n     * Provide a method for creating the schema. This is required in order to\r\n     * create a `NodeExtension`.\r\n     *\r\n     * @remarks\r\n     *\r\n     * A node schema defines the behavior of the content within the editor. This\r\n     * is very tied to the prosemirror implementation and the best place to learn\r\n     * more about it is in the\r\n     * {@link https://prosemirror.net/docs/guide/#schema docs}.\r\n     *\r\n     * @params hole - a method that is meant to indicate where extra attributes\r\n     * should be placed (if they exist).\r\n     *\r\n     * The `hole` is a function that augments the passed object adding a special\r\n     * `secret` key which is used to insert the extra attributes setter.\r\n     *\r\n     * ```ts\r\n     * import { NodeExtension, SpecHole } from 'remirror/core';\r\n     *\r\n     * class AwesomeExtension extends NodeExtension {\r\n     *   get name() { return 'awesome' as const'; }\r\n     *\r\n     *   createNodeSpec() {\r\n     *     return {\r\n     *       toDOM: (node) => {\r\n     *         return ['p', hole(), 0]\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * The above example will have the `hole()` method call replaced with the\r\n     * extra attributes.\r\n     */\r\n    abstract createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n}\r\nexport interface NodeExtension<Options extends ValidOptions = EmptyShape> extends Extension<Options>, Remirror.NodeExtension {\r\n}\r\n/**\r\n * The type which is applicable to any extension instance.\r\n *\r\n * **NOTE** `& object` forces VSCode to use the name `AnyExtension` rather than\r\n * print out `Replace<Extension<Shape>, Remirror.AnyExtensionOverrides>`\r\n */\r\nexport declare type AnyExtension = Replace<Extension<Shape>, Remirror.AnyExtensionOverrides> & object;\r\n/**\r\n * The type which is applicable to any extension instance.\r\n */\r\nexport declare type AnyExtensionConstructor = Replace<ExtensionConstructor<any>, {\r\n    new (...args: any[]): AnyExtension;\r\n}>;\r\n/**\r\n * The type for any potential PlainExtension.\r\n */\r\nexport declare type AnyPlainExtension = Replace<PlainExtension<Shape>, Remirror.AnyExtensionOverrides> & object;\r\n/**\r\n * The type for any potential NodeExtension.\r\n */\r\nexport declare type AnyNodeExtension = Replace<NodeExtension<Shape>, Remirror.AnyExtensionOverrides> & object;\r\n/**\r\n * The type for any potential MarkExtension.\r\n */\r\nexport declare type AnyMarkExtension = Replace<MarkExtension<Shape>, Remirror.AnyExtensionOverrides> & object;\r\n/**\r\n * Mutate the default extension options.\r\n *\r\n * @remarks\r\n *\r\n * This is a dangerous method since it allows you to mutate the received object.\r\n * Don't use it unless you absolutely have to.\r\n *\r\n * A potential use case is for adding a new default option to all extensions. It\r\n * shows an example of how to accomplish this in a typesafe way.\r\n *\r\n * @example\r\n *\r\n * ```ts\r\n * import { mutateDefaultExtensionOptions } from 'remirror/core';\r\n *\r\n * mutateDefaultExtensionOptions((settings) => {\r\n *   // Set the default value of all extensions to have a property `customSetting` with value `false`.\r\n *   settings.customSetting = false;\r\n * })\r\n *\r\n * declare global {\r\n *   namespace Remirror {\r\n *     interface BaseExtensionOptions {\r\n *       customSetting?: boolean;\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The mutation must happen before any extension have been instantiated.\r\n */\r\nexport declare function mutateDefaultExtensionOptions(mutatorMethod: (defaultOptions: BaseExtensionOptions) => void): void;\r\n/**\r\n * Determines if the passed value is an extension.\r\n *\r\n * @param value - the value to test\r\n */\r\nexport declare function isExtension<Type extends AnyExtension = AnyExtension>(value: unknown): value is Type;\r\n/**\r\n * Checks that the extension has a valid constructor with the `defaultOptions`\r\n * and `defaultProperties` defined as static properties.\r\n */\r\nexport declare function isValidExtensionConstructor(Constructor: unknown): asserts Constructor is AnyExtensionConstructor;\r\n/**\r\n * Determines if the passed value is an extension constructor.\r\n *\r\n * @param value - the value to test\r\n */\r\nexport declare function isExtensionConstructor<Type extends AnyExtensionConstructor = AnyExtensionConstructor>(value: unknown): value is Type;\r\n/**\r\n * Checks whether the provided value is a plain extension.\r\n *\r\n * @param value - the extension to check\r\n */\r\nexport declare function isPlainExtension<Type extends AnyPlainExtension = AnyPlainExtension>(value: unknown): value is Type;\r\n/**\r\n * Determines if the passed in extension is a node extension. Useful as a type\r\n * guard where a particular type of extension is needed.\r\n *\r\n * @param value - the extension to check\r\n */\r\nexport declare function isNodeExtension<Type extends AnyNodeExtension = AnyNodeExtension>(value: unknown): value is Type;\r\n/**\r\n * Determines if the passed in extension is a mark extension. Useful as a type\r\n * guard where a particular type of extension is needed.\r\n *\r\n * @param value - the extension to check\r\n */\r\nexport declare function isMarkExtension<Type extends AnyMarkExtension = AnyMarkExtension>(value: unknown): value is Type;\r\nexport interface ExtensionConstructor<Options extends ValidOptions = EmptyShape> extends BaseClassConstructor<Options, BaseExtensionOptions>, Partial<Remirror.StaticExtensionOptions> {\r\n    new (...parameters: ExtensionConstructorParameter<Options>): Extension<Options>;\r\n    /**\r\n     * The default priority level for all instance of this extension.\r\n     *\r\n     * @defaultValue `ExtensionPriority.Default`\r\n     */\r\n    readonly defaultPriority: ExtensionPriority;\r\n}\r\n/**\r\n * The shape of the tag data stored by the extension manager.\r\n *\r\n * This data can be used by other extensions to dynamically determine which\r\n * nodes should affected by commands / plugins / keys etc...\r\n */\r\nexport interface ExtensionTags<ExtensionUnion extends AnyExtension> {\r\n    /**\r\n     * All the node extension tags.\r\n     */\r\n    node: NodeExtensionTags<GetNodeNameUnion<ExtensionUnion>>;\r\n    /**\r\n     * All the mar extension tags.\r\n     */\r\n    mark: MarkExtensionTags<GetMarkNameUnion<ExtensionUnion>>;\r\n    /**\r\n     * All the general extension tags.\r\n     */\r\n    general: GeneralExtensionTags<GetNameUnion<ExtensionUnion>>;\r\n}\r\n/**\r\n * A utility type for retrieving the name of an extension only when it's a plain\r\n * extension.\r\n */\r\nexport declare type GetPlainNames<Type> = Type extends AnyPlainExtension ? GetNameUnion<Type> : never;\r\n/**\r\n * A utility type for retrieving the name of an extension only when it's a mark\r\n * extension.\r\n */\r\nexport declare type GetMarkNameUnion<ExtensionUnion extends AnyExtension> = ExtensionUnion extends AnyMarkExtension ? ExtensionUnion['name'] : never;\r\n/**\r\n * A utility type for retrieving the name of an extension only when it's a node\r\n * extension.\r\n */\r\nexport declare type GetNodeNameUnion<ExtensionUnion extends AnyExtension> = ExtensionUnion extends AnyNodeExtension ? ExtensionUnion['name'] : never;\r\n/**\r\n * Gets the editor schema from an extension union.\r\n */\r\nexport declare type SchemaFromExtensionUnion<ExtensionUnion extends AnyExtension> = EditorSchema<GetNodeNameUnion<ExtensionUnion>, GetMarkNameUnion<ExtensionUnion>>;\r\nexport declare type AnyManagerStore = Remirror.ManagerStore<any>;\r\nexport declare type ManagerStoreKeys = keyof Remirror.ManagerStore<any>;\r\ndeclare global {\r\n    /**\r\n     * This namespace is global and you can use declaration merging to extend and\r\n     * create new types used by the `remirror` project.\r\n     *\r\n     * @remarks\r\n     *\r\n     * The following would add `MyCustomType` to the `Remirror` namespace. Please\r\n     * note that this can only be used for types and interfaces.\r\n     *\r\n     * ```ts\r\n     * declare global {\r\n     *   namespace Remirror {\r\n     *     type MyCustomType = 'look-at-me';\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    namespace Remirror {\r\n        /**\r\n         * This interface is global and can use declaration merging to add extra\r\n         * methods and properties on all `Extension`s.\r\n         *\r\n         * @remarks\r\n         *\r\n         * The following will add `newOption` to the expected options. This is the\r\n         * way that extensions which add new functionality to the editor can request\r\n         * configuration options.\r\n         *\r\n         * ```ts\r\n         * declare global {\r\n         *   namespace Remirror {\r\n         *     interface ExtensionFactoryParameter {\r\n         *       newOption?: string;\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         */\r\n        interface BaseExtension {\r\n        }\r\n        /**\r\n         * This interface is global and uses declaration merging to add new methods\r\n         * to the `Extension` class.\r\n         */\r\n        interface ExtensionCreatorMethods {\r\n        }\r\n        interface NodeExtension {\r\n        }\r\n        interface MarkExtension {\r\n        }\r\n        /**\r\n         * An override to for the `AnyExtension` type. If you're extension adds a\r\n         * new property to the `Extension` that is deeply nested or very complex it\r\n         * can break the `AnyExtension` implementation from being compatible with\r\n         * all valid extensions.\r\n         *\r\n         * The keys you provide on this override replace the default `AnyExtension`\r\n         * types include unsafe properties that need to be simplified.\r\n         *\r\n         * An example is the `constructor` property which makes it impossible to\r\n         * find a common interface between extensions with different settings and\r\n         * properties. By setting the `constructor` to a much simpler override all\r\n         * `Extension`'s are now assignable to the `AnyExtension type again.`\r\n         */\r\n        interface AnyExtensionOverrides extends AnyBaseClassOverrides {\r\n            constructor: AnyExtensionConstructor;\r\n            ['~C']: ExtensionCommandReturn;\r\n            ['~H']: ExtensionHelperReturn;\r\n        }\r\n    }\r\n}\r\nexport type { Extension };\r\n",
      "extension/extension-types.d.ts": "import type { UnionToIntersection } from 'type-fest';\r\nimport type { AnyFunction, StringKey } from '@remirror/core-types';\r\nimport type { NonChainableCommandFunction } from '@remirror/core-utils';\r\nimport type { CommandShape, GetCommands, GetHelpers } from '../types';\r\nimport type { AnyExtension } from './extension-base';\r\nexport interface ExtensionListParameter<ExtensionUnion extends AnyExtension = AnyExtension> {\r\n    /**\r\n     * The extensions property.\r\n     */\r\n    readonly extensions: readonly ExtensionUnion[];\r\n}\r\n/**\r\n * A utility type which maps the passed in extension command in an action that\r\n * is store in the `manager.store.actions.commandName()`.\r\n */\r\ndeclare type MapToUnchainedCommand<RawCommands extends Record<string, AnyFunction>> = {\r\n    [Command in keyof RawCommands]: CommandShape<Parameters<RawCommands[Command]>>;\r\n};\r\n/**\r\n * A utility type which maps the chained commands.\r\n */\r\ndeclare type MapToChainedCommand<RawCommands extends Record<string, AnyFunction>> = {\r\n    [Command in keyof RawCommands]: ReturnType<RawCommands[Command]> extends NonChainableCommandFunction ? void : (...args: Parameters<RawCommands[Command]>) => any;\r\n};\r\n/**\r\n * Utility type which receives an extension and provides the type of actions it\r\n * makes available.\r\n */\r\nexport declare type CommandsFromExtensions<ExtensionUnion extends AnyExtension> = UnionToIntersection<MapToUnchainedCommand<GetCommands<ExtensionUnion>>>;\r\nexport interface ChainedCommandRunParameter {\r\n    /**\r\n     * Dispatches the chained commands.\r\n     *\r\n     * @remarks\r\n     *\r\n     * ```ts\r\n     * commands.chain.insertText('hello').run();\r\n     * ```\r\n     */\r\n    run: () => void;\r\n}\r\nexport declare type ChainedIntersection<ExtensionUnion extends AnyExtension> = UnionToIntersection<MapToChainedCommand<GetCommands<ExtensionUnion>>>;\r\nexport declare type ChainedFromExtensions<ExtensionUnion extends AnyExtension> = ChainedCommandRunParameter & {\r\n    [Command in keyof ChainedIntersection<ExtensionUnion>]: ChainedIntersection<ExtensionUnion>[Command] extends (...args: any[]) => any ? (...args: Parameters<ChainedIntersection<ExtensionUnion>[Command]>) => ChainedFromExtensions<ExtensionUnion> : never;\r\n};\r\n/**\r\n * Utility type for pulling all the command names from a list\r\n */\r\nexport declare type CommandNames<ExtensionUnion extends AnyExtension> = StringKey<CommandsFromExtensions<ExtensionUnion>>;\r\n/**\r\n * A utility type which maps the passed in extension helpers to a method called with\r\n * `manager.data.helpers.helperName()`.\r\n */\r\nexport declare type MapHelpers<RawHelpers extends Record<string, AnyFunction>> = {\r\n    [Helper in keyof RawHelpers]: RawHelpers[Helper];\r\n};\r\n/**\r\n * Utility type which receives an extension and provides the type of helpers it makes available.\r\n */\r\nexport declare type HelpersFromExtensions<ExtensionUnion extends AnyExtension> = UnionToIntersection<MapHelpers<GetHelpers<ExtensionUnion>>>;\r\n/**\r\n * Utility type for pulling all the action names from a list\r\n */\r\nexport declare type HelperNames<ExtensionUnion extends AnyExtension> = StringKey<HelpersFromExtensions<ExtensionUnion>>;\r\n/**\r\n * Get the extensions from any type with an `extensions` property.\r\n */\r\nexport declare type GetExtensionUnion<Type extends ExtensionListParameter> = Type['extensions'][number];\r\nexport {};\r\n",
      "extension/index.d.ts": "export * from './extension-base';\r\nexport * from './extension-types';\r\n",
      "helpers.d.ts": "import { ErrorConstant } from '@remirror/core-constants';\r\nimport type { GetFixedDynamic, GetPartialDynamic, ValidOptions } from '@remirror/core-types';\r\nimport type { GetChangeOptionsReturn } from './types';\r\nexport interface GetChangedOptionsParameter<Options extends ValidOptions> {\r\n    /**\r\n     * The previous readonly properties object.\r\n     */\r\n    previousOptions: GetFixedDynamic<Options>;\r\n    /**\r\n     * The partial update object that was passed through.\r\n     */\r\n    update: GetPartialDynamic<Options>;\r\n    /**\r\n     * A method to check whether two values are equal.\r\n     */\r\n    equals?: (valueA: unknown, valueB: unknown) => boolean;\r\n}\r\n/**\r\n * Get the property changes and the next value from an update.\r\n */\r\nexport declare function getChangedOptions<Options extends ValidOptions>(parameter: GetChangedOptionsParameter<Options>): GetChangeOptionsReturn<Options>;\r\nexport interface IsNameUniqueParameter {\r\n    /**\r\n     * The name to check against\r\n     */\r\n    name: string;\r\n    /**\r\n     * The set to check within\r\n     */\r\n    set: Set<string>;\r\n    /**\r\n     * The error code to use\r\n     *\r\n     * @defaultValue 'extension'\r\n     */\r\n    code: ErrorConstant.DUPLICATE_HELPER_NAMES | ErrorConstant.DUPLICATE_COMMAND_NAMES;\r\n}\r\n/**\r\n * Checks whether a given string is unique to the set. Add the name if it\r\n * doesn't already exist, or throw an error when `shouldThrow` is true.\r\n *\r\n * @param parameter - destructured params\r\n */\r\nexport declare function throwIfNameNotUnique(parameter: IsNameUniqueParameter): void;\r\n",
      "index.d.ts": "export * from '@remirror/core-constants';\r\nexport * from '@remirror/core-helpers';\r\nexport * from '@remirror/core-types';\r\nexport * from '@remirror/core-utils';\r\nexport type { BuiltinOptions, IdentifierSchemaAttributes, Identifiers, KeymapOptions, SuggestOptions, UpdatableViewProps, } from './builtins';\r\nexport { AttributesExtension, BuiltinPreset, CommandsExtension, HelpersExtension, InputRulesExtension, KeymapExtension, NodeViewsExtension, PasteRulesExtension, PluginsExtension, SchemaExtension, SuggestExtension, TagsExtension, } from './builtins';\r\nexport { toggleMark } from './commands';\r\nexport type { ExtensionDecoratorOptions, PresetDecoratorOptions } from './decorators';\r\nexport { extensionDecorator, presetDecorator } from './decorators';\r\nexport type { AttributePropFunction, BaseListenerParameter, CreateStateFromContent, EditorWrapperOutput, EditorWrapperParameter, EditorWrapperProps, FocusType, ListenerParameter, PlaceholderConfig, RemirrorEventListener, RemirrorEventListenerParameter, RemirrorGetterParameter, TriggerChangeParameter, UpdateStateParameter, } from './editor-wrapper';\r\nexport { EditorWrapper } from './editor-wrapper';\r\nexport type { AnyExtension, AnyExtensionConstructor, AnyManagerStore, AnyMarkExtension, AnyNodeExtension, AnyPlainExtension, ChainedCommandRunParameter, ChainedFromExtensions, ChainedIntersection, CommandNames, CommandsFromExtensions, DefaultExtensionOptions, Extension, ExtensionConstructor, ExtensionConstructorParameter, ExtensionListParameter, ExtensionTags, GetExtensionUnion, GetMarkNameUnion, GetNodeNameUnion, GetPlainNames, HelperNames, HelpersFromExtensions, ManagerStoreKeys, MapHelpers, SchemaFromExtensionUnion, } from './extension';\r\nexport { isExtension, isExtensionConstructor, isMarkExtension, isNodeExtension, isPlainExtension, isValidExtensionConstructor, MarkExtension, mutateDefaultExtensionOptions, NodeExtension, PlainExtension, } from './extension';\r\nexport type { AddCustomHandler, AddHandler, BaseClass, BaseClassConstructor, CustomHandlerMethod, HandlerKeyOptions, } from './extension/base-class';\r\nexport type { AnyRemirrorManager, GetCombined, ManagerEvents, RemirrorManagerParameter, } from './manager';\r\nexport { isRemirrorManager, RemirrorManager } from './manager';\r\nexport type { ActiveFromCombined, AnyCombinedUnion, AnyPreset, AnyPresetConstructor, ChainedFromCombined, CombinedUnion, CommandsFromCombined, DefaultPresetOptions, GetPresetUnion, HelpersFromCombined, InferCombinedExtensions, InferCombinedPresets, PresetConstructor, PresetConstructorParameter, PresetListParameter, PresetParameter, SchemaFromCombined, } from './preset';\r\nexport { isPreset, isPresetConstructor, Preset } from './preset';\r\nexport { editorStyles } from './styles';\r\nexport type { BaseExtensionOptions, ChangedOptions, CommandShape, CreatePluginReturn, DynamicOptionsOfConstructor, ExcludeOptions, ExtensionCommandFunction, ExtensionCommandReturn, ExtensionHelperReturn, ExtensionStore, GeneralExtensionTags, GetChangeOptionsReturn, GetCommands, GetConstructor, GetExtensions, GetHelpers, GetNameUnion, GetOptions, GetSchema, MarkExtensionTags, NodeExtensionTags, OnSetOptionsParameter, OptionsOfConstructor, PickChanged, StateUpdateLifecycleParameter, UpdateReason, UpdateReasonParameter, } from './types';\r\n",
      "manager/index.d.ts": "export * from './remirror-manager';\r\n",
      "manager/remirror-manager-helpers.d.ts": "import { AnyCombinedUnion, InferCombinedExtensions, InferCombinedPresets } from '../preset';\r\nimport type { GetConstructor } from '../types';\r\nexport interface TransformExtensionOrPreset<Combined extends AnyCombinedUnion> {\r\n    extensions: Array<InferCombinedExtensions<Combined>>;\r\n    extensionMap: WeakMap<GetConstructor<InferCombinedExtensions<Combined>>, InferCombinedExtensions<Combined>>;\r\n    presets: Array<InferCombinedPresets<Combined>>;\r\n    presetMap: WeakMap<GetConstructor<InferCombinedPresets<Combined>>, InferCombinedPresets<Combined>>;\r\n}\r\n/**\r\n * Transforms the unsorted array of presets and extension into presets and\r\n * sorted extensions. Handles uniqueness of extensions and automatically pulling\r\n * throwing an error when required extensions are missing.\r\n *\r\n * TODO Add a check for requiredExtensions and inject them automatically TODO\r\n * Currently matching by constructor - what if different versions exist in the\r\n * same app...\r\n *\r\n * @param unionValues - the extensions to transform as well as their priorities\r\n *\r\n * @returns the list of extension instances sorted by priority\r\n */\r\nexport declare function transformCombinedUnion<Combined extends AnyCombinedUnion>(unionValues: readonly Combined[], settings: Remirror.ManagerSettings): TransformExtensionOrPreset<Combined>;\r\n",
      "manager/remirror-manager.d.ts": "import { Unsubscribe } from 'nanoevents';\r\nimport { __INTERNAL_REMIRROR_IDENTIFIER_KEY__, ExtensionPriority, ManagerPhase, RemirrorIdentifier } from '@remirror/core-constants';\r\nimport type { EditorSchema, EditorView, Replace } from '@remirror/core-types';\r\nimport { CreateDocumentNodeParameter } from '@remirror/core-utils';\r\nimport { EditorState } from '@remirror/pm/state';\r\nimport { BuiltinPreset } from '../builtins';\r\nimport { AnyExtension, AnyExtensionConstructor, AnyManagerStore, GetMarkNameUnion, GetNodeNameUnion, ManagerStoreKeys } from '../extension';\r\nimport type { AnyCombinedUnion, AnyPreset, AnyPresetConstructor, InferCombinedExtensions, InferCombinedPresets, SchemaFromCombined } from '../preset';\r\nimport type { GetExtensions, StateUpdateLifecycleParameter } from '../types';\r\n/**\r\n * The `Manager` has multiple hook phases which are able to hook into the\r\n * extension manager flow and add new functionality to the editor.\r\n *\r\n * The `ExtensionEventMethod`s\r\n *\r\n * - onCreate - when the extension manager is created and after the schema is\r\n *   made available.\r\n * - onView - when the view has been received from the dom ref.\r\n */\r\n/**\r\n * A class to manage the extensions and prosemirror interactions of our editor.\r\n *\r\n * @remarks\r\n *\r\n * The extension manager has three phases of Initialization:\r\n *\r\n * - Construction - This takes in all the extensions and creates the schema.\r\n *\r\n * ```ts\r\n * const manager = Manager.create([ new DocExtension(), new TextExtension(), new ParagraphExtension()])\r\n * ```\r\n *\r\n * - Initialize Getters - This connects the extension manager to the lazily\r\n *   evaluated `getState` method and the `portalContainer`. Once these are\r\n *   created and allows access to its data.\r\n *\r\n * ```ts\r\n * manager.init({ getState: () => state, portalContainer: new PortalContainer })\r\n *\r\n * manager.data.\r\n * ```\r\n *\r\n * - Initialize View - This connects the extension manager to the EditorView and\r\n *   creates the actions (which need access to the view).\r\n *\r\n * ```ts\r\n * manager.initView(new EditorView(...))\r\n * manager.data.actions\r\n * ```\r\n */\r\nexport declare class RemirrorManager<Combined extends AnyCombinedUnion> {\r\n    #private;\r\n    /**\r\n     * The main static method for creating a manager.\r\n     */\r\n    static create<Combined extends AnyCombinedUnion>(combined: Combined[] | (() => Combined[]), settings?: Remirror.ManagerSettings): RemirrorManager<BuiltinPreset | Combined>;\r\n    /**\r\n     * A static method to create the editor manager from an object.\r\n     */\r\n    static fromObject<ExtensionUnion extends AnyExtension, PresetUnion extends AnyPreset>({ extensions, presets, settings, }: RemirrorManagerParameter<ExtensionUnion, PresetUnion>): RemirrorManager<BuiltinPreset | ExtensionUnion | PresetUnion>;\r\n    /**\r\n     * Returns true if the manager has been destroyed.\r\n     */\r\n    get destroyed(): boolean;\r\n    /**\r\n     * True when the view has been added to the UI layer and the editor is running.\r\n     */\r\n    get mounted(): boolean;\r\n    /**\r\n     * Identifies this as a `Manager`.\r\n     *\r\n     * @internal\r\n     */\r\n    get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.Manager;\r\n    /**\r\n     * The extensions stored by this manager\r\n     */\r\n    get extensions(): ReadonlyArray<GetExtensions<this>>;\r\n    /**\r\n     * The preset stored by this manager\r\n     */\r\n    get presets(): readonly this[\"~P\"][];\r\n    /**\r\n     * Get the original combined presets used to create this manager.\r\n     */\r\n    get combined(): readonly Combined[];\r\n    /**\r\n     * Get the extension manager store which is accessible at initialization.\r\n     */\r\n    get store(): Readonly<Remirror.ManagerStore<Combined>>;\r\n    /**\r\n     * Returns the stored nodes\r\n     */\r\n    get nodes(): Record<GetNodeNameUnion<InferCombinedExtensions<Combined>>, import(\"@remirror/core-types\").NodeExtensionSpec>;\r\n    /**\r\n     * Returns the store marks.\r\n     */\r\n    get marks(): Record<GetMarkNameUnion<InferCombinedExtensions<Combined>>, import(\"@remirror/core-types\").MarkExtensionSpec>;\r\n    /**\r\n     * A shorthand method for retrieving the schema for this extension manager\r\n     * from the data.\r\n     */\r\n    get schema(): EditorSchema<GetNodeNameUnion<InferCombinedExtensions<Combined>>, GetMarkNameUnion<InferCombinedExtensions<Combined>>>;\r\n    /**\r\n     * A shorthand getter for retrieving the tags from the extension manager.\r\n     */\r\n    get extensionTags(): Readonly<import(\"../extension\").ExtensionTags<InferCombinedExtensions<Combined>>>;\r\n    /**\r\n     * A shorthand way of retrieving the editor view.\r\n     */\r\n    get view(): EditorView<EditorSchema<GetNodeNameUnion<InferCombinedExtensions<Combined>>, GetMarkNameUnion<InferCombinedExtensions<Combined>>>>;\r\n    /**\r\n     * Retrieve the settings used when creating the manager.\r\n     */\r\n    get settings(): Remirror.ManagerSettings;\r\n    /**\r\n     * Creates the extension manager which is used to simplify the management of\r\n     * the prosemirror editor.\r\n     *\r\n     * This should not be called directly if you want to use prioritized\r\n     * extensions. Instead use `RemirrorManager.create([])`.\r\n     */\r\n    private constructor();\r\n    /**\r\n     * Loops through all extensions to set up the lifecycle handlers.\r\n     */\r\n    private setupLifecycleHandlers;\r\n    /**\r\n     * Set the store key.\r\n     */\r\n    private readonly setStoreKey;\r\n    private readonly getStoreKey;\r\n    /**\r\n     * A method to set values in the extension store which is made available to\r\n     * extension.\r\n     *\r\n     * **NOTE** This method should only be used in the `onCreate` extension method\r\n     * or it will throw an error.\r\n     */\r\n    private readonly setExtensionStore;\r\n    /**\r\n     * Create the initial store.\r\n     */\r\n    private createInitialStore;\r\n    /**\r\n     * Create the initial store.\r\n     */\r\n    private createExtensionStore;\r\n    /**\r\n     * A state getter method which is passed into the params.\r\n     */\r\n    private readonly getState;\r\n    /**\r\n     * Stores the editor view on the manager\r\n     *\r\n     * @param view - the editor view\r\n     */\r\n    addView(view: EditorView<this['~Sch']>): this;\r\n    /**\r\n     * Create the editor state from content passed to this extension manager.\r\n     */\r\n    createState(parameter: Omit<CreateDocumentNodeParameter, 'schema'>): EditorState<any>;\r\n    /**\r\n     * Add a handler to the manager.\r\n     *\r\n     * Currently the only event that can be listend to is the `destroy` event.\r\n     */\r\n    addHandler<Key extends keyof ManagerEvents>(event: Key, cb: ManagerEvents[Key]): Unsubscribe;\r\n    /**\r\n     * Update the state of the view and trigger the `onStateUpdate` lifecyle\r\n     * method as well.\r\n     */\r\n    private readonly updateState;\r\n    /**\r\n     * This method should be called by the view layer every time the state is\r\n     * updated.\r\n     *\r\n     * An example usage of this is within the collaboration extension.\r\n     */\r\n    onStateUpdate(parameter: Omit<StateUpdateLifecycleParameter, 'firstUpdate'>): void;\r\n    /**\r\n     * Get the extension instance matching the provided constructor from the\r\n     * manager.\r\n     *\r\n     * This will throw an error if non existent.\r\n     */\r\n    getExtension<ExtensionConstructor extends AnyExtensionConstructor>(Constructor: ExtensionConstructor): InstanceType<ExtensionConstructor>;\r\n    /**\r\n     * Get the requested preset from the manager. This will throw if the preset doesn't\r\n     * exist within this manager.\r\n     */\r\n    getPreset<PresetConstructor extends AnyPresetConstructor>(Constructor: PresetConstructor): InstanceType<PresetConstructor>;\r\n    /**\r\n     * Make a clone .\r\n     *\r\n     * TODO: Think about the following.\r\n     * - What about the state stored in the extensions and presets, does this need to be\r\n     * recreated as well?\r\n     */\r\n    clone(): RemirrorManager<Combined>;\r\n    /**\r\n     * Recreate the manager.\r\n     *\r\n     * TODO: Think about the following.\r\n     * - What about the state stored in the extensions and presets, does this need to be\r\n     * recreated as well?\r\n     */\r\n    recreate<ExtraCombined extends AnyCombinedUnion>(combined?: ExtraCombined[], settings?: Remirror.ManagerSettings): RemirrorManager<Combined | ExtraCombined>;\r\n    /**\r\n     * This method should be called to destroy the manager and remove the view. You have full control over this.\r\n     */\r\n    destroy(): void;\r\n}\r\nexport interface ManagerEvents {\r\n    /**\r\n     * Called when the state is updated.\r\n     */\r\n    stateUpdate: (parameter: StateUpdateLifecycleParameter) => void;\r\n    /**\r\n     * An event listener which is called whenever the manager is destroyed.\r\n     */\r\n    destroy: () => void;\r\n}\r\nexport declare type AnyRemirrorManager = Replace<RemirrorManager<AnyCombinedUnion>, {\r\n    clone: () => AnyRemirrorManager;\r\n    store: Replace<Remirror.ManagerStore<any>, {\r\n        chain: any;\r\n    }>;\r\n    ['~E']: AnyExtension;\r\n    ['~P']: AnyPreset;\r\n    ['~Sch']: EditorSchema;\r\n    ['~N']: string;\r\n    ['~M']: string;\r\n    ['~EP']: AnyCombinedUnion;\r\n    view: EditorView;\r\n    addView: (view: EditorView) => void;\r\n}>;\r\n/**\r\n * Checks to see whether the provided value is an `Manager`.\r\n *\r\n * @param value - the value to check\r\n */\r\nexport declare function isRemirrorManager<Combined extends AnyCombinedUnion = AnyCombinedUnion>(value: unknown): value is RemirrorManager<Combined>;\r\nexport interface RemirrorManagerParameter<ExtensionUnion extends AnyExtension, PresetUnion extends AnyPreset> {\r\n    /**\r\n     * The extensions so use when creating the editor.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is a required even when just an empty array to improve type inference.\r\n     */\r\n    extensions: ExtensionUnion[];\r\n    /**\r\n     * The presets to include with the editor.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is required even when just an empty array to improve type inference.\r\n     */\r\n    presets: PresetUnion[];\r\n    /**\r\n     * Settings to customise the behaviour of the editor.\r\n     */\r\n    settings?: Remirror.ManagerSettings;\r\n}\r\nexport declare type GetCombined<Manager extends AnyRemirrorManager> = Manager['~EP'];\r\ninterface RemirrorManagerConstructor extends Function, Remirror.RemirrorManagerConstructor {\r\n    fromObject<Combined extends AnyCombinedUnion>(parameter: RemirrorManagerParameter<InferCombinedExtensions<Combined>, InferCombinedPresets<Combined>>): RemirrorManager<InferCombinedExtensions<Combined> | InferCombinedPresets<Combined> | BuiltinPreset>;\r\n    create<Combined extends AnyCombinedUnion>(combined: Combined[], settings?: Remirror.ManagerSettings): RemirrorManager<Combined | BuiltinPreset>;\r\n}\r\nexport interface RemirrorManager<Combined extends AnyCombinedUnion> {\r\n    /**\r\n     * The constructor for the editor manager.\r\n     */\r\n    constructor: RemirrorManagerConstructor;\r\n    /**\r\n     * Pseudo property which is a small hack to store the type of the extension\r\n     * union.\r\n     */\r\n    ['~E']: InferCombinedExtensions<Combined>;\r\n    /**\r\n     * Pseudo property which is a small hack to store the type of the presets\r\n     * available from this manager..\r\n     */\r\n    ['~P']: InferCombinedPresets<Combined>;\r\n    /**\r\n     * Pseudo property which is a small hack to store the type of the schema\r\n     * available from this manager..\r\n     */\r\n    ['~Sch']: SchemaFromCombined<Combined>;\r\n    /**\r\n     * `NodeNames`\r\n     *\r\n     * Type inference hack for node extension names. This is the only way I know\r\n     * to store types on a class.\r\n     *\r\n     * @internal\r\n     */\r\n    ['~N']: GetNodeNameUnion<this['~E']>;\r\n    /**\r\n     * `MarkNames`\r\n     *\r\n     * Type inference hack for mark extension names. This is the only way I know\r\n     * to store types on a class.\r\n     *\r\n     * @internal\r\n     */\r\n    ['~M']: GetMarkNameUnion<this['~E']>;\r\n    ['~EP']: Combined;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        /**\r\n         * Extend this to add extra static methods to the\r\n         * `RemirrorManagerConstructor`.\r\n         */\r\n        interface RemirrorManagerConstructor {\r\n        }\r\n        /**\r\n         * Settings which can be passed into the manager.\r\n         */\r\n        interface ManagerSettings {\r\n            /**\r\n             * Set the extension priority for extension's by their name.\r\n             */\r\n            priority?: Record<string, ExtensionPriority>;\r\n            /**\r\n             * An object which excludes certain functionality from all extensions\r\n             * within the manager.\r\n             */\r\n            exclude?: ExcludeOptions;\r\n        }\r\n        /**\r\n         * Describes the object where the extension manager stores it's data.\r\n         *\r\n         * @remarks\r\n         *\r\n         * Since this is a global namespace, you can extend the store if your\r\n         * extension is modifying the shape of the `Manager.store` property.\r\n         */\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * The editor view stored by this instance.\r\n             */\r\n            view: EditorView<SchemaFromCombined<Combined>>;\r\n        }\r\n        /**\r\n         * The initialization params which are passed by the view layer into the\r\n         * extension manager. This can be added to by the requesting framework\r\n         * layer.\r\n         */\r\n        interface ManagerInitializationParameter<ExtensionUnion extends AnyExtension, PresetUnion extends AnyPreset> {\r\n        }\r\n        interface ExtensionStore {\r\n            /**\r\n             * The list of all extensions included in the editor.\r\n             */\r\n            readonly extensions: AnyExtension[];\r\n            /**\r\n             * The stage the manager is currently at.\r\n             */\r\n            readonly phase: ManagerPhase;\r\n            /**\r\n             * The view available to extensions once `addView` has been called on the\r\n             * `RemirrorManager` instance.\r\n             */\r\n            readonly view: EditorView<EditorSchema>;\r\n            /**\r\n             * The latest state.\r\n             */\r\n            currentState: EditorState<EditorSchema>;\r\n            /**\r\n             * The previous state. Will be undefined when the view is first created.\r\n             */\r\n            previousState?: EditorState<EditorSchema>;\r\n            /**\r\n             * The settings passed to the manager.\r\n             */\r\n            readonly managerSettings: ManagerSettings;\r\n            /**\r\n             * The names of every node extension.\r\n             */\r\n            nodeNames: readonly string[];\r\n            /**\r\n             * The names of every mark extension.\r\n             */\r\n            markNames: readonly string[];\r\n            /**\r\n             * The names of every plain extension.\r\n             */\r\n            plainNames: readonly string[];\r\n            /**\r\n             * Return true when the editor view has been created.\r\n             */\r\n            readonly isMounted: () => boolean;\r\n            /**\r\n             * A helper method for retrieving the state of the editor\r\n             */\r\n            readonly getState: () => EditorState<EditorSchema>;\r\n            /**\r\n             * Allow extensions to trigger an update in the prosemirror state. This\r\n             * should only be used in rarely as it is easy to get\r\n             * in trouble without the necessary thought.\r\n             */\r\n            readonly updateState: (state: EditorState<EditorSchema>) => void;\r\n            /**\r\n             * Get the value of a key from the manager store.\r\n             */\r\n            getStoreKey: <Key extends ManagerStoreKeys>(key: Key) => AnyManagerStore[Key];\r\n            /**\r\n             * Update the store with a specific key.\r\n             */\r\n            setStoreKey: <Key extends ManagerStoreKeys>(key: Key, value: AnyManagerStore[Key]) => void;\r\n            /**\r\n             * Set a custom manager method parameter.\r\n             */\r\n            setExtensionStore: <Key extends keyof Remirror.ExtensionStore>(key: Key, value: Remirror.ExtensionStore[Key]) => void;\r\n        }\r\n    }\r\n}\r\nexport {};\r\n",
      "preset/index.d.ts": "export * from './preset-base';\r\nexport * from './preset-types';\r\n",
      "preset/preset-base.d.ts": "import { __INTERNAL_REMIRROR_IDENTIFIER_KEY__, RemirrorIdentifier } from '@remirror/core-constants';\r\nimport type { EmptyShape, Replace, Shape, ValidOptions } from '@remirror/core-types';\r\nimport type { AnyExtension, AnyExtensionConstructor } from '../extension';\r\nimport { AnyBaseClassOverrides, BaseClass, BaseClassConstructor, ConstructorParameter, DefaultOptions } from '../extension/base-class';\r\nimport type { OnSetOptionsParameter } from '../types';\r\n/**\r\n * A preset is our way of bundling similar extensions with unified options and\r\n * dynamic properties.\r\n */\r\nexport declare abstract class Preset<Options extends ValidOptions = EmptyShape> extends BaseClass<Options, object> {\r\n    #private;\r\n    /**\r\n     * The default options for this preset.\r\n     */\r\n    static readonly defaultOptions: {};\r\n    /**\r\n     * The preset constructor identifier key.\r\n     *\r\n     * @internal\r\n     */\r\n    static get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.PresetConstructor;\r\n    /**\r\n     * The remirror identifier key.\r\n     *\r\n     * @internal\r\n     */\r\n    get [__INTERNAL_REMIRROR_IDENTIFIER_KEY__](): RemirrorIdentifier.Preset;\r\n    /**\r\n     * The `camelCased` name of the preset.\r\n     */\r\n    abstract readonly name: string;\r\n    get extensions(): this[\"~E\"][];\r\n    /**\r\n     * The store is a property that's internal to the preset. It include important\r\n     * items like the `view` and `schema` that are added by the editor manager.\r\n     *\r\n     * **NOTE** - The store is not available until the manager has been created and\r\n     * received the extension. As a result trying to access the store during\r\n     * `init` and `constructor` will result in a runtime error.\r\n     */\r\n    protected get extensionStore(): Readonly<Remirror.ExtensionStore>;\r\n    constructor(...parameters: PresetConstructorParameter<Options>);\r\n    /**\r\n     * Check if the type of this extension's constructor matches the type of the\r\n     * provided constructor.\r\n     */\r\n    isOfType<Type extends AnyPresetConstructor>(Constructor: Type): this is InstanceType<Type>;\r\n    /**\r\n     * Create the extensions which will be consumed by the preset.\r\n     *\r\n     * Since this method is called in the constructor it should always be created\r\n     * as an instance method and not a property. Properties aren't available for\r\n     * the call to the parent class.\r\n     *\r\n     * ```ts\r\n     * class MyPreset extends Preset {\r\n     *   // GOOD ✅\r\n     *   createExtensions() {\r\n     *     return [];\r\n     *   }\r\n     *\r\n     *   // BAD ❌\r\n     *   createExtensions = () => {\r\n     *     return [];\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    abstract createExtensions(): AnyExtension[];\r\n    /**\r\n     * Called every time the options for this extension are set or reset. This is\r\n     * also called when the extension is first created with the default\r\n     * options.\r\n     *\r\n     * @remarks\r\n     *\r\n     * **Please Note**:\r\n     *\r\n     * This must be defined as a instance method and not a property since it is\r\n     * called in the constructor.\r\n     *\r\n     * ```ts\r\n     * class ThisPreset extends Preset {\r\n     *   // GOOD ✅\r\n     *   onSetOptions(parameter: OnSetOptionsParameter<{}>) {}\r\n     *\r\n     *    // BAD ❌\r\n     *   onSetOptions = (parameter: OnSetOptionsParameter<{}>) => {}\r\n     * }\r\n     * ```\r\n     */\r\n    protected abstract onSetOptions(parameter: OnSetOptionsParameter<Options>): void;\r\n    /**\r\n     * When there are duplicate extensions used within the editor the extension\r\n     * manager will call this method and make sure all presets are using the same\r\n     * instance of the `ExtensionConstructor`.\r\n     */\r\n    replaceExtension(constructor: AnyExtensionConstructor, extension: this['~E']): void;\r\n    /**\r\n     * Get an extension from the extension holder (either a preset or a manager)\r\n     * that corresponds to the provided `Constructor`.\r\n     *\r\n     * @param Constructor - the extension constructor to find in the editor.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This method will throw an error if the constructor doesn't exist.\r\n     */\r\n    getExtension<Type extends this['~E']['constructor']>(Constructor: Type): InstanceType<Type>;\r\n    /**\r\n     * Pass a reference to the globally shared `ExtensionStore` for this extension.\r\n     *\r\n     * @remarks\r\n     *\r\n     * The extension store allows extensions to access important variables without\r\n     * complicating their creator methods.\r\n     *\r\n     * ```ts\r\n     * import { PlainExtension } from 'remirror/core';\r\n     *\r\n     * class Awesome extends PlainExtension {\r\n     *   customMethod() {\r\n     *     if (this.store.view.hasFocus()) {\r\n     *       log('dance dance dance');\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * This should only be called by the `RemirrorManager`.\r\n     *\r\n     * @internal\r\n     * @nonVirtual\r\n     */\r\n    setExtensionStore(store: Remirror.ExtensionStore): void;\r\n    /**\r\n     * Clone a preset.\r\n     */\r\n    clone(...parameters: PresetConstructorParameter<Options>): Preset<Options>;\r\n}\r\nexport interface Preset<Options extends ValidOptions = EmptyShape> {\r\n    /**\r\n     * The typed constructor for the `Preset` instance.\r\n     */\r\n    constructor: PresetConstructor<Options>;\r\n    /**\r\n     * Not for usage. This is purely for types to make it easier to infer\r\n     * the type of `Options` on an extension instance.\r\n     */\r\n    ['~S']: Options;\r\n    /**\r\n     * Not for usage. This is purely for types to make it easier to infer\r\n     * the type of `Options` on an extension instance.\r\n     */\r\n    ['~P']: Options;\r\n    /**\r\n     * Not for usage. This is purely for types to make it easier to infer\r\n     * available extension types.\r\n     */\r\n    ['~E']: ReturnType<this['createExtensions']>[number];\r\n}\r\n/**\r\n * The type which is applicable to any `Preset` instances.\r\n *\r\n * **NOTE** `& object` forces VSCode to use the name `AnyPreset` rather than\r\n * print out `Replace<Preset<Shape>, Remirror.AnyPresetOverrides>`\r\n */\r\nexport declare type AnyPreset = Replace<Preset<Shape>, Remirror.AnyPresetOverrides> & object;\r\n/**\r\n * The type which is applicable to any `Preset` constructor.\r\n */\r\nexport declare type AnyPresetConstructor = Replace<PresetConstructor<any>, {\r\n    new (...args: any[]): AnyPreset;\r\n}>;\r\n/**\r\n * The default preset options.\r\n *\r\n * - `StaticOptions` - It works by making all partial properties required and all required\r\n * properties partial.\r\n * - `DynamicOptions` - All properties must have a default value whether default\r\n *   or required\r\n * -  1\r\n */\r\nexport declare type DefaultPresetOptions<Options extends ValidOptions> = DefaultOptions<Options, EmptyShape>;\r\n/**\r\n * The preset constructor. This is used to annotate the Preset class since\r\n * TypeScript doesn't automatically provide a meaningful type for the\r\n * `constructor` property.\r\n */\r\nexport interface PresetConstructor<Options extends ValidOptions = EmptyShape> extends BaseClassConstructor {\r\n    /**\r\n     * The identifier for the constructor which identifies it as a preset\r\n     * constructor.\r\n     * @internal\r\n     */\r\n    readonly [__INTERNAL_REMIRROR_IDENTIFIER_KEY__]: RemirrorIdentifier;\r\n    /**\r\n     * Default options.\r\n     */\r\n    readonly defaultOptions: DefaultPresetOptions<Options>;\r\n    new (...args: PresetConstructorParameter<Options>): Preset<Options>;\r\n}\r\n/**\r\n * Determines if the passed in value is a preset.\r\n *\r\n * @param value - the preset to check\r\n */\r\nexport declare function isPreset<Type extends AnyPreset = AnyPreset>(value: unknown): value is Type;\r\n/**\r\n * Determines if the passed in value is a preset constructor.\r\n *\r\n * @param value - the value to test\r\n */\r\nexport declare function isPresetConstructor<Type extends AnyPresetConstructor = AnyPresetConstructor>(value: unknown): value is Type;\r\n/**\r\n * Automatically infers whether the constructor parameter is required for the\r\n * Preset.\r\n *\r\n * - Required when any of the options are not optional.\r\n */\r\nexport declare type PresetConstructorParameter<Options extends ValidOptions> = ConstructorParameter<Options, EmptyShape>;\r\ndeclare global {\r\n    namespace Remirror {\r\n        /**\r\n         * An override to for the `AnyPreset` type. If you're Preset adds a new\r\n         * property to the `Preset` that is deeply nested or very complex it can\r\n         * break the `AnyPreset` implementation from being compatible with all valid\r\n         * Presets.\r\n         *\r\n         * The keys you provide on this override replace the default `AnyPreset`\r\n         * types include unsafe properties that need to be simplified.\r\n         *\r\n         * An example is the `constructor` property which makes it impossible to\r\n         * find a common interface between presets with different options and\r\n         * properties. By setting the `constructor` to a much simpler override all\r\n         * `Preset`'s are now assignable to the `AnyPreset type again.`\r\n         */\r\n        interface AnyPresetOverrides extends AnyBaseClassOverrides {\r\n            constructor: AnyPresetConstructor;\r\n        }\r\n    }\r\n}\r\n",
      "preset/preset-types.d.ts": "import type { ProsemirrorAttributes } from '@remirror/core-types';\r\nimport type { AnyExtension, ChainedFromExtensions, CommandsFromExtensions, GetMarkNameUnion, GetNodeNameUnion, HelpersFromExtensions, SchemaFromExtensionUnion } from '../extension';\r\nimport type { GetExtensions } from '../types';\r\nimport type { AnyPreset } from './preset-base';\r\nexport interface PresetParameter<PresetUnion extends AnyPreset> {\r\n    preset: PresetUnion;\r\n}\r\nexport interface PresetListParameter<PresetUnion extends AnyPreset> {\r\n    presets: PresetUnion[];\r\n}\r\n/**\r\n * Get the extensions from any type with a `presets` property.\r\n */\r\nexport declare type GetPresetUnion<Type extends {\r\n    presets: any[];\r\n}> = Type['presets'][number];\r\nexport declare type CombinedUnion<ExtensionUnion extends AnyExtension, PresetUnion extends AnyPreset> = ExtensionUnion | PresetUnion;\r\nexport declare type AnyCombinedUnion = CombinedUnion<AnyExtension, AnyPreset>;\r\nexport declare type InferCombinedExtensions<Combined extends AnyCombinedUnion> = Combined extends AnyExtension ? Combined : Combined extends AnyPreset ? GetExtensions<Combined> : never;\r\nexport declare type InferCombinedPresets<Combined extends AnyCombinedUnion> = Combined extends AnyPreset ? Combined : never;\r\nexport declare type SchemaFromCombined<Combined extends AnyCombinedUnion> = SchemaFromExtensionUnion<InferCombinedExtensions<Combined>>;\r\nexport declare type CommandsFromCombined<Combined extends AnyCombinedUnion> = CommandsFromExtensions<InferCombinedExtensions<Combined>>;\r\nexport declare type ChainedFromCombined<Combined extends AnyCombinedUnion> = ChainedFromExtensions<InferCombinedExtensions<Combined>>;\r\nexport declare type HelpersFromCombined<Combined extends AnyCombinedUnion> = HelpersFromExtensions<InferCombinedExtensions<Combined>>;\r\nexport declare type ActiveFromCombined<Combined extends AnyCombinedUnion> = Record<GetNodeNameUnion<InferCombinedExtensions<Combined>>, (attributes?: ProsemirrorAttributes) => boolean> & Record<GetMarkNameUnion<InferCombinedExtensions<Combined>>, () => boolean>;\r\n",
      "privacy.d.ts": "/**\r\n * A value that can be used in this package to prevent a method being called by\r\n * external users. If not present it can throw a runtime error.\r\n *\r\n * @remarks\r\n *\r\n * For example, this is the internal value which is used to check that the\r\n * editor manager was not created using the `new RemirrorManager` operator. It\r\n * must be provided to the constructor and if it isn't there it will cause the\r\n * manager to throw an error.\r\n */\r\nexport declare const privacySymbol: unique symbol;\r\n",
      "styles.d.ts": "export declare const editorStyles: string;\r\n",
      "types.d.ts": "import type { Except } from 'type-fest';\r\nimport type { ExtensionPriority, ExtensionTag, MarkGroup, NodeGroup } from '@remirror/core-constants';\r\nimport type { AnyConstructor, AnyFunction, CommandFunction, EditorSchema, EditorState, EditorStateParameter, GetDynamic, GetFixedDynamic, GetPartialDynamic, ProsemirrorAttributes, Transaction, ValidOptions } from '@remirror/core-types';\r\nimport type { PluginSpec } from '@remirror/pm/state';\r\ndeclare type Changes<Type> = {\r\n    /**\r\n     * Whether or not the value has changed.\r\n     *\r\n     * - `false` when no change occurred.\r\n     */\r\n    changed: false;\r\n} | {\r\n    /**\r\n     * - `true` when a change occurred.\r\n     */\r\n    changed: true;\r\n    /**\r\n     * The previous value before the changed. This is only accessible when\r\n     * `changed` is `true`.\r\n     */\r\n    previousValue: Type;\r\n    /**\r\n     * The latest value after the change. This is only accessible when\r\n     * `changed` is `true`.\r\n     */\r\n    value: Type;\r\n};\r\n/**\r\n * Highlights all the properties that have changed.\r\n */\r\nexport declare type ChangedOptions<Options extends ValidOptions> = {\r\n    [Key in keyof GetDynamic<Options>]: Changes<GetDynamic<Options>[Key]>;\r\n};\r\n/**\r\n * The tag names that apply to any extension whether plain, node or mark. These\r\n * are mostly used for nodes and marks the main difference is they are added to\r\n * the `tags` parameter of the extension rather than within the schema.\r\n */\r\nexport declare type GeneralExtensionTags<Names extends string = string> = Record<ExtensionTag, Names[]> & Record<string, undefined | Names[]>;\r\n/**\r\n * Provides the different mark groups which are defined in the mark extension\r\n * specification.\r\n */\r\nexport declare type MarkExtensionTags<MarkNames extends string = string> = Record<MarkGroup, MarkNames[]> & Record<string, undefined | MarkNames[]>;\r\n/**\r\n * Provides an object of the different node groups `block` and `inline` which\r\n * are defined in the node extension specification.\r\n */\r\nexport declare type NodeExtensionTags<NodeNames extends string = string> = Record<NodeGroup, NodeNames[]> & Record<string, undefined | NodeNames[]>;\r\n/**\r\n * Get the static extension settings.\r\n */\r\nexport declare type GetOptions<Type extends {\r\n    ['~O']: unknown;\r\n}> = Type['~O'];\r\n/**\r\n * Get the schema from a `RemirrorManager`.\r\n */\r\nexport declare type GetSchema<Type extends {\r\n    ['~Sch']: unknown;\r\n}> = Type['~Sch'];\r\n/**\r\n * Get the commands from a `RemirrorManager`, `Extension` or `Preset`.\r\n */\r\nexport declare type GetCommands<Type extends {\r\n    ['~C']: unknown;\r\n}> = Type['~C'];\r\n/**\r\n * Get the Extensions from a `RemirrorManager`, or `Preset`.\r\n */\r\nexport declare type GetExtensions<Type extends {\r\n    ['~E']: unknown;\r\n}> = Type['~E'];\r\n/**\r\n * Get the helpers provided by an from a `RemirrorManager`, `Extension` or\r\n * `Preset`.\r\n */\r\nexport declare type GetHelpers<Type extends {\r\n    ['~H']: unknown;\r\n}> = Type['~H'];\r\n/**\r\n * Get the name of an extension.\r\n */\r\nexport declare type GetNameUnion<Type extends {\r\n    name: string;\r\n}> = Type['name'];\r\n/**\r\n * Get the constructor of an instance.\r\n */\r\nexport declare type GetConstructor<Type extends {\r\n    constructor: unknown;\r\n}> = Type['constructor'];\r\n/**\r\n * Get the options from any constructor. Can be used for both presets and\r\n * extensions.\r\n */\r\nexport declare type OptionsOfConstructor<Constructor extends AnyConstructor> = GetOptions<InstanceType<Constructor>>;\r\n/**\r\n * Get the options from any constructor. Can be used for both presets and\r\n * extensions.\r\n */\r\nexport declare type DynamicOptionsOfConstructor<Constructor extends AnyConstructor> = GetPartialDynamic<GetOptions<InstanceType<Constructor>>>;\r\n/**\r\n * The extension store which is shared across all extensions. It provides access\r\n * to methods and data that can be used throughout the extension lifecycle.\r\n */\r\nexport interface ExtensionStore extends Remirror.ExtensionStore {\r\n}\r\nexport declare type ExtensionCommandFunction = (...args: any[]) => CommandFunction;\r\n/**\r\n * The return signature for an extensions command method.\r\n */\r\nexport interface ExtensionCommandReturn {\r\n    [command: string]: ExtensionCommandFunction;\r\n}\r\n/**\r\n * The return signature for an extensions helper method.\r\n */\r\nexport interface ExtensionHelperReturn {\r\n    [helper: string]: AnyFunction;\r\n}\r\n/**\r\n * The type of a non chainable command. It is a function with an `isEnabled`\r\n * method to check whether the command can be run.\r\n */\r\nexport interface CommandShape<Parameter extends any[] = []> {\r\n    /**\r\n     * Returns true when the command can be run and false when it can't be run. It\r\n     * basically runs the command without dispatching it to see whether it returns\r\n     * true or false.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Some commands can have rules and restrictions. For example you may want to\r\n     * disable styling making text bold when within a codeBlock. In that case\r\n     * isEnabled would be false when within the codeBlock and true when outside.\r\n     *\r\n     * @param attrs - certain commands require attrs to run\r\n     */\r\n    isEnabled: (attrs?: ProsemirrorAttributes) => boolean;\r\n    (...args: Parameter): void;\r\n}\r\nexport interface StateUpdateLifecycleParameter extends EditorStateParameter {\r\n    /**\r\n     * The previous state.\r\n     */\r\n    previousState: EditorState;\r\n    /**\r\n     * When true, this lets you know that it is the first state update to happen.\r\n     * This can be used to run an action that should only be run when the state is\r\n     * first available.\r\n     */\r\n    firstUpdate: boolean;\r\n    /**\r\n     * The original transaction which caused this state update.\r\n     *\r\n     * This allows for inspecting the reason behind the state change.\r\n     * When undefined this means that the state was updated externally.\r\n     *\r\n     * If available:\r\n     * - Metadata on the transaction can be inspected. `tr.getMeta`\r\n     * - Was the change caused by added / removed content? `tr.docChanged`\r\n     * - Was ths change caused by an updated selection? `tr.selectionSet`\r\n     * - `tr.steps` can be inspected for further granularity.\r\n     */\r\n    tr?: Transaction;\r\n    /**\r\n     * When the state updates are not controlled and it was a transaction that\r\n     * caused the state to be updated this value captures all the transaction\r\n     * updates caused by prosemirror plugins hook state methods like\r\n     * `filterTransactions` and `appendTransactions`.\r\n     *\r\n     * This is for advanced users only, and I personally have never needed it.\r\n     */\r\n    transactions?: Transaction[];\r\n}\r\nexport interface BaseExtensionOptions extends Remirror.BaseExtensionOptions {\r\n    /**\r\n     * An object which excludes certain functionality from an extension.\r\n     */\r\n    exclude?: ExcludeOptions;\r\n    /**\r\n     * The priority with which this extension should be loaded by the manager.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Each priority level corresponds to a higher level of importance for the\r\n     * extension within the editor.\r\n     *\r\n     * When this is set to `null` the `defaultPriority` level for the extension\r\n     * will be used instead.\r\n     */\r\n    priority?: ExtensionPriority;\r\n}\r\nexport interface ExcludeOptions extends Partial<Remirror.ExcludeOptions> {\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport declare type UpdateReason = 'set' | 'reset';\r\nexport interface UpdateReasonParameter {\r\n    /**\r\n     * Describes what triggered an update.\r\n     *\r\n     * - `set` - the change was triggered by an update in some properties\r\n     * - `reset` - the user has specifically requested to reset all properties to\r\n     *   their initial defaults\r\n     * - `init` - the update is happening when the preset is being It will receive\r\n     *   all the items as changes.\r\n     */\r\n    reason: UpdateReason;\r\n}\r\nexport interface GetChangeOptionsReturn<Options extends ValidOptions> {\r\n    /**\r\n     * The next value of the properties after the update.This also includes values\r\n     * which have not been changed.\r\n     */\r\n    options: GetFixedDynamic<Options>;\r\n    /**\r\n     * An object with all the keys showing what's been changed. This should be\r\n     * used to determine the children extensions which should be updated.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Using this can prevent unnecessary updates. It's possible for new\r\n     * properties to be passed that are identical to the previous, by checking if\r\n     * the object was changed this can be avoided.\r\n     *\r\n     * This uses a discriminated union. When the `changed` property is true then\r\n     * the object has a value as well.\r\n     *\r\n     * ```ts\r\n     * if (changes.myProperty.changed) {\r\n     *   doSomething(changes.myProperty.value);\r\n     * }\r\n     * ```\r\n     */\r\n    changes: Readonly<Required<ChangedOptions<Options>>>;\r\n    /**\r\n     * Pick the changed values by their key. An object populated with only the\r\n     * changed items will be returned to you.\r\n     */\r\n    pickChanged: PickChanged<Options>;\r\n}\r\nexport declare type PickChanged<Options> = <Key extends keyof GetFixedDynamic<Options>>(keys: Key[]) => Partial<Pick<GetFixedDynamic<Options>, Key>>;\r\nexport interface OnSetOptionsParameter<Options extends ValidOptions> extends Pick<GetChangeOptionsReturn<Options>, 'changes' | 'pickChanged'>, UpdateReasonParameter {\r\n    /**\r\n     * The initial options for the extension. Falls back to default options.\r\n     */\r\n    initialOptions: GetFixedDynamic<Options>;\r\n    /**\r\n     * The next value of the properties after the update.This also includes values\r\n     * which have not been changed.\r\n     */\r\n    options: GetFixedDynamic<Options>;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        /**\r\n         * A global type which allows setting additional options on the exclude.\r\n         */\r\n        interface ExcludeOptions {\r\n        }\r\n        /**\r\n         * A global type which allows additional default settings to be added to the\r\n         * editor.\r\n         */\r\n        interface BaseExtensionOptions {\r\n        }\r\n    }\r\n}\r\n/**\r\n * An interface for creating custom plugins in your `remirror` editor.\r\n */\r\nexport interface CreatePluginReturn<PluginState = any> extends Except<PluginSpec<PluginState, EditorSchema>, 'key'> {\r\n}\r\nexport {};\r\n"
    },
    "@remirror/core-types": {
      "alias-types.d.ts": "import type { InputRule as PMInputRule } from '@remirror/pm/inputrules';\r\nimport type { Fragment as PMFragment, Mark as PMMark, MarkType as PMMarkType, Node as PMNode, NodeType as PMNodeType, ResolvedPos as PMResolvedPos, Schema as PMSchema, Slice as PMSlice } from '@remirror/pm/model';\r\nimport type { EditorState as PMEditorState, Plugin as PMPlugin, PluginKey as PMPluginKey, Selection as PMSelection, Transaction as PMTransaction } from '@remirror/pm/state';\r\nimport type { Mapping as PMMapping } from '@remirror/pm/transform';\r\nimport type { Decoration as PMDecoration, DecorationSet as PMDecorationSet, EditorView as PMEditorView, NodeView as PMNodeView } from '@remirror/pm/view';\r\nexport declare type EditorSchema<Nodes extends string = string, Marks extends string = string> = PMSchema<Nodes, Marks>;\r\nexport declare type EditorView<Schema extends EditorSchema = any> = PMEditorView<Schema>;\r\nexport declare type Selection<Schema extends EditorSchema = any> = PMSelection<Schema>;\r\nexport declare type DecorationSet<Schema extends EditorSchema = any> = PMDecorationSet<Schema>;\r\nexport declare type Transaction<Schema extends EditorSchema = any> = PMTransaction<Schema>;\r\nexport declare type PluginKey<PluginState = any> = PMPluginKey<PluginState, EditorSchema>;\r\nexport declare type Plugin<PluginState = any, Schema extends EditorSchema = any> = PMPlugin<PluginState, Schema>;\r\nexport declare type Mark<Schema extends EditorSchema = any> = PMMark<Schema>;\r\nexport declare type ResolvedPos<Schema extends EditorSchema = any> = PMResolvedPos<Schema>;\r\nexport declare type InputRule<Schema extends EditorSchema = any> = PMInputRule<Schema>;\r\nexport declare type Fragment<Schema extends EditorSchema = any> = PMFragment<Schema>;\r\nexport declare type NodeView<Schema extends EditorSchema = any> = PMNodeView<Schema>;\r\nexport declare type ProsemirrorNode<Schema extends EditorSchema = any> = PMNode<Schema>;\r\nexport declare type ProsemirrorPlugin<PluginState = any> = PMPlugin<PluginState, EditorSchema>;\r\nexport declare type MarkType<Schema extends EditorSchema = any> = PMMarkType<Schema>;\r\nexport declare type NodeType<Schema extends EditorSchema = any> = PMNodeType<Schema>;\r\nexport declare type EditorState<Schema extends EditorSchema = EditorSchema> = Readonly<PMEditorState<Schema>>;\r\nexport declare type Slice<Schema extends EditorSchema = any> = PMSlice<Schema>;\r\nexport declare type Decoration = PMDecoration;\r\nexport declare type Mapping = PMMapping;\r\n",
      "annotation-types.d.ts": "import type { ConditionalExcept, ConditionalPick } from 'type-fest';\r\nimport type { AnyFunction, Flavoring, FlipPartialAndRequired, PickPartial, RemoveFlavoring, Shape, StringKey } from './base-types';\r\ndeclare type StaticAnnotation = Flavoring<'StaticAnnotation'>;\r\ndeclare type DynamicAnnotation = Flavoring<'DynamicAnnotation'>;\r\ndeclare type HandlerAnnotation = Flavoring<'HandlerAnnotation'>;\r\ndeclare type CustomHandlerAnnotation = Flavoring<'CustomAnnotation'>;\r\nexport declare type RemoveAnnotation<Type> = RemoveFlavoring<Type>;\r\n/**\r\n * Wrap your type in this to represent a static option, which can only be set at\r\n * instantiation.\r\n *\r\n * ```ts\r\n * import { Static, PlainExtension } from 'remirror/core';\r\n *\r\n * interface MyExtensionOptions {\r\n *   content: Static<string>;\r\n * }\r\n *\r\n * export class MyExtension extends PlainExtension<MyExtensionOptions> {\r\n *   get name() {\r\n *     return 'my' as const';\r\n *   }\r\n * }\r\n *\r\n * new extension = new MyExtension({ content: 'awesome string' });\r\n * ```\r\n *\r\n * The above example creates an extension with the content options set to\r\n * 'awesome string'. This value is set and can never be updated.\r\n *\r\n * One slight downside to the `Static` annotation is that is does mess up auto\r\n * suggestions for string literals.\r\n */\r\nexport declare type Static<Type> = Type & StaticAnnotation;\r\n/**\r\n * Wrap an option in this type to indicate to the TypeScript compiler that it is\r\n * a dynamic property. It can be set through the constructor parameter at\r\n * instantiation and can by updated throughout the lifetime of your editor.\r\n *\r\n * @remarks\r\n *\r\n * This is the default type assumed and it can be left unused.\r\n *\r\n * ```ts\r\n * import { Dynamic, PlainExtension } from 'remirror/core';\r\n *\r\n * interface MyExtensionOptions {\r\n *   isSwitchedOn: Dynamic<boolean>;\r\n * }\r\n *\r\n * export class MyExtension extends PlainExtension<MyExtensionOptions> {\r\n *   get name() {\r\n *     return 'my' as const';\r\n *   }\r\n * }\r\n *\r\n * new extension = new MyExtension({ isSwitchedOn: false });\r\n * extension.setOptions({ isSwitchedOn: true });\r\n * ```\r\n */\r\nexport declare type Dynamic<Type> = Type & DynamicAnnotation;\r\n/**\r\n * A handler is a callback provided by the user to respond to events from your\r\n * extension. Often times it's helpful to be able to consume a handler in\r\n * multiple places. Remirror can help automate the registration of handlers that\r\n * can be consumed multiple times.\r\n *\r\n * @remarks\r\n *\r\n * Use this type to annotate a method in your options as an event handler. This\r\n * will tell the TypeScript compiler to include this event in the relevant\r\n * methods for composing events together.\r\n *\r\n * To automate the creation of handler code you will also need to set the\r\n * `handlerKeys` static property for your `Extension` or `Preset` to be an array\r\n * with the keys you've annotated as a handler. An **eslint** rule will be created\r\n * to automate this.\r\n *\r\n * ```ts\r\n * import { PlainExtension, extensionDecorator } from 'remirror/core';\r\n * interface CustomOptions {\r\n *   simple: boolean; // Automatically a dynamic property\r\n *   onChange: Handler<(value: string) => void>;\r\n * }\r\n *\r\n * @extensionDecorator({ handlerKeys: ['onChange'] })\r\n * class CustomExtension extends PlainExtension<CustomOptions> {\r\n *   get name() {\r\n *     return 'custom' as const;\r\n *   }\r\n * }\r\n *\r\n * // No prompt to include the `onChange` handler due to the annotation.\r\n * const extension = new CustomExtension({simple: false});\r\n *\r\n * const dispose = extension.addHandlers('onChange', (value) => {\r\n *   sideEffect();\r\n * });\r\n *\r\n * // Later\r\n *\r\n * dispose();\r\n * ```\r\n */\r\nexport declare type Handler<Type extends AnyFunction<void>> = Type & HandlerAnnotation;\r\n/**\r\n * A handler type which gives you full control of what the handler can do and\r\n * what is can return.\r\n *\r\n * For example with keybindings you will probably receive an object of event\r\n * handlers which need to be added to the `keymap` plugin. The custom handler\r\n * annotation allows you to accept functions or objects which return non void\r\n * values and set upt the handler for yourself.\r\n *\r\n * For custom handlers the `option`s value is meaningless and can only be changed\r\n * through the `addCustomHandler` method.\r\n */\r\nexport declare type CustomHandler<Type> = Type & CustomHandlerAnnotation;\r\n/**\r\n * Get the static `Options` from the options type.\r\n */\r\nexport declare type GetStatic<Options extends Shape> = ConditionalPick<Options, StaticAnnotation> & Partial<ConditionalPick<PickPartial<Options>, StaticAnnotation>>;\r\n/**\r\n * Get the dynamic `Options` from the options type.\r\n */\r\nexport declare type GetDynamic<Options extends Shape> = Omit<ConditionalExcept<Options, Exclude<Remirror.ValidOptionsExtender[keyof Remirror.ValidOptionsExtender], DynamicAnnotation>>, keyof ConditionalPick<PickPartial<Options>, Exclude<Remirror.ValidOptionsExtender[keyof Remirror.ValidOptionsExtender], DynamicAnnotation>>>;\r\n/**\r\n * Get the event handler `Options` from the options type.\r\n */\r\nexport declare type GetHandler<Options extends Shape> = ConditionalPick<Options, HandlerAnnotation> & Partial<ConditionalPick<PickPartial<Options>, HandlerAnnotation>>;\r\n/**\r\n * Get the object event handler `Options` from the options type.\r\n */\r\nexport declare type GetCustomHandler<Options extends Shape> = ConditionalPick<Options, CustomHandlerAnnotation> & Partial<ConditionalPick<PickPartial<Options>, CustomHandlerAnnotation>>;\r\n/**\r\n * Options excluding the handlers.\r\n */\r\nexport declare type GetStaticAndDynamic<Options extends Shape> = GetDynamic<Options> & GetStatic<Options>;\r\n/**\r\n * This constrains the valid options that can be passed into your extensions or presets.\r\n */\r\nexport interface ValidOptions {\r\n    [option: string]: any;\r\n}\r\nexport declare type StaticShape<Type extends object> = {\r\n    [Key in keyof Type]: Static<Type[Key]>;\r\n};\r\nexport declare type DynamicShape<Type extends object> = {\r\n    [Key in keyof Type]: Dynamic<Type[Key]>;\r\n};\r\nexport declare type HandlerShape<Type extends Shape> = {\r\n    [Key in keyof Type]: Handler<Type[Key]>;\r\n};\r\nexport declare type CustomHandlerShape<Type extends Shape> = {\r\n    [Key in keyof Type]: CustomHandler<Type[Key]>;\r\n};\r\nexport declare type GetFixed<Options extends ValidOptions> = Readonly<Required<Options>>;\r\nexport declare type GetFixedProps<Options extends ValidOptions> = GetFixedDynamic<Options> & GetFixedStatic<Options>;\r\nexport declare type GetFlippedStatic<Options extends ValidOptions> = FlipPartialAndRequired<Options>;\r\nexport declare type GetPartialDynamic<Options extends ValidOptions> = Partial<GetDynamic<Options>>;\r\nexport declare type GetFixedStatic<Options extends ValidOptions> = Readonly<Required<GetStatic<Options>>>;\r\nexport declare type GetFixedDynamic<Options extends ValidOptions> = Readonly<Required<GetDynamic<Options>>>;\r\nexport declare type GetFixedCustomHandler<Options extends ValidOptions> = Readonly<Required<GetCustomHandler<Options>>>;\r\nexport declare type GetMappedHandler<Options extends ValidOptions> = {\r\n    [Key in keyof GetHandler<Options>]: Array<GetHandler<Options>[Key]>;\r\n};\r\nexport declare type GetMappedCustomHandler<Options extends ValidOptions> = {\r\n    [Key in keyof GetCustomHandler<Options>]: Array<GetCustomHandler<Options>[Key]>;\r\n};\r\n/**\r\n * The options that can be passed into a constructor.\r\n */\r\nexport declare type GetConstructorParameter<Options extends ValidOptions> = GetStatic<Options> & GetDynamic<Options>;\r\n/**\r\n * A function used to cleanup any effects from the `Handler` or `Custom`\r\n * options.\r\n *\r\n * In react you would use the return value from the `addHandler` or `setCustom`\r\n * as the clean up function for your `useEffect` hooks.\r\n */\r\nexport declare type Dispose = () => void;\r\nexport declare type HandlerKey<Options extends ValidOptions> = StringKey<GetHandler<Options>>;\r\nexport declare type StaticKey<Options extends ValidOptions> = StringKey<GetStatic<Options>>;\r\nexport declare type DynamicKey<Options extends ValidOptions> = StringKey<GetDynamic<Options>>;\r\nexport declare type CustomHandlerKey<Options extends ValidOptions> = StringKey<GetCustomHandler<Options>>;\r\nexport declare type HandlerKeyList<Options extends ValidOptions> = Array<HandlerKey<Options>>;\r\nexport declare type StaticKeyList<Options extends ValidOptions> = Array<StaticKey<Options>>;\r\nexport declare type DynamicKeyList<Options extends ValidOptions> = Array<DynamicKey<Options>>;\r\nexport declare type CustomHandlerKeyList<Options extends ValidOptions> = Array<CustomHandlerKey<Options>>;\r\ndeclare global {\r\n    namespace Remirror {\r\n        /**\r\n         * A fake symbol for storing types on classes and interfaces that can be\r\n         * used for simpler inference.\r\n         *\r\n         * @internal\r\n         */\r\n        interface ValidOptionsExtender {\r\n            DynamicAnnotation: DynamicAnnotation;\r\n            HandlerAnnotation: HandlerAnnotation;\r\n            CustomAnnotation: CustomHandlerAnnotation;\r\n            StaticAnnotation: StaticAnnotation;\r\n        }\r\n    }\r\n}\r\nexport {};\r\n",
      "base-types.d.ts": "import type { ConditionalExcept, ConditionalPick } from 'type-fest';\r\nimport type { Mark, ProsemirrorNode } from './alias-types';\r\n/**\r\n * An alternative to keyof that only extracts the string keys.\r\n */\r\nexport declare type StringKey<Type> = Extract<keyof Type, string>;\r\n/**\r\n * Extract the values of an object as a union type.\r\n *\r\n * @remarks\r\n *\r\n * ```ts\r\n * const myRecord = { A: 'a', B: 'b', C: 'c' } as const;\r\n *\r\n * type MyRecord = Value<typeof myRecord>; // 'a' | 'b' | 'c'\r\n * ```\r\n */\r\nexport declare type Value<Type> = Type[keyof Type];\r\n/**\r\n * Makes a type nullable or undefined.\r\n */\r\nexport declare type Nullable<Type> = Type | null | undefined;\r\n/**\r\n * A shorthand for creating and intersection of two object types.\r\n */\r\nexport declare type And<Type extends Shape, Other extends Shape> = Type & Other;\r\n/**\r\n * Extract the values of a tuple as a union type.\r\n *\r\n * @remarks\r\n *\r\n * ```ts\r\n * const myTuple = ['a', 'b', 'c'] as const;\r\n *\r\n * type MyTuple = TupleValue<typeof myTuple>; // 'a' | 'b' | 'c'\r\n * ```\r\n */\r\nexport declare type TupleValue<Tuple extends readonly unknown[]> = Tuple[number];\r\n/**\r\n * Creates a predicate type\r\n */\r\nexport declare type Predicate<Type> = (value: unknown) => value is Type;\r\ndeclare const _brand: unique symbol;\r\ndeclare const _flavor: unique symbol;\r\n/**\r\n * Used by Brand to mark a type in a readable way.\r\n */\r\ninterface Branding<Type> {\r\n    readonly [_brand]: Type;\r\n}\r\n/**\r\n * Used by `Flavor` to mark a type in a readable way.\r\n */\r\nexport interface Flavoring<Flavor> {\r\n    readonly [_flavor]?: Flavor;\r\n}\r\n/**\r\n * Remove the flavaring from a type.\r\n */\r\nexport declare type RemoveFlavoring<Type> = Omit<Type, typeof _flavor>;\r\n/**\r\n * Create a \"flavored\" version of a type. TypeScript will disallow mixing\r\n * flavors, but will allow unflavored values of that type to be passed in where\r\n * a flavored version is expected. This is a less restrictive form of branding.\r\n */\r\nexport declare type Flavor<Type, F> = Type & Flavoring<F>;\r\n/**\r\n * Create a \"branded\" version of a type. TypeScript won't allow implicit\r\n * conversion to this type\r\n */\r\nexport declare type Brand<Type, B> = Type & Branding<B>;\r\n/**\r\n * An object with string keys and values of type `any`\r\n */\r\nexport interface Shape {\r\n    [key: string]: any;\r\n}\r\n/**\r\n * An object with string keys and values of type `unknown`\r\n */\r\nexport declare type UnknownShape<Type = unknown> = Record<string, Type>;\r\n/**\r\n * An alternative to usage of `{}` as a type.\r\n */\r\nexport declare type EmptyShape = Record<never, never>;\r\n/**\r\n * Concisely and cleanly define an arbitrary function.\r\n *\r\n * @remarks\r\n * Taken from `simplytyped` Useful when designing many api's that don't care\r\n * what function they take in, they just need to know what it returns.\r\n */\r\nexport declare type AnyFunction<Type = any> = (...args: any[]) => Type;\r\n/**\r\n * Matches any constructor type.\r\n */\r\nexport declare type AnyConstructor<Type = any> = new (...args: any[]) => Type;\r\n/**\r\n * Make the whole interface partial except for some specified keys which will be\r\n * made required.\r\n */\r\nexport declare type PartialWithRequiredKeys<Type extends object, Keys extends keyof Type> = Partial<Pick<Type, Exclude<keyof Type, Keys>>> & Required<Pick<Type, Keys>>;\r\n/**\r\n * Remove all readonly modifiers from the provided type.\r\n */\r\nexport declare type Writeable<Type> = {\r\n    -readonly [Key in keyof Type]: Type[Key];\r\n};\r\n/**\r\n * Makes specified keys of an interface optional while the rest stay the same.\r\n */\r\nexport declare type MakeOptional<Type extends object, Keys extends keyof Type> = Omit<Type, Keys> & {\r\n    [Key in Keys]+?: Type[Key];\r\n};\r\n/**\r\n * Makes specified keys of an interface nullable while the rest stay the same.\r\n */\r\nexport declare type MakeNullable<Type extends object, Keys extends keyof Type> = Omit<Type, Keys> & {\r\n    [Key in Keys]: Type[Key] | null;\r\n};\r\n/**\r\n * Makes specified keys of an interface Required while the rest remain\r\n * unchanged.\r\n */\r\nexport declare type MakeRequired<Type extends object, Keys extends keyof Type> = Omit<Type, Keys> & {\r\n    [Key in Keys]-?: Type[Key];\r\n};\r\n/**\r\n * Makes specified keys of an interface readonly.\r\n */\r\nexport declare type MakeReadonly<Type extends object, Keys extends keyof Type> = Omit<Type, Keys> & {\r\n    +readonly [Key in Keys]: NonNullable<Type[Key]>;\r\n};\r\n/**\r\n * All the literal types\r\n */\r\nexport declare type Literal = string | number | boolean | undefined | null | void | object;\r\n/**\r\n * A recursive partial type. Useful for object that will be merged with\r\n * defaults.\r\n */\r\nexport declare type DeepPartial<Type> = Type extends object ? {\r\n    [K in keyof Type]?: DeepPartial<Type[K]>;\r\n} : Type;\r\n/**\r\n * Converts every nested type to a string.\r\n */\r\nexport declare type DeepString<Type> = Type extends object ? {\r\n    [K in keyof Type]: DeepString<Type[K]>;\r\n} : string;\r\n/**\r\n * A tuple for use with the regex constructor.\r\n *\r\n * @remarks\r\n *\r\n * Can be spread as parameters for the `RegExp` constructor\r\n *\r\n * ```ts\r\n * const params: RegExpTuple = ['\\\\/awesome', 'gi']\r\n * const regexp = new RegExp(...params);\r\n * ```\r\n */\r\nexport declare type RegexTuple = [string, string?];\r\n/**\r\n * A JSON representation of a prosemirror Mark\r\n */\r\nexport interface ObjectMark {\r\n    type: string;\r\n    attrs?: Record<string, string | null>;\r\n}\r\n/**\r\n * Defines a position\r\n */\r\nexport interface Position {\r\n    top: number;\r\n    left: number;\r\n    bottom: number;\r\n    right: number;\r\n}\r\n/**\r\n * Used for attributes which can be added to prosemirror nodes and marks.\r\n */\r\nexport declare type ProsemirrorAttributes<Extra extends object = object> = Record<string, unknown> & Extra & {\r\n    /**\r\n     * The class is a preserved attribute name.\r\n     */\r\n    class?: string;\r\n};\r\nexport declare type NodeAttributes<Extra extends object = object> = ProsemirrorAttributes<Remirror.ExtraNodeAttributes & Extra>;\r\nexport declare type MarkAttributes<Extra extends object = object> = ProsemirrorAttributes<Remirror.ExtraMarkAttributes & Extra>;\r\nexport interface SchemaAttributesObject {\r\n    /**\r\n     * The default value for the attr, if left undefined then this becomes a\r\n     * required. and must be provided whenever a node or mark of a type that has\r\n     * them is created.\r\n     */\r\n    default: string | null;\r\n    /**\r\n     * A function used to extract the attribute from the dom and must be applied\r\n     * to the `parseDOM` method.\r\n     *\r\n     * If a string is set this will automatically call\r\n     * `domNode.getAttribute('<name>')`.\r\n     */\r\n    parseDOM?: ((domNode: HTMLElement) => unknown) | string;\r\n    /**\r\n     * Takes the node attributes and applies them to the dom.\r\n     *\r\n     * This is called in the `toDOM` method.\r\n     *\r\n     * - If a string is set this will always be the constant value set in the dom.\r\n     * - If a tuple with two items is set then the first `string` is the attribute\r\n     *   to set in the dom and the second string is the value that will be stored.\r\n     *\r\n     * Return undefined from the function call to skip adding the attribute.\r\n     */\r\n    toDOM?: string | [string, string?] | ((attrs: ProsemirrorAttributes, options: NodeMarkOptions) => string | [string, string?] | null | undefined);\r\n}\r\nexport interface NodeMarkOptions {\r\n    node?: ProsemirrorNode;\r\n    mark?: Mark;\r\n}\r\nexport interface ApplySchemaAttributes {\r\n    /**\r\n     * A function which returns the object of defaults. Since this is for extra\r\n     * attributes a default must be provided.\r\n     */\r\n    defaults: () => Record<string, {\r\n        default: string | null;\r\n    }>;\r\n    /**\r\n     * Read a value from the dome and convert it into prosemirror attributes.\r\n     */\r\n    parse: (domNode: Node | string) => ProsemirrorAttributes;\r\n    /**\r\n     * Take the node attributes and create the object of string attributes for\r\n     * storage on the dom node.\r\n     */\r\n    dom: (attrs: ProsemirrorNode | Mark) => Record<string, string>;\r\n}\r\n/**\r\n * A mapping of the attribute name to it's default, getter and setter. If the\r\n * value is set to a string then it will be resolved as the `default`.\r\n */\r\nexport declare type SchemaAttributes = Record<string, SchemaAttributesObject | string>;\r\n/**\r\n * A method that can pull all the extraAttributes from the provided dom node.\r\n */\r\n/**\r\n * The render environment which is either on the server (ssr) or in the dom.\r\n *\r\n * This is used to force a certain environment to override checks\r\n */\r\nexport declare type RenderEnvironment = 'ssr' | 'dom';\r\n/**\r\n * Checks the type provided and if it has any properties which are required it\r\n * will return the `Then` type. When none of the properties are required it will\r\n * return the `Else` type.\r\n *\r\n * @remarks\r\n *\r\n * This is a reverse of the `IfNoRequiredProperties` type.\r\n */\r\nexport declare type IfHasRequiredProperties<Type extends object, Then, Else> = IfNoRequiredProperties<Type, Else, Then>;\r\ndeclare type NeverBrand = Brand<object, never>;\r\n/**\r\n * A conditional check on the type. When there are no required keys it outputs\r\n * the `Then` type, otherwise it outputs the `Else` type.\r\n *\r\n * @remarks\r\n *\r\n * This is useful for dynamically setting the parameter list of a method call\r\n * depending on whether keys are required.\r\n */\r\nexport declare type IfNoRequiredProperties<Type extends object, Then, Else> = GetRequiredKeys<Type> extends NeverBrand ? Then : Else;\r\n/**\r\n * Get all the keys for required properties on this type.\r\n */\r\nexport declare type GetRequiredKeys<Type extends object> = keyof ConditionalPick<KeepPartialProperties<Type>, NeverBrand>;\r\n/**\r\n * Keeps the partial properties of a type unchanged. Transforms the rest to\r\n * `never`.\r\n */\r\nexport declare type KeepPartialProperties<Type extends object> = {\r\n    [Key in keyof Type]: Type[Key] extends undefined ? Type[Key] : NeverBrand;\r\n};\r\n/**\r\n * Pick the `partial` properties from the provided Type and make them all\r\n * required.\r\n */\r\nexport declare type PickPartial<Type extends object> = {\r\n    [Key in keyof ConditionalExcept<KeepPartialProperties<Type>, NeverBrand>]-?: Type[Key];\r\n};\r\n/**\r\n * Like pick partial but all types can still specify undefined.\r\n */\r\nexport declare type UndefinedPickPartial<Type extends object> = {\r\n    [Key in keyof PickPartial<Type>]: PickPartial<Type>[Key] | undefined;\r\n};\r\n/**\r\n * Only pick the `required` (non-`partial`) types from the given `Type`.\r\n */\r\nexport declare type PickRequired<Type extends object> = {\r\n    [Key in keyof ConditionalPick<KeepPartialProperties<Type>, NeverBrand>]: Type[Key];\r\n};\r\n/**\r\n * Reverses the partial and required keys for the type provided. If it was a\r\n * required property it becomes a partial property and if it was a partial\r\n * property it becomes a required property.\r\n */\r\nexport declare type FlipPartialAndRequired<Type extends object> = PickPartial<Type> & Partial<PickRequired<Type>>;\r\n/**\r\n * Reverses the partial and required keys for the type provided. If it was a\r\n * required property it becomes a partial property and if it was a partial\r\n * property it becomes a required property.\r\n */\r\nexport declare type UndefinedFlipPartialAndRequired<Type extends object> = UndefinedPickPartial<Type> & Partial<PickRequired<Type>>;\r\n/**\r\n * Get the diff between two types. All identical keys are stripped away.\r\n *\r\n * @remarks\r\n *\r\n * ```ts\r\n * type Fun = Diff<{notFun: false, fun: true}, {notFun: true, wow: string}>;\r\n * // => { fun: true, wow: string }\r\n * ```\r\n */\r\nexport declare type Diff<A, B> = Omit<A, keyof B> & Omit<B, keyof A>;\r\n/**\r\n * Conditional type which checks if the provided `Type` is and empty object (no properties). If it is\r\n * uses the `Then` type if not falls back to the `Else` type.\r\n */\r\nexport declare type IfEmpty<Type extends object, Then, Else> = keyof Type extends never ? Then : Else;\r\n/**\r\n * Condition that checks if the keys of the two objects match. If so,\r\n * respond with `Then` otherwise `Else`.\r\n */\r\nexport declare type IfMatches<A, B, Then, Else> = IfEmpty<Diff<A, B>, Then, Else>;\r\n/**\r\n * Replace only the current keys with different types.\r\n */\r\nexport declare type StrictReplace<Type, Replacements extends Record<keyof Type, unknown>> = Omit<Type, keyof Replacements> & Replacements;\r\n/**\r\n * Replace and extend any object keys.\r\n */\r\nexport declare type Replace<Type, Replacements extends Shape> = Omit<Type, keyof Replacements> & Replacements;\r\nexport declare type NonNullableShape<Type extends object> = {\r\n    [Key in keyof Type]: NonNullable<Type[Key]>;\r\n};\r\ndeclare global {\r\n    namespace Remirror {\r\n        /**\r\n         * Define globally available extra node attributes here.\r\n         */\r\n        interface ExtraNodeAttributes {\r\n        }\r\n        /**\r\n         * Define globally available extra mark attributes here.\r\n         */\r\n        interface ExtraMarkAttributes {\r\n        }\r\n    }\r\n}\r\nexport {};\r\n",
      "core-types.d.ts": "import type { __INTERNAL_REMIRROR_IDENTIFIER_KEY__, RemirrorIdentifier } from '@remirror/core-constants';\r\nimport type { MarkSpec, NodeSpec } from '@remirror/pm/model';\r\nimport type { Decoration, NodeView } from '@remirror/pm/view';\r\nimport type { EditorSchema, EditorState, EditorView, Mark, ProsemirrorNode, Selection, Transaction } from './alias-types';\r\nimport type { Literal, ObjectMark, ProsemirrorAttributes, RegexTuple } from './base-types';\r\nimport type { EditorStateParameter, EditorViewParameter, FromToParameter, TransactionParameter } from './parameter-builders';\r\n/**\r\n * A JSON representation of the prosemirror Node.\r\n *\r\n * @remarks\r\n * This is used to represent the top level doc nodes content.\r\n */\r\nexport interface RemirrorJSON {\r\n    type: string;\r\n    marks?: Array<ObjectMark | string>;\r\n    text?: string;\r\n    content?: RemirrorJSON[];\r\n    attrs?: Record<string, Literal | object>;\r\n}\r\nexport interface StateJSON {\r\n    [key: string]: unknown;\r\n    doc: RemirrorJSON;\r\n    selection: FromToParameter;\r\n}\r\ndeclare type GetAttributesFunction = (p: string[] | string) => ProsemirrorAttributes | undefined;\r\n/**\r\n * A function which takes a regex match array (strings) or a single string match\r\n * and transforms it into an `Attributes` object.\r\n */\r\nexport declare type GetAttributes = ProsemirrorAttributes | GetAttributesFunction;\r\nexport interface GetAttributesParameter {\r\n    /**\r\n     * A helper function for setting receiving a match array / string and setting\r\n     * the attributes for a node.\r\n     */\r\n    getAttributes: GetAttributes;\r\n}\r\n/**\r\n * Supported content for the remirror editor.\r\n *\r\n * @remarks\r\n *\r\n * Content can either be\r\n * - a string (which will be parsed by the stringHandler)\r\n * - JSON object matching Prosemirror expected shape\r\n * - A top level ProsemirrorNode\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport declare type RemirrorContentType<Schema extends EditorSchema = any> = string | RemirrorJSON | ProsemirrorNode<Schema> | EditorState<Schema>;\r\n/**\r\n * Utility type for matching the name of a node to via a string or function.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport declare type NodeMatch<Schema extends EditorSchema = any> = string | ((name: string, node: ProsemirrorNode<Schema>) => boolean) | RegexTuple;\r\n/**\r\n * Used to apply the Prosemirror transaction to the current {@link EditorState}.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport declare type DispatchFunction<Schema extends EditorSchema = any> = (tr: Transaction<Schema>) => void;\r\n/**\r\n * This is the type signature for commands within the prosemirror editor.\r\n *\r\n * @remarks\r\n *\r\n * A command function takes an editor state and optionally a dispatch function\r\n * that it can use to dispatch a transaction. It should return a boolean that\r\n * indicates whether it could perform any action.\r\n *\r\n * When no dispatch callback is passed, the command should do a 'dry run',\r\n * determining whether it is applicable, but not actually performing any action.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport declare type ProsemirrorCommandFunction<Schema extends EditorSchema = any> = (state: EditorState<Schema>, dispatch: DispatchFunction<Schema> | undefined, view: EditorView<Schema> | undefined) => boolean;\r\n/**\r\n * A command method for running commands in your editor.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n * @typeParam ExtraParameter - extra parameters to add to the command function.\r\n *\r\n * @remarks\r\n *\r\n * This groups all the prosemirror command arguments into a single parameter.\r\n *\r\n * tldr; When `dispatch=undefined` make sure the command function is **idempotent**.\r\n *\r\n * One thing to be aware of is that when creating a command function the\r\n * `tr` should only be updated when the `dispatch` method is available. This is\r\n * because by convention calling the command function with `dispatch=undefined`\r\n * is used to check if the function returns `true`, an indicator that it is\r\n * enabled, or returns `false` to indicate it is not enabled.\r\n *\r\n * If the transaction has been updated outside of the `dispatch=true` condition\r\n * then running the command again will result in multiple transaction updates\r\n * and unpredictable behavior.\r\n *\r\n * @see {@link ProsemirrorCommandFunction}\r\n */\r\nexport declare type CommandFunction<Schema extends EditorSchema = EditorSchema, ExtraParameter extends object = object> = (params: CommandFunctionParameter<Schema> & ExtraParameter) => boolean;\r\n/**\r\n * Chained commands take a transaction and act on it before returning the\r\n * transaction.\r\n *\r\n * @remarks\r\n *\r\n * They allow for commands to be chained together before being used to update\r\n * the state and allow the composition of complex commands. They are\r\n * automatically created from `CommandFunction`'s by providing a fake dispatch\r\n * method to the command function which captures the updated `transaction` and\r\n * passes it onto the next chainable command.\r\n */\r\nexport declare type ChainedCommandFunction<Schema extends EditorSchema = any> = (transaction: TransactionParameter<Schema>) => void;\r\n/**\r\n * A parameter builder interface for the remirror `CommandFunction`.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface CommandFunctionParameter<Schema extends EditorSchema = any> extends Partial<EditorViewParameter<Schema>>, EditorStateParameter<Schema>, TransactionParameter<Schema> {\r\n    /**\r\n     * The dispatch function which causes the command to be performed.\r\n     *\r\n     * @remarks\r\n     *\r\n     * `dispatch` can be `undefined`. When no `dispatch` callback is provided the\r\n     * command should perform a 'dry run', determining whether the command is\r\n     * applicable (`return true`), but not actually performing the action.\r\n     */\r\n    dispatch?: DispatchFunction<Schema>;\r\n}\r\nexport interface NextParameter<Schema extends EditorSchema = any> extends CommandFunctionParameter<Schema> {\r\n    /**\r\n     * A method to run the next (lower priority) command in the chain of\r\n     * keybindings.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This can be used to chain together keyboard commands between extensions.\r\n     * It's possible that you will need to combine actions when a key is pressed\r\n     * while still running the default action. This method allows for the\r\n     * greater degree of control.\r\n     *\r\n     * By default, matching keyboard commands from the different extension are\r\n     * chained together (in order of priority) until one returns `true`. Calling\r\n     * `next` changes this default behaviour. The default keyboard chaining\r\n     * stops and you are given full control of the keyboard command chain.\r\n     */\r\n    next: () => boolean;\r\n}\r\n/**\r\n * The command function passed to any of the keybindings.\r\n */\r\nexport declare type KeyBindingCommandFunction<Schema extends EditorSchema = any> = CommandFunction<Schema, NextParameter<Schema>>;\r\n/**\r\n * A map of keyboard bindings and their corresponding command functions (a.k.a\r\n * editing actions).\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n *\r\n * @remarks\r\n *\r\n * Each keyboard binding returns an object mapping the keys pressed to the\r\n * {@link KeyBindingCommandFunction}. By default the highest priority extension\r\n * will be run first. If it returns true, then nothing else will be run after.\r\n * If it returns `false` then the next (lower priority) extension defining the\r\n * same keybinding will be run.\r\n *\r\n * It is possible to combine the commands being run by using the `next`\r\n * parameter. When called it will run the keybinding command function for the\r\n * proceeding (lower priority) extension. The act of calling the `next` method\r\n * will prevent the default flow from executing.\r\n */\r\nexport declare type KeyBindings<Schema extends EditorSchema = EditorSchema> = Record<string, KeyBindingCommandFunction<Schema>>;\r\nexport declare type ProsemirrorKeyBindings<Schema extends EditorSchema = EditorSchema> = Record<string, ProsemirrorCommandFunction<Schema>>;\r\ndeclare type DOMCompatible = string;\r\ndeclare type DOMOutputSpecPos1 = DOMOutputSpecPosX | {\r\n    [attr: string]: string;\r\n};\r\ndeclare type DOMOutputSpecPosX = string | 0 | [string, 0] | [string, {\r\n    [attr: string]: DOMCompatible;\r\n}, 0];\r\n/**\r\n * Defines the return type of the toDom methods for both Nodes and marks\r\n *\r\n * @remarks\r\n * This differs from the default Prosemirror type definition which seemed didn't\r\n * work at the time of writing.\r\n *\r\n * Additionally we don't want to support domNodes in the toDOM spec since this\r\n * will create problems once SSR is fully supported\r\n */\r\nexport declare type DOMOutputSpec = string | [string, 0?] | [string, 0?] | [string, {\r\n    [attr: string]: DOMCompatible;\r\n}, 0?] | [string, DOMOutputSpecPos1?, DOMOutputSpecPosX?, DOMOutputSpecPosX?, DOMOutputSpecPosX?, DOMOutputSpecPosX?, DOMOutputSpecPosX?, DOMOutputSpecPosX?, DOMOutputSpecPosX?, DOMOutputSpecPosX?, DOMOutputSpecPosX?];\r\n/**\r\n * The schema spec definition for a node extension\r\n */\r\nexport interface NodeExtensionSpec extends Pick<NodeSpec, 'content' | 'marks' | 'group' | 'inline' | 'atom' | 'attrs' | 'selectable' | 'draggable' | 'code' | 'defining' | 'isolating' | 'parseDOM' | 'toDebugString'> {\r\n    /**\r\n     * Defines the default way a node of this type should be serialized to\r\n     * DOM/HTML (as used by\r\n     * [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\r\n     *\r\n     * Should return a {@link DOMOutputSpec} that describes a DOM node, with an\r\n     * optional number zero (“hole”) in it to indicate where the node's content\r\n     * should be inserted.\r\n     */\r\n    toDOM?: (node: ProsemirrorNode) => DOMOutputSpec;\r\n}\r\n/**\r\n * The schema spec definition for a mark extension\r\n */\r\nexport interface MarkExtensionSpec extends Pick<MarkSpec, 'attrs' | 'inclusive' | 'excludes' | 'group' | 'spanning' | 'parseDOM'> {\r\n    /**\r\n     * Defines the default way marks of this type should be serialized to\r\n     * DOM/HTML.\r\n     */\r\n    toDOM?: (mark: Mark, inline: boolean) => DOMOutputSpec;\r\n}\r\n/**\r\n * The method signature used to call the Prosemirror `nodeViews`\r\n *\r\n * @param node - the node which uses this nodeView\r\n * @param view - the editor view used by this nodeView\r\n * @param getPos - a utility method to get the absolute cursor position of the\r\n * node.\r\n * @param decorations - a list of the decorations affecting this node view (in\r\n * case the node view needs to update it's presentation)\r\n */\r\nexport declare type NodeViewMethod<View extends NodeView = NodeView> = (node: ProsemirrorNode, view: EditorView, getPos: (() => number) | boolean, decorations: Decoration[]) => View;\r\n/**\r\n * The core shape of any remirror specific object.\r\n */\r\nexport interface RemirrorIdentifierShape {\r\n    [__INTERNAL_REMIRROR_IDENTIFIER_KEY__]: RemirrorIdentifier;\r\n}\r\n/**\r\n * The type of arguments acceptable for a selection.\r\n *\r\n * - Can be a selection\r\n * - A range of `{ from: number; to: number }`\r\n * - A single position with a `number`\r\n * - `'start' | 'end'`\r\n */\r\nexport declare type PrimitiveSelection = Selection | FromToParameter | number | 'start' | 'end' | 'all';\r\nexport {};\r\n",
      "index.d.ts": "export type { Decoration, DecorationSet, EditorSchema, EditorState, EditorView, Fragment, InputRule, Mapping, Mark, MarkType, NodeType, NodeView, Plugin, PluginKey, ProsemirrorNode, ProsemirrorPlugin, ResolvedPos, Selection, Slice, Transaction, } from './alias-types';\r\nexport type { CustomHandler, CustomHandlerKey, CustomHandlerKeyList, CustomHandlerShape, Dispose, Dynamic, DynamicKey, DynamicKeyList, DynamicShape, GetConstructorParameter, GetCustomHandler, GetDynamic, GetFixed, GetFixedCustomHandler, GetFixedDynamic, GetFixedProps, GetFixedStatic, GetFlippedStatic, GetHandler, GetMappedCustomHandler, GetMappedHandler, GetPartialDynamic, GetStatic, GetStaticAndDynamic, Handler, HandlerKey, HandlerKeyList, HandlerShape, RemoveAnnotation, Static, StaticKey, StaticKeyList, StaticShape, ValidOptions, } from './annotation-types';\r\nexport type { And, AnyConstructor, AnyFunction, ApplySchemaAttributes, Brand, DeepPartial, DeepString, Diff, EmptyShape, Flavor, Flavoring, FlipPartialAndRequired, GetRequiredKeys, IfEmpty, IfHasRequiredProperties, IfMatches, IfNoRequiredProperties, KeepPartialProperties, Literal, MakeNullable, MakeOptional, MakeReadonly, MakeRequired, MarkAttributes, NodeAttributes, NodeMarkOptions, NonNullableShape, Nullable, ObjectMark, PartialWithRequiredKeys, PickPartial, PickRequired, Position, Predicate, ProsemirrorAttributes, RegexTuple, RemoveFlavoring, RenderEnvironment, Replace, SchemaAttributes, SchemaAttributesObject, Shape, StrictReplace, StringKey, TupleValue, UndefinedFlipPartialAndRequired, UndefinedPickPartial, UnknownShape, Value, Writeable, } from './base-types';\r\nexport type { ChainedCommandFunction, CommandFunction, CommandFunctionParameter, DispatchFunction, DOMOutputSpec, GetAttributes, GetAttributesParameter, KeyBindingCommandFunction, KeyBindings, MarkExtensionSpec, NextParameter, NodeExtensionSpec, NodeMatch, NodeViewMethod, PrimitiveSelection, ProsemirrorCommandFunction, ProsemirrorKeyBindings, RemirrorContentType, RemirrorIdentifierShape, RemirrorJSON, StateJSON, } from './core-types';\r\nexport type { AttributesParameter, CallbackParameter, CompareStateParameter, DocParameter, EditorStateParameter, EditorViewParameter, ElementParameter, FromToParameter, MarkTypeParameter, MarkTypesParameter, NodeTypeParameter, NodeTypesParameter, NodeWithAttributes, NodeWithAttributesParameter, OptionalFromToParameter, OptionalMarkParameter, OptionalProsemirrorNodeParameter, PositionParameter, PosParameter, PredicateParameter, PreviousNextParameter, ProsemirrorNodeParameter, RangeParameter, RegExpParameter, ResolvedPosParameter, SchemaParameter, SelectionParameter, StateOrTransactionParameter, TextParameter, TransactionLifecycle, TransactionParameter, TransactionTransformer, } from './parameter-builders';\r\n",
      "parameter-builders.d.ts": "import type { EditorSchema, EditorState, EditorView, Mark, MarkType, NodeType, ProsemirrorNode, ResolvedPos, Selection, Transaction } from './alias-types';\r\nimport type { MakeOptional, MarkAttributes, NodeAttributes, Position, ProsemirrorAttributes } from './base-types';\r\n/**\r\n * A parameter builder interface containing the `view` property.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface EditorViewParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * An instance of the Prosemirror editor `view`.\r\n     */\r\n    view: EditorView<Schema>;\r\n}\r\n/**\r\n * A parameter builder interface containing the `schema` property.\r\n *\r\n * @typeParam GNodes - the names of the nodes within the editor schema.\r\n * @typeParam GMarks - the names of the marks within the editor schema.\r\n */\r\nexport interface SchemaParameter<Nodes extends string = string, Marks extends string = string> {\r\n    /**\r\n     * The Prosemirror schema being used for the current interface\r\n     */\r\n    schema: EditorSchema<Nodes, Marks>;\r\n}\r\n/**\r\n * A parameter builder interface containing the `state` property.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface EditorStateParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * A snapshot of the prosemirror editor state\r\n     */\r\n    state: EditorState<Schema>;\r\n}\r\nexport interface StateOrTransactionParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The shared types between a state and a transaction. Allows for commands to\r\n     * operate on either a state object or a transaction object.\r\n     */\r\n    stateOrTransaction: EditorState<Schema> | Transaction<Schema>;\r\n}\r\n/**\r\n * A parameter builder interface for comparing two instances of the editor state.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface CompareStateParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The previous snapshot of the prosemirror editor state.\r\n     */\r\n    oldState: EditorState<Schema>;\r\n    /**\r\n     * The latest snapshot of the prosemirror editor state.\r\n     */\r\n    newState: EditorState<Schema>;\r\n}\r\n/**\r\n * A parameter builder interface for a html dom `element`.\r\n */\r\nexport interface ElementParameter {\r\n    /**\r\n     * The target HTML element\r\n     */\r\n    element: HTMLElement;\r\n}\r\n/**\r\n * A parameter builder interface describing a `from`/`to` range.\r\n */\r\nexport interface FromToParameter {\r\n    /**\r\n     * The starting point\r\n     */\r\n    from: number;\r\n    /**\r\n     * The ending point\r\n     */\r\n    to: number;\r\n}\r\n/**\r\n * A parameter builder type which uses {@link FromToParameter} where `from` or `to`, or both\r\n * can be set as optional.\r\n *\r\n * @typeParam Key - the keys to set as optional (either `from` or `to`).\r\n */\r\nexport declare type OptionalFromToParameter<Key extends keyof FromToParameter> = MakeOptional<FromToParameter, Key>;\r\n/**\r\n * A parameter builder interface containing the `position` property.\r\n */\r\nexport interface PositionParameter {\r\n    /**\r\n     * Defines a generic position with coordinates\r\n     */\r\n    position: Position;\r\n}\r\n/**\r\n * A parameter builder interface containing the `attrs` property.\r\n */\r\nexport interface AttributesParameter {\r\n    /**\r\n     * An object describing the attrs for a prosemirror mark / node\r\n     */\r\n    attrs: ProsemirrorAttributes;\r\n}\r\n/**\r\n * A parameter builder interface containing the `attrs` property.\r\n */\r\nexport interface NodeAttributesParameter {\r\n    /**\r\n     * An object describing the attrs for a prosemirror node\r\n     */\r\n    attrs: NodeAttributes;\r\n}\r\n/**\r\n * This interface contains the default mark attributes.\r\n */\r\nexport interface MarkAttributesParameter {\r\n    /**\r\n     * An object describing the attrs for a mark.\r\n     */\r\n    attrs: MarkAttributes;\r\n}\r\n/**\r\n * A parameter builder interface containing the node `type` property.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface NodeTypeParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * A prosemirror node type instance.\r\n     */\r\n    type: NodeType<Schema>;\r\n}\r\n/**\r\n * A parameter builder interface containing the `types` property which takes a\r\n * single type or multiple types.\r\n *\r\n * @remarks\r\n *\r\n * This can be used to check whether a certain type matches any of these types.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface NodeTypesParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The prosemirror node types to use.\r\n     */\r\n    types: NodeType<Schema> | string | Array<NodeType<Schema> | string>;\r\n}\r\n/**\r\n * A parameter builder interface containing the `types` property which takes a\r\n * single type or multiple types.\r\n *\r\n * @remarks\r\n *\r\n * This can be used to check whether a certain type matches any of these types.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface MarkTypesParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The prosemirror node types to use.\r\n     */\r\n    types: MarkType<Schema> | Array<MarkType<Schema>>;\r\n}\r\n/**\r\n * A parameter builder interface containing the mark `type` property.\r\n *\r\n * @typeParam Schema - the underlying editor schema.\r\n */\r\nexport interface MarkTypeParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The prosemirror mark type instance.\r\n     */\r\n    type: MarkType<Schema>;\r\n}\r\nexport interface ProsemirrorNodeParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The prosemirror node\r\n     */\r\n    node: ProsemirrorNode<Schema>;\r\n}\r\nexport declare type NodeWithAttributes<Attributes extends NodeAttributes = NodeAttributes> = ProsemirrorNode & {\r\n    attrs: Attributes;\r\n};\r\nexport interface NodeWithAttributesParameter<Attributes extends NodeAttributes = NodeAttributes> {\r\n    /**\r\n     * A prosemirror node with a specific shape for `node.attrs`\r\n     */\r\n    node: NodeWithAttributes<Attributes>;\r\n}\r\nexport declare type MarkWithAttributes<Attributes extends MarkAttributes = MarkAttributes> = Mark & {\r\n    attrs: Attributes;\r\n};\r\nexport interface MarkWithAttributesParameter<Attributes extends MarkAttributes = MarkAttributes> {\r\n    /**\r\n     * A mark with a specific shape for `node.attrs`\r\n     */\r\n    mark: MarkWithAttributes<Attributes>;\r\n}\r\nexport interface DocParameter {\r\n    /**\r\n     * The parent doc node of the editor which contains all the other nodes.\r\n     * This is also a ProsemirrorNode\r\n     */\r\n    doc: ProsemirrorNode;\r\n}\r\nexport interface OptionalProsemirrorNodeParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The nullable prosemirror node which may or may not exist.\r\n     */\r\n    node: ProsemirrorNode<Schema> | null | undefined;\r\n}\r\nexport interface OptionalMarkParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The nullable prosemirror mark which may or may not exist.\r\n     */\r\n    mark: Mark<Schema> | null | undefined;\r\n}\r\nexport interface PosParameter {\r\n    /**\r\n     * The position of the referenced prosemirror item.\r\n     */\r\n    pos: number;\r\n}\r\nexport interface TransactionParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The prosemirror transaction\r\n     */\r\n    tr: Transaction<Schema>;\r\n}\r\nexport interface CallbackParameter {\r\n    /**\r\n     * A simple callback to run.\r\n     */\r\n    callback: () => void;\r\n}\r\n/**\r\n * Receives a transaction and returns an new transaction.\r\n *\r\n * Can be used to update the transaction and customise commands.\r\n */\r\nexport declare type TransactionTransformer<Schema extends EditorSchema = EditorSchema> = (tr: Transaction<Schema>, state: EditorState<Schema>) => Transaction<Schema>;\r\nexport interface TransactionLifecycle {\r\n    /**\r\n     * Transform the transaction before the command is run.\r\n     */\r\n    before: TransactionTransformer;\r\n    /**\r\n     * Transform the transaction after everything else but before dispatch.\r\n     */\r\n    after: TransactionTransformer;\r\n}\r\nexport interface RangeParameter<Key extends keyof FromToParameter = never> {\r\n    /**\r\n     * The from/to interface.\r\n     */\r\n    range: OptionalFromToParameter<Key>;\r\n}\r\nexport interface ResolvedPosParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * A prosemirror resolved pos with provides helpful context methods when working with\r\n     * a position in the editor.\r\n     */\r\n    $pos: ResolvedPos<Schema>;\r\n}\r\nexport interface TextParameter {\r\n    /**\r\n     * The text to insert or work with.\r\n     */\r\n    text: string;\r\n}\r\nexport interface SelectionParameter<Schema extends EditorSchema = EditorSchema> {\r\n    /**\r\n     * The text editor selection\r\n     */\r\n    selection: Selection<Schema>;\r\n}\r\nexport interface PredicateParameter<Parameter> {\r\n    /**\r\n     * The predicate function\r\n     */\r\n    predicate: (parameter: Parameter) => boolean;\r\n}\r\nexport interface RegExpParameter {\r\n    /**\r\n     * The regular expression to test against.\r\n     */\r\n    regexp: RegExp;\r\n}\r\n/**\r\n * Shows the previous and next value.\r\n */\r\nexport interface PreviousNextParameter<Type> {\r\n    /**\r\n     * The previous value.\r\n     */\r\n    previous: Type;\r\n    /**\r\n     * The next value.\r\n     */\r\n    next: Type;\r\n}\r\n"
    },
    "@remirror/core-utils": {
      "command-utils.d.ts": "import type { AttributesParameter, CommandFunction, CommandFunctionParameter, MarkType, MarkTypeParameter, NodeType, NodeTypeParameter, ProsemirrorAttributes, ProsemirrorCommandFunction, RangeParameter } from '@remirror/core-types';\r\ninterface UpdateMarkParameter extends Partial<RangeParameter>, Partial<AttributesParameter> {\r\n    /**\r\n     * The text to append.\r\n     *\r\n     * @defaultValue '''\r\n     */\r\n    appendText?: string;\r\n    /**\r\n     * The type of the\r\n     */\r\n    type: MarkType;\r\n}\r\n/**\r\n * Update the selection with the provided MarkType.\r\n */\r\nexport declare function updateMark(parameter: UpdateMarkParameter): CommandFunction;\r\n/**\r\n * Lift the selected block, or the closest ancestor block of the selection that\r\n * can be lifted, out of its parent node.\r\n *\r\n * Adapted from\r\n * https://github.com/ProseMirror/prosemirror-commands/blob/3126d5c625953ba590c5d3a0db7f1009f46f1571/src/commands.js#L212-L221\r\n */\r\nexport declare function lift({ tr, dispatch }: Pick<CommandFunctionParameter, 'tr' | 'dispatch'>): boolean;\r\n/**\r\n * Wrap the selection in a node of the given type with the given attributes.\r\n */\r\nexport declare function wrapIn(type: NodeType, attrs: ProsemirrorAttributes): CommandFunction;\r\n/**\r\n * Toggle between wrapping an inactive node with the provided node type, and\r\n * lifting it up into it's parent.\r\n *\r\n * @param type - the node type to toggle\r\n * @param attrs - the attrs to use for the node\r\n *\r\n * @public\r\n */\r\nexport declare function toggleWrap(type: NodeType, attrs?: ProsemirrorAttributes): CommandFunction;\r\n/**\r\n * Returns a command that tries to set the selected textblocks to the\r\n * given node type with the given attributes.\r\n */\r\nexport declare function setBlockType(type: NodeType, attrs?: ProsemirrorAttributes): CommandFunction;\r\n/**\r\n * Toggles a list item.\r\n *\r\n * @remarks\r\n *\r\n * When the provided list wrapper is inactive (e.g. ul) then wrap the list with\r\n * this type. When it is active then remove the selected line from the list.\r\n *\r\n * @param type - the list node type\r\n * @param itemType - the list item type (must be in the schema)\r\n *\r\n * @public\r\n */\r\nexport declare function toggleList(type: NodeType, itemType: NodeType): CommandFunction;\r\ninterface ToggleBlockItemParameter extends NodeTypeParameter, Partial<AttributesParameter> {\r\n    /**\r\n     * The type to toggle back to. Usually this is the paragraph node type.\r\n     */\r\n    toggleType: NodeType;\r\n}\r\n/**\r\n * Toggle a block between the provided type and toggleType.\r\n *\r\n * @param params - the destructured params\r\n *\r\n * @public\r\n */\r\nexport declare function toggleBlockItem(toggleParameter: ToggleBlockItemParameter): CommandFunction;\r\ninterface ReplaceTextParameter extends Partial<RangeParameter>, Partial<AttributesParameter> {\r\n    /**\r\n     * The text to append.\r\n     *\r\n     * @defaultValue '''\r\n     */\r\n    appendText?: string;\r\n    /**\r\n     * Optional text content to include.\r\n     */\r\n    content?: string;\r\n    /**\r\n     * The content type to be inserted in place of the range / selection.\r\n     */\r\n    type?: NodeType | MarkType;\r\n    /**\r\n     * Whether to keep the original selection after the replacement.\r\n     */\r\n    keepSelection?: boolean;\r\n}\r\n/**\r\n * Taken from https://stackoverflow.com/a/4900484\r\n *\r\n * Check that the browser is chrome. Supports passing a minimum version to check\r\n * that it is a greater than or equal to this version.\r\n */\r\nexport declare function isChrome(minVersion?: number): boolean;\r\n/**\r\n * Replaces text with an optional appended string at the end\r\n *\r\n * @param params - the destructured params\r\n *\r\n * @public\r\n */\r\nexport declare function replaceText(parameter: ReplaceTextParameter): CommandFunction;\r\ninterface RemoveMarkParameter extends MarkTypeParameter, Partial<RangeParameter<'to'>> {\r\n    /**\r\n     * Whether to expand empty selections to the current mark range\r\n     *\r\n     * @defaultValue `false`\r\n     */\r\n    expand?: boolean;\r\n}\r\n/**\r\n * Removes a mark from the current selection or provided range.\r\n *\r\n * @param params - the destructured params\r\n *\r\n * @public\r\n */\r\nexport declare function removeMark(parameter: RemoveMarkParameter): CommandFunction;\r\n/**\r\n * An empty (noop) command function.\r\n *\r\n * @remarks\r\n *\r\n * This is typically used to represent a default _do nothing_ action.\r\n */\r\nexport declare const emptyCommandFunction: ProsemirrorCommandFunction;\r\nexport {};\r\n",
      "core-utils.d.ts": "import type { EditorSchema, EditorState, ElementParameter, FromToParameter, MarkTypeParameter, NodeMatch, PluginKey, PrimitiveSelection, ProsemirrorNode, ProsemirrorNodeParameter, RemirrorContentType, RemirrorJSON, RenderEnvironment, ResolvedPos, SchemaParameter, Selection, StateOrTransactionParameter, Transaction } from '@remirror/core-types';\r\nimport { Mark, MarkType, NodeType, ResolvedPos as PMResolvedPos, Schema, Slice } from '@remirror/pm/model';\r\nimport { AllSelection, EditorState as PMEditorState, NodeSelection, Plugin, Selection as PMSelection, TextSelection, Transaction as PMTransaction } from '@remirror/pm/state';\r\n/**\r\n * Check to see if the passed value is a NodeType.\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isNodeType<Schema extends EditorSchema = EditorSchema>(value: unknown): value is NodeType<Schema>;\r\n/**\r\n * Check to see if the passed value is a MarkType.\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isMarkType<Schema extends EditorSchema = EditorSchema>(value: unknown): value is MarkType<Schema>;\r\n/**\r\n * Checks to see if the passed value is a ProsemirrorNode\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isProsemirrorNode<Schema extends EditorSchema = EditorSchema>(value: unknown): value is ProsemirrorNode<Schema>;\r\n/**\r\n * Checks to see if the passed value is a ProsemirrorMark\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isProsemirrorMark<Schema extends EditorSchema = EditorSchema>(value: unknown): value is Mark<Schema>;\r\n/**\r\n * Checks to see if the passed value is a Prosemirror Editor State\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isEditorState<Schema extends EditorSchema = EditorSchema>(value: unknown): value is PMEditorState<Schema>;\r\n/**\r\n * Checks to see if the passed value is a Prosemirror Transaction\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isTransaction<Schema extends EditorSchema = EditorSchema>(value: unknown): value is PMTransaction<Schema>;\r\n/**\r\n * Checks to see if the passed value is an instance of the editor schema\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isEditorSchema<Nodes extends string = string, Marks extends string = string>(value: unknown): value is Schema<Nodes, Marks>;\r\n/**\r\n * Predicate checking whether the selection is a `TextSelection`.\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isTextSelection<Schema extends EditorSchema = EditorSchema>(value: unknown): value is TextSelection<Schema>;\r\n/**\r\n * Predicate checking whether the selection is an `AllSelection`.\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isAllSelection<Schema extends EditorSchema = EditorSchema>(value: unknown): value is AllSelection<Schema>;\r\n/**\r\n * Predicate checking whether the value is a Selection\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isSelection<Schema extends EditorSchema = EditorSchema>(value: unknown): value is PMSelection<Schema>;\r\n/**\r\n * Predicate checking whether the value is a ResolvedPosition.\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isResolvedPos<Schema extends EditorSchema = EditorSchema>(value: unknown): value is PMResolvedPos<Schema>;\r\n/**\r\n * Predicate checking whether the selection is a NodeSelection\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isNodeSelection<Schema extends EditorSchema = EditorSchema>(value: unknown): value is NodeSelection<Schema>;\r\ninterface IsMarkActiveParameter<Schema extends EditorSchema = EditorSchema> extends MarkTypeParameter<Schema>, Partial<FromToParameter>, StateOrTransactionParameter<Schema> {\r\n}\r\n/**\r\n * Checks that a mark is active within the selected region, or the current\r\n * selection point is within a region with the mark active. Used by extensions\r\n * to implement their active methods.\r\n *\r\n * @public\r\n */\r\nexport declare function isMarkActive<Schema extends EditorSchema = EditorSchema>(parameter: IsMarkActiveParameter<Schema>): boolean;\r\n/**\r\n * Check if the specified type (NodeType) can be inserted at the current\r\n * selection point.\r\n *\r\n * @param state - the editor state\r\n * @param type - the node type\r\n *\r\n * @public\r\n */\r\nexport declare function canInsertNode(state: EditorState, type: NodeType): boolean;\r\n/**\r\n * Checks if a node looks like an empty document\r\n *\r\n * @param node - the prosemirror node\r\n *\r\n * @public\r\n */\r\nexport declare function isDocNodeEmpty(node: ProsemirrorNode): boolean;\r\n/**\r\n * Retrieve the attributes for a mark.\r\n *\r\n * @param state - the editor state\r\n * @param type - the mark type\r\n */\r\nexport declare function getMarkAttributes(state: EditorState, type: MarkType): {\r\n    [key: string]: any;\r\n};\r\n/**\r\n * Retrieve the start and end position of a mark\r\n *\r\n * @remarks\r\n *\r\n * @param pmPosition - the resolved prosemirror position\r\n * @param type - the mark type\r\n */\r\nexport declare function getMarkRange(pmPosition?: ResolvedPos | null, type?: MarkType | null | undefined): FromToParameter | false;\r\n/**\r\n * Retrieves the text content from a slice\r\n *\r\n * @remarks\r\n * A utility that's useful for pulling text content from a slice which is\r\n * usually created via `selection.content()`\r\n *\r\n * @param slice - the prosemirror slice\r\n *\r\n * @public\r\n */\r\nexport declare function getTextContentFromSlice(slice: Slice): string;\r\n/**\r\n * Takes an empty selection and expands it out to the nearest group not matching\r\n * the excluded characters.\r\n *\r\n * @remarks\r\n *\r\n * Can be used to find the nearest selected word. See {@link getSelectedWord}\r\n *\r\n * @param stateOrTransaction - the editor state\r\n * @param exclude - the regex pattern to exclude\r\n * @returns false if not a text selection or if no expansion available\r\n *\r\n * @public\r\n */\r\nexport declare function getSelectedGroup(stateOrTransaction: EditorState | Transaction, exclude: RegExp): FromToParameter | false;\r\n/**\r\n * Retrieves the nearest space separated word from the current selection.\r\n *\r\n * @remarks\r\n *\r\n * This always expands outward so that given: `The tw<start>o words<end>` The\r\n * selection would become `The <start>two words<end>`\r\n *\r\n * In other words it expands until it meets an invalid character.\r\n *\r\n * @param stateOrTransaction - the editor state\r\n *\r\n * @public\r\n */\r\nexport declare function getSelectedWord(stateOrTransaction: EditorState | Transaction): false | FromToParameter;\r\n/**\r\n * Retrieve plugin state of specified type\r\n *\r\n * @param plugin - the plugin or plugin key\r\n * @param state - the editor state\r\n *\r\n * @public\r\n */\r\nexport declare function getPluginState<State>(plugin: Plugin | PluginKey, state: EditorState): State;\r\n/**\r\n * Retrieve plugin meta data of specified type\r\n *\r\n * @param key - the plugin key\r\n * @param tr - the transaction to retrieve from\r\n *\r\n * @public\r\n */\r\nexport declare function getPluginMeta<Meta>(key: PluginKey | Plugin | string, tr: Transaction): Meta;\r\n/**\r\n * Set the plugin meta data\r\n *\r\n * @param key - the plugin key\r\n * @param tr - the transaction\r\n * @param data - the data to set\r\n *\r\n * @public\r\n */\r\nexport declare function setPluginMeta<Meta>(key: PluginKey | Plugin | string, tr: Transaction, data: Meta): Transaction;\r\n/**\r\n * Get matching string from a list or single value\r\n *\r\n * @remarks\r\n * Get attrs can be called with a direct match string or array of string\r\n * matches. This method should be used to retrieve the required string.\r\n *\r\n * The index of the matched array used defaults to 0 but can be updated via the\r\n * second parameter.\r\n *\r\n * @param match - the match(es)\r\n * @param index - the zero-index point from which to start\r\n *\r\n * @public\r\n */\r\nexport declare function getMatchString(match: string | string[], index?: number): string;\r\n/**\r\n * Checks whether the passed value is a valid dom node\r\n *\r\n * @param domNode - the dom node\r\n *\r\n * @public\r\n */\r\nexport declare function isDomNode(domNode: unknown): domNode is Node;\r\n/**\r\n * Checks for an element node like `<p>` or `<div>`.\r\n *\r\n * @param domNode - the dom node\r\n *\r\n * @public\r\n */\r\nexport declare function isElementDomNode(domNode: unknown): domNode is HTMLElement;\r\n/**\r\n * Finds the closest element which matches the passed selector\r\n *\r\n * @param domNode - the dom node\r\n * @param selector - the selector\r\n *\r\n * @public\r\n */\r\nexport declare function closestElement(domNode: Node | null | undefined, selector: string): HTMLElement | null;\r\n/**\r\n * Checks for a text node.\r\n *\r\n * @param domNode - the dom node\r\n *\r\n * @public\r\n */\r\nexport declare function isTextDomNode(domNode: unknown): domNode is Text;\r\n/**\r\n * Retrieve the line height from a an element\r\n *\r\n * @param params - the element params\r\n */\r\nexport declare function getLineHeight({ element }: ElementParameter): number;\r\n/**\r\n * Retrieve the nearest non-text node\r\n *\r\n * @param domNode - the dom node\r\n */\r\nexport declare function getNearestNonTextNode(domNode: Node): HTMLElement;\r\n/**\r\n * Checks whether the cursor is at the end of the state.doc\r\n *\r\n * @param state - the editor state\r\n */\r\nexport declare function atDocEnd(state: EditorState): boolean;\r\n/**\r\n * Checks whether the cursor is at the beginning of the state.doc\r\n *\r\n * @param state - the editor state\r\n */\r\nexport declare function atDocStart(state: EditorState): boolean;\r\n/**\r\n * Get the start position of the parent of the current resolve position\r\n *\r\n * @param pmPosition - the resolved prosemirror position\r\n */\r\nexport declare function startPositionOfParent(pmPosition: ResolvedPos): number;\r\n/**\r\n * Get the end position of the parent of the current resolve position\r\n *\r\n * @param pmPosition - the resolved prosemirror position\r\n *\r\n * @public\r\n */\r\nexport declare function endPositionOfParent(pmPosition: ResolvedPos): number;\r\n/**\r\n * Retrieve the current position of the cursor\r\n *\r\n * @param selection - the editor selection\r\n * @returns a resolved position only when the selection is a text selection\r\n *\r\n * @public\r\n */\r\nexport declare function getCursor(selection: Selection): ResolvedPos | null | undefined;\r\n/**\r\n * Checks to see whether the name of the passed node matches anything in the\r\n * list provided.\r\n *\r\n * @param node - the prosemirror node\r\n * @param nodeMatches - the list of possible matching nodes\r\n * @returns true if the node name is a match to any of the items in the\r\n * nodeMatches array\r\n *\r\n * @public\r\n */\r\nexport declare function nodeNameMatchesList(node: ProsemirrorNode | null | undefined, nodeMatches: NodeMatch[]): node is ProsemirrorNode;\r\n/**\r\n * Checks whether a Prosemirror node is the top level `doc` node\r\n *\r\n * @param node - the prosemirror node\r\n * @param schema - the prosemirror schema\r\n *\r\n * @public\r\n */\r\nexport declare function isDocNode(node: ProsemirrorNode | null | undefined, schema?: EditorSchema): boolean;\r\n/**\r\n * Checks whether the passed in JSON is a valid object node\r\n *\r\n * @param value - the value to check\r\n *\r\n * @public\r\n */\r\nexport declare function isRemirrorJSON(value: unknown): value is RemirrorJSON;\r\nexport interface CreateDocumentNodeParameter extends SchemaParameter, Partial<CustomDocParameter>, StringHandlerParameter {\r\n    /**\r\n     * The content to render\r\n     */\r\n    content: RemirrorContentType;\r\n    /**\r\n     * The fallback object node to use if unable to convert the value correctly\r\n     */\r\n    onError?: Fallback | CreateDocumentErrorHandler;\r\n    /**\r\n     * The selection that the user should have in the created node.\r\n     *\r\n     * TODO add `'start' | 'end' | number` for a better developer experience.\r\n     */\r\n    selection?: PrimitiveSelection;\r\n}\r\n/**\r\n * Get a valid selection from the primitive selection.\r\n */\r\nexport declare function getTextSelection(selection: PrimitiveSelection, doc: ProsemirrorNode): TextSelection;\r\nexport declare type CreateDocumentErrorHandler = (error?: Error) => Fallback;\r\nexport declare type Fallback = RemirrorJSON | ProsemirrorNode;\r\nexport interface StringHandlerParameter {\r\n    /**\r\n     * A function which transforms a string into a prosemirror node.\r\n     *\r\n     * @remarks\r\n     * Can be used to transform markdown / html or any other string format into a\r\n     * prosemirror node.\r\n     *\r\n     * See {@link fromHTML} for an example of how this could work.\r\n     */\r\n    stringHandler?: (params: FromStringParameter) => ProsemirrorNode;\r\n}\r\n/**\r\n * Creates a document node from the passed in content and schema.\r\n *\r\n * @param parameter - the destructured create document node params\r\n *\r\n * @public\r\n */\r\nexport declare function createDocumentNode(parameter: CreateDocumentNodeParameter): ProsemirrorNode;\r\n/**\r\n * Checks which environment should be used. Returns true when we are in the dom\r\n * environment.\r\n *\r\n * @param forceEnvironment - force a specific environment to override the\r\n * outcome\r\n */\r\nexport declare function shouldUseDomEnvironment(forceEnvironment?: RenderEnvironment): boolean;\r\n/**\r\n * Retrieves the document based on the environment we are currently in.\r\n *\r\n * @param forceEnvironment - force a specific environment\r\n */\r\nexport declare function getDocument(forceEnvironment?: RenderEnvironment): any;\r\ninterface CustomDocParameter {\r\n    /** The custom document to use (allows for ssr rendering) */\r\n    doc: Document;\r\n}\r\n/**\r\n * Convert a node into its DOM representative\r\n *\r\n * @param params - the from node params\r\n *\r\n * @public\r\n */\r\nexport declare function toDom({ node, schema, doc }: FromNodeParameter): DocumentFragment;\r\ninterface FromNodeParameter extends SchemaParameter, ProsemirrorNodeParameter, Partial<CustomDocParameter> {\r\n}\r\n/**\r\n * Convert a prosemirror node into it's HTML contents\r\n *\r\n * @param params - the from node params\r\n *\r\n * @public\r\n */\r\nexport declare function toHtml({ node, schema, doc }: FromNodeParameter): string;\r\ninterface FromStringParameter extends Partial<CustomDocParameter>, SchemaParameter {\r\n    /** The content  passed in an a string */\r\n    content: string;\r\n}\r\n/**\r\n * Convert a HTML string into Prosemirror node\r\n *\r\n * @param params - the from html params\r\n *\r\n * @public\r\n */\r\nexport declare function fromHtml(parameter: FromStringParameter): ProsemirrorNode;\r\n/**\r\n * A wrapper around `state.doc.toJSON` which returns the state as a\r\n * `RemirrorJSON` object.\r\n */\r\nexport declare function getRemirrorJSON(state: EditorState): RemirrorJSON;\r\ninterface IsStateEqualOptions {\r\n    /**\r\n     * Whether to compare the selection of the two states.\r\n     *\r\n     * @defaultValue `false`\r\n     */\r\n    checkSelection?: boolean;\r\n}\r\n/**\r\n * Check if two states are equal.\r\n */\r\nexport declare function isStateEqual(stateA: EditorState, stateB: EditorState, options?: IsStateEqualOptions): boolean;\r\n/**\r\n * Check that the nodes and marks present on schemaA are also present on schemaB.\r\n */\r\nexport declare function areSchemasCompatible(schemaA: EditorSchema, schemaB: EditorSchema): boolean;\r\n/**\r\n * A description of an invalid content block (representing a node or a mark).\r\n */\r\nexport interface InvalidContentBlock {\r\n    /**\r\n     * The type of content that is invalid.\r\n     */\r\n    type: 'mark' | 'node';\r\n    /**\r\n     * The name of the node or mark that is invalid.\r\n     */\r\n    name: string;\r\n    /**\r\n     * The json path to the invalid part of the `RemirrorJSON` object.\r\n     */\r\n    path: Array<string | number>;\r\n    /**\r\n     * Whether this block already has an invalid parent node. Invalid\r\n     * blocks are displayed from the deepest content outward. By checking whether\r\n     * a parent has already been identified as invalid you can choose to only\r\n     * transform the root invalid node.\r\n     */\r\n    invalidParentNode: boolean;\r\n    /**\r\n     * Whether this block has any invalid wrapping marks.\r\n     */\r\n    invalidParentMark: boolean;\r\n}\r\n/**\r\n * Transform invalid content to\r\n */\r\nexport declare type InvalidContentTransformer = (json: RemirrorJSON, blocks: InvalidContentBlock[]) => RemirrorJSON;\r\n/**\r\n * Valid transformation strategies.\r\n */\r\ndeclare type Transformer = InvalidContentTransformer | 'remove';\r\n/**\r\n * Checks for invalid JSON against the schema.\r\n *\r\n * TODO this currently only checks that the schema types exist. Eventually check\r\n * that the content is valid also.\r\n *\r\n * For example what if content is empty after invalid nodes are removed. This\r\n * would still cause an issue for the top level node.\r\n */\r\nexport declare function transformInvalidJSON(json: RemirrorJSON, schema: EditorSchema, transformer: Transformer): RemirrorJSON;\r\nexport {};\r\n",
      "environment.d.ts": "/**\r\n * A object with flags identifying the current environment.\r\n *\r\n * @public\r\n */\r\nexport declare const environment: {\r\n    /**\r\n     * Verifies that the environment has both a window and window.document\r\n     */\r\n    readonly isBrowser: boolean;\r\n    /**\r\n     * Verifies that the environment is JSDOM\r\n     */\r\n    readonly isJSDOM: boolean;\r\n    /**\r\n     * Verifies that the environment has a nodejs process and is therefore a node environment\r\n     */\r\n    readonly isNode: boolean;\r\n    /**\r\n     * True when running on macOS\r\n     */\r\n    readonly isMac: boolean;\r\n    /**\r\n     * Verify that this is an apple device either on the client or server.\r\n     */\r\n    readonly isApple: boolean;\r\n    /**\r\n     * True when running in DEVELOPMENT environment\r\n     */\r\n    readonly isDevelopment: boolean;\r\n    /**\r\n     * True when running unit tests\r\n     */\r\n    readonly isTest: boolean;\r\n    /**\r\n     * True when running in PRODUCTION environment\r\n     */\r\n    readonly isProduction: boolean;\r\n};\r\n",
      "index.d.ts": "export { emptyCommandFunction, isChrome, lift, removeMark, replaceText, setBlockType, toggleBlockItem, toggleList, toggleWrap, updateMark, wrapIn, } from './command-utils';\r\nexport type { CreateDocumentErrorHandler, CreateDocumentNodeParameter, Fallback, StringHandlerParameter, } from './core-utils';\r\nexport { areSchemasCompatible as areSchemaCompatible, atDocEnd, atDocStart, canInsertNode, closestElement, createDocumentNode, endPositionOfParent, fromHtml, getCursor, getDocument, getLineHeight, getMarkAttributes, getMarkRange, getMatchString, getNearestNonTextNode, getPluginMeta, getPluginState, getRemirrorJSON, getSelectedGroup, getSelectedWord, getTextContentFromSlice, getTextSelection, isAllSelection, isDocNode, isDocNodeEmpty, isDomNode, isEditorSchema, isEditorState, isElementDomNode, isMarkActive, isMarkType, isNodeSelection, isNodeType, isProsemirrorMark, isProsemirrorNode, isRemirrorJSON, isResolvedPos, isSelection, isStateEqual, isTextDomNode, isTextSelection, isTransaction, nodeNameMatchesList, setPluginMeta, shouldUseDomEnvironment, startPositionOfParent, toDom, toHtml, } from './core-utils';\r\nexport { environment } from './environment';\r\nexport type { ModifierKeys } from './keyboard-utils';\r\nexport { ALT, CAPS_LOCK, COMMAND, CTRL, isApple, mod, Modifier, SHIFT, WINDOWS, } from './keyboard-utils';\r\nexport type { NodeWithPosition } from './prosemirror-node-utils';\r\nexport { containsNodesOfType, findBlockNodes, findChildren, findChildrenByAttribute, findChildrenByMark, findChildrenByNode, findInlineNodes, findTextNodes, flattenNodeDescendants as flatten, } from './prosemirror-node-utils';\r\nexport { markInputRule, markPasteRule, nodeInputRule, plainInputRule } from './prosemirror-rules';\r\nexport type { FindProsemirrorNodeResult, FindSelectedNodeOfType, NonChainableCommandFunction, SchemaJSON, } from './prosemirror-utils';\r\nexport { applyClonedTransaction, chainCommands, chainKeyBindingCommands, cloneTransaction, convertCommand, findElementAtPosition, findNodeAtPosition, findNodeAtSelection, findParentNode, findParentNodeOfType, findPositionOfNodeAfter, findPositionOfNodeBefore, findSelectedNodeOfType, hasTransactionChanged, isNodeActive, isNodeOfType, isSelectionEmpty, markEqualsType, mergeKeyBindings, mergeProsemirrorKeyBindings, nonChainable, removeNodeAfter, removeNodeAtPosition, removeNodeBefore, replaceNodeAtPosition, schemaToJSON, } from './prosemirror-utils';\r\n",
      "keyboard-utils.d.ts": "/**\r\n * Keycode for ALT key.\r\n */\r\nexport declare const ALT: readonly [\"Alt\", \"⌥\"];\r\n/**\r\n * Keycode for CTRL key.\r\n */\r\nexport declare const CTRL: readonly [\"Control\", \"⌃\"];\r\n/**\r\n * Keycode for COMMAND/META key.\r\n */\r\nexport declare const COMMAND: readonly [\"Meta\", \"⌘\"];\r\n/**\r\n * Keycode for SHIFT key.\r\n */\r\nexport declare const SHIFT: readonly [\"Shift\", \"⇧\"];\r\n/**\r\n * Keycode for the windows key\r\n */\r\nexport declare const WINDOWS: string[];\r\n/**\r\n * Keycode and symbols for caps lock\r\n */\r\nexport declare const CAPS_LOCK: string[];\r\n/**\r\n * Shorthand names for common modifier key combinations which should `just` work on Apple and PC.\r\n */\r\nexport declare const Modifier: {\r\n    Primary: (isMac?: boolean) => \"Meta\"[] | \"Control\"[];\r\n    PrimaryShift: (isMac?: boolean) => (\"Shift\" | \"Meta\")[] | (\"Shift\" | \"Control\")[];\r\n    PrimaryAlt: (isMac?: boolean) => (\"Alt\" | \"Meta\")[] | (\"Control\" | \"Alt\")[];\r\n    Secondary: (isMac?: boolean) => (\"Shift\" | \"Alt\" | \"Meta\")[] | (\"Shift\" | \"Control\" | \"Alt\")[];\r\n    Access: (isMac?: boolean) => (\"Control\" | \"Alt\")[] | (\"Shift\" | \"Alt\")[];\r\n    Ctrl: () => \"Control\"[];\r\n    Alt: () => \"Alt\"[];\r\n    CtrlShift: () => (\"Shift\" | \"Control\")[];\r\n    Shift: () => \"Shift\"[];\r\n    ShiftAlt: () => (\"Shift\" | \"Alt\")[];\r\n};\r\n/**\r\n * The cross platform modifier key combination names.\r\n */\r\nexport declare type ModifierKeys = keyof typeof Modifier;\r\n/**\r\n * Returns true if this is an apple environment either on the server or the client.\r\n */\r\nexport declare function isApple(): boolean;\r\n/**\r\n * Create a consistent cross platform modifier string pattern.\r\n *\r\n * This can be used with the pressKeyWithModifier.\r\n *\r\n * ```ts\r\n * mod('Primary', 'A')\r\n * // => 'Control-A' // on PC\r\n * // => 'Cmd-A' // on Mac\r\n * ```\r\n *\r\n * @param modifier - A named modifier which is consistent across platforms\r\n *                  e.g. 'Primary' refers to 'Meta' on a mac and 'Control' on a PC\r\n * @param key - the key to press with the modifier. e.g. `Space` | `Enter`\r\n * @param [isApple] - a method which returns true when this is an apple device.\r\n */\r\nexport declare function mod(modifier: ModifierKeys, key: string, isMacFn?: typeof isApple): string;\r\n",
      "prosemirror-node-utils.d.ts": "import type { MarkTypeParameter, NodeTypeParameter, OptionalProsemirrorNodeParameter, PosParameter, PredicateParameter, ProsemirrorAttributes, ProsemirrorNode, ProsemirrorNodeParameter } from '@remirror/core-types';\r\ninterface DescendParameter {\r\n    /**\r\n     * Whether to descend into a node.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    descend: boolean;\r\n}\r\ndeclare type NodePredicateParameter = PredicateParameter<ProsemirrorNode>;\r\n/**\r\n * A node with it's start position.\r\n *\r\n * @public\r\n */\r\nexport interface NodeWithPosition extends ProsemirrorNodeParameter, PosParameter {\r\n}\r\ninterface FlattenParameter extends OptionalProsemirrorNodeParameter, Partial<DescendParameter> {\r\n}\r\n/**\r\n * Flattens descendants of a given `node`.\r\n *\r\n * @remarks\r\n *\r\n * It doesn't descend into a node when descend argument is `false` (defaults to `true`).\r\n *\r\n * ```ts\r\n * const children = flatten(node);\r\n * ```\r\n */\r\nexport declare function flattenNodeDescendants(parameter: FlattenParameter): NodeWithPosition[];\r\ninterface FindChildrenParameter extends FlattenParameter, NodePredicateParameter {\r\n}\r\n/**\r\n * Iterates over descendants of a given `node`, returning child nodes predicate returns truthy for.\r\n *\r\n * @remarks\r\n * It doesn't descend into a node when descend argument is `false` (defaults to `true`).\r\n *\r\n * ```ts\r\n * const textNodes = findChildren(node, child => child.isText, false);\r\n * ```\r\n */\r\nexport declare function findChildren(parameter: FindChildrenParameter): NodeWithPosition[];\r\n/**\r\n * Returns text nodes of a given `node`.\r\n *\r\n * @remarks\r\n * It doesn't descend into a node when descend argument is `false` (defaults to `true`).\r\n *\r\n * ```ts\r\n * const textNodes = findTextNodes(node);\r\n * ```\r\n */\r\nexport declare const findTextNodes: (parameters: FlattenParameter) => NodeWithPosition[];\r\n/**\r\n * Returns inline nodes of a given `node`.\r\n *\r\n * @remarks\r\n * It doesn't descend into a node when descend argument is `false` (defaults to `true`).\r\n *\r\n * ```ts\r\n * const inlineNodes = findInlineNodes(node);\r\n * ```\r\n */\r\nexport declare const findInlineNodes: (parameters: FlattenParameter) => NodeWithPosition[];\r\n/**\r\n * Returns block descendants of a given `node`.\r\n *\r\n * @remarks\r\n *\r\n * It doesn't descend into a node when descend argument is `false` (defaults to `true`).\r\n *\r\n * ```ts\r\n * const blockNodes = findBlockNodes(node);\r\n * ```\r\n */\r\nexport declare const findBlockNodes: (parameters: FlattenParameter) => NodeWithPosition[];\r\ninterface FindChildrenByAttrParameter extends FlattenParameter {\r\n    /**\r\n     * Runs a predicate check after receiving the attrs for the found node.\r\n     */\r\n    predicate: (attrs: ProsemirrorAttributes) => boolean;\r\n}\r\n/**\r\n * Iterates over descendants of a given `node`, returning child nodes predicate returns truthy for.\r\n *\r\n * @remarks\r\n *\r\n * It doesn't descend into a node when descend argument is `false` (defaults to `true`).\r\n *\r\n * ```ts\r\n * const mergedCells = findChildrenByAttr(table, attrs => attrs.colspan === 2);\r\n * ```\r\n */\r\nexport declare function findChildrenByAttribute(parameter: FindChildrenByAttrParameter): NodeWithPosition[];\r\ninterface FindChildrenByNodeParameter extends FlattenParameter, NodeTypeParameter {\r\n}\r\n/**\r\n * Iterates over descendants of a given `node`, returning child nodes of a given nodeType.\r\n *\r\n * @remarks\r\n *\r\n * It doesn't descend into a node when descend argument is `false` (defaults to `true`).\r\n *\r\n * ```ts\r\n * const cells = findChildrenByNode(table, schema.nodes.tableCell);\r\n * ```\r\n */\r\nexport declare function findChildrenByNode(parameter: FindChildrenByNodeParameter): NodeWithPosition[];\r\ninterface FindChildrenByMarkParameter extends FlattenParameter, MarkTypeParameter {\r\n}\r\n/**\r\n * Iterates over descendants of a given `node`, returning child nodes that have a mark of a given markType.\r\n *\r\n * @remarks\r\n *\r\n * It doesn't descend into a `node` when descend argument is `false` (defaults to `true`).\r\n *\r\n * ```ts\r\n * const nodes = findChildrenByMark(state.doc, schema.marks.strong);\r\n * ```\r\n */\r\nexport declare function findChildrenByMark(paramter: FindChildrenByMarkParameter): NodeWithPosition[];\r\ninterface ContainsParameter extends ProsemirrorNodeParameter, NodeTypeParameter {\r\n}\r\n/**\r\n * Returns `true` if a given node contains nodes of a given `nodeType`.\r\n *\r\n * @remarks\r\n *\r\n * ```ts\r\n * if (containsNodesOfType({ node: panel, type: schema.nodes.listItem })) {\r\n *   log('contained')\r\n * }\r\n * ```\r\n */\r\nexport declare function containsNodesOfType(parameter: ContainsParameter): boolean;\r\nexport {};\r\n",
      "prosemirror-rules.d.ts": "import type { GetAttributesParameter, MarkTypeParameter, NodeTypeParameter, RegExpParameter, TransactionParameter } from '@remirror/core-types';\r\nimport { InputRule } from '@remirror/pm/inputrules';\r\nimport { Plugin } from '@remirror/pm/state';\r\nexport interface BeforeDispatchParameter extends TransactionParameter {\r\n    /**\r\n     * The matches returned by the regex.\r\n     */\r\n    match: string[];\r\n    /**\r\n     * The start position of the most recently typed character.\r\n     */\r\n    start: number;\r\n    /**\r\n     * The end position of the most recently typed character.\r\n     */\r\n    end: number;\r\n}\r\nexport interface BaseInputRuleParameter {\r\n    /**\r\n     * A method which can be used to add more steps to the transaction after the\r\n     * input rule update but before the editor has dispatched to update to a new\r\n       state.\r\n     *\r\n     * ```ts\r\n     * import { nodeInputRule } from 'remirror/core';\r\n     *\r\n     * nodeInputRule({\r\n     *   type,\r\n     *   regexp: /abc/,\r\n     *     beforeDispatch?: (parameter: BeforeDispatchParameter) => void; : (tr)\r\n           => tr.insertText('hello')\r\n     * });\r\n     * ```\r\n     */\r\n    beforeDispatch?: (parameter: BeforeDispatchParameter) => void;\r\n}\r\nexport interface NodeInputRuleParameter extends Partial<GetAttributesParameter>, RegExpParameter, NodeTypeParameter, BaseInputRuleParameter {\r\n}\r\nexport interface PlainInputRuleParameter extends RegExpParameter, BaseInputRuleParameter {\r\n    /**\r\n     * A function that transforms the match into the desired value.\r\n     */\r\n    transformMatch: (match: string[]) => string | null | undefined;\r\n}\r\ninterface MarkInputRuleParameter extends Partial<GetAttributesParameter>, RegExpParameter, MarkTypeParameter, BaseInputRuleParameter {\r\n    /**\r\n     * Ignore the match when all characters in the capture group are whitespace.\r\n     *\r\n     * This helps stop situations from occurring where the a capture group matches\r\n     * but you don't want an update if it's all whitespace.\r\n     *\r\n     * @defaultValue `false`\r\n     */\r\n    ignoreWhitespace?: boolean;\r\n}\r\n/**\r\n * Creates a paste rule based on the provided regex for the provided mark type.\r\n *\r\n * TODO extract this into a separate package\r\n * - All contained in one plugin.\r\n * - Support for node paste rules\r\n * - Support for pasting different kinds of content.\r\n */\r\nexport declare function markPasteRule(parameter: MarkInputRuleParameter): Plugin<any, any>;\r\n/**\r\n * Creates an input rule based on the provided regex for the provided mark type.\r\n */\r\nexport declare function markInputRule(parameter: MarkInputRuleParameter): InputRule<any>;\r\n/**\r\n * Creates a node input rule based on the provided regex for the provided node\r\n * type.\r\n *\r\n * Input rules transform content as the user types based on whether a match is\r\n * found with a sequence of characters.\r\n */\r\nexport declare function nodeInputRule(parameter: NodeInputRuleParameter): InputRule<any>;\r\n/**\r\n * Creates a plain rule based on the provided regex. You can see this being used\r\n * in the `@remirror/extension-emoji` when it is setup to use plain text.\r\n */\r\nexport declare function plainInputRule(parameter: PlainInputRuleParameter): InputRule<any>;\r\nexport {};\r\n",
      "prosemirror-utils.d.ts": "import type { AttributesParameter, Brand, CommandFunction, EditorSchema, EditorState, EditorView, EmptyShape, Fragment, KeyBindingCommandFunction, KeyBindings, MarkTypesParameter, NodeTypeParameter, NodeTypesParameter, OptionalMarkParameter, OptionalProsemirrorNodeParameter, PosParameter, PredicateParameter, ProsemirrorCommandFunction, ProsemirrorKeyBindings, ProsemirrorNode, ProsemirrorNodeParameter, ResolvedPos, Selection, SelectionParameter, Shape, Transaction, TransactionParameter } from '@remirror/core-types';\r\nimport type { MarkSpec, NodeSpec } from '@remirror/pm/model';\r\ninterface NodeEqualsTypeParameter<Schema extends EditorSchema = any> extends NodeTypesParameter<Schema>, OptionalProsemirrorNodeParameter<Schema> {\r\n}\r\n/**\r\n * Checks if the type a given `node` has a given `nodeType`.\r\n */\r\nexport declare function isNodeOfType<Schema extends EditorSchema = any>(parameter: NodeEqualsTypeParameter<Schema>): boolean;\r\ninterface MarkEqualsTypeParameter<Schema extends EditorSchema = any> extends MarkTypesParameter<Schema>, OptionalMarkParameter<Schema> {\r\n}\r\n/**\r\n * Creates a new transaction object from a given transaction. This is useful\r\n * when applying changes to a transaction, that you may want to rollback.\r\n *\r\n * ```ts\r\n * function() applyUpdateIfValid(state: EditorState) {\r\n *   const tr = cloneTransaction(state.tr);\r\n *\r\n *   tr.insertText('hello');\r\n *\r\n *   if (!checkValid(tr)) {\r\n *     return;\r\n *   }\r\n *\r\n *   applyClonedTransaction({ clone: tr, tr: state.tr });\r\n * }\r\n * ```\r\n *\r\n * The above example applies a transaction to the cloned transaction then checks\r\n * to see if the changes are still valid and if they are applies the mutative\r\n * changes to the original state transaction.\r\n *\r\n * @param tr - the prosemirror transaction\r\n *\r\n * @public\r\n */\r\nexport declare function cloneTransaction(tr: Transaction): Transaction;\r\ninterface ApplyClonedTransactionParameter extends TransactionParameter {\r\n    /**\r\n     * The clone.\r\n     */\r\n    clone: Transaction;\r\n}\r\n/**\r\n * Apply the steps of a cloned transaction to the original transaction `tr`.\r\n */\r\nexport declare function applyClonedTransaction(parameter: ApplyClonedTransactionParameter): void;\r\n/**\r\n * Checks if the type a given `node` has a given `nodeType`.\r\n */\r\nexport declare function markEqualsType<Schema extends EditorSchema = any>(parameter: MarkEqualsTypeParameter<Schema>): boolean;\r\ninterface RemoveNodeAtPositionParameter extends TransactionParameter, PosParameter {\r\n}\r\n/**\r\n * Performs a `delete` transaction that removes a node at a given position with\r\n * the given `node`. `position` should point at the position immediately before\r\n * the node.\r\n *\r\n * @param position - the prosemirror position\r\n *\r\n * @public\r\n */\r\nexport declare function removeNodeAtPosition({ pos, tr }: RemoveNodeAtPositionParameter): Transaction<EditorSchema<string, string>>;\r\ninterface ReplaceNodeAtPositionParameter extends RemoveNodeAtPositionParameter {\r\n    content: Fragment | ProsemirrorNode | ProsemirrorNode[];\r\n}\r\n/**\r\n * Replaces the node at the provided position with the provided content.\r\n */\r\nexport declare function replaceNodeAtPosition({ pos, tr, content }: ReplaceNodeAtPositionParameter): Transaction<EditorSchema<string, string>>;\r\n/**\r\n * Returns DOM reference of a node at a given `position`.\r\n *\r\n * @remarks\r\n *\r\n * If the node type is of type `TEXT_NODE` it will return the reference of the\r\n * parent node.\r\n *\r\n * A simple use case\r\n *\r\n * ```ts\r\n * const element = findElementAtPosition($from.pos, view);\r\n * ```\r\n *\r\n * @param position - the prosemirror position\r\n * @param view - the editor view\r\n *\r\n * @public\r\n */\r\nexport declare function findElementAtPosition(position: number, view: EditorView): HTMLElement;\r\n/**\r\n * Iterates over parent nodes, returning the closest node and its start position\r\n * that the `predicate` returns truthy for. `start` points to the start position\r\n * of the node, `pos` points directly before the node.\r\n *\r\n * ```ts\r\n * const predicate = node => node.type === schema.nodes.blockquote;\r\n * const parent = findParentNode({predicate, selection});\r\n * ```\r\n */\r\nexport declare function findParentNode(parameter: FindParentNodeParameter): FindProsemirrorNodeResult | undefined;\r\n/**\r\n * Finds the node at the resolved position.\r\n *\r\n * @param $pos - the resolve position in the document\r\n */\r\nexport declare function findNodeAtPosition($pos: ResolvedPos): FindProsemirrorNodeResult;\r\n/**\r\n * Finds the node at the passed selection.\r\n */\r\nexport declare function findNodeAtSelection(selection: Selection): FindProsemirrorNodeResult;\r\ninterface FindParentNodeOfTypeParameter extends NodeTypesParameter, SelectionParameter {\r\n}\r\n/**\r\n *  Iterates over parent nodes, returning closest node of a given `nodeType`.\r\n *  `start` points to the start position of the node, `pos` points directly\r\n *  before the node.\r\n *\r\n *  ```ts\r\n *  const parent = findParentNodeOfType({types: schema.nodes.paragraph, selection});\r\n *  ```\r\n */\r\nexport declare function findParentNodeOfType(parameter: FindParentNodeOfTypeParameter): FindProsemirrorNodeResult | undefined;\r\n/**\r\n * Returns position of the previous node.\r\n *\r\n * ```ts\r\n * const pos = findPositionOfNodeBefore(tr.selection);\r\n * ```\r\n *\r\n * @param selection - the prosemirror selection\r\n */\r\nexport declare function findPositionOfNodeBefore<Schema extends EditorSchema = any>(value: Selection<Schema> | ResolvedPos<Schema> | EditorState<Schema> | Transaction<Schema>): FindProsemirrorNodeResult | undefined;\r\n/**\r\n * Updates the provided transaction to remove the node before.\r\n *\r\n * ```ts\r\n * dispatch(\r\n *    removeNodeBefore(state.tr)\r\n * );\r\n * ```\r\n *\r\n * @param tr\r\n *\r\n * @public\r\n */\r\nexport declare function removeNodeBefore(tr: Transaction): Transaction<any>;\r\ninterface FindSelectedNodeOfTypeParameter<Schema extends EditorSchema = any> extends NodeTypesParameter<Schema>, SelectionParameter<Schema> {\r\n}\r\nexport interface FindSelectedNodeOfType<Schema extends EditorSchema = any> extends FindProsemirrorNodeResult<Schema> {\r\n    /**\r\n     * The depth of the returned node.\r\n     */\r\n    depth: number;\r\n}\r\n/**\r\n * Returns a node of a given `nodeType` if it is selected. `start` points to the\r\n * start position of the node, `pos` points directly before the node.\r\n *\r\n * ```ts\r\n * const { extension, inlineExtension, bodiedExtension } = schema.nodes;\r\n *\r\n * const selectedNode = findSelectedNodeOfType({\r\n *   types: [extension, inlineExtension, bodiedExtension],\r\n *   selection,\r\n * });\r\n * ```\r\n */\r\nexport declare function findSelectedNodeOfType<Schema extends EditorSchema = any>(parameter: FindSelectedNodeOfTypeParameter<Schema>): FindSelectedNodeOfType<Schema> | undefined;\r\nexport interface FindProsemirrorNodeResult<Schema extends EditorSchema = any> extends ProsemirrorNodeParameter<Schema> {\r\n    /**\r\n     * The start position of the node.\r\n     */\r\n    start: number;\r\n    /**\r\n     * The end position of the node.\r\n     */\r\n    end: number;\r\n    /**\r\n     * Points to position directly before the node.\r\n     */\r\n    pos: number;\r\n    /**\r\n     * The depth the node. Equal to 0 if node is the root.\r\n     */\r\n    depth: number;\r\n}\r\ninterface FindParentNodeParameter extends SelectionParameter, PredicateParameter<ProsemirrorNode> {\r\n}\r\n/**\r\n * Returns the position of the node after the current position, selection or\r\n * state.\r\n *\r\n * ```ts\r\n * const pos = findPositionOfNodeBefore(tr.selection);\r\n * ```\r\n *\r\n * @param selection - the prosemirror selection\r\n */\r\nexport declare function findPositionOfNodeAfter<Schema extends EditorSchema = any>(value: Selection<Schema> | ResolvedPos<Schema> | EditorState<Schema>): FindProsemirrorNodeResult | undefined;\r\n/**\r\n * Update the transaction to delete the node after the current selection.\r\n *\r\n * ```ts\r\n * dispatch(removeNodeBefore(state.tr));\r\n * ```\r\n *\r\n * @param tr\r\n *\r\n * @public\r\n */\r\nexport declare function removeNodeAfter(tr: Transaction): Transaction<any>;\r\n/**\r\n * Checks whether the selection or state is currently empty.\r\n *\r\n * @param value - the transaction selection or state\r\n */\r\nexport declare function isSelectionEmpty(value: Transaction | EditorState | Selection): boolean;\r\n/**\r\n * Check to see if a transaction has changed either the document or the current\r\n * selection.\r\n *\r\n * @param tr - the transaction to check\r\n */\r\nexport declare function hasTransactionChanged(tr: Transaction): boolean;\r\ninterface IsNodeActiveParameter extends NodeTypeParameter, Partial<AttributesParameter> {\r\n    /**\r\n     * State or transaction parameter.\r\n     */\r\n    state: EditorState | Transaction;\r\n}\r\n/**\r\n * Checks whether the node type passed in is active within the region. Used by\r\n * extensions to implement the `active` method.\r\n *\r\n * To ignore `attrs` just leave the attrs object empty or undefined.\r\n *\r\n * @param params - the destructured node active parameters\r\n */\r\nexport declare function isNodeActive(parameter: IsNodeActiveParameter): boolean;\r\nexport interface SchemaJSON<Nodes extends string = string, Marks extends string = string> {\r\n    nodes: Record<Nodes, NodeSpec>;\r\n    marks: Record<Marks, MarkSpec>;\r\n}\r\n/**\r\n * Converts a schema to a simple json compatible object.\r\n */\r\nexport declare function schemaToJSON<Nodes extends string = string, Marks extends string = string>(schema: EditorSchema<Nodes, Marks>): SchemaJSON<Nodes, Marks>;\r\n/**\r\n * Wraps the default {@link ProsemirrorCommandFunction} and makes it compatible\r\n * with the default **remirror** {@link CommandFunction} call signature.\r\n *\r\n * By default this is non chainable since it uses the `state.tr` rather than the\r\n * accumulated `tr` property passed into all command functions.\r\n */\r\nexport declare function convertCommand<Schema extends EditorSchema = any, Extra extends Shape = EmptyShape>(commandFunction: ProsemirrorCommandFunction<Schema>): NonChainableCommandFunction<Schema, Extra>;\r\n/**\r\n * Brands a command as non chainable so that it can be excluded from the\r\n * inferred chainable commands.\r\n */\r\nexport declare type NonChainableCommandFunction<Schema extends EditorSchema = any, Extra extends Shape = EmptyShape> = Brand<CommandFunction<Schema, Extra>, 'non-chainable'>;\r\n/**\r\n * Marks a command function as non chainable. It will throw an error when\r\n * chaining is attempted.\r\n *\r\n * @remarks\r\n *\r\n * ```ts\r\n * const command = nonChainable(({ state, dispatch }) => {...});\r\n * ```\r\n */\r\nexport declare function nonChainable<Schema extends EditorSchema = any, Extra extends Shape = EmptyShape>(commandFunction: CommandFunction<Schema, Extra>): NonChainableCommandFunction<Schema, Extra>;\r\n/**\r\n * Similar to the chainCommands from the `prosemirror-commands` library. Allows\r\n * multiple commands to be chained together and runs until one of them returns\r\n * true.\r\n */\r\nexport declare function chainCommands<Schema extends EditorSchema = any, Extra extends object = object>(...commands: Array<CommandFunction<Schema, Extra>>): CommandFunction<Schema, Extra>;\r\n/**\r\n * Chains together keybindings, allowing for the sme key binding to be used\r\n * across multiple extensions without overriding behavior.\r\n *\r\n * @remarks\r\n *\r\n * When `next` is called it hands over full control of the keybindings to the\r\n * function that invokes it.\r\n */\r\nexport declare function chainKeyBindingCommands(...commands: KeyBindingCommandFunction[]): KeyBindingCommandFunction;\r\n/**\r\n * This merges an array of keybindings into one keybinding with the priority\r\n * given to the items earlier in the array. `index: 0` has priority over `index: 1`\r\n * which has priority over `index: 2` and so on.\r\n *\r\n * This is for use on remirror keybindings. See `mergeProsemirrorKeyBindings`\r\n * for transforming the methods into `ProsemirrorCommandFunction`'s.\r\n */\r\nexport declare function mergeKeyBindings<Schema extends EditorSchema = any>(extensionKeymaps: Array<KeyBindings<Schema>>): KeyBindings<Schema>;\r\n/**\r\n * This merges an array of keybindings into one keybinding with the priority\r\n * given to the items earlier in the array. `index: 0` has priority over `index: 1`\r\n * which has priority over `index: 2` and so on.\r\n */\r\nexport declare function mergeProsemirrorKeyBindings<Schema extends EditorSchema = any>(extensionKeymaps: Array<KeyBindings<Schema>>): ProsemirrorKeyBindings<Schema>;\r\nexport {};\r\n"
    },
    "@remirror/extension-annotation": {
      "actions.d.ts": "import type { Annotation, AnnotationData } from './types';\r\nexport declare enum ActionType {\r\n    ADD_ANNOTATION = 0,\r\n    REMOVE_ANNOTATIONS = 1,\r\n    SET_ANNOTATIONS = 2,\r\n    UPDATE_ANNOTATION = 3\r\n}\r\nexport interface AddAnnotationAction<A extends Annotation> {\r\n    type: ActionType.ADD_ANNOTATION;\r\n    from: number;\r\n    to: number;\r\n    annotationData: AnnotationData<A>;\r\n}\r\nexport interface UpdateAnnotationAction<A extends Annotation> {\r\n    type: ActionType.UPDATE_ANNOTATION;\r\n    annotationId: string;\r\n    annotationData: AnnotationData<A>;\r\n}\r\nexport interface RemoveAnnotationsAction {\r\n    type: ActionType.REMOVE_ANNOTATIONS;\r\n    annotationIds: string[];\r\n}\r\nexport interface SetAnnotationsAction<A extends Annotation> {\r\n    type: ActionType.SET_ANNOTATIONS;\r\n    annotations: A[];\r\n}\r\n",
      "annotation-extension.d.ts": "import { CommandFunction, CreatePluginReturn, PlainExtension } from '@remirror/core';\r\nimport { DecorationSet } from '@remirror/pm/view';\r\nimport type { Annotation, AnnotationData, AnnotationOptions } from './types';\r\n/**\r\n * This extension allows to annotate the content in your editor.\r\n * Extend the Annotation interface to store application specific\r\n * information like tags or color.\r\n */\r\nexport declare class AnnotationExtension<A extends Annotation = Annotation> extends PlainExtension<AnnotationOptions> {\r\n    get name(): \"annotation\";\r\n    /**\r\n     * Create the custom code block plugin which handles the delete key amongst other things.\r\n     */\r\n    createPlugin(): CreatePluginReturn<DecorationSet>;\r\n    createCommands(): {\r\n        /**\r\n         * Adds an annotation spanning the currently selected content\r\n         */\r\n        addAnnotation: (annotationData: AnnotationData<A>) => CommandFunction;\r\n        /**\r\n         * Updates an existing annotation with a new value\r\n         */\r\n        updateAnnotation: (id: string, annotationDataWithoutId: Omit<AnnotationData<A>, 'id'>) => CommandFunction;\r\n        /**\r\n         * Removes a list of annotations\r\n         */\r\n        removeAnnotations: (ids: string[]) => CommandFunction;\r\n        /**\r\n         * Sets the annotation. Use this to initialize the extension based on\r\n         * loaded data\r\n         */\r\n        setAnnotations: (annotations: A[]) => CommandFunction;\r\n    };\r\n    createHelpers(): {\r\n        /**\r\n         * @returns all annotations in the editor\r\n         */\r\n        getAnnotations: () => A[];\r\n        /**\r\n         * @returns all annotations at a specific position in the editor\r\n         */\r\n        getAnnotationsAt: (pos: number) => A[];\r\n    };\r\n}\r\n",
      "index.d.ts": "export type { Annotation, AnnotationOptions } from './types';\r\nexport { AnnotationExtension } from './annotation-extension';\r\nexport { createCenteredAnnotationPositioner } from './positioners';\r\n",
      "positioners.d.ts": "import { Coords, Positioner } from '@remirror/extension-positioner';\r\nimport type { Annotation } from './types';\r\n/**\r\n * You can pass `helpers.getAnnotationsAt`, which implements the required\r\n * behavior.\r\n *\r\n * @returns the annotations at a specific position\r\n */\r\ndeclare type GetAnnotationsAt = (pos: number) => Annotation[];\r\n/**\r\n * Render a positioner which is centered around a selected annotation.\r\n *\r\n * @remarks\r\n *\r\n * The menu will horizontally center itself `from` / `to` bounds of the current\r\n * selected annotation.\r\n *\r\n * - `right` is undefined\r\n * - `left` will center your element based on the width of the current selected\r\n *   annotation\r\n *   .\r\n * - `bottom` absolutely positions the element below the selected annotation.\r\n * - `top` absolutely positions the element above the selected annotation\r\n */\r\nexport declare const createCenteredAnnotationPositioner: (getAnnotationsAt: GetAnnotationsAt) => Positioner<{\r\n    start: Coords;\r\n    end: Coords;\r\n}>;\r\nexport {};\r\n",
      "types.d.ts": "export interface AnnotationOptions {\r\n    /**\r\n     * Class name to set for all annotations.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Set this option to use a custom style for\r\n     * annotation. Note that you can style additionally individual annotations via\r\n     * Annotation.className.\r\n     */\r\n    annotationClassName?: string;\r\n}\r\nexport interface Annotation {\r\n    /**\r\n     * Unique identifier of the annotation\r\n     */\r\n    id: string;\r\n    /**\r\n     * Document position where the annotation starts\r\n     */\r\n    from: number;\r\n    /**\r\n     * Document position where the annotation ends\r\n     */\r\n    to: number;\r\n    /**\r\n     * Plain text of what is annotated, i.e. content between from->start.\r\n     * This allows applications fetching the annotation to work with them without\r\n     * having to query Prosemirror for the text.\r\n     */\r\n    text: string;\r\n    /**\r\n     * Classname added to the annotation when it's rendered. This can be used\r\n     * e.g. to have annotations in different colors\r\n     */\r\n    className?: string;\r\n}\r\n/**\r\n * Annotation without the fields managed by Prosemirror\r\n */\r\nexport declare type AnnotationData<A extends Annotation> = Omit<A, 'from' | 'to' | 'text'>;\r\n",
      "utils.d.ts": "import type { EditorState } from '@remirror/core';\r\nimport { Decoration } from '@remirror/pm/view';\r\nimport type { Annotation, AnnotationData } from './types';\r\ninterface ToDecorationOptions<A extends Annotation> {\r\n    from: number;\r\n    to: number;\r\n    annotationData: AnnotationData<A>;\r\n    annotationClassName: string;\r\n}\r\nexport declare function toDecoration<A extends Annotation>(options: ToDecorationOptions<A>): Decoration;\r\ninterface ToAnnotationOptions {\r\n    state: EditorState;\r\n    decoration: Decoration;\r\n}\r\nexport declare function toAnnotation<A extends Annotation>(options: ToAnnotationOptions): A;\r\nexport {};\r\n"
    },
    "@remirror/extension-auto-link": {
      "auto-link-extension.d.ts": "import { ApplySchemaAttributes, CreatePluginReturn, Handler, MarkExtension, MarkExtensionSpec, Static } from '@remirror/core';\r\n/**\r\n * An auto complete auto decorated linker. This is more aggressive than the\r\n * `@remirror/extension-link` in that it wraps any url like string as a mark.\r\n *\r\n * It's inspired by the behavior of social sites like `twitter`.\r\n */\r\nexport declare class AutoLinkExtension extends MarkExtension<AutoLinkOptions> {\r\n    get name(): \"autoLink\";\r\n    createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n    createPasteRules(): import(\"@remirror/pm/state\").Plugin<any, any>[];\r\n    createPlugin(): CreatePluginReturn;\r\n}\r\nexport interface UrlUpdateHandlerParameter {\r\n    set: Set<string>;\r\n    urls: string[];\r\n}\r\n/**\r\n * Can be an empty string which sets url's to '//google.com'.\r\n */\r\nexport declare type DefaultProtocol = 'http:' | 'https:' | '';\r\nexport interface AutoLinkOptions {\r\n    /**\r\n     * The regex matcher for matching against the RegExp. The matcher must capture\r\n     * the URL part of the string as it's first match. Take a look at the default\r\n     * value.\r\n     *\r\n     * @defaultValue\r\n     * `/((http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[\\da-z]+([.-][\\da-z]+)*\\.[a-z]{2,5}(:\\d{1,5})?(\\/.*)?)/gi`\r\n     */\r\n    urlRegex?: Static<RegExp>;\r\n    /**\r\n     * This handler is called every time the matched urls are updated.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    onUrlUpdate?: Handler<(parameter: UrlUpdateHandlerParameter) => void>;\r\n    /**\r\n     * The default protocol to use when it can't be inferred\r\n     */\r\n    defaultProtocol?: DefaultProtocol;\r\n}\r\n",
      "index.d.ts": "export type { AutoLinkOptions, DefaultProtocol, UrlUpdateHandlerParameter, } from './auto-link-extension';\r\nexport { AutoLinkExtension } from './auto-link-extension';\r\n"
    },
    "@remirror/extension-bidi": {
      "bidi-extension.d.ts": "import type { CreatePluginReturn, IdentifierSchemaAttributes, NodeAttributes, OnSetOptionsParameter, Static } from '@remirror/core';\r\nimport { PlainExtension } from '@remirror/core';\r\nexport interface BidiOptions {\r\n    /**\r\n     * This is the direction that is used when the algorithm is not quite sure.\r\n     */\r\n    defaultDirection?: null | 'ltr' | 'rtl';\r\n    /**\r\n     * Whether or not the extension should automatically infer the direction as you type.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    autoUpdate?: boolean;\r\n    /**\r\n     * The names of the nodes to exclude.\r\n     *\r\n     * @defaultValue `[]`\r\n     */\r\n    excludeNodes?: Static<readonly string[]>;\r\n}\r\n/**\r\n * An extension which adds bi-directional text support to your editor.\r\n */\r\nexport declare class BidiExtension extends PlainExtension<BidiOptions> {\r\n    #private;\r\n    get name(): \"bidi\";\r\n    /**\r\n     * Add the bidi property to the top level editor attributes `doc`.\r\n     */\r\n    createAttributes(): NodeAttributes;\r\n    /**\r\n     * Add the `dir` to all the inner node types.\r\n     */\r\n    createSchemaAttributes: () => IdentifierSchemaAttributes[];\r\n    /**\r\n     * Create the plugin that ensures the node has the correct `dir` value on each\r\n     * state update.\r\n     */\r\n    createPlugin(): CreatePluginReturn<boolean>;\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<BidiOptions>): void;\r\n    /**\r\n     * Create the `SchemaAttributesObject`\r\n     */\r\n    private dir;\r\n    /**\r\n     * Get the direction of the text.\r\n     */\r\n    private getDirection;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ExtraNodeAttributes {\r\n            /**\r\n             * This attribute grants control over bidirectional language support.\r\n             */\r\n            dir?: 'ltr' | 'rtl';\r\n        }\r\n    }\r\n}\r\n",
      "index.d.ts": "export type { BidiOptions } from './bidi-extension';\r\nexport { BidiExtension } from './bidi-extension';\r\n"
    },
    "@remirror/extension-blockquote": {
      "blockquote-extension.d.ts": "import { ApplySchemaAttributes, CommandFunction, KeyBindings, NodeExtension, NodeExtensionSpec } from '@remirror/core';\r\n/**\r\n * Adds a blockquote to the editor.\r\n */\r\nexport declare class BlockquoteExtension extends NodeExtension {\r\n    get name(): \"blockquote\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the blockquote at the current selection.\r\n         *\r\n         * If none exists one will be created or the existing blockquote content will be\r\n         * lifted out of the blockquote node.\r\n         *\r\n         * ```ts\r\n         * actions.blockquote();\r\n         * ```\r\n         */\r\n        toggleBlockquote: () => CommandFunction;\r\n    };\r\n    createKeymap(): KeyBindings;\r\n    createInputRules(): import(\"@remirror/pm/inputrules\").InputRule<any>[];\r\n}\r\n",
      "index.d.ts": "export * from './blockquote-extension';\r\n"
    },
    "@remirror/extension-bold": {
      "bold-extension.d.ts": "import { ApplySchemaAttributes, CommandFunction, ExtensionTag, FromToParameter, InputRule, MarkExtension, MarkExtensionSpec, Static } from '@remirror/core';\r\ndeclare type FontWeightProperty = '-moz-initial' | 'inherit' | 'initial' | 'revert' | 'unset' | 'bold' | 'normal' | 'bolder' | 'lighter' | number;\r\nexport interface BoldOptions {\r\n    /**\r\n     * Optionally set the font weight property for this extension.\r\n     */\r\n    weight?: Static<FontWeightProperty>;\r\n}\r\n/**\r\n * When added to your editor it will provide the `bold` command which makes the text under the cursor /\r\n * or at the provided position range bold.\r\n */\r\nexport declare class BoldExtension extends MarkExtension<BoldOptions> {\r\n    get name(): \"bold\";\r\n    readonly tags: ExtensionTag[];\r\n    createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n    createKeymap(): {\r\n        'Mod-b': CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createInputRules(): InputRule[];\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the bold styling on and off. Remove the formatting if any\r\n         * matching bold formatting within the selection or provided range.\r\n         */\r\n        toggleBold: (range?: FromToParameter) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Set the bold formatting for the provided range.\r\n         *\r\n         * TODO add selection support.\r\n         * TODO add check to see that provided range is valid.\r\n         */\r\n        setBold: (range: FromToParameter) => CommandFunction;\r\n        /**\r\n         * Remove the bold formatting from the provided range.\r\n         *\r\n         * TODO add selection support.\r\n         * TODO add check that the provided range is valid.\r\n         */\r\n        removeBold: (range: FromToParameter) => CommandFunction;\r\n    };\r\n}\r\nexport {};\r\n",
      "index.d.ts": "export type { BoldOptions } from './bold-extension';\r\nexport { BoldExtension } from './bold-extension';\r\n"
    },
    "@remirror/extension-code": {
      "code-extension.d.ts": "import { ApplySchemaAttributes, InputRule, KeyBindings, MarkExtension, MarkExtensionSpec, Plugin } from '@remirror/core';\r\n/**\r\n * Add a `code` mark to the editor. This is used to mark inline text as a code snippet.\r\n */\r\nexport declare class CodeExtension extends MarkExtension {\r\n    get name(): \"code\";\r\n    createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n    createKeymap(): KeyBindings;\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the current selection as a code mark.\r\n         */\r\n        toggleCode: () => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createInputRules(): InputRule[];\r\n    createPasteRules(): Plugin[];\r\n}\r\n",
      "index.d.ts": "export { CodeExtension } from './code-extension';\r\n"
    },
    "@remirror/extension-code-block": {
      "code-block-extension.d.ts": "import { ApplySchemaAttributes, CreatePluginReturn, KeyBindings, NodeExtension, NodeExtensionSpec, OnSetOptionsParameter, PosParameter } from '@remirror/core';\r\nimport { CodeBlockState } from './code-block-plugin';\r\nimport type { CodeBlockAttributes, CodeBlockOptions } from './code-block-types';\r\nimport { getLanguage } from './code-block-utils';\r\nexport declare class CodeBlockExtension extends NodeExtension<CodeBlockOptions> {\r\n    get name(): \"codeBlock\";\r\n    /**\r\n     * Add the languages to the environment if they have not yet been added.\r\n     */\r\n    protected init(): void;\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createCommands(): {\r\n        /**\r\n         * Call this method to toggle the code block.\r\n         *\r\n         * @remarks\r\n         *\r\n         * ```ts\r\n         * actions.toggleCodeBlock({ language: 'ts' });\r\n         * ```\r\n         *\r\n         * The above makes the current node a codeBlock with the language ts or\r\n         * remove the code block altogether.\r\n         */\r\n        toggleCodeBlock: (attributes: Partial<CodeBlockAttributes>) => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Creates a code at the current position.\r\n         *\r\n         * ```ts\r\n         * commands.createCodeBlock({ language: 'js' });\r\n         * ```\r\n         */\r\n        createCodeBlock: (attributes: CodeBlockAttributes) => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Update the code block at the current position. Primarily this is used\r\n         * to change the language.\r\n         *\r\n         * ```ts\r\n         * if (commands.updateCodeBlock.isEnabled()) {\r\n         *   commands.updateCodeBlock({ language: 'markdown' });\r\n         * }\r\n         * ```\r\n         */\r\n        updateCodeBlock: (attributes: CodeBlockAttributes) => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Format the code block with the code formatting function passed as an\r\n         * option.\r\n         *\r\n         * Code formatters (like prettier) add a lot to the bundle size and hence\r\n         * it is up to you to provide a formatter which will be run on the entire\r\n         * code block when this method is used.\r\n         *\r\n         * ```ts\r\n         * if (actions.formatCodeBlock.isActive()) {\r\n         *   actions.formatCodeBlockFactory();\r\n         *   // Or with a specific position\r\n         *   actions.formatCodeBlock({ pos: 100 }) // to format a separate code block\r\n         * }\r\n         * ```\r\n         */\r\n        formatCodeBlock: (parameter?: Partial<PosParameter>) => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    /**\r\n     * Create an input rule that listens converts the code fence into a code block\r\n     * when typing triple back tick followed by a space.\r\n     */\r\n    createInputRules(): any;\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<CodeBlockOptions>): void;\r\n    /**\r\n     * Create specific keyboard bindings for the code block.\r\n     */\r\n    createKeymap(): KeyBindings;\r\n    /**\r\n     * Create the custom code block plugin which handles the delete key amongst other things.\r\n     */\r\n    createPlugin(): CreatePluginReturn<CodeBlockState>;\r\n    /**\r\n     * Register passed in languages.\r\n     */\r\n    private registerLanguages;\r\n}\r\nexport { getLanguage };\r\n",
      "code-block-plugin.d.ts": "import { CompareStateParameter, EditorState, NodeExtension, NodeType, TransactionParameter } from '@remirror/core';\r\nimport { DecorationSet } from '@remirror/pm/view';\r\nimport type { CodeBlockOptions } from './code-block-types';\r\nexport declare class CodeBlockState {\r\n    #private;\r\n    /**\r\n     * The set of cached decorations to minimise dom updates\r\n     */\r\n    decorationSet: DecorationSet;\r\n    constructor(type: NodeType, extension: NodeExtension<CodeBlockOptions>);\r\n    /**\r\n     * Creates the initial set of decorations\r\n     */\r\n    init(state: EditorState): this;\r\n    /**\r\n     * Recreate all the decorations again for all the provided blocks.\r\n     */\r\n    private refreshDecorationSet;\r\n    /**\r\n     * Run through each step in the transaction and check whether the change\r\n     * occurred within one of the active code blocks.\r\n     *\r\n     * TODO this should actually be used to update the decorations for the blocks.\r\n     */\r\n    private numberOfChangedBlocks;\r\n    /**\r\n     * True when number of blocks in the document has changed.\r\n     */\r\n    private sizeHasChanged;\r\n    /**\r\n     * True when more than one codeBlock has changed content.\r\n     */\r\n    private multipleChangesToBlocks;\r\n    /**\r\n     * Apply the state and update decorations when something has changed.\r\n     */\r\n    apply({ tr, oldState, newState }: ApplyParameter): this;\r\n    /**\r\n     * Removes all decorations which relate to the changed block node before creating new decorations\r\n     * and adding them to the decorationSet.\r\n     */\r\n    private updateDecorationSet;\r\n    private manageDecorationSet;\r\n    /**\r\n     * Flags that a deletion has just occurred.\r\n     */\r\n    setDeleted(deleted: boolean): void;\r\n}\r\ninterface ApplyParameter extends TransactionParameter, CompareStateParameter {\r\n}\r\nexport {};\r\n",
      "code-block-types.d.ts": "import type { RefractorSyntax } from 'refractor/core';\r\nimport type { LiteralUnion } from 'type-fest';\r\nimport type { ProsemirrorAttributes } from '@remirror/core';\r\n/**\r\n * The default supported syntax themes.\r\n */\r\nexport declare type SyntaxTheme = 'a11y-dark' | 'atom-dark' | 'base16-ateliersulphurpool.light' | 'cb' | 'darcula' | 'dracula' | 'duotone-dark' | 'duotone-earth' | 'duotone-forest' | 'duotone-light' | 'duotone-sea' | 'duotone-space' | 'ghcolors' | 'hopscotch' | 'pojoaque' | 'vs' | 'xonokai';\r\nexport interface CodeBlockOptions {\r\n    /**\r\n     * Import languages from refractor.\r\n     *\r\n     * @remarks\r\n     *\r\n     * ```ts\r\n     * import jsx from 'refractor/lang/jsx'\r\n     * import typescript from 'refractor/lang/typescript'\r\n     * ```\r\n     *\r\n     * And pass them into the config when initializing this extension.\r\n     *\r\n     * ```ts\r\n     * import { CodeBlockExtension } from '@remirror/extension-code-block';\r\n     *\r\n     * new CodeBlockExtension({ supportedLanguages: [typescript, jsx] })\r\n     * ```\r\n     *\r\n     * Or as a component\r\n     *\r\n     * ```tsx\r\n     * <RemirrorManager>\r\n     *   <RemirrorExtension Constructor={CodeBlockExtension} supportedLanguages={[typescript, jsx]} />\r\n     * </RemirrorManager>\r\n     * ```\r\n     *\r\n     * By default refractor bundles the following languages: `markup`, `css`, `clike`, `js`\r\n     *\r\n     * @defaultValue `[]`\r\n     */\r\n    supportedLanguages?: RefractorSyntax[];\r\n    /**\r\n     * A keyboard shortcut to trigger formatting the current block.\r\n     *\r\n     * @defaultValue `Alt-Shift-F` (Mac) `Shift-Ctrl-F` (PC)\r\n     */\r\n    keyboardShortcut?: string;\r\n    /**\r\n     * The default language to use when none is provided.\r\n     *\r\n     * It is a property so it can change during the editor's life.\r\n     *\r\n     * @defaultValue 'markup'\r\n     */\r\n    defaultLanguage?: string;\r\n    /**\r\n     * The theme to use for the codeBlocks.\r\n     *\r\n     * @remarks\r\n     * Currently only one theme can be set per editor.\r\n     *\r\n     * Set this to false if you want to manage the syntax styles by yourself.\r\n     * For tips on how this could be accomplished see {@link https://prismjs.com}\r\n     *\r\n     * @defaultValue 'atomDark'\r\n     */\r\n    syntaxTheme?: LiteralUnion<SyntaxTheme, string>;\r\n    /**\r\n     * Provide a formatter which can format the provided source code.\r\n     *\r\n     * @returns an object when formatting was successful and false when the code could not be formatted (a noop).\r\n     */\r\n    formatter?: CodeBlockFormatter;\r\n    /**\r\n     * The name of the node that the code block should toggle back and forth from.\r\n     *\r\n     * @defaultValue 'paragraph'\r\n     */\r\n    toggleName?: string;\r\n}\r\n/**\r\n * A function which takes code and formats the code.\r\n *\r\n * TODO - possibly allow error management if failure is because of invalid syntax\r\n */\r\nexport declare type CodeBlockFormatter = (params: FormatterParameter) => FormattedContent | undefined;\r\nexport interface FormatterParameter {\r\n    /**\r\n     * The code to be formatted\r\n     */\r\n    source: string;\r\n    /**\r\n     * Specify where the cursor is. This option cannot be used with rangeStart and rangeEnd.\r\n     * This allows the command to both formats the code, and translates a cursor position from unformatted code to formatted code.\r\n     */\r\n    cursorOffset: number;\r\n    /**\r\n     * The language of the code block. Should be used to determine whether the formatter can support the transformation.\r\n     *\r\n     * Possible languages are available here https://github.com/wooorm/refractor/tree/716fe904c37cd7ebfde53ac5157e7d6c323a3986/lang\r\n     */\r\n    language: string;\r\n}\r\n/**\r\n * Data returned from a code formatter.\r\n */\r\nexport interface FormattedContent {\r\n    /**\r\n     * The transformed source.\r\n     */\r\n    formatted: string;\r\n    /**\r\n     * The new cursor position after formatting\r\n     */\r\n    cursorOffset: number;\r\n}\r\nexport interface CodeBlockAttributes extends ProsemirrorAttributes {\r\n    /**\r\n     * The language attribute\r\n     */\r\n    language: string;\r\n}\r\n",
      "code-block-utils.d.ts": "import { ApplySchemaAttributes, CommandFunction, DOMOutputSpec, EditorState, FromToParameter, NodeType, NodeTypeParameter, NodeWithPosition, PosParameter, ProsemirrorAttributes, ProsemirrorNode, ProsemirrorNodeParameter } from '@remirror/core';\r\nimport { Decoration } from '@remirror/pm/view';\r\nimport type { CodeBlockAttributes, CodeBlockOptions } from './code-block-types';\r\nexport declare const dataAttribute = \"data-code-block-language\";\r\ninterface CreateDecorationsParameter {\r\n    defaultLanguage: string;\r\n    /**\r\n     * The list of codeBlocks and their positions which we would like to update.\r\n     */\r\n    blocks: NodeWithPosition[];\r\n    /**\r\n     * When a delete happens within the last valid decoration in a block it causes\r\n     * the editor to jump. This skipLast should be set to true immediately after a\r\n     * delete which then allows for createDecorations to skip updating the\r\n     * decoration for the last refactor node, and hence preventing the jumpy bug.\r\n     */\r\n    skipLast: boolean;\r\n}\r\n/**\r\n * Creates a decoration set for the provided blocks\r\n */\r\nexport declare function createDecorations(parameter: CreateDecorationsParameter): Decoration[];\r\ninterface PosWithinRangeParameter extends PosParameter, FromToParameter {\r\n}\r\n/**\r\n * Check if the position is within the range.\r\n */\r\nexport declare function posWithinRange({ from, to, pos }: PosWithinRangeParameter): boolean;\r\n/**\r\n * Check whether the length of an array has changed\r\n */\r\nexport declare function lengthHasChanged<Type>(previous: ArrayLike<Type>, next: ArrayLike<Type>): boolean;\r\nexport interface NodeInformation extends NodeTypeParameter, FromToParameter, ProsemirrorNodeParameter, PosParameter {\r\n}\r\n/**\r\n * Retrieves helpful node information from the current state.\r\n */\r\nexport declare function getNodeInformationFromState(state: EditorState): NodeInformation;\r\n/**\r\n * Check that the attributes exist and are valid for the codeBlock\r\n * updateAttributes.\r\n */\r\nexport declare function isValidCodeBlockAttributes(attributes: ProsemirrorAttributes): attributes is CodeBlockAttributes;\r\n/**\r\n * Updates the node attrs.\r\n *\r\n * This is used to update the language for the codeBlock.\r\n */\r\nexport declare function updateNodeAttributes(type: NodeType): (attributes: CodeBlockAttributes) => CommandFunction;\r\ninterface GetLanguageParameter {\r\n    /**\r\n     * The language input from the user;\r\n     */\r\n    language: string;\r\n    /**\r\n     * The default language to use if none found.\r\n     */\r\n    fallback: string;\r\n}\r\n/**\r\n * Get the language from user input.\r\n */\r\nexport declare function getLanguage(parameter: GetLanguageParameter): string;\r\n/**\r\n * Used to provide a `toDom` function for the code block for both the browser and\r\n * non browser environments.\r\n */\r\nexport declare function codeBlockToDOM(node: ProsemirrorNode, toDOM: ApplySchemaAttributes['dom']): DOMOutputSpec;\r\ninterface FormatCodeBlockFactoryParameter extends NodeTypeParameter, Required<Pick<CodeBlockOptions, 'formatter' | 'defaultLanguage'>> {\r\n}\r\n/**\r\n * A factory for creating a command which can format a selected codeBlock (or\r\n * one located at the provided position).\r\n */\r\nexport declare function formatCodeBlockFactory(parameter: FormatCodeBlockFactoryParameter): ({ pos }?: Partial<PosParameter>) => CommandFunction;\r\nexport {};\r\n",
      "index.d.ts": "export { CodeBlockExtension, getLanguage } from './code-block-extension';\r\nexport type { CodeBlockAttributes, CodeBlockFormatter, CodeBlockOptions, FormattedContent, FormatterParameter, SyntaxTheme, } from './code-block-types';\r\n"
    },
    "@remirror/extension-collaboration": {
      "collaboration-extension.d.ts": "import { CommandFunction, EditorSchema, Handler, PlainExtension, ProsemirrorAttributes, Shape, StateUpdateLifecycleParameter, Static, Transaction } from '@remirror/core';\r\nimport { Step } from '@remirror/pm/transform';\r\n/**\r\n * The collaboration extension adds collaborative functionality to your editor.\r\n *\r\n * Once a central server is created the collaboration extension is good.\r\n */\r\nexport declare class CollaborationExtension extends PlainExtension<CollaborationOptions> {\r\n    get name(): string;\r\n    protected init(): void;\r\n    createCommands(): {\r\n        /**\r\n         * Send a collaboration update.\r\n         */\r\n        sendCollaborationUpdate: (attributes: CollaborationAttributes) => CommandFunction;\r\n    };\r\n    createExternalPlugins(): any[];\r\n    onStateUpdate(parameter: StateUpdateLifecycleParameter): void;\r\n    /**\r\n     * This passes the sendable steps into the `onSendableReceived` handler defined in the\r\n     * options when there is something to send.\r\n     */\r\n    private getSendableSteps;\r\n}\r\nexport interface Sendable {\r\n    version: number;\r\n    steps: Array<Step<EditorSchema>>;\r\n    clientID: number | string;\r\n    origins: Transaction[];\r\n}\r\nexport interface JSONSendable extends Omit<Sendable, 'steps' | 'origins'> {\r\n    steps: Shape[];\r\n}\r\nexport interface OnSendableReceivedParameter {\r\n    /**\r\n     * The raw sendable generated by the prosemirror-collab library.\r\n     */\r\n    sendable: Sendable;\r\n    /**\r\n     * A sendable which can be sent to a server\r\n     */\r\n    jsonSendable: JSONSendable;\r\n}\r\nexport interface CollaborationOptions {\r\n    /**\r\n     * The document version.\r\n     *\r\n     * @defaultValue 0\r\n     */\r\n    version?: Static<number>;\r\n    /**\r\n     * The unique ID of the client connecting to the server.\r\n     */\r\n    clientID: Static<number | string>;\r\n    /**\r\n     * The debounce time in milliseconds\r\n     *\r\n     * @defaultValue 250\r\n     */\r\n    debounceMs?: Static<number>;\r\n    /**\r\n     * Called when an an editor transaction occurs and there are changes ready to\r\n     * be sent to the server.\r\n     *\r\n     * @remarks\r\n     *\r\n     * The callback will receive the `jsonSendable` which can be sent to the\r\n     * server as it is. If you need more control then the `sendable` property can\r\n     * be used to shape the data the way you require.\r\n     *\r\n     * Since this method is called for everyTransaction that updates the\r\n     * jsonSendable value it is automatically debounced for you.\r\n     *\r\n     * @param params - the sendable and jsonSendable properties which can be sent\r\n     * to your backend\r\n     */\r\n    onSendableReceived: Handler<(params: OnSendableReceivedParameter) => void>;\r\n}\r\nexport declare type CollaborationAttributes = ProsemirrorAttributes<{\r\n    /**\r\n     * TODO give this some better types\r\n     */\r\n    steps: any[];\r\n    /**\r\n     * The version of the document that these steps were added to.\r\n     */\r\n    version: number;\r\n}>;\r\n",
      "index.d.ts": "export type { CollaborationAttributes, CollaborationOptions, JSONSendable, OnSendableReceivedParameter, Sendable, } from './collaboration-extension';\r\nexport { CollaborationExtension } from './collaboration-extension';\r\n"
    },
    "@remirror/extension-diff": {
      "diff-extension.d.ts": "import { CommandFunction, CreatePluginReturn, FromToParameter, Handler, PlainExtension, Static } from '@remirror/core';\r\nimport { DecorationSet } from '@remirror/pm/view';\r\nimport { Commit, TrackState } from './diff-utils';\r\nexport interface DiffOptions {\r\n    /**\r\n     * @default 'blame-marker';\r\n     */\r\n    blameMarkerClass?: Static<string>;\r\n    /**\r\n     * @default `(message: string) => \"Revert: '\" + message + \"'\"`\r\n     */\r\n    revertMessage?: (message: string) => string;\r\n    /**\r\n     * A handler that is called whenever a tracked change is hovered over in the\r\n     * editor.\r\n     */\r\n    onMouseOverCommit?: Handler<(parameter: HandlerParameter) => void>;\r\n    /**\r\n     * A handler that is called whenever a tracked change was being hovered is no\r\n     * longer hovered.\r\n     */\r\n    onMouseLeaveCommit?: Handler<(parameter: HandlerParameter) => void>;\r\n    /**\r\n     * Called when the commit is part of the current text selection. Called with\r\n     * an array of possible selection.\r\n     */\r\n    onSelectCommits?: Handler<(selections: HandlerParameter[], previousSelections?: HandlerParameter[]) => void>;\r\n    /**\r\n     * Called when commits are deselected.\r\n     */\r\n    onDeselectCommits?: Handler<(selections: HandlerParameter[]) => void>;\r\n}\r\n/**\r\n * An extension for the remirror editor. CHANGE ME.\r\n */\r\nexport declare class DiffExtension extends PlainExtension<DiffOptions> {\r\n    #private;\r\n    get name(): \"diff\";\r\n    /**\r\n     * Create the command for managing the commits in the document.\r\n     */\r\n    createCommands(): {\r\n        /**\r\n         * Attach a commit message to the recent change.\r\n         */\r\n        commitChange: (message: string) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Revert the provided commit.\r\n         */\r\n        revertCommit: (commit?: Commit) => CommandFunction;\r\n        /**\r\n         * Highlight the provided commit.\r\n         */\r\n        highlightCommit: (commit: Commit | CommitId) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Remove the highlight from the commit.\r\n         */\r\n        removeHighlightedCommit: (commit: Commit | CommitId) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createHelpers(): {\r\n        /**\r\n         * Get the full list of commits in the history.\r\n         */\r\n        getCommits: () => Commit[];\r\n        /**\r\n         * Get the commit by it's ID.\r\n         */\r\n        getCommit: (id: CommitId) => Commit;\r\n    };\r\n    /**\r\n     * Get the full list of tracked commit changes\r\n     */\r\n    private getCommits;\r\n    private getIndexByName;\r\n    /**\r\n     * Get the commit by it's index\r\n     */\r\n    private getCommit;\r\n    private getCommitId;\r\n    /**\r\n     * Create the custom change tracking plugin.\r\n     *\r\n     * This has been adapted from the prosemirror website demo.\r\n     * https://github.com/ProseMirror/website/blob/master/example/track/index.js\r\n     */\r\n    createPlugin(): CreatePluginReturn;\r\n    /**\r\n     * Calls the selection handlers when the selection changes the number of\r\n     * commit spans covered.\r\n     */\r\n    private handleSelection;\r\n    /**\r\n     * Transform the view and event into a commit and span.\r\n     */\r\n    private getHandlerParameterFromEvent;\r\n    /**\r\n     * Capture the mouseover event and trigger the `onMouseOverCommit` handler\r\n     * when it is captured.\r\n     */\r\n    private handlerMouseOver;\r\n    /**\r\n     * Capture the mouseleave event and trigger the `onMouseLeaveCommit` handler.\r\n     */\r\n    private handleMouseLeave;\r\n    /**\r\n     * Create the initial plugin state for the custom plugin.\r\n     */\r\n    private createInitialState;\r\n    /**\r\n     * Apply state updates in response to document changes.\r\n     */\r\n    private applyStateUpdates;\r\n    private createDecorationSet;\r\n    /**\r\n     * Apply updates to the highlight decorations.\r\n     */\r\n    private updateHighlights;\r\n    /**\r\n     * Apply updates for the commit tracker.\r\n     *\r\n     * Please note this isn't able to track marks and annotations. It can only\r\n     * track changes to content.\r\n     */\r\n    private updateTracked;\r\n    private highlightCommit;\r\n    private removeHighlightedCommit;\r\n    /**\r\n     * Add a commit to the transaction history.\r\n     */\r\n    private commit;\r\n    /**\r\n     * Revert a commit which was added to the transaction history.\r\n     */\r\n    private readonly revertCommit;\r\n    /**\r\n     * Get the meta data for this custom plugin.\r\n     */\r\n    private getMeta;\r\n    /**\r\n     * Set the meta data for the plugin.\r\n     */\r\n    private setMeta;\r\n}\r\ninterface TrackedStateParameter {\r\n    /**\r\n     * The tracked state.\r\n     */\r\n    tracked: TrackState;\r\n}\r\ninterface HighlightStateParameter {\r\n    /**\r\n     * The decorations for highlighted commits.\r\n     */\r\n    decorations: DecorationSet;\r\n    /**\r\n     * The id's of the commits to be highlighted.\r\n     */\r\n    commits?: number[];\r\n}\r\nexport interface DiffPluginState extends TrackedStateParameter, HighlightStateParameter {\r\n}\r\ndeclare type CommitId = number | 'first' | 'last';\r\nexport interface HandlerParameter extends FromToParameter {\r\n    /**\r\n     * The commit.\r\n     */\r\n    commit: Commit;\r\n}\r\nexport {};\r\n",
      "diff-utils.d.ts": "import type { Step, StepMap, Transform } from '@remirror/pm/transform';\r\ninterface SpanConstructorParameter {\r\n    from: number;\r\n    to: number;\r\n    commit: number | undefined;\r\n}\r\nexport declare class Span {\r\n    from: number;\r\n    to: number;\r\n    commit: number | undefined;\r\n    constructor(parameter: SpanConstructorParameter);\r\n}\r\ninterface CommitConstructorParameter {\r\n    message: string;\r\n    time: number;\r\n    steps: Step[];\r\n    maps: StepMap[];\r\n    hidden?: boolean;\r\n}\r\nexport declare class Commit {\r\n    message: string;\r\n    time: number;\r\n    steps: Step[];\r\n    maps: StepMap[];\r\n    hidden?: boolean;\r\n    constructor(parameter: CommitConstructorParameter);\r\n}\r\ninterface TrackStateConstructorParameter {\r\n    blameMap: Span[];\r\n    commits: Commit[];\r\n    uncommittedSteps: Step[];\r\n    uncommittedMaps: StepMap[];\r\n}\r\nexport declare class TrackState {\r\n    blameMap: Span[];\r\n    commits: Commit[];\r\n    uncommittedSteps: Step[];\r\n    uncommittedMaps: StepMap[];\r\n    constructor(parameter: TrackStateConstructorParameter);\r\n    /**\r\n     * Apply a transform to this state.\r\n     */\r\n    applyTransform(transform: Transform): TrackState;\r\n    /**\r\n     * When a transaction is marked as a commit, this is used to put any\r\n     * uncommitted steps into a new commit.\r\n     */\r\n    applyCommit(message: string, time: number): TrackState;\r\n}\r\nexport {};\r\n",
      "index.d.ts": "export type { DiffOptions, DiffPluginState, HandlerParameter } from './diff-extension';\r\nexport { DiffExtension } from './diff-extension';\r\n"
    },
    "@remirror/extension-doc": {
      "doc-extension.d.ts": "import { ApplySchemaAttributes, NodeExtension, Static } from '@remirror/core';\r\nexport interface DocOptions {\r\n    /**\r\n     * Adjust the content allowed in this prosemirror document.\r\n     *\r\n     * This will alter the schema if changed after initialization and can cause\r\n     * errors. It should only be set **once** per editor.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This field controls what sequences of child nodes are valid for this node\r\n     * type.\r\n     *\r\n     * Taken from https://prosemirror.net/docs/guide/#schema.content_expressions\r\n     *\r\n     * You can say, for example \"paragraph\" for “one paragraph”, or \"paragraph+\"\r\n     * to express “one or more paragraphs”. Similarly, \"paragraph*\" means “zero or\r\n     * more paragraphs” and \"caption?\" means “zero or one caption node”. You can\r\n     * also use regular-expression-like ranges, such as {2} (“exactly two”) {1, 5}\r\n     * (“one to five”) or {2,} (“two or more”) after node names.\r\n     *\r\n     * Such expressions can be combined to create a sequence, for example \"heading\r\n     * paragraph+\" means ‘first a heading, then one or more paragraphs’. You can\r\n     * also use the pipe | operator to indicate a choice between two expressions,\r\n     * as in \"(paragraph | blockquote)+\".\r\n     *\r\n     * Some groups of element types will appear multiple types in your schema—for\r\n     * example you might have a concept of “block” nodes, that may appear at the\r\n     * top level but also nested inside of blockquotes. You can create a node\r\n     * group by giving your node specs a group property, and then refer to that\r\n     * group by its name in your expressions.\r\n     *\r\n     * @core\r\n     */\r\n    content?: Static<string>;\r\n}\r\n/**\r\n * This is the default parent node. It is required in the Prosemirror Schema and\r\n * a representation of the `doc` is required as the top level node in all\r\n * editors.\r\n *\r\n * Extra attributes are disallowed for the doc extension.\r\n *\r\n * @required\r\n * @core\r\n */\r\nexport declare class DocExtension extends NodeExtension<DocOptions> {\r\n    get name(): \"doc\";\r\n    createNodeSpec(_: ApplySchemaAttributes): {\r\n        content: Static<string>;\r\n    };\r\n}\r\n",
      "index.d.ts": "export type { DocOptions } from './doc-extension';\r\nexport { DocExtension } from './doc-extension';\r\n"
    },
    "@remirror/extension-drop-cursor": {
      "drop-cursor-extension.d.ts": "import { PlainExtension } from '@remirror/core';\r\nexport interface DropCursorOptions {\r\n    /**\r\n     * Set the color of the cursor.\r\n     *\r\n     * @defaultValue 'black'\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Set the precise width of the cursor in pixels.\r\n     *\r\n     * @defaultValue 1\r\n     */\r\n    width?: number;\r\n}\r\n/**\r\n * Create a plugin that, when added to a ProseMirror instance,\r\n * causes a decoration to show up at the drop position when something\r\n * is dragged over the editor.\r\n *\r\n * @builtin\r\n */\r\nexport declare class DropCursorExtension extends PlainExtension<DropCursorOptions> {\r\n    get name(): \"dropCursor\";\r\n    /**\r\n     * Use the dropCursor plugin with provided options.\r\n     */\r\n    createExternalPlugins(): any;\r\n}\r\n",
      "index.d.ts": "export type { DropCursorOptions } from './drop-cursor-extension';\r\nexport { DropCursorExtension } from './drop-cursor-extension';\r\n"
    },
    "@remirror/extension-emoji": {
      "data/aliases.d.ts": "declare const _default: {\r\n    readonly satisfied: \"laughing\";\r\n    readonly grinning_face_with_star_eyes: \"star_struck\";\r\n    readonly face_with_one_eyebrow_raised: \"raised_eyebrow\";\r\n    readonly telephone: \"phone\";\r\n    readonly cooking: \"fried_egg\";\r\n    readonly 'flag-cn': \"cn\";\r\n    readonly lantern: \"izakaya_lantern\";\r\n    readonly shocked_face_with_exploding_head: \"exploding_head\";\r\n    readonly open_book: \"books\";\r\n    readonly 'flag-de': \"de\";\r\n    readonly grinning_face_with_one_large_and_one_small_eye: \"zany\";\r\n    readonly serious_face_with_symbols_covering_mouth: \"symbols_over_mouth\";\r\n    readonly flipper: \"dolphin\";\r\n    readonly face_with_open_mouth_vomiting: \"vomiting\";\r\n    readonly 'flag-es': \"es\";\r\n    readonly face_with_finger_covering_closed_lips: \"shushing\";\r\n    readonly smiling_face_with_smiling_eyes_and_hand_covering_mouth: \"hand_over_mouth\";\r\n    readonly 'flag-fr': \"fr\";\r\n    readonly bee: \"honeybee\";\r\n    readonly envelope: \"email\";\r\n    readonly gb: \"uk\";\r\n    readonly 'flag-gb': \"uk\";\r\n    readonly 'flag-uk': \"uk\";\r\n    readonly shit: \"poop\";\r\n    readonly hankey: \"poop\";\r\n    readonly knife: \"hocho\";\r\n    readonly pencil: \"memo\";\r\n    readonly 'flag-it': \"it\";\r\n    readonly 'flag-jp': \"jp\";\r\n    readonly heavy_exclamation_mark: \"exclamation\";\r\n    readonly 'flag-kr': \"kr\";\r\n    readonly mother_christmas: \"mrs_claus\";\r\n    readonly tornado_cloud: \"tornado\";\r\n    readonly 'flag-ru': \"ru\";\r\n    readonly 'flag-us': \"us\";\r\n    readonly man_and_woman_holding_hands: \"couple\";\r\n    readonly hand_with_index_and_middle_fingers_crossed: \"crossed_fingers\";\r\n    readonly hand: \"raised_hand\";\r\n    readonly thumbsup: \"+1\";\r\n    readonly thumbsdown: \"-1\";\r\n    readonly punch: \"facepunch\";\r\n    readonly collision: \"boom\";\r\n    readonly shirt: \"tshirt\";\r\n    readonly shoe: \"mans_shoe\";\r\n};\r\nexport default _default;\r\n",
      "data/categories.d.ts": "export declare type CategoriesType = Record<'symbols' | 'people' | 'animals_and_nature' | 'food_and_drink' | 'activity' | 'travel_and_places' | 'objects' | 'flags', string>;\r\ndeclare const categories: CategoriesType;\r\nexport default categories;\r\n",
      "data/emojis.d.ts": "export declare type EmojisType = Record<'100' | '1234' | 'grinning' | 'grimacing' | 'grin' | 'joy' | 'rofl' | 'partying' | 'smiley' | 'smile' | 'sweat_smile' | 'laughing' | 'innocent' | 'wink' | 'blush' | 'slightly_smiling_face' | 'upside_down_face' | 'relaxed' | 'yum' | 'relieved' | 'heart_eyes' | 'smiling_face_with_three_hearts' | 'kissing_heart' | 'kissing' | 'kissing_smiling_eyes' | 'kissing_closed_eyes' | 'stuck_out_tongue_winking_eye' | 'zany' | 'raised_eyebrow' | 'monocle' | 'stuck_out_tongue_closed_eyes' | 'stuck_out_tongue' | 'money_mouth_face' | 'nerd_face' | 'sunglasses' | 'star_struck' | 'clown_face' | 'cowboy_hat_face' | 'hugs' | 'smirk' | 'no_mouth' | 'neutral_face' | 'expressionless' | 'unamused' | 'roll_eyes' | 'thinking' | 'lying_face' | 'hand_over_mouth' | 'shushing' | 'symbols_over_mouth' | 'exploding_head' | 'flushed' | 'disappointed' | 'worried' | 'angry' | 'rage' | 'pensive' | 'confused' | 'slightly_frowning_face' | 'frowning_face' | 'persevere' | 'confounded' | 'tired_face' | 'weary' | 'pleading' | 'triumph' | 'open_mouth' | 'scream' | 'fearful' | 'cold_sweat' | 'hushed' | 'frowning' | 'anguished' | 'cry' | 'disappointed_relieved' | 'drooling_face' | 'sleepy' | 'sweat' | 'hot' | 'cold' | 'sob' | 'dizzy_face' | 'astonished' | 'zipper_mouth_face' | 'nauseated_face' | 'sneezing_face' | 'vomiting' | 'mask' | 'face_with_thermometer' | 'face_with_head_bandage' | 'woozy' | 'sleeping' | 'zzz' | 'poop' | 'smiling_imp' | 'imp' | 'japanese_ogre' | 'japanese_goblin' | 'skull' | 'ghost' | 'alien' | 'robot' | 'smiley_cat' | 'smile_cat' | 'joy_cat' | 'heart_eyes_cat' | 'smirk_cat' | 'kissing_cat' | 'scream_cat' | 'crying_cat_face' | 'pouting_cat' | 'palms_up' | 'raised_hands' | 'clap' | 'wave' | 'call_me_hand' | '+1' | '-1' | 'facepunch' | 'fist' | 'fist_left' | 'fist_right' | 'v' | 'ok_hand' | 'raised_hand' | 'raised_back_of_hand' | 'open_hands' | 'muscle' | 'pray' | 'foot' | 'leg' | 'handshake' | 'point_up' | 'point_up_2' | 'point_down' | 'point_left' | 'point_right' | 'fu' | 'raised_hand_with_fingers_splayed' | 'love_you' | 'metal' | 'crossed_fingers' | 'vulcan_salute' | 'writing_hand' | 'selfie' | 'nail_care' | 'lips' | 'tooth' | 'tongue' | 'ear' | 'nose' | 'eye' | 'eyes' | 'brain' | 'bust_in_silhouette' | 'busts_in_silhouette' | 'speaking_head' | 'baby' | 'child' | 'boy' | 'girl' | 'adult' | 'man' | 'woman' | 'blonde_woman' | 'blonde_man' | 'bearded_person' | 'older_adult' | 'older_man' | 'older_woman' | 'man_with_gua_pi_mao' | 'woman_with_headscarf' | 'woman_with_turban' | 'man_with_turban' | 'policewoman' | 'policeman' | 'construction_worker_woman' | 'construction_worker_man' | 'guardswoman' | 'guardsman' | 'female_detective' | 'male_detective' | 'woman_health_worker' | 'man_health_worker' | 'woman_farmer' | 'man_farmer' | 'woman_cook' | 'man_cook' | 'woman_student' | 'man_student' | 'woman_singer' | 'man_singer' | 'woman_teacher' | 'man_teacher' | 'woman_factory_worker' | 'man_factory_worker' | 'woman_technologist' | 'man_technologist' | 'woman_office_worker' | 'man_office_worker' | 'woman_mechanic' | 'man_mechanic' | 'woman_scientist' | 'man_scientist' | 'woman_artist' | 'man_artist' | 'woman_firefighter' | 'man_firefighter' | 'woman_pilot' | 'man_pilot' | 'woman_astronaut' | 'man_astronaut' | 'woman_judge' | 'man_judge' | 'woman_superhero' | 'man_superhero' | 'woman_supervillain' | 'man_supervillain' | 'mrs_claus' | 'santa' | 'sorceress' | 'wizard' | 'woman_elf' | 'man_elf' | 'woman_vampire' | 'man_vampire' | 'woman_zombie' | 'man_zombie' | 'woman_genie' | 'man_genie' | 'mermaid' | 'merman' | 'woman_fairy' | 'man_fairy' | 'angel' | 'pregnant_woman' | 'breastfeeding' | 'princess' | 'prince' | 'bride_with_veil' | 'man_in_tuxedo' | 'running_woman' | 'running_man' | 'walking_woman' | 'walking_man' | 'dancer' | 'man_dancing' | 'dancing_women' | 'dancing_men' | 'couple' | 'two_men_holding_hands' | 'two_women_holding_hands' | 'bowing_woman' | 'bowing_man' | 'man_facepalming' | 'woman_facepalming' | 'woman_shrugging' | 'man_shrugging' | 'tipping_hand_woman' | 'tipping_hand_man' | 'no_good_woman' | 'no_good_man' | 'ok_woman' | 'ok_man' | 'raising_hand_woman' | 'raising_hand_man' | 'pouting_woman' | 'pouting_man' | 'frowning_woman' | 'frowning_man' | 'haircut_woman' | 'haircut_man' | 'massage_woman' | 'massage_man' | 'woman_in_steamy_room' | 'man_in_steamy_room' | 'couple_with_heart_woman_man' | 'couple_with_heart_woman_woman' | 'couple_with_heart_man_man' | 'couplekiss_man_woman' | 'couplekiss_woman_woman' | 'couplekiss_man_man' | 'family_man_woman_boy' | 'family_man_woman_girl' | 'family_man_woman_girl_boy' | 'family_man_woman_boy_boy' | 'family_man_woman_girl_girl' | 'family_woman_woman_boy' | 'family_woman_woman_girl' | 'family_woman_woman_girl_boy' | 'family_woman_woman_boy_boy' | 'family_woman_woman_girl_girl' | 'family_man_man_boy' | 'family_man_man_girl' | 'family_man_man_girl_boy' | 'family_man_man_boy_boy' | 'family_man_man_girl_girl' | 'family_woman_boy' | 'family_woman_girl' | 'family_woman_girl_boy' | 'family_woman_boy_boy' | 'family_woman_girl_girl' | 'family_man_boy' | 'family_man_girl' | 'family_man_girl_boy' | 'family_man_boy_boy' | 'family_man_girl_girl' | 'yarn' | 'thread' | 'coat' | 'labcoat' | 'womans_clothes' | 'tshirt' | 'jeans' | 'necktie' | 'dress' | 'bikini' | 'kimono' | 'lipstick' | 'kiss' | 'footprints' | 'flat_shoe' | 'high_heel' | 'sandal' | 'boot' | 'mans_shoe' | 'athletic_shoe' | 'hiking_boot' | 'socks' | 'gloves' | 'scarf' | 'womans_hat' | 'tophat' | 'billed_hat' | 'rescue_worker_helmet' | 'mortar_board' | 'crown' | 'school_satchel' | 'luggage' | 'pouch' | 'purse' | 'handbag' | 'briefcase' | 'eyeglasses' | 'dark_sunglasses' | 'goggles' | 'ring' | 'closed_umbrella' | 'dog' | 'cat' | 'mouse' | 'hamster' | 'rabbit' | 'fox_face' | 'bear' | 'panda_face' | 'koala' | 'tiger' | 'lion' | 'cow' | 'pig' | 'pig_nose' | 'frog' | 'squid' | 'octopus' | 'shrimp' | 'monkey_face' | 'gorilla' | 'see_no_evil' | 'hear_no_evil' | 'speak_no_evil' | 'monkey' | 'chicken' | 'penguin' | 'bird' | 'baby_chick' | 'hatching_chick' | 'hatched_chick' | 'duck' | 'eagle' | 'owl' | 'bat' | 'wolf' | 'boar' | 'horse' | 'unicorn' | 'honeybee' | 'bug' | 'butterfly' | 'snail' | 'beetle' | 'ant' | 'grasshopper' | 'spider' | 'scorpion' | 'crab' | 'snake' | 'lizard' | 't-rex' | 'sauropod' | 'turtle' | 'tropical_fish' | 'fish' | 'blowfish' | 'dolphin' | 'shark' | 'whale' | 'whale2' | 'crocodile' | 'leopard' | 'zebra' | 'tiger2' | 'water_buffalo' | 'ox' | 'cow2' | 'deer' | 'dromedary_camel' | 'camel' | 'giraffe' | 'elephant' | 'rhinoceros' | 'goat' | 'ram' | 'sheep' | 'racehorse' | 'pig2' | 'rat' | 'mouse2' | 'rooster' | 'turkey' | 'dove' | 'dog2' | 'poodle' | 'cat2' | 'rabbit2' | 'chipmunk' | 'hedgehog' | 'raccoon' | 'llama' | 'hippopotamus' | 'kangaroo' | 'badger' | 'swan' | 'peacock' | 'parrot' | 'lobster' | 'mosquito' | 'paw_prints' | 'dragon' | 'dragon_face' | 'cactus' | 'christmas_tree' | 'evergreen_tree' | 'deciduous_tree' | 'palm_tree' | 'seedling' | 'herb' | 'shamrock' | 'four_leaf_clover' | 'bamboo' | 'tanabata_tree' | 'leaves' | 'fallen_leaf' | 'maple_leaf' | 'ear_of_rice' | 'hibiscus' | 'sunflower' | 'rose' | 'wilted_flower' | 'tulip' | 'blossom' | 'cherry_blossom' | 'bouquet' | 'mushroom' | 'chestnut' | 'jack_o_lantern' | 'shell' | 'spider_web' | 'earth_americas' | 'earth_africa' | 'earth_asia' | 'full_moon' | 'waning_gibbous_moon' | 'last_quarter_moon' | 'waning_crescent_moon' | 'new_moon' | 'waxing_crescent_moon' | 'first_quarter_moon' | 'waxing_gibbous_moon' | 'new_moon_with_face' | 'full_moon_with_face' | 'first_quarter_moon_with_face' | 'last_quarter_moon_with_face' | 'sun_with_face' | 'crescent_moon' | 'star' | 'star2' | 'dizzy' | 'sparkles' | 'comet' | 'sunny' | 'sun_behind_small_cloud' | 'partly_sunny' | 'sun_behind_large_cloud' | 'sun_behind_rain_cloud' | 'cloud' | 'cloud_with_rain' | 'cloud_with_lightning_and_rain' | 'cloud_with_lightning' | 'zap' | 'fire' | 'boom' | 'snowflake' | 'cloud_with_snow' | 'snowman' | 'snowman_with_snow' | 'wind_face' | 'dash' | 'tornado' | 'fog' | 'open_umbrella' | 'umbrella' | 'droplet' | 'sweat_drops' | 'ocean' | 'green_apple' | 'apple' | 'pear' | 'tangerine' | 'lemon' | 'banana' | 'watermelon' | 'grapes' | 'strawberry' | 'melon' | 'cherries' | 'peach' | 'pineapple' | 'coconut' | 'kiwi_fruit' | 'mango' | 'avocado' | 'broccoli' | 'tomato' | 'eggplant' | 'cucumber' | 'carrot' | 'hot_pepper' | 'potato' | 'corn' | 'leafy_greens' | 'sweet_potato' | 'peanuts' | 'honey_pot' | 'croissant' | 'bread' | 'baguette_bread' | 'bagel' | 'pretzel' | 'cheese' | 'egg' | 'bacon' | 'steak' | 'pancakes' | 'poultry_leg' | 'meat_on_bone' | 'bone' | 'fried_shrimp' | 'fried_egg' | 'hamburger' | 'fries' | 'stuffed_flatbread' | 'hotdog' | 'pizza' | 'sandwich' | 'canned_food' | 'spaghetti' | 'taco' | 'burrito' | 'green_salad' | 'shallow_pan_of_food' | 'ramen' | 'stew' | 'fish_cake' | 'fortune_cookie' | 'sushi' | 'bento' | 'curry' | 'rice_ball' | 'rice' | 'rice_cracker' | 'oden' | 'dango' | 'shaved_ice' | 'ice_cream' | 'icecream' | 'pie' | 'cake' | 'cupcake' | 'moon_cake' | 'birthday' | 'custard' | 'candy' | 'lollipop' | 'chocolate_bar' | 'popcorn' | 'dumpling' | 'doughnut' | 'cookie' | 'milk_glass' | 'beer' | 'beers' | 'clinking_glasses' | 'wine_glass' | 'tumbler_glass' | 'cocktail' | 'tropical_drink' | 'champagne' | 'sake' | 'tea' | 'cup_with_straw' | 'coffee' | 'baby_bottle' | 'salt' | 'spoon' | 'fork_and_knife' | 'plate_with_cutlery' | 'bowl_with_spoon' | 'takeout_box' | 'chopsticks' | 'soccer' | 'basketball' | 'football' | 'baseball' | 'softball' | 'tennis' | 'volleyball' | 'rugby_football' | 'flying_disc' | '8ball' | 'golf' | 'golfing_woman' | 'golfing_man' | 'ping_pong' | 'badminton' | 'goal_net' | 'ice_hockey' | 'field_hockey' | 'lacrosse' | 'cricket' | 'ski' | 'skier' | 'snowboarder' | 'person_fencing' | 'women_wrestling' | 'men_wrestling' | 'woman_cartwheeling' | 'man_cartwheeling' | 'woman_playing_handball' | 'man_playing_handball' | 'ice_skate' | 'curling_stone' | 'skateboard' | 'sled' | 'bow_and_arrow' | 'fishing_pole_and_fish' | 'boxing_glove' | 'martial_arts_uniform' | 'rowing_woman' | 'rowing_man' | 'climbing_woman' | 'climbing_man' | 'swimming_woman' | 'swimming_man' | 'woman_playing_water_polo' | 'man_playing_water_polo' | 'woman_in_lotus_position' | 'man_in_lotus_position' | 'surfing_woman' | 'surfing_man' | 'bath' | 'basketball_woman' | 'basketball_man' | 'weight_lifting_woman' | 'weight_lifting_man' | 'biking_woman' | 'biking_man' | 'mountain_biking_woman' | 'mountain_biking_man' | 'horse_racing' | 'business_suit_levitating' | 'trophy' | 'running_shirt_with_sash' | 'medal_sports' | 'medal_military' | '1st_place_medal' | '2nd_place_medal' | '3rd_place_medal' | 'reminder_ribbon' | 'rosette' | 'ticket' | 'tickets' | 'performing_arts' | 'art' | 'circus_tent' | 'woman_juggling' | 'man_juggling' | 'microphone' | 'headphones' | 'musical_score' | 'musical_keyboard' | 'drum' | 'saxophone' | 'trumpet' | 'guitar' | 'violin' | 'clapper' | 'video_game' | 'space_invader' | 'dart' | 'game_die' | 'chess_pawn' | 'slot_machine' | 'jigsaw' | 'bowling' | 'red_car' | 'taxi' | 'blue_car' | 'bus' | 'trolleybus' | 'racing_car' | 'police_car' | 'ambulance' | 'fire_engine' | 'minibus' | 'truck' | 'articulated_lorry' | 'tractor' | 'kick_scooter' | 'motorcycle' | 'bike' | 'motor_scooter' | 'rotating_light' | 'oncoming_police_car' | 'oncoming_bus' | 'oncoming_automobile' | 'oncoming_taxi' | 'aerial_tramway' | 'mountain_cableway' | 'suspension_railway' | 'railway_car' | 'train' | 'monorail' | 'bullettrain_side' | 'bullettrain_front' | 'light_rail' | 'mountain_railway' | 'steam_locomotive' | 'train2' | 'metro' | 'tram' | 'station' | 'flying_saucer' | 'helicopter' | 'small_airplane' | 'airplane' | 'flight_departure' | 'flight_arrival' | 'sailboat' | 'motor_boat' | 'speedboat' | 'ferry' | 'passenger_ship' | 'rocket' | 'artificial_satellite' | 'seat' | 'canoe' | 'anchor' | 'construction' | 'fuelpump' | 'busstop' | 'vertical_traffic_light' | 'traffic_light' | 'checkered_flag' | 'ship' | 'ferris_wheel' | 'roller_coaster' | 'carousel_horse' | 'building_construction' | 'foggy' | 'tokyo_tower' | 'factory' | 'fountain' | 'rice_scene' | 'mountain' | 'mountain_snow' | 'mount_fuji' | 'volcano' | 'japan' | 'camping' | 'tent' | 'national_park' | 'motorway' | 'railway_track' | 'sunrise' | 'sunrise_over_mountains' | 'desert' | 'beach_umbrella' | 'desert_island' | 'city_sunrise' | 'city_sunset' | 'cityscape' | 'night_with_stars' | 'bridge_at_night' | 'milky_way' | 'stars' | 'sparkler' | 'fireworks' | 'rainbow' | 'houses' | 'european_castle' | 'japanese_castle' | 'stadium' | 'statue_of_liberty' | 'house' | 'house_with_garden' | 'derelict_house' | 'office' | 'department_store' | 'post_office' | 'european_post_office' | 'hospital' | 'bank' | 'hotel' | 'convenience_store' | 'school' | 'love_hotel' | 'wedding' | 'classical_building' | 'church' | 'mosque' | 'synagogue' | 'kaaba' | 'shinto_shrine' | 'watch' | 'iphone' | 'calling' | 'computer' | 'keyboard' | 'desktop_computer' | 'printer' | 'computer_mouse' | 'trackball' | 'joystick' | 'clamp' | 'minidisc' | 'floppy_disk' | 'cd' | 'dvd' | 'vhs' | 'camera' | 'camera_flash' | 'video_camera' | 'movie_camera' | 'film_projector' | 'film_strip' | 'telephone_receiver' | 'phone' | 'pager' | 'fax' | 'tv' | 'radio' | 'studio_microphone' | 'level_slider' | 'control_knobs' | 'compass' | 'stopwatch' | 'timer_clock' | 'alarm_clock' | 'mantelpiece_clock' | 'hourglass_flowing_sand' | 'hourglass' | 'satellite' | 'battery' | 'electric_plug' | 'bulb' | 'flashlight' | 'candle' | 'fire_extinguisher' | 'wastebasket' | 'oil_drum' | 'money_with_wings' | 'dollar' | 'yen' | 'euro' | 'pound' | 'moneybag' | 'credit_card' | 'gem' | 'balance_scale' | 'toolbox' | 'wrench' | 'hammer' | 'hammer_and_pick' | 'hammer_and_wrench' | 'pick' | 'nut_and_bolt' | 'gear' | 'brick' | 'chains' | 'magnet' | 'gun' | 'bomb' | 'firecracker' | 'hocho' | 'dagger' | 'crossed_swords' | 'shield' | 'smoking' | 'skull_and_crossbones' | 'coffin' | 'funeral_urn' | 'amphora' | 'crystal_ball' | 'prayer_beads' | 'nazar_amulet' | 'barber' | 'alembic' | 'telescope' | 'microscope' | 'hole' | 'pill' | 'syringe' | 'dna' | 'microbe' | 'petri_dish' | 'test_tube' | 'thermometer' | 'broom' | 'basket' | 'toilet_paper' | 'label' | 'bookmark' | 'toilet' | 'shower' | 'bathtub' | 'soap' | 'sponge' | 'lotion_bottle' | 'key' | 'old_key' | 'couch_and_lamp' | 'sleeping_bed' | 'bed' | 'door' | 'bellhop_bell' | 'teddy_bear' | 'framed_picture' | 'world_map' | 'parasol_on_ground' | 'moyai' | 'shopping' | 'shopping_cart' | 'balloon' | 'flags' | 'ribbon' | 'gift' | 'confetti_ball' | 'tada' | 'dolls' | 'wind_chime' | 'crossed_flags' | 'izakaya_lantern' | 'red_envelope' | 'email' | 'envelope_with_arrow' | 'incoming_envelope' | 'e-mail' | 'love_letter' | 'postbox' | 'mailbox_closed' | 'mailbox' | 'mailbox_with_mail' | 'mailbox_with_no_mail' | 'package' | 'postal_horn' | 'inbox_tray' | 'outbox_tray' | 'scroll' | 'page_with_curl' | 'bookmark_tabs' | 'receipt' | 'bar_chart' | 'chart_with_upwards_trend' | 'chart_with_downwards_trend' | 'page_facing_up' | 'date' | 'calendar' | 'spiral_calendar' | 'card_index' | 'card_file_box' | 'ballot_box' | 'file_cabinet' | 'clipboard' | 'spiral_notepad' | 'file_folder' | 'open_file_folder' | 'card_index_dividers' | 'newspaper_roll' | 'newspaper' | 'notebook' | 'closed_book' | 'green_book' | 'blue_book' | 'orange_book' | 'notebook_with_decorative_cover' | 'ledger' | 'books' | 'open_book' | 'safety_pin' | 'link' | 'paperclip' | 'paperclips' | 'scissors' | 'triangular_ruler' | 'straight_ruler' | 'abacus' | 'pushpin' | 'round_pushpin' | 'triangular_flag_on_post' | 'white_flag' | 'black_flag' | 'rainbow_flag' | 'closed_lock_with_key' | 'lock' | 'unlock' | 'lock_with_ink_pen' | 'pen' | 'fountain_pen' | 'black_nib' | 'memo' | 'pencil2' | 'crayon' | 'paintbrush' | 'mag' | 'mag_right' | 'heart' | 'orange_heart' | 'yellow_heart' | 'green_heart' | 'blue_heart' | 'purple_heart' | 'black_heart' | 'broken_heart' | 'heavy_heart_exclamation' | 'two_hearts' | 'revolving_hearts' | 'heartbeat' | 'heartpulse' | 'sparkling_heart' | 'cupid' | 'gift_heart' | 'heart_decoration' | 'peace_symbol' | 'latin_cross' | 'star_and_crescent' | 'om' | 'wheel_of_dharma' | 'star_of_david' | 'six_pointed_star' | 'menorah' | 'yin_yang' | 'orthodox_cross' | 'place_of_worship' | 'ophiuchus' | 'aries' | 'taurus' | 'gemini' | 'cancer' | 'leo' | 'virgo' | 'libra' | 'scorpius' | 'sagittarius' | 'capricorn' | 'aquarius' | 'pisces' | 'id' | 'atom_symbol' | 'u7a7a' | 'u5272' | 'radioactive' | 'biohazard' | 'mobile_phone_off' | 'vibration_mode' | 'u6709' | 'u7121' | 'u7533' | 'u55b6' | 'u6708' | 'eight_pointed_black_star' | 'vs' | 'accept' | 'white_flower' | 'ideograph_advantage' | 'secret' | 'congratulations' | 'u5408' | 'u6e80' | 'u7981' | 'a' | 'b' | 'ab' | 'cl' | 'o2' | 'sos' | 'no_entry' | 'name_badge' | 'no_entry_sign' | 'x' | 'o' | 'stop_sign' | 'anger' | 'hotsprings' | 'no_pedestrians' | 'do_not_litter' | 'no_bicycles' | 'non-potable_water' | 'underage' | 'no_mobile_phones' | 'exclamation' | 'grey_exclamation' | 'question' | 'grey_question' | 'bangbang' | 'interrobang' | 'low_brightness' | 'high_brightness' | 'trident' | 'fleur_de_lis' | 'part_alternation_mark' | 'warning' | 'children_crossing' | 'beginner' | 'recycle' | 'u6307' | 'chart' | 'sparkle' | 'eight_spoked_asterisk' | 'negative_squared_cross_mark' | 'white_check_mark' | 'diamond_shape_with_a_dot_inside' | 'cyclone' | 'loop' | 'globe_with_meridians' | 'm' | 'atm' | 'sa' | 'passport_control' | 'customs' | 'baggage_claim' | 'left_luggage' | 'wheelchair' | 'no_smoking' | 'wc' | 'parking' | 'potable_water' | 'mens' | 'womens' | 'baby_symbol' | 'restroom' | 'put_litter_in_its_place' | 'cinema' | 'signal_strength' | 'koko' | 'ng' | 'ok' | 'up' | 'cool' | 'new' | 'free' | 'zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'keycap_ten' | 'asterisk' | 'eject_button' | 'arrow_forward' | 'pause_button' | 'next_track_button' | 'stop_button' | 'record_button' | 'play_or_pause_button' | 'previous_track_button' | 'fast_forward' | 'rewind' | 'twisted_rightwards_arrows' | 'repeat' | 'repeat_one' | 'arrow_backward' | 'arrow_up_small' | 'arrow_down_small' | 'arrow_double_up' | 'arrow_double_down' | 'arrow_right' | 'arrow_left' | 'arrow_up' | 'arrow_down' | 'arrow_upper_right' | 'arrow_lower_right' | 'arrow_lower_left' | 'arrow_upper_left' | 'arrow_up_down' | 'left_right_arrow' | 'arrows_counterclockwise' | 'arrow_right_hook' | 'leftwards_arrow_with_hook' | 'arrow_heading_up' | 'arrow_heading_down' | 'hash' | 'information_source' | 'abc' | 'abcd' | 'capital_abcd' | 'symbols' | 'musical_note' | 'notes' | 'wavy_dash' | 'curly_loop' | 'heavy_check_mark' | 'arrows_clockwise' | 'heavy_plus_sign' | 'heavy_minus_sign' | 'heavy_division_sign' | 'heavy_multiplication_x' | 'infinity' | 'heavy_dollar_sign' | 'currency_exchange' | 'copyright' | 'registered' | 'tm' | 'end' | 'back' | 'on' | 'top' | 'soon' | 'ballot_box_with_check' | 'radio_button' | 'white_circle' | 'black_circle' | 'red_circle' | 'large_blue_circle' | 'small_orange_diamond' | 'small_blue_diamond' | 'large_orange_diamond' | 'large_blue_diamond' | 'small_red_triangle' | 'black_small_square' | 'white_small_square' | 'black_large_square' | 'white_large_square' | 'small_red_triangle_down' | 'black_medium_square' | 'white_medium_square' | 'black_medium_small_square' | 'white_medium_small_square' | 'black_square_button' | 'white_square_button' | 'speaker' | 'sound' | 'loud_sound' | 'mute' | 'mega' | 'loudspeaker' | 'bell' | 'no_bell' | 'black_joker' | 'mahjong' | 'spades' | 'clubs' | 'hearts' | 'diamonds' | 'flower_playing_cards' | 'thought_balloon' | 'right_anger_bubble' | 'speech_balloon' | 'left_speech_bubble' | 'clock1' | 'clock2' | 'clock3' | 'clock4' | 'clock5' | 'clock6' | 'clock7' | 'clock8' | 'clock9' | 'clock10' | 'clock11' | 'clock12' | 'clock130' | 'clock230' | 'clock330' | 'clock430' | 'clock530' | 'clock630' | 'clock730' | 'clock830' | 'clock930' | 'clock1030' | 'clock1130' | 'clock1230' | 'afghanistan' | 'aland_islands' | 'albania' | 'algeria' | 'american_samoa' | 'andorra' | 'angola' | 'anguilla' | 'antarctica' | 'antigua_barbuda' | 'argentina' | 'armenia' | 'aruba' | 'australia' | 'austria' | 'azerbaijan' | 'bahamas' | 'bahrain' | 'bangladesh' | 'barbados' | 'belarus' | 'belgium' | 'belize' | 'benin' | 'bermuda' | 'bhutan' | 'bolivia' | 'caribbean_netherlands' | 'bosnia_herzegovina' | 'botswana' | 'brazil' | 'british_indian_ocean_territory' | 'british_virgin_islands' | 'brunei' | 'bulgaria' | 'burkina_faso' | 'burundi' | 'cape_verde' | 'cambodia' | 'cameroon' | 'canada' | 'canary_islands' | 'cayman_islands' | 'central_african_republic' | 'chad' | 'chile' | 'cn' | 'christmas_island' | 'cocos_islands' | 'colombia' | 'comoros' | 'congo_brazzaville' | 'congo_kinshasa' | 'cook_islands' | 'costa_rica' | 'croatia' | 'cuba' | 'curacao' | 'cyprus' | 'czech_republic' | 'denmark' | 'djibouti' | 'dominica' | 'dominican_republic' | 'ecuador' | 'egypt' | 'el_salvador' | 'equatorial_guinea' | 'eritrea' | 'estonia' | 'ethiopia' | 'eu' | 'falkland_islands' | 'faroe_islands' | 'fiji' | 'finland' | 'fr' | 'french_guiana' | 'french_polynesia' | 'french_southern_territories' | 'gabon' | 'gambia' | 'georgia' | 'de' | 'ghana' | 'gibraltar' | 'greece' | 'greenland' | 'grenada' | 'guadeloupe' | 'guam' | 'guatemala' | 'guernsey' | 'guinea' | 'guinea_bissau' | 'guyana' | 'haiti' | 'honduras' | 'hong_kong' | 'hungary' | 'iceland' | 'india' | 'indonesia' | 'iran' | 'iraq' | 'ireland' | 'isle_of_man' | 'israel' | 'it' | 'cote_divoire' | 'jamaica' | 'jp' | 'jersey' | 'jordan' | 'kazakhstan' | 'kenya' | 'kiribati' | 'kosovo' | 'kuwait' | 'kyrgyzstan' | 'laos' | 'latvia' | 'lebanon' | 'lesotho' | 'liberia' | 'libya' | 'liechtenstein' | 'lithuania' | 'luxembourg' | 'macau' | 'macedonia' | 'madagascar' | 'malawi' | 'malaysia' | 'maldives' | 'mali' | 'malta' | 'marshall_islands' | 'martinique' | 'mauritania' | 'mauritius' | 'mayotte' | 'mexico' | 'micronesia' | 'moldova' | 'monaco' | 'mongolia' | 'montenegro' | 'montserrat' | 'morocco' | 'mozambique' | 'myanmar' | 'namibia' | 'nauru' | 'nepal' | 'netherlands' | 'new_caledonia' | 'new_zealand' | 'nicaragua' | 'niger' | 'nigeria' | 'niue' | 'norfolk_island' | 'northern_mariana_islands' | 'north_korea' | 'norway' | 'oman' | 'pakistan' | 'palau' | 'palestinian_territories' | 'panama' | 'papua_new_guinea' | 'paraguay' | 'peru' | 'philippines' | 'pitcairn_islands' | 'poland' | 'portugal' | 'puerto_rico' | 'qatar' | 'reunion' | 'romania' | 'ru' | 'rwanda' | 'st_barthelemy' | 'st_helena' | 'st_kitts_nevis' | 'st_lucia' | 'st_pierre_miquelon' | 'st_vincent_grenadines' | 'samoa' | 'san_marino' | 'sao_tome_principe' | 'saudi_arabia' | 'senegal' | 'serbia' | 'seychelles' | 'sierra_leone' | 'singapore' | 'sint_maarten' | 'slovakia' | 'slovenia' | 'solomon_islands' | 'somalia' | 'south_africa' | 'south_georgia_south_sandwich_islands' | 'kr' | 'south_sudan' | 'es' | 'sri_lanka' | 'sudan' | 'suriname' | 'swaziland' | 'sweden' | 'switzerland' | 'syria' | 'taiwan' | 'tajikistan' | 'tanzania' | 'thailand' | 'timor_leste' | 'togo' | 'tokelau' | 'tonga' | 'trinidad_tobago' | 'tunisia' | 'tr' | 'turkmenistan' | 'turks_caicos_islands' | 'tuvalu' | 'uganda' | 'ukraine' | 'united_arab_emirates' | 'uk' | 'england' | 'scotland' | 'wales' | 'us' | 'us_virgin_islands' | 'uruguay' | 'uzbekistan' | 'vanuatu' | 'vatican_city' | 'venezuela' | 'vietnam' | 'wallis_futuna' | 'western_sahara' | 'yemen' | 'zambia' | 'zimbabwe' | 'united_nations' | 'pirate_flag', {\r\n    keywords: string[];\r\n    char: string;\r\n    category: string;\r\n    name: string;\r\n    description: string;\r\n    skinVariations: boolean;\r\n}>;\r\ndeclare const emojis: EmojisType;\r\nexport default emojis;\r\n",
      "emoji-extension.d.ts": "import type { AddCustomHandler, CommandFunction } from '@remirror/core';\r\nimport { FromToParameter, PlainExtension } from '@remirror/core';\r\nimport type { Suggester } from '@remirror/pm/suggest';\r\nimport type { EmojiObject, EmojiOptions, NamesAndAliases, SkinVariation } from './emoji-types';\r\nexport declare class EmojiExtension extends PlainExtension<EmojiOptions> {\r\n    /**\r\n     * The name is dynamically generated based on the passed in type.\r\n     */\r\n    get name(): string;\r\n    /**\r\n     * Keep track of the frequently used list.\r\n     */\r\n    private frequentlyUsed;\r\n    /**\r\n     * The custom keybindings added for the emoji plugin.\r\n     */\r\n    private keyBindingsList;\r\n    /**\r\n     * The compiled keybindings.\r\n     */\r\n    private keyBindings;\r\n    /**\r\n     * Manage input rules for emoticons.\r\n     */\r\n    createInputRules(): any;\r\n    createCommands(): {\r\n        /**\r\n         * Insert an emoji into the document at the requested location by name\r\n         *\r\n         * The range is optional and if not specified the emoji will be inserted\r\n         * at the current selection.\r\n         *\r\n         * @param name - the emoji to insert\r\n         * @param [options] - the options when inserting the emoji.\r\n         */\r\n        insertEmojiByName: (name: string, options?: EmojiCommandOptions) => CommandFunction;\r\n        /**\r\n         * Insert an emoji into the document at the requested location.\r\n         *\r\n         * The range is optional and if not specified the emoji will be inserted\r\n         * at the current selection.\r\n         *\r\n         * @param emoji - the emoji object to use.\r\n         * @param [range] - the from/to position to replace.\r\n         */\r\n        insertEmojiByObject: (emoji: EmojiObject, { from, to, skinVariation }?: EmojiCommandOptions) => CommandFunction;\r\n        /**\r\n         * Inserts the suggestion character into the current position in the\r\n         * editor in order to activate the suggestion popup.\r\n         */\r\n        suggestEmoji: ({ from, to }?: Partial<FromToParameter>) => CommandFunction;\r\n    };\r\n    createHelpers(): {\r\n        /**\r\n         * Update the emoji which are displayed to the user when the query is not\r\n         * specific enough.\r\n         */\r\n        updateFrequentlyUsed: (names: NamesAndAliases[]) => void;\r\n    };\r\n    protected onAddCustomHandler: AddCustomHandler<EmojiOptions>;\r\n    /**\r\n     * For now a dumb merge for the key binding command. Later entries are given priority over earlier entries.\r\n     */\r\n    private updateKeyBindings;\r\n    /**\r\n     * Emojis can be selected via `:` the colon key (by default). This sets the\r\n     * configuration using `prosemirror-suggest`\r\n     */\r\n    createSuggesters(): Suggester;\r\n}\r\nexport interface EmojiCommandOptions extends Partial<FromToParameter> {\r\n    /**\r\n     * The skin variation which is a number between `0` and `4`.\r\n     */\r\n    skinVariation?: SkinVariation;\r\n}\r\n",
      "emoji-types.d.ts": "import type { CustomHandler, Handler } from '@remirror/core';\r\nimport type { SuggestChangeHandlerParameter, SuggestExitHandlerParameter, SuggestKeyBindingMap } from '@remirror/pm/suggest';\r\nimport type AliasData from './data/aliases';\r\nimport type CategoryData from './data/categories';\r\nimport type EmojiData from './data/emojis';\r\nexport declare type Names = keyof typeof EmojiData;\r\nexport declare type AliasNames = keyof typeof AliasData;\r\nexport declare type Category = keyof typeof CategoryData;\r\nexport declare type NamesAndAliases = Names | AliasNames;\r\nexport interface EmojiObject {\r\n    keywords: string[];\r\n    char: string;\r\n    category: string;\r\n    name: string;\r\n    description: string;\r\n    skinVariations: boolean;\r\n}\r\nexport interface EmojiSuggestionChangeHandlerParameter extends SuggestChangeHandlerParameter<EmojiSuggestCommand> {\r\n    /**\r\n     * The currently matching objects\r\n     */\r\n    emojiMatches: EmojiObject[];\r\n}\r\nexport declare type SkinVariation = 0 | 1 | 2 | 3 | 4;\r\nexport declare type EmojiSuggestCommand = (emoji: EmojiObject, skinVariation?: SkinVariation) => void;\r\nexport declare type EmojiSuggestionKeyBindings = SuggestKeyBindingMap<EmojiSuggestCommand>;\r\nexport declare type EmojiSuggestionChangeHandler = (parameter: EmojiSuggestionChangeHandlerParameter) => void;\r\nexport declare type EmojiSuggestionExitHandler = (parameter: SuggestExitHandlerParameter) => void;\r\nexport interface EmojiOptions {\r\n    /**\r\n     * The character which will trigger the emoji suggesters popup.\r\n     */\r\n    suggestionCharacter?: string;\r\n    /**\r\n     * A list of the initial (frequently used) emoji displayed to the user.\r\n     * These are used when the query typed is less than two characters long.\r\n     */\r\n    defaultEmoji?: NamesAndAliases[];\r\n    /**\r\n     * Key bindings for suggesters.\r\n     */\r\n    keyBindings?: CustomHandler<EmojiSuggestionKeyBindings>;\r\n    /**\r\n     * Called whenever the suggestion value is updated.\r\n     */\r\n    onChange?: Handler<EmojiSuggestionChangeHandler>;\r\n    /**\r\n     * Called when the suggestion exits.\r\n     * This is useful for cleaning up local state when emoji is set.\r\n     */\r\n    onExit?: Handler<EmojiSuggestionExitHandler>;\r\n    /**\r\n     * The maximum results to show when searching for matching emoji.\r\n     *\r\n     * @defaultValue 15\r\n     */\r\n    maxResults?: number;\r\n}\r\nexport declare type EmojiObjectRecord = Record<Names, EmojiObject>;\r\n",
      "emoji-utils.d.ts": "import type { AliasNames, EmojiObject, Names, NamesAndAliases, SkinVariation } from './emoji-types.js';\r\nexport declare const EMOTICONS: Record<string, string[]>;\r\n/**\r\n * The different skin variations supported.\r\n */\r\nexport declare const SKIN_VARIATIONS: readonly [\"🏻\", \"🏼\", \"🏽\", \"🏾\", \"🏿\"];\r\n/**\r\n * Check that the value is a valid skin variation index.\r\n *\r\n * Perhaps a controversial name...\r\n */\r\nexport declare function isValidSkinVariation(value: unknown): value is SkinVariation;\r\nexport declare const DEFAULT_FREQUENTLY_USED: Names[];\r\nexport declare const emoticonRegex: RegExp;\r\nexport declare const emojiNames: (\"repeat\" | \"anchor\" | \"link\" | \"a\" | \"b\" | \"label\" | \"tr\" | \"id\" | \"mask\" | \"up\" | \"key\" | \"end\" | \"scroll\" | \"m\" | \"o\" | \"v\" | \"x\" | \"100\" | \"1234\" | \"grinning\" | \"grimacing\" | \"grin\" | \"joy\" | \"rofl\" | \"partying\" | \"smiley\" | \"smile\" | \"sweat_smile\" | \"laughing\" | \"innocent\" | \"wink\" | \"blush\" | \"slightly_smiling_face\" | \"upside_down_face\" | \"relaxed\" | \"yum\" | \"relieved\" | \"heart_eyes\" | \"smiling_face_with_three_hearts\" | \"kissing_heart\" | \"kissing\" | \"kissing_smiling_eyes\" | \"kissing_closed_eyes\" | \"stuck_out_tongue_winking_eye\" | \"zany\" | \"raised_eyebrow\" | \"monocle\" | \"stuck_out_tongue_closed_eyes\" | \"stuck_out_tongue\" | \"money_mouth_face\" | \"nerd_face\" | \"sunglasses\" | \"star_struck\" | \"clown_face\" | \"cowboy_hat_face\" | \"hugs\" | \"smirk\" | \"no_mouth\" | \"neutral_face\" | \"expressionless\" | \"unamused\" | \"roll_eyes\" | \"thinking\" | \"lying_face\" | \"hand_over_mouth\" | \"shushing\" | \"symbols_over_mouth\" | \"exploding_head\" | \"flushed\" | \"disappointed\" | \"worried\" | \"angry\" | \"rage\" | \"pensive\" | \"confused\" | \"slightly_frowning_face\" | \"frowning_face\" | \"persevere\" | \"confounded\" | \"tired_face\" | \"weary\" | \"pleading\" | \"triumph\" | \"open_mouth\" | \"scream\" | \"fearful\" | \"cold_sweat\" | \"hushed\" | \"frowning\" | \"anguished\" | \"cry\" | \"disappointed_relieved\" | \"drooling_face\" | \"sleepy\" | \"sweat\" | \"hot\" | \"cold\" | \"sob\" | \"dizzy_face\" | \"astonished\" | \"zipper_mouth_face\" | \"nauseated_face\" | \"sneezing_face\" | \"vomiting\" | \"face_with_thermometer\" | \"face_with_head_bandage\" | \"woozy\" | \"sleeping\" | \"zzz\" | \"poop\" | \"smiling_imp\" | \"imp\" | \"japanese_ogre\" | \"japanese_goblin\" | \"skull\" | \"ghost\" | \"alien\" | \"robot\" | \"smiley_cat\" | \"smile_cat\" | \"joy_cat\" | \"heart_eyes_cat\" | \"smirk_cat\" | \"kissing_cat\" | \"scream_cat\" | \"crying_cat_face\" | \"pouting_cat\" | \"palms_up\" | \"raised_hands\" | \"clap\" | \"wave\" | \"call_me_hand\" | \"+1\" | \"-1\" | \"facepunch\" | \"fist\" | \"fist_left\" | \"fist_right\" | \"ok_hand\" | \"raised_hand\" | \"raised_back_of_hand\" | \"open_hands\" | \"muscle\" | \"pray\" | \"foot\" | \"leg\" | \"handshake\" | \"point_up\" | \"point_up_2\" | \"point_down\" | \"point_left\" | \"point_right\" | \"fu\" | \"raised_hand_with_fingers_splayed\" | \"love_you\" | \"metal\" | \"crossed_fingers\" | \"vulcan_salute\" | \"writing_hand\" | \"selfie\" | \"nail_care\" | \"lips\" | \"tooth\" | \"tongue\" | \"ear\" | \"nose\" | \"eye\" | \"eyes\" | \"brain\" | \"bust_in_silhouette\" | \"busts_in_silhouette\" | \"speaking_head\" | \"baby\" | \"child\" | \"boy\" | \"girl\" | \"adult\" | \"man\" | \"woman\" | \"blonde_woman\" | \"blonde_man\" | \"bearded_person\" | \"older_adult\" | \"older_man\" | \"older_woman\" | \"man_with_gua_pi_mao\" | \"woman_with_headscarf\" | \"woman_with_turban\" | \"man_with_turban\" | \"policewoman\" | \"policeman\" | \"construction_worker_woman\" | \"construction_worker_man\" | \"guardswoman\" | \"guardsman\" | \"female_detective\" | \"male_detective\" | \"woman_health_worker\" | \"man_health_worker\" | \"woman_farmer\" | \"man_farmer\" | \"woman_cook\" | \"man_cook\" | \"woman_student\" | \"man_student\" | \"woman_singer\" | \"man_singer\" | \"woman_teacher\" | \"man_teacher\" | \"woman_factory_worker\" | \"man_factory_worker\" | \"woman_technologist\" | \"man_technologist\" | \"woman_office_worker\" | \"man_office_worker\" | \"woman_mechanic\" | \"man_mechanic\" | \"woman_scientist\" | \"man_scientist\" | \"woman_artist\" | \"man_artist\" | \"woman_firefighter\" | \"man_firefighter\" | \"woman_pilot\" | \"man_pilot\" | \"woman_astronaut\" | \"man_astronaut\" | \"woman_judge\" | \"man_judge\" | \"woman_superhero\" | \"man_superhero\" | \"woman_supervillain\" | \"man_supervillain\" | \"mrs_claus\" | \"santa\" | \"sorceress\" | \"wizard\" | \"woman_elf\" | \"man_elf\" | \"woman_vampire\" | \"man_vampire\" | \"woman_zombie\" | \"man_zombie\" | \"woman_genie\" | \"man_genie\" | \"mermaid\" | \"merman\" | \"woman_fairy\" | \"man_fairy\" | \"angel\" | \"pregnant_woman\" | \"breastfeeding\" | \"princess\" | \"prince\" | \"bride_with_veil\" | \"man_in_tuxedo\" | \"running_woman\" | \"running_man\" | \"walking_woman\" | \"walking_man\" | \"dancer\" | \"man_dancing\" | \"dancing_women\" | \"dancing_men\" | \"couple\" | \"two_men_holding_hands\" | \"two_women_holding_hands\" | \"bowing_woman\" | \"bowing_man\" | \"man_facepalming\" | \"woman_facepalming\" | \"woman_shrugging\" | \"man_shrugging\" | \"tipping_hand_woman\" | \"tipping_hand_man\" | \"no_good_woman\" | \"no_good_man\" | \"ok_woman\" | \"ok_man\" | \"raising_hand_woman\" | \"raising_hand_man\" | \"pouting_woman\" | \"pouting_man\" | \"frowning_woman\" | \"frowning_man\" | \"haircut_woman\" | \"haircut_man\" | \"massage_woman\" | \"massage_man\" | \"woman_in_steamy_room\" | \"man_in_steamy_room\" | \"couple_with_heart_woman_man\" | \"couple_with_heart_woman_woman\" | \"couple_with_heart_man_man\" | \"couplekiss_man_woman\" | \"couplekiss_woman_woman\" | \"couplekiss_man_man\" | \"family_man_woman_boy\" | \"family_man_woman_girl\" | \"family_man_woman_girl_boy\" | \"family_man_woman_boy_boy\" | \"family_man_woman_girl_girl\" | \"family_woman_woman_boy\" | \"family_woman_woman_girl\" | \"family_woman_woman_girl_boy\" | \"family_woman_woman_boy_boy\" | \"family_woman_woman_girl_girl\" | \"family_man_man_boy\" | \"family_man_man_girl\" | \"family_man_man_girl_boy\" | \"family_man_man_boy_boy\" | \"family_man_man_girl_girl\" | \"family_woman_boy\" | \"family_woman_girl\" | \"family_woman_girl_boy\" | \"family_woman_boy_boy\" | \"family_woman_girl_girl\" | \"family_man_boy\" | \"family_man_girl\" | \"family_man_girl_boy\" | \"family_man_boy_boy\" | \"family_man_girl_girl\" | \"yarn\" | \"thread\" | \"coat\" | \"labcoat\" | \"womans_clothes\" | \"tshirt\" | \"jeans\" | \"necktie\" | \"dress\" | \"bikini\" | \"kimono\" | \"lipstick\" | \"kiss\" | \"footprints\" | \"flat_shoe\" | \"high_heel\" | \"sandal\" | \"boot\" | \"mans_shoe\" | \"athletic_shoe\" | \"hiking_boot\" | \"socks\" | \"gloves\" | \"scarf\" | \"womans_hat\" | \"tophat\" | \"billed_hat\" | \"rescue_worker_helmet\" | \"mortar_board\" | \"crown\" | \"school_satchel\" | \"luggage\" | \"pouch\" | \"purse\" | \"handbag\" | \"briefcase\" | \"eyeglasses\" | \"dark_sunglasses\" | \"goggles\" | \"ring\" | \"closed_umbrella\" | \"dog\" | \"cat\" | \"mouse\" | \"hamster\" | \"rabbit\" | \"fox_face\" | \"bear\" | \"panda_face\" | \"koala\" | \"tiger\" | \"lion\" | \"cow\" | \"pig\" | \"pig_nose\" | \"frog\" | \"squid\" | \"octopus\" | \"shrimp\" | \"monkey_face\" | \"gorilla\" | \"see_no_evil\" | \"hear_no_evil\" | \"speak_no_evil\" | \"monkey\" | \"chicken\" | \"penguin\" | \"bird\" | \"baby_chick\" | \"hatching_chick\" | \"hatched_chick\" | \"duck\" | \"eagle\" | \"owl\" | \"bat\" | \"wolf\" | \"boar\" | \"horse\" | \"unicorn\" | \"honeybee\" | \"bug\" | \"butterfly\" | \"snail\" | \"beetle\" | \"ant\" | \"grasshopper\" | \"spider\" | \"scorpion\" | \"crab\" | \"snake\" | \"lizard\" | \"t-rex\" | \"sauropod\" | \"turtle\" | \"tropical_fish\" | \"fish\" | \"blowfish\" | \"dolphin\" | \"shark\" | \"whale\" | \"whale2\" | \"crocodile\" | \"leopard\" | \"zebra\" | \"tiger2\" | \"water_buffalo\" | \"ox\" | \"cow2\" | \"deer\" | \"dromedary_camel\" | \"camel\" | \"giraffe\" | \"elephant\" | \"rhinoceros\" | \"goat\" | \"ram\" | \"sheep\" | \"racehorse\" | \"pig2\" | \"rat\" | \"mouse2\" | \"rooster\" | \"turkey\" | \"dove\" | \"dog2\" | \"poodle\" | \"cat2\" | \"rabbit2\" | \"chipmunk\" | \"hedgehog\" | \"raccoon\" | \"llama\" | \"hippopotamus\" | \"kangaroo\" | \"badger\" | \"swan\" | \"peacock\" | \"parrot\" | \"lobster\" | \"mosquito\" | \"paw_prints\" | \"dragon\" | \"dragon_face\" | \"cactus\" | \"christmas_tree\" | \"evergreen_tree\" | \"deciduous_tree\" | \"palm_tree\" | \"seedling\" | \"herb\" | \"shamrock\" | \"four_leaf_clover\" | \"bamboo\" | \"tanabata_tree\" | \"leaves\" | \"fallen_leaf\" | \"maple_leaf\" | \"ear_of_rice\" | \"hibiscus\" | \"sunflower\" | \"rose\" | \"wilted_flower\" | \"tulip\" | \"blossom\" | \"cherry_blossom\" | \"bouquet\" | \"mushroom\" | \"chestnut\" | \"jack_o_lantern\" | \"shell\" | \"spider_web\" | \"earth_americas\" | \"earth_africa\" | \"earth_asia\" | \"full_moon\" | \"waning_gibbous_moon\" | \"last_quarter_moon\" | \"waning_crescent_moon\" | \"new_moon\" | \"waxing_crescent_moon\" | \"first_quarter_moon\" | \"waxing_gibbous_moon\" | \"new_moon_with_face\" | \"full_moon_with_face\" | \"first_quarter_moon_with_face\" | \"last_quarter_moon_with_face\" | \"sun_with_face\" | \"crescent_moon\" | \"star\" | \"star2\" | \"dizzy\" | \"sparkles\" | \"comet\" | \"sunny\" | \"sun_behind_small_cloud\" | \"partly_sunny\" | \"sun_behind_large_cloud\" | \"sun_behind_rain_cloud\" | \"cloud\" | \"cloud_with_rain\" | \"cloud_with_lightning_and_rain\" | \"cloud_with_lightning\" | \"zap\" | \"fire\" | \"boom\" | \"snowflake\" | \"cloud_with_snow\" | \"snowman\" | \"snowman_with_snow\" | \"wind_face\" | \"dash\" | \"tornado\" | \"fog\" | \"open_umbrella\" | \"umbrella\" | \"droplet\" | \"sweat_drops\" | \"ocean\" | \"green_apple\" | \"apple\" | \"pear\" | \"tangerine\" | \"lemon\" | \"banana\" | \"watermelon\" | \"grapes\" | \"strawberry\" | \"melon\" | \"cherries\" | \"peach\" | \"pineapple\" | \"coconut\" | \"kiwi_fruit\" | \"mango\" | \"avocado\" | \"broccoli\" | \"tomato\" | \"eggplant\" | \"cucumber\" | \"carrot\" | \"hot_pepper\" | \"potato\" | \"corn\" | \"leafy_greens\" | \"sweet_potato\" | \"peanuts\" | \"honey_pot\" | \"croissant\" | \"bread\" | \"baguette_bread\" | \"bagel\" | \"pretzel\" | \"cheese\" | \"egg\" | \"bacon\" | \"steak\" | \"pancakes\" | \"poultry_leg\" | \"meat_on_bone\" | \"bone\" | \"fried_shrimp\" | \"fried_egg\" | \"hamburger\" | \"fries\" | \"stuffed_flatbread\" | \"hotdog\" | \"pizza\" | \"sandwich\" | \"canned_food\" | \"spaghetti\" | \"taco\" | \"burrito\" | \"green_salad\" | \"shallow_pan_of_food\" | \"ramen\" | \"stew\" | \"fish_cake\" | \"fortune_cookie\" | \"sushi\" | \"bento\" | \"curry\" | \"rice_ball\" | \"rice\" | \"rice_cracker\" | \"oden\" | \"dango\" | \"shaved_ice\" | \"ice_cream\" | \"icecream\" | \"pie\" | \"cake\" | \"cupcake\" | \"moon_cake\" | \"birthday\" | \"custard\" | \"candy\" | \"lollipop\" | \"chocolate_bar\" | \"popcorn\" | \"dumpling\" | \"doughnut\" | \"cookie\" | \"milk_glass\" | \"beer\" | \"beers\" | \"clinking_glasses\" | \"wine_glass\" | \"tumbler_glass\" | \"cocktail\" | \"tropical_drink\" | \"champagne\" | \"sake\" | \"tea\" | \"cup_with_straw\" | \"coffee\" | \"baby_bottle\" | \"salt\" | \"spoon\" | \"fork_and_knife\" | \"plate_with_cutlery\" | \"bowl_with_spoon\" | \"takeout_box\" | \"chopsticks\" | \"soccer\" | \"basketball\" | \"football\" | \"baseball\" | \"softball\" | \"tennis\" | \"volleyball\" | \"rugby_football\" | \"flying_disc\" | \"8ball\" | \"golf\" | \"golfing_woman\" | \"golfing_man\" | \"ping_pong\" | \"badminton\" | \"goal_net\" | \"ice_hockey\" | \"field_hockey\" | \"lacrosse\" | \"cricket\" | \"ski\" | \"skier\" | \"snowboarder\" | \"person_fencing\" | \"women_wrestling\" | \"men_wrestling\" | \"woman_cartwheeling\" | \"man_cartwheeling\" | \"woman_playing_handball\" | \"man_playing_handball\" | \"ice_skate\" | \"curling_stone\" | \"skateboard\" | \"sled\" | \"bow_and_arrow\" | \"fishing_pole_and_fish\" | \"boxing_glove\" | \"martial_arts_uniform\" | \"rowing_woman\" | \"rowing_man\" | \"climbing_woman\" | \"climbing_man\" | \"swimming_woman\" | \"swimming_man\" | \"woman_playing_water_polo\" | \"man_playing_water_polo\" | \"woman_in_lotus_position\" | \"man_in_lotus_position\" | \"surfing_woman\" | \"surfing_man\" | \"bath\" | \"basketball_woman\" | \"basketball_man\" | \"weight_lifting_woman\" | \"weight_lifting_man\" | \"biking_woman\" | \"biking_man\" | \"mountain_biking_woman\" | \"mountain_biking_man\" | \"horse_racing\" | \"business_suit_levitating\" | \"trophy\" | \"running_shirt_with_sash\" | \"medal_sports\" | \"medal_military\" | \"1st_place_medal\" | \"2nd_place_medal\" | \"3rd_place_medal\" | \"reminder_ribbon\" | \"rosette\" | \"ticket\" | \"tickets\" | \"performing_arts\" | \"art\" | \"circus_tent\" | \"woman_juggling\" | \"man_juggling\" | \"microphone\" | \"headphones\" | \"musical_score\" | \"musical_keyboard\" | \"drum\" | \"saxophone\" | \"trumpet\" | \"guitar\" | \"violin\" | \"clapper\" | \"video_game\" | \"space_invader\" | \"dart\" | \"game_die\" | \"chess_pawn\" | \"slot_machine\" | \"jigsaw\" | \"bowling\" | \"red_car\" | \"taxi\" | \"blue_car\" | \"bus\" | \"trolleybus\" | \"racing_car\" | \"police_car\" | \"ambulance\" | \"fire_engine\" | \"minibus\" | \"truck\" | \"articulated_lorry\" | \"tractor\" | \"kick_scooter\" | \"motorcycle\" | \"bike\" | \"motor_scooter\" | \"rotating_light\" | \"oncoming_police_car\" | \"oncoming_bus\" | \"oncoming_automobile\" | \"oncoming_taxi\" | \"aerial_tramway\" | \"mountain_cableway\" | \"suspension_railway\" | \"railway_car\" | \"train\" | \"monorail\" | \"bullettrain_side\" | \"bullettrain_front\" | \"light_rail\" | \"mountain_railway\" | \"steam_locomotive\" | \"train2\" | \"metro\" | \"tram\" | \"station\" | \"flying_saucer\" | \"helicopter\" | \"small_airplane\" | \"airplane\" | \"flight_departure\" | \"flight_arrival\" | \"sailboat\" | \"motor_boat\" | \"speedboat\" | \"ferry\" | \"passenger_ship\" | \"rocket\" | \"artificial_satellite\" | \"seat\" | \"canoe\" | \"construction\" | \"fuelpump\" | \"busstop\" | \"vertical_traffic_light\" | \"traffic_light\" | \"checkered_flag\" | \"ship\" | \"ferris_wheel\" | \"roller_coaster\" | \"carousel_horse\" | \"building_construction\" | \"foggy\" | \"tokyo_tower\" | \"factory\" | \"fountain\" | \"rice_scene\" | \"mountain\" | \"mountain_snow\" | \"mount_fuji\" | \"volcano\" | \"japan\" | \"camping\" | \"tent\" | \"national_park\" | \"motorway\" | \"railway_track\" | \"sunrise\" | \"sunrise_over_mountains\" | \"desert\" | \"beach_umbrella\" | \"desert_island\" | \"city_sunrise\" | \"city_sunset\" | \"cityscape\" | \"night_with_stars\" | \"bridge_at_night\" | \"milky_way\" | \"stars\" | \"sparkler\" | \"fireworks\" | \"rainbow\" | \"houses\" | \"european_castle\" | \"japanese_castle\" | \"stadium\" | \"statue_of_liberty\" | \"house\" | \"house_with_garden\" | \"derelict_house\" | \"office\" | \"department_store\" | \"post_office\" | \"european_post_office\" | \"hospital\" | \"bank\" | \"hotel\" | \"convenience_store\" | \"school\" | \"love_hotel\" | \"wedding\" | \"classical_building\" | \"church\" | \"mosque\" | \"synagogue\" | \"kaaba\" | \"shinto_shrine\" | \"watch\" | \"iphone\" | \"calling\" | \"computer\" | \"keyboard\" | \"desktop_computer\" | \"printer\" | \"computer_mouse\" | \"trackball\" | \"joystick\" | \"clamp\" | \"minidisc\" | \"floppy_disk\" | \"cd\" | \"dvd\" | \"vhs\" | \"camera\" | \"camera_flash\" | \"video_camera\" | \"movie_camera\" | \"film_projector\" | \"film_strip\" | \"telephone_receiver\" | \"phone\" | \"pager\" | \"fax\" | \"tv\" | \"radio\" | \"studio_microphone\" | \"level_slider\" | \"control_knobs\" | \"compass\" | \"stopwatch\" | \"timer_clock\" | \"alarm_clock\" | \"mantelpiece_clock\" | \"hourglass_flowing_sand\" | \"hourglass\" | \"satellite\" | \"battery\" | \"electric_plug\" | \"bulb\" | \"flashlight\" | \"candle\" | \"fire_extinguisher\" | \"wastebasket\" | \"oil_drum\" | \"money_with_wings\" | \"dollar\" | \"yen\" | \"euro\" | \"pound\" | \"moneybag\" | \"credit_card\" | \"gem\" | \"balance_scale\" | \"toolbox\" | \"wrench\" | \"hammer\" | \"hammer_and_pick\" | \"hammer_and_wrench\" | \"pick\" | \"nut_and_bolt\" | \"gear\" | \"brick\" | \"chains\" | \"magnet\" | \"gun\" | \"bomb\" | \"firecracker\" | \"hocho\" | \"dagger\" | \"crossed_swords\" | \"shield\" | \"smoking\" | \"skull_and_crossbones\" | \"coffin\" | \"funeral_urn\" | \"amphora\" | \"crystal_ball\" | \"prayer_beads\" | \"nazar_amulet\" | \"barber\" | \"alembic\" | \"telescope\" | \"microscope\" | \"hole\" | \"pill\" | \"syringe\" | \"dna\" | \"microbe\" | \"petri_dish\" | \"test_tube\" | \"thermometer\" | \"broom\" | \"basket\" | \"toilet_paper\" | \"bookmark\" | \"toilet\" | \"shower\" | \"bathtub\" | \"soap\" | \"sponge\" | \"lotion_bottle\" | \"old_key\" | \"couch_and_lamp\" | \"sleeping_bed\" | \"bed\" | \"door\" | \"bellhop_bell\" | \"teddy_bear\" | \"framed_picture\" | \"world_map\" | \"parasol_on_ground\" | \"moyai\" | \"shopping\" | \"shopping_cart\" | \"balloon\" | \"flags\" | \"ribbon\" | \"gift\" | \"confetti_ball\" | \"tada\" | \"dolls\" | \"wind_chime\" | \"crossed_flags\" | \"izakaya_lantern\" | \"red_envelope\" | \"email\" | \"envelope_with_arrow\" | \"incoming_envelope\" | \"e-mail\" | \"love_letter\" | \"postbox\" | \"mailbox_closed\" | \"mailbox\" | \"mailbox_with_mail\" | \"mailbox_with_no_mail\" | \"package\" | \"postal_horn\" | \"inbox_tray\" | \"outbox_tray\" | \"page_with_curl\" | \"bookmark_tabs\" | \"receipt\" | \"bar_chart\" | \"chart_with_upwards_trend\" | \"chart_with_downwards_trend\" | \"page_facing_up\" | \"date\" | \"calendar\" | \"spiral_calendar\" | \"card_index\" | \"card_file_box\" | \"ballot_box\" | \"file_cabinet\" | \"clipboard\" | \"spiral_notepad\" | \"file_folder\" | \"open_file_folder\" | \"card_index_dividers\" | \"newspaper_roll\" | \"newspaper\" | \"notebook\" | \"closed_book\" | \"green_book\" | \"blue_book\" | \"orange_book\" | \"notebook_with_decorative_cover\" | \"ledger\" | \"books\" | \"open_book\" | \"safety_pin\" | \"paperclip\" | \"paperclips\" | \"scissors\" | \"triangular_ruler\" | \"straight_ruler\" | \"abacus\" | \"pushpin\" | \"round_pushpin\" | \"triangular_flag_on_post\" | \"white_flag\" | \"black_flag\" | \"rainbow_flag\" | \"closed_lock_with_key\" | \"lock\" | \"unlock\" | \"lock_with_ink_pen\" | \"pen\" | \"fountain_pen\" | \"black_nib\" | \"memo\" | \"pencil2\" | \"crayon\" | \"paintbrush\" | \"mag\" | \"mag_right\" | \"heart\" | \"orange_heart\" | \"yellow_heart\" | \"green_heart\" | \"blue_heart\" | \"purple_heart\" | \"black_heart\" | \"broken_heart\" | \"heavy_heart_exclamation\" | \"two_hearts\" | \"revolving_hearts\" | \"heartbeat\" | \"heartpulse\" | \"sparkling_heart\" | \"cupid\" | \"gift_heart\" | \"heart_decoration\" | \"peace_symbol\" | \"latin_cross\" | \"star_and_crescent\" | \"om\" | \"wheel_of_dharma\" | \"star_of_david\" | \"six_pointed_star\" | \"menorah\" | \"yin_yang\" | \"orthodox_cross\" | \"place_of_worship\" | \"ophiuchus\" | \"aries\" | \"taurus\" | \"gemini\" | \"cancer\" | \"leo\" | \"virgo\" | \"libra\" | \"scorpius\" | \"sagittarius\" | \"capricorn\" | \"aquarius\" | \"pisces\" | \"atom_symbol\" | \"u7a7a\" | \"u5272\" | \"radioactive\" | \"biohazard\" | \"mobile_phone_off\" | \"vibration_mode\" | \"u6709\" | \"u7121\" | \"u7533\" | \"u55b6\" | \"u6708\" | \"eight_pointed_black_star\" | \"vs\" | \"accept\" | \"white_flower\" | \"ideograph_advantage\" | \"secret\" | \"congratulations\" | \"u5408\" | \"u6e80\" | \"u7981\" | \"ab\" | \"cl\" | \"o2\" | \"sos\" | \"no_entry\" | \"name_badge\" | \"no_entry_sign\" | \"stop_sign\" | \"anger\" | \"hotsprings\" | \"no_pedestrians\" | \"do_not_litter\" | \"no_bicycles\" | \"non-potable_water\" | \"underage\" | \"no_mobile_phones\" | \"exclamation\" | \"grey_exclamation\" | \"question\" | \"grey_question\" | \"bangbang\" | \"interrobang\" | \"low_brightness\" | \"high_brightness\" | \"trident\" | \"fleur_de_lis\" | \"part_alternation_mark\" | \"warning\" | \"children_crossing\" | \"beginner\" | \"recycle\" | \"u6307\" | \"chart\" | \"sparkle\" | \"eight_spoked_asterisk\" | \"negative_squared_cross_mark\" | \"white_check_mark\" | \"diamond_shape_with_a_dot_inside\" | \"cyclone\" | \"loop\" | \"globe_with_meridians\" | \"atm\" | \"sa\" | \"passport_control\" | \"customs\" | \"baggage_claim\" | \"left_luggage\" | \"wheelchair\" | \"no_smoking\" | \"wc\" | \"parking\" | \"potable_water\" | \"mens\" | \"womens\" | \"baby_symbol\" | \"restroom\" | \"put_litter_in_its_place\" | \"cinema\" | \"signal_strength\" | \"koko\" | \"ng\" | \"ok\" | \"cool\" | \"new\" | \"free\" | \"zero\" | \"one\" | \"two\" | \"three\" | \"four\" | \"five\" | \"six\" | \"seven\" | \"eight\" | \"nine\" | \"keycap_ten\" | \"asterisk\" | \"eject_button\" | \"arrow_forward\" | \"pause_button\" | \"next_track_button\" | \"stop_button\" | \"record_button\" | \"play_or_pause_button\" | \"previous_track_button\" | \"fast_forward\" | \"rewind\" | \"twisted_rightwards_arrows\" | \"repeat_one\" | \"arrow_backward\" | \"arrow_up_small\" | \"arrow_down_small\" | \"arrow_double_up\" | \"arrow_double_down\" | \"arrow_right\" | \"arrow_left\" | \"arrow_up\" | \"arrow_down\" | \"arrow_upper_right\" | \"arrow_lower_right\" | \"arrow_lower_left\" | \"arrow_upper_left\" | \"arrow_up_down\" | \"left_right_arrow\" | \"arrows_counterclockwise\" | \"arrow_right_hook\" | \"leftwards_arrow_with_hook\" | \"arrow_heading_up\" | \"arrow_heading_down\" | \"hash\" | \"information_source\" | \"abc\" | \"abcd\" | \"capital_abcd\" | \"symbols\" | \"musical_note\" | \"notes\" | \"wavy_dash\" | \"curly_loop\" | \"heavy_check_mark\" | \"arrows_clockwise\" | \"heavy_plus_sign\" | \"heavy_minus_sign\" | \"heavy_division_sign\" | \"heavy_multiplication_x\" | \"infinity\" | \"heavy_dollar_sign\" | \"currency_exchange\" | \"copyright\" | \"registered\" | \"tm\" | \"back\" | \"on\" | \"top\" | \"soon\" | \"ballot_box_with_check\" | \"radio_button\" | \"white_circle\" | \"black_circle\" | \"red_circle\" | \"large_blue_circle\" | \"small_orange_diamond\" | \"small_blue_diamond\" | \"large_orange_diamond\" | \"large_blue_diamond\" | \"small_red_triangle\" | \"black_small_square\" | \"white_small_square\" | \"black_large_square\" | \"white_large_square\" | \"small_red_triangle_down\" | \"black_medium_square\" | \"white_medium_square\" | \"black_medium_small_square\" | \"white_medium_small_square\" | \"black_square_button\" | \"white_square_button\" | \"speaker\" | \"sound\" | \"loud_sound\" | \"mute\" | \"mega\" | \"loudspeaker\" | \"bell\" | \"no_bell\" | \"black_joker\" | \"mahjong\" | \"spades\" | \"clubs\" | \"hearts\" | \"diamonds\" | \"flower_playing_cards\" | \"thought_balloon\" | \"right_anger_bubble\" | \"speech_balloon\" | \"left_speech_bubble\" | \"clock1\" | \"clock2\" | \"clock3\" | \"clock4\" | \"clock5\" | \"clock6\" | \"clock7\" | \"clock8\" | \"clock9\" | \"clock10\" | \"clock11\" | \"clock12\" | \"clock130\" | \"clock230\" | \"clock330\" | \"clock430\" | \"clock530\" | \"clock630\" | \"clock730\" | \"clock830\" | \"clock930\" | \"clock1030\" | \"clock1130\" | \"clock1230\" | \"afghanistan\" | \"aland_islands\" | \"albania\" | \"algeria\" | \"american_samoa\" | \"andorra\" | \"angola\" | \"anguilla\" | \"antarctica\" | \"antigua_barbuda\" | \"argentina\" | \"armenia\" | \"aruba\" | \"australia\" | \"austria\" | \"azerbaijan\" | \"bahamas\" | \"bahrain\" | \"bangladesh\" | \"barbados\" | \"belarus\" | \"belgium\" | \"belize\" | \"benin\" | \"bermuda\" | \"bhutan\" | \"bolivia\" | \"caribbean_netherlands\" | \"bosnia_herzegovina\" | \"botswana\" | \"brazil\" | \"british_indian_ocean_territory\" | \"british_virgin_islands\" | \"brunei\" | \"bulgaria\" | \"burkina_faso\" | \"burundi\" | \"cape_verde\" | \"cambodia\" | \"cameroon\" | \"canada\" | \"canary_islands\" | \"cayman_islands\" | \"central_african_republic\" | \"chad\" | \"chile\" | \"cn\" | \"christmas_island\" | \"cocos_islands\" | \"colombia\" | \"comoros\" | \"congo_brazzaville\" | \"congo_kinshasa\" | \"cook_islands\" | \"costa_rica\" | \"croatia\" | \"cuba\" | \"curacao\" | \"cyprus\" | \"czech_republic\" | \"denmark\" | \"djibouti\" | \"dominica\" | \"dominican_republic\" | \"ecuador\" | \"egypt\" | \"el_salvador\" | \"equatorial_guinea\" | \"eritrea\" | \"estonia\" | \"ethiopia\" | \"eu\" | \"falkland_islands\" | \"faroe_islands\" | \"fiji\" | \"finland\" | \"fr\" | \"french_guiana\" | \"french_polynesia\" | \"french_southern_territories\" | \"gabon\" | \"gambia\" | \"georgia\" | \"de\" | \"ghana\" | \"gibraltar\" | \"greece\" | \"greenland\" | \"grenada\" | \"guadeloupe\" | \"guam\" | \"guatemala\" | \"guernsey\" | \"guinea\" | \"guinea_bissau\" | \"guyana\" | \"haiti\" | \"honduras\" | \"hong_kong\" | \"hungary\" | \"iceland\" | \"india\" | \"indonesia\" | \"iran\" | \"iraq\" | \"ireland\" | \"isle_of_man\" | \"israel\" | \"it\" | \"cote_divoire\" | \"jamaica\" | \"jp\" | \"jersey\" | \"jordan\" | \"kazakhstan\" | \"kenya\" | \"kiribati\" | \"kosovo\" | \"kuwait\" | \"kyrgyzstan\" | \"laos\" | \"latvia\" | \"lebanon\" | \"lesotho\" | \"liberia\" | \"libya\" | \"liechtenstein\" | \"lithuania\" | \"luxembourg\" | \"macau\" | \"macedonia\" | \"madagascar\" | \"malawi\" | \"malaysia\" | \"maldives\" | \"mali\" | \"malta\" | \"marshall_islands\" | \"martinique\" | \"mauritania\" | \"mauritius\" | \"mayotte\" | \"mexico\" | \"micronesia\" | \"moldova\" | \"monaco\" | \"mongolia\" | \"montenegro\" | \"montserrat\" | \"morocco\" | \"mozambique\" | \"myanmar\" | \"namibia\" | \"nauru\" | \"nepal\" | \"netherlands\" | \"new_caledonia\" | \"new_zealand\" | \"nicaragua\" | \"niger\" | \"nigeria\" | \"niue\" | \"norfolk_island\" | \"northern_mariana_islands\" | \"north_korea\" | \"norway\" | \"oman\" | \"pakistan\" | \"palau\" | \"palestinian_territories\" | \"panama\" | \"papua_new_guinea\" | \"paraguay\" | \"peru\" | \"philippines\" | \"pitcairn_islands\" | \"poland\" | \"portugal\" | \"puerto_rico\" | \"qatar\" | \"reunion\" | \"romania\" | \"ru\" | \"rwanda\" | \"st_barthelemy\" | \"st_helena\" | \"st_kitts_nevis\" | \"st_lucia\" | \"st_pierre_miquelon\" | \"st_vincent_grenadines\" | \"samoa\" | \"san_marino\" | \"sao_tome_principe\" | \"saudi_arabia\" | \"senegal\" | \"serbia\" | \"seychelles\" | \"sierra_leone\" | \"singapore\" | \"sint_maarten\" | \"slovakia\" | \"slovenia\" | \"solomon_islands\" | \"somalia\" | \"south_africa\" | \"south_georgia_south_sandwich_islands\" | \"kr\" | \"south_sudan\" | \"es\" | \"sri_lanka\" | \"sudan\" | \"suriname\" | \"swaziland\" | \"sweden\" | \"switzerland\" | \"syria\" | \"taiwan\" | \"tajikistan\" | \"tanzania\" | \"thailand\" | \"timor_leste\" | \"togo\" | \"tokelau\" | \"tonga\" | \"trinidad_tobago\" | \"tunisia\" | \"turkmenistan\" | \"turks_caicos_islands\" | \"tuvalu\" | \"uganda\" | \"ukraine\" | \"united_arab_emirates\" | \"uk\" | \"england\" | \"scotland\" | \"wales\" | \"us\" | \"us_virgin_islands\" | \"uruguay\" | \"uzbekistan\" | \"vanuatu\" | \"vatican_city\" | \"venezuela\" | \"vietnam\" | \"wallis_futuna\" | \"western_sahara\" | \"yemen\" | \"zambia\" | \"zimbabwe\" | \"united_nations\" | \"pirate_flag\")[];\r\nexport declare const emojiList: EmojiObject[];\r\nexport declare const emojiCategories: readonly [\"symbols\", \"people\", \"animals_and_nature\", \"food_and_drink\", \"activity\", \"travel_and_places\", \"objects\", \"flags\"];\r\n/**\r\n * Verifies that this is a valid and supported emoji name.\r\n */\r\nexport declare function isEmojiName(name: unknown): name is Names;\r\n/**\r\n * Verifies that the provided names is an alias name.\r\n */\r\nexport declare function isEmojiAliasName(name: unknown): name is AliasNames;\r\n/**\r\n * Verifies that the name is either and alias or valid emoji name.\r\n */\r\nexport declare function isValidEmojiName(name: unknown): name is NamesAndAliases;\r\n/**\r\n * Verify that this is a valid emoji object\r\n */\r\nexport declare function isValidEmojiObject(value: unknown): value is EmojiObject;\r\n/**\r\n * Convert an alias to the correct name.\r\n */\r\nexport declare function aliasToName(name: AliasNames): \"laughing\" | \"zany\" | \"raised_eyebrow\" | \"star_struck\" | \"hand_over_mouth\" | \"shushing\" | \"symbols_over_mouth\" | \"exploding_head\" | \"vomiting\" | \"poop\" | \"+1\" | \"-1\" | \"facepunch\" | \"raised_hand\" | \"crossed_fingers\" | \"mrs_claus\" | \"couple\" | \"tshirt\" | \"mans_shoe\" | \"honeybee\" | \"dolphin\" | \"boom\" | \"tornado\" | \"fried_egg\" | \"phone\" | \"hocho\" | \"izakaya_lantern\" | \"email\" | \"books\" | \"memo\" | \"exclamation\" | \"cn\" | \"fr\" | \"de\" | \"it\" | \"jp\" | \"ru\" | \"kr\" | \"es\" | \"uk\" | \"us\";\r\nexport declare function getEmojiByName(name: string | undefined): EmojiObject;\r\n/**\r\n * Retrieve the EmojiData from an emoticon.\r\n *\r\n * @param emoticon e.g. `:-)`\r\n */\r\nexport declare function getEmojiFromEmoticon(emoticon: string): EmojiObject;\r\n/**\r\n * Return a list of `maxResults` length of closest matches\r\n */\r\nexport declare function sortEmojiMatches(query: string, maxResults?: number): any[];\r\n/**\r\n * Keeps track of the frequently used list. Eventually restore this\r\n * automatically from an async localStorage.\r\n */\r\nexport declare function populateFrequentlyUsed(names: NamesAndAliases[]): EmojiObject[];\r\n/**\r\n * Return a string array of hexadecimals representing the hex code for an emoji\r\n */\r\nexport declare function getHexadecimalsFromEmoji(emoji: string): string[];\r\n",
      "index.d.ts": "export type { EmojiCommandOptions } from './emoji-extension';\r\nexport { EmojiExtension } from './emoji-extension';\r\nexport { DEFAULT_FREQUENTLY_USED } from './emoji-utils';\r\nexport type { AliasNames, EmojiObject, EmojiOptions, EmojiSuggestCommand, EmojiSuggestionChangeHandler, EmojiSuggestionChangeHandlerParameter, EmojiSuggestionExitHandler, EmojiSuggestionKeyBindings, Names, NamesAndAliases, SkinVariation, } from './emoji-types';\r\n"
    },
    "@remirror/extension-epic-mode": {
      "epic-mode-effects.d.ts": "import type { ParticleEffect } from './epic-mode-types';\r\nexport declare const COLORS: string[];\r\nexport declare const VIBRANT_COLORS: string[];\r\nexport declare const MAX_PARTICLES = 500;\r\nexport declare const PARTICLE_NUM_RANGE: {\r\n    min: number;\r\n    max: number;\r\n};\r\nexport declare const PARTICLE_GRAVITY = 0.08;\r\nexport declare const PARTICLE_ALPHA_FADEOUT = 0.96;\r\nexport declare const PARTICLE_VELOCITY_RANGE: {\r\n    x: number[];\r\n    y: number[];\r\n};\r\nexport declare const defaultEffect: ParticleEffect;\r\nexport declare const spawningEffect: ParticleEffect;\r\nexport declare const heartEffect: ParticleEffect;\r\n",
      "epic-mode-extension.d.ts": "import type { CreatePluginReturn, EditorView } from '@remirror/core';\r\nimport { PlainExtension } from '@remirror/core';\r\nimport type { EpicModeOptions } from './epic-mode-types';\r\nexport declare class EpicModeExtension extends PlainExtension<EpicModeOptions> {\r\n    get name(): \"epicMode\";\r\n    createPlugin(): CreatePluginReturn<EpicModePluginState>;\r\n}\r\nexport declare class EpicModePluginState {\r\n    #private;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    get options(): Readonly<Required<EpicModeOptions>> & import(\"@remirror/core\").BaseExtensionOptions;\r\n    private container;\r\n    private view;\r\n    constructor(extension: EpicModeExtension);\r\n    /**\r\n     * Store a reference to the Prosemirror view and add the canvas to the DOM\r\n     *\r\n     * @param view\r\n     */\r\n    init(view: EditorView): this;\r\n    destroy(): void;\r\n    shake: () => void;\r\n    spawnParticles: () => void;\r\n    /**\r\n     * Runs through the animation loop\r\n     */\r\n    loop: () => void;\r\n    private drawParticles;\r\n}\r\n",
      "epic-mode-types.d.ts": "export declare type EpicModePluginStateParameter = Required<EpicModeOptions>;\r\nexport interface ParticleRange {\r\n    min: number;\r\n    max: number;\r\n}\r\nexport interface EpicModeOptions {\r\n    /**\r\n     * The particle effect to use\r\n     */\r\n    particleEffect?: ParticleEffect;\r\n    /**\r\n     * Where in the dom the canvas element should be stored\r\n     */\r\n    getCanvasContainer?: () => HTMLElement;\r\n    /**\r\n     * The colors for the epic effect\r\n     */\r\n    colors?: string[];\r\n    /**\r\n     * Range for the particles\r\n     */\r\n    particleRange?: ParticleRange;\r\n    /**\r\n     * Whether epic mode is active.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     * How long the shaking should last for.\r\n     *\r\n     * @defaultValue 0.3\r\n     */\r\n    shakeTime?: number;\r\n    /**\r\n     * How strong should the intensity of the shaking be.\r\n     *\r\n     * @defaultValue 5\r\n     */\r\n    shakeIntensity?: number;\r\n}\r\nexport interface Particle {\r\n    x: number;\r\n    y: number;\r\n    alpha: number;\r\n    color: string[] | number[];\r\n    size: number;\r\n    vx: number;\r\n    vy: number;\r\n    drag?: number;\r\n    wander?: number;\r\n    theta?: number;\r\n}\r\nexport interface CreateParticleParameter {\r\n    /**\r\n     * x coordinate\r\n     */\r\n    x: number;\r\n    /**\r\n     * y coordinate\r\n     */\r\n    y: number;\r\n    /**\r\n     * Suggested color of the particle\r\n     */\r\n    color: string[] | number[];\r\n    /**\r\n     * Current color of the font being typed\r\n     */\r\n    textColor: string[] | number[];\r\n    /**\r\n     * The ctx of the canvas\r\n     */\r\n    ctx: CanvasRenderingContext2D;\r\n    /**\r\n     * The canvas element\r\n     */\r\n    canvas: HTMLCanvasElement;\r\n}\r\nexport interface UpdateParticleParameter {\r\n    particle: Particle;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvas: HTMLCanvasElement;\r\n}\r\nexport interface ParticleEffect {\r\n    /**\r\n     * Create a particle\r\n     *\r\n     * @param params\r\n     */\r\n    createParticle: (params: CreateParticleParameter) => Particle;\r\n    /**\r\n     * Update the created particle (via mutation)\r\n     *\r\n     * @param params\r\n     */\r\n    updateParticle: (params: UpdateParticleParameter) => void;\r\n}\r\n",
      "index.d.ts": "export { COLORS, defaultEffect, heartEffect, spawningEffect } from './epic-mode-effects';\r\nexport { EpicModeExtension } from './epic-mode-extension';\r\nexport type { CreateParticleParameter, EpicModeOptions, EpicModePluginStateParameter, Particle, ParticleEffect, ParticleRange, UpdateParticleParameter, } from './epic-mode-types';\r\n"
    },
    "@remirror/extension-events": {
      "events-extension.d.ts": "import { CreatePluginReturn, Handler, PlainExtension } from '@remirror/core';\r\nexport interface EventsOptions {\r\n    /**\r\n     * Listens for blur events on the editor.\r\n     *\r\n     * Return `true` to prevent any other prosemirror listeners from firing.\r\n     */\r\n    blur: Handler<(event: FocusEvent) => boolean | undefined>;\r\n    /**\r\n     * Listens for focus events on the editor.\r\n     *\r\n     * Return `true` to prevent any other prosemirror listeners from firing.\r\n     */\r\n    focus: Handler<(event: FocusEvent) => boolean | undefined>;\r\n}\r\n/**\r\n * The events extension which listens to events which occur within the\r\n * remirror editor.\r\n *\r\n * TODO - add more events based on user feedback.\r\n */\r\nexport declare class EventsExtension extends PlainExtension<EventsOptions> {\r\n    get name(): \"events\";\r\n    createPlugin(): CreatePluginReturn;\r\n}\r\n",
      "index.d.ts": "export type { EventsOptions } from './events-extension';\r\nexport { EventsExtension } from './events-extension';\r\n"
    },
    "@remirror/extension-gap-cursor": {
      "gap-cursor-extension.d.ts": "import { PlainExtension } from '@remirror/core';\r\nimport { GapCursor } from '@remirror/pm/gapcursor';\r\n/**\r\n * Create a gap cursor plugin.\r\n *\r\n * @remarks\r\n *\r\n * When enabled, this will capture clicks near and arrow-key-motion past places\r\n * that don't have a normally selectable position nearby, and create a gap\r\n * cursor selection for them. The cursor is drawn as an element with class\r\n * `ProseMirror-gapcursor`.\r\n *\r\n * Make sure to import the styles as shown below.\r\n *\r\n * ```ts\r\n * import '@remirror/styles/extension-gap-cursor.css';\r\n * ```\r\n */\r\nexport declare class GapCursorExtension extends PlainExtension {\r\n    get name(): \"gapCursor\";\r\n    createExternalPlugins(): any;\r\n}\r\n/**\r\n * Predicate checking whether the selection is a GapCursor\r\n *\r\n * @param value - the value to check\r\n */\r\nexport declare const isGapCursorSelection: (value: unknown) => value is GapCursor;\r\n",
      "index.d.ts": "export { GapCursorExtension, isGapCursorSelection } from './gap-cursor-extension';\r\n"
    },
    "@remirror/extension-hard-break": {
      "hard-break-extension.d.ts": "import { ApplySchemaAttributes, CommandFunction, KeyBindings, NodeExtension, NodeExtensionSpec, NodeGroup } from '@remirror/core';\r\n/**\r\n * An extension which provides the functionality for inserting a `hardBreak`\r\n * `<br />` tag into the editor.\r\n *\r\n * @remarks\r\n *\r\n * It will automatically exit when used inside a `codeClock`. To\r\n * prevent problems occurring when the codeblock is the last node in the\r\n * doc, you should add the `TrailingNodeExtension` which automatically appends a\r\n * paragraph node to the last node..\r\n */\r\nexport declare class HardBreakExtension extends NodeExtension {\r\n    get name(): \"hardBreak\";\r\n    tags: NodeGroup[];\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createKeymap(): KeyBindings;\r\n    createCommands(): {\r\n        /**\r\n         * Inserts a hardBreak `<br />` tag into the editor.\r\n         */\r\n        insertHardBreak: () => CommandFunction;\r\n    };\r\n}\r\n",
      "index.d.ts": "export { HardBreakExtension } from './hard-break-extension';\r\n"
    },
    "@remirror/extension-heading": {
      "heading-extension.d.ts": "import { ApplySchemaAttributes, NodeExtension, NodeExtensionSpec, ProsemirrorAttributes, Static } from '@remirror/core';\r\nexport interface HeadingOptions {\r\n    /**\r\n     * The numerical value of the supporting headings.\r\n     *\r\n     * @defaultValue `[1, 2, 3, 4, 5, 6]`\r\n     */\r\n    levels?: Static<number[]>;\r\n    /**\r\n     * The default level heading to use.\r\n     *\r\n     * @defaultValue `1`\r\n     */\r\n    defaultLevel?: Static<number>;\r\n}\r\nexport declare type HeadingExtensionAttributes = ProsemirrorAttributes<{\r\n    /**\r\n     * The heading size.\r\n     */\r\n    level?: number;\r\n}>;\r\nexport interface HeadingOptions {\r\n}\r\nexport declare class HeadingExtension extends NodeExtension<HeadingOptions> {\r\n    get name(): \"heading\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the heading for the current block. If you don't provide the\r\n         * level it will use the options.defaultLevel.\r\n         */\r\n        toggleHeading: (attrs?: HeadingExtensionAttributes) => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createKeymap(): Record<string, import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, import(\"@remirror/core\").NextParameter<import(\"@remirror/core\").EditorSchema<string, string>>>>;\r\n    createInputRules(): import(\"@remirror/pm/inputrules\").InputRule<any>[];\r\n}\r\n",
      "index.d.ts": "export type { HeadingExtensionAttributes, HeadingOptions } from './heading-extension';\r\nexport { HeadingExtension } from './heading-extension';\r\n"
    },
    "@remirror/extension-history": {
      "history-extension.d.ts": "import { CommandFunction, DispatchFunction, EditorState, Handler, KeyBindings, PlainExtension, Static } from '@remirror/core';\r\nexport interface HistoryOptions {\r\n    /**\r\n     * The amount of history events that are collected before the\r\n     * oldest events are discarded.\r\n     *\r\n     * @defaultValue 100\r\n     */\r\n    depth?: Static<number | null>;\r\n    /**\r\n     * The delay (ms) between changes after which a new group should be\r\n     * started. Note that when changes aren't adjacent, a new group is always started.\r\n     *\r\n     * @defaultValue 500\r\n     */\r\n    newGroupDelay?: Static<number | null>;\r\n    /**\r\n     * Provide a custom state getter function.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is only needed when the extension is part of a child editor, e.g.\r\n     * `ImageCaptionEditor`. By passing in the `getState` method history actions\r\n     * can be dispatched into the parent editor allowing them to propagate into\r\n     * the child editor\r\n     */\r\n    getState?: (() => EditorState) | null;\r\n    /**\r\n     * Provide a custom dispatch getter function for embedded editors\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is only needed when the extension is part of a child editor, e.g.\r\n     * `ImageCaptionEditor`. By passing in the `getDispatch` method history actions\r\n     * can be dispatched into the parent editor allowing them to propagate into\r\n     * the child editor.\r\n     */\r\n    getDispatch?: (() => DispatchFunction) | null;\r\n    /**\r\n     * A callback to listen to when the user attempts to undo with the keyboard.\r\n     * When it succeeds `success` is true.\r\n     */\r\n    onUndo?: Handler<(success: boolean) => void>;\r\n    /**\r\n     * A callback to listen to when the user attempts to redo with the keyboard.\r\n     * When it succeeds `success` is true.\r\n     */\r\n    onRedo?: Handler<(success: boolean) => void>;\r\n}\r\n/**\r\n * This extension provides undo and redo commands and inserts a plugin which\r\n * handles history related actions.\r\n *\r\n * @builtin\r\n */\r\nexport declare class HistoryExtension extends PlainExtension<HistoryOptions> {\r\n    get name(): \"history\";\r\n    /**\r\n     * Wraps the history method to inject state from the getState or getDispatch\r\n     * method.\r\n     *\r\n     * @param method - the method to wrap\r\n     */\r\n    private readonly wrapMethod;\r\n    /**\r\n     * Adds the default key mappings for undo and redo.\r\n     */\r\n    createKeymap(): KeyBindings;\r\n    /**\r\n     * Bring the `prosemirror-history` plugin with options set on this extension.\r\n     */\r\n    createExternalPlugins(): any;\r\n    /**\r\n     * Provide the undo and redo commands.\r\n     */\r\n    createCommands(): {\r\n        /**\r\n         * Undo the last action that occurred. This can be overridden by\r\n         * setting an `\"addToHistory\"` metadata property of `false` on a\r\n         * transaction to prevent it from being rolled back by undo.\r\n         *\r\n         * ```ts\r\n         * actions.undo()\r\n         *\r\n         * // To prevent this use\r\n         * tr.setMeta(pluginKey, { addToHistory: false })\r\n         * ```\r\n         */\r\n        undo: () => import(\"@remirror/core\").Brand<CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>, \"non-chainable\">;\r\n        /**\r\n         * Redo an action that was in the undo stack.\r\n         *\r\n         * ```ts\r\n         * actions.redo()\r\n         * ```\r\n         */\r\n        redo: () => import(\"@remirror/core\").Brand<CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>, \"non-chainable\">;\r\n    };\r\n}\r\n",
      "index.d.ts": "export type { HistoryOptions } from './history-extension';\r\nexport { HistoryExtension } from './history-extension';\r\n"
    },
    "@remirror/extension-horizontal-rule": {
      "horizontal-rule-extension.d.ts": "import { ApplySchemaAttributes, CommandFunction, InputRule, NodeExtension, NodeExtensionSpec } from '@remirror/core';\r\nexport interface HorizontalRuleOptions {\r\n    /**\r\n     * The name of the node to insert after inserting a horizontalRule.\r\n     *\r\n     * Set to false to prevent adding a node afterwards.\r\n     *\r\n     * @defaultValue `paragraph`\r\n     */\r\n    insertionNode?: string | false;\r\n}\r\n/**\r\n * Adds a horizontal line to the editor.\r\n */\r\nexport declare class HorizontalRuleExtension extends NodeExtension<HorizontalRuleOptions> {\r\n    get name(): \"horizontalRule\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createCommands(): {\r\n        /**\r\n         * Inserts a horizontal line into the editor.\r\n         *\r\n         * @remarks\r\n         *\r\n         * TODO: There is currently a bug in Chrome where if the editor is not\r\n         * focused at the point that this is called, the selection jumps to before\r\n         * the first insertion when you start typing. It doesn't happen in Firefox\r\n         * or Safari.\r\n         */\r\n        insertHorizontalRule: () => CommandFunction;\r\n    };\r\n    createInputRules(): InputRule[];\r\n    /**\r\n     * Updates the transaction after a `horizontalRule` has been inserted.\r\n     */\r\n    private updateTransaction;\r\n}\r\n",
      "index.d.ts": "export type { HorizontalRuleOptions } from './horizontal-rule-extension';\r\nexport { HorizontalRuleExtension } from './horizontal-rule-extension';\r\n"
    },
    "@remirror/extension-image": {
      "image-extension.d.ts": "import { ApplySchemaAttributes, CommandFunction, CreatePluginReturn, NodeExtension, NodeExtensionSpec, ProsemirrorAttributes } from '@remirror/core';\r\n/**\r\n * The image extension for placing images into your editor.\r\n *\r\n * TODO ->\r\n * - Captions https://glitch.com/edit/#!/pet-figcaption?path=index.js%3A27%3A1 into a preset\r\n * - Resizable https://glitch.com/edit/#!/toothsome-shoemaker?path=index.js%3A1%3A0\r\n */\r\nexport declare class ImageExtension extends NodeExtension {\r\n    get name(): \"image\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createCommands(): {\r\n        insertImage: (attributes: ProsemirrorAttributes<ImageExtensionAttributes>) => CommandFunction;\r\n    };\r\n    createPlugin(): CreatePluginReturn;\r\n}\r\nexport interface ImageExtensionAttributes {\r\n    align?: 'center' | 'end' | 'justify' | 'left' | 'match-parent' | 'right' | 'start';\r\n    alt?: string;\r\n    crop?: {\r\n        width: number;\r\n        height: number;\r\n        left: number;\r\n        top: number;\r\n    };\r\n    height?: string;\r\n    width?: string;\r\n    rotate?: string;\r\n    src?: string;\r\n    title?: string;\r\n}\r\nexport interface ImageExtensionProperties {\r\n}\r\nexport interface ImageExtensionOptions {\r\n}\r\n/**\r\n * True when the provided file is an image file.\r\n */\r\nexport declare function isImageFileType(file: File): boolean;\r\n",
      "index.d.ts": "export type { ImageExtensionAttributes, ImageExtensionOptions, ImageExtensionProperties, } from './image-extension';\r\nexport { ImageExtension, isImageFileType } from './image-extension';\r\n"
    },
    "@remirror/extension-italic": {
      "index.d.ts": "export { ItalicExtension } from './italic-extension';\r\n",
      "italic-extension.d.ts": "import { ApplySchemaAttributes, FromToParameter, InputRule, KeyBindings, MarkExtension, MarkExtensionSpec, Plugin } from '@remirror/core';\r\nexport declare class ItalicExtension extends MarkExtension {\r\n    get name(): \"italic\";\r\n    createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n    createKeymap(): KeyBindings;\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the italic formatting on the selected text.\r\n         */\r\n        toggleItalic: (range?: FromToParameter) => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createInputRules(): InputRule[];\r\n    createPasteRules(): Plugin[];\r\n}\r\n"
    },
    "@remirror/extension-link": {
      "index.d.ts": "export type { LinkOptions } from './link-extension';\r\nexport { LinkExtension } from './link-extension';\r\n",
      "link-extension.d.ts": "import { ApplySchemaAttributes, CommandFunction, CreatePluginReturn, FromToParameter, Handler, KeyBindings, MarkAttributes, MarkExtension, MarkExtensionSpec } from '@remirror/core';\r\nexport interface LinkOptions {\r\n    /**\r\n     * Called when the user activates the keyboard shortcut.\r\n     */\r\n    onActivateLink?: Handler<(selectedText: string) => void>;\r\n    /**\r\n     * Whether whether to select the text of the full active link when clicked.\r\n     */\r\n    selectTextOnClick?: boolean;\r\n}\r\nexport declare type LinkAttributes = MarkAttributes<{\r\n    /**\r\n     * The link which is required property for the link mark.\r\n     */\r\n    href: string;\r\n}>;\r\nexport declare class LinkExtension extends MarkExtension<LinkOptions> {\r\n    get name(): \"link\";\r\n    get defaultOptions(): {\r\n        activationHandler: () => boolean;\r\n    };\r\n    createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n    createKeymap(): KeyBindings;\r\n    createCommands(): {\r\n        /**\r\n         * Create or update the link if it doesn't currently exist at the current\r\n         * selection or provided range.\r\n         */\r\n        updateLink: (attrs: LinkAttributes, range?: FromToParameter) => CommandFunction;\r\n        /**\r\n         * Remove the link at the current selection\r\n         */\r\n        removeLink: () => CommandFunction;\r\n    };\r\n    createPasteRules(): import(\"@remirror/pm/state\").Plugin<any, any>[];\r\n    createPlugin(): CreatePluginReturn;\r\n}\r\n"
    },
    "@remirror/extension-mention": {
      "index.d.ts": "/**\r\n * ## The problem\r\n *\r\n * You'd love a simpler way to create **editable** `@` and `#` mentions with\r\n * suggestions built into your `remirror` editor. Or perhaps you'd prefer\r\n * non-editable mentions that create an inline prosemirror node. Or maybe you're\r\n * keeping it simple and decide that you want mentions to output plain text into\r\n * your markdown editor.\r\n *\r\n * ## The solution\r\n *\r\n * `@remirror/extension-mention` exports three `remirror` extensions for\r\n * managing **editable** `Mark` mentions, non-editable `Node` mentions and plain\r\n * text mentions. Underneath the work is being done by `prosemirror-suggest` to\r\n * reduce the boilerplate needed to setup.\r\n *\r\n *\r\n * ## Installation\r\n *\r\n * After completing the installation of the the `remirror` environment as shown\r\n * in the [docs](https://remirror.io/docs/guide/installation) run the following command.\r\n *\r\n * ```bash\r\n * yarn add @remirror/extension-mention # yarn\r\n * pnpm add @remirror/extension-mention # pnpm\r\n * npm install @remirror/extension-mention # npm\r\n * ```\r\n *\r\n * ## Getting started\r\n *\r\n * @packageDocumentation\r\n */\r\nexport { MentionExtension } from './mention-extension';\r\nexport type { MentionChangeHandlerMethod, MentionChangeHandlerParameter, MentionCharacterEntryMethod, MentionExitHandlerMethod, MentionExtensionAttributes, MentionExtensionMatcher, MentionExtensionSuggestCommand, MentionKeyBinding, MentionKeyBindingParameter, MentionOptions, OptionalMentionExtensionParameter, SuggestionCommandAttributes, } from './mention-types';\r\n",
      "mention-extension.d.ts": "import { AddCustomHandler, ApplySchemaAttributes, CommandFunction, MarkExtension, MarkExtensionSpec, RangeParameter } from '@remirror/core';\r\nimport type { Suggester } from '@remirror/pm/suggest';\r\nimport type { MentionExtensionSuggestCommand, MentionOptions } from './mention-types';\r\n/**\r\n * The mention extension wraps mentions as a prosemirror mark. It allows for\r\n * very fluid and flexible social experiences to be built up.\r\n *\r\n * @remarks\r\n *\r\n * Mentions have the following features\r\n * - An activation character you define.\r\n * - A min number of characters before mentions are suggested\r\n * - Ability to exclude matching character\r\n * - Ability to wrap content in a decoration which excludes mentions from being\r\n *   suggested.\r\n * - Decorations for in progress mentions\r\n * - Keybindings for handling arrow keys and other more exotic commands.\r\n *\r\n * Please note, there is still a lot of work required in your view layer when\r\n * creating a mention and it's not at trivial (I found it quite difficult). With\r\n * remirror I'm hoping to reduce the cognitive strain required to set up\r\n * mentions in your own editor.\r\n */\r\nexport declare class MentionExtension extends MarkExtension<MentionOptions> {\r\n    get name(): \"mention\";\r\n    private characterEntryMethods;\r\n    private keyBindingsList;\r\n    /**\r\n     * The compiled keybindings.\r\n     */\r\n    private keyBindings;\r\n    protected onAddCustomHandler: AddCustomHandler<MentionOptions>;\r\n    createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n    createCommands(): {\r\n        /**\r\n         * Create a new mention\r\n         */\r\n        createMention: (config: Record<string, unknown> & import(\"./mention-types\").OptionalMentionExtensionParameter & {\r\n            id: string;\r\n            label: string;\r\n        } & {\r\n            class?: string;\r\n        } & {\r\n            keepSelection?: boolean;\r\n        }) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Update an existing mention.\r\n         */\r\n        updateMention: (config: Record<string, unknown> & import(\"./mention-types\").OptionalMentionExtensionParameter & {\r\n            id: string;\r\n            label: string;\r\n        } & {\r\n            class?: string;\r\n        } & {\r\n            keepSelection?: boolean;\r\n        }) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Remove the mention(s) at the current selection or provided range.\r\n         */\r\n        removeMention: ({ range }?: Partial<RangeParameter>) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createPasteRules(): any;\r\n    createSuggesters(): Suggester<MentionExtensionSuggestCommand>[];\r\n    /**\r\n     * The factory method for mention commands to update and create new mentions.\r\n     */\r\n    private createMention;\r\n    /**\r\n     * Create the `onCharacterEntry` method.\r\n     */\r\n    private readonly onCharacterEntry;\r\n    /**\r\n     * For now a dumb merge for the key binding command. Later entries are given priority over earlier entries.\r\n     */\r\n    private updateKeyBindings;\r\n}\r\n",
      "mention-types.d.ts": "import type { CustomHandler, Handler, ProsemirrorAttributes, Static } from '@remirror/core';\r\nimport type { FromToEndParameter, SuggestChangeHandlerMethod, SuggestChangeHandlerParameter, SuggestCharacterEntryMethod, Suggester, SuggestExitHandlerMethod, SuggestKeyBindingMap, SuggestKeyBindingParameter, SuggestReplacementType } from '@remirror/pm/suggest';\r\nexport interface OptionalMentionExtensionParameter {\r\n    /**\r\n     * The text to append to the replacement.\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    appendText?: string;\r\n    /**\r\n     * The type of replacement to use. By default the command will only replace text up the the cursor position.\r\n     *\r\n     * To force replacement of the whole match regardless of where in the match the cursor is placed set this to\r\n     * `full`.\r\n     *\r\n     * @defaultValue 'full'\r\n     */\r\n    replacementType?: SuggestReplacementType;\r\n    /**\r\n     * The name of the matched char\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The range of the requested selection.\r\n     */\r\n    range?: FromToEndParameter;\r\n}\r\n/**\r\n * The attrs that will be added to the node.\r\n * ID and label are plucked and used while attributes like href and role can be assigned as desired.\r\n */\r\nexport declare type MentionExtensionAttributes = ProsemirrorAttributes<OptionalMentionExtensionParameter & {\r\n    /**\r\n     * A unique identifier for the suggesters node\r\n     */\r\n    id: string;\r\n    /**\r\n     * The text to be placed within the suggesters node\r\n     */\r\n    label: string;\r\n}>;\r\n/**\r\n * The options for the matchers which can be created by this extension.\r\n */\r\nexport interface MentionExtensionMatcher extends Pick<Suggester, 'char' | 'name' | 'startOfLine' | 'supportedCharacters' | 'validPrefixCharacters' | 'invalidPrefixCharacters' | 'matchOffset' | 'appendText' | 'suggestClassName'> {\r\n    /**\r\n     * Provide customs class names for the completed mention\r\n     */\r\n    mentionClassName?: string;\r\n}\r\n/**\r\n * The static settings passed into a mention\r\n */\r\nexport interface MentionOptions {\r\n    /**\r\n     * Provide a custom tag for the mention\r\n     */\r\n    mentionTag?: Static<string>;\r\n    /**\r\n     * Provide the custom matchers that will be used to match mention text in the\r\n     * editor.\r\n     */\r\n    matchers: Static<MentionExtensionMatcher[]>;\r\n    /**\r\n     * Text to append after the mention has been added.\r\n     *\r\n     * **NOTE**: For some reason prosemirror seems to swallow up empty whitespace. You can get around this by using a non breaking space character '\\u00A0'.\r\n     *\r\n     * ```ts\r\n     * import { NON_BREAKING_SPACE_CHAR } from '@remirror/core';\r\n     * ```\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    appendText?: string;\r\n    /**\r\n     * Tag for the prosemirror decoration which wraps an active match.\r\n     *\r\n     * @defaultValue 'span'\r\n     */\r\n    suggestTag?: string;\r\n    /**\r\n     * When true, decorations are not created when this mention is being edited..\r\n     */\r\n    noDecorations?: boolean;\r\n    /**\r\n     * Called whenever a suggestion becomes active or changes in any way.\r\n     *\r\n     * @remarks\r\n     *\r\n     * It receives a parameters object with the `reason` for the change for more\r\n     * granular control.\r\n     *\r\n     * @defaultValue `() => void`\r\n     */\r\n    onChange?: Handler<MentionChangeHandlerMethod>;\r\n    /**\r\n     * Called whenever a suggestion is exited with the pre-exit match value.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Can be used to force the command to run the command e.g. when no match was\r\n     * found but a tag should still be created. To accomplish this you would call\r\n     * the `command` parameter and trigger whatever action is felt required.\r\n     *\r\n     * @defaultValue `() => void`\r\n     */\r\n    onExit?: Handler<MentionExitHandlerMethod>;\r\n    /**\r\n     * Called for each character entry and can be used to disable certain\r\n     * characters.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example you may want to disable all `@` symbols while the suggester is\r\n     * active. Return `true` to prevent any further character handlers from\r\n     * running.\r\n     *\r\n     * @defaultValue `() => false`\r\n     */\r\n    onCharacterEntry?: CustomHandler<MentionCharacterEntryMethod>;\r\n    /**\r\n     * An object that describes how certain key bindings should be handled.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Return `true` to prevent any further prosemirror actions or return `false`\r\n     * to allow prosemirror to continue.\r\n     */\r\n    keyBindings?: CustomHandler<MentionKeyBinding>;\r\n}\r\n/**\r\n * The dynamic properties used to change the behaviour of the mentions created.\r\n */\r\nexport declare type SuggestionCommandAttributes = ProsemirrorAttributes<Partial<Pick<MentionExtensionAttributes, 'id' | 'label' | 'appendText' | 'replacementType'>> & {}>;\r\n/**\r\n * The attrs for the command on a mention extension.\r\n */\r\nexport declare type MentionExtensionSuggestCommand = (attrs: SuggestionCommandAttributes) => void;\r\nexport declare type MentionKeyBinding = SuggestKeyBindingMap<MentionExtensionSuggestCommand>;\r\nexport declare type MentionKeyBindingParameter = SuggestKeyBindingParameter<MentionExtensionSuggestCommand>;\r\nexport declare type MentionChangeHandlerMethod = SuggestChangeHandlerMethod<MentionExtensionSuggestCommand>;\r\nexport declare type MentionChangeHandlerParameter = SuggestChangeHandlerParameter<MentionExtensionSuggestCommand>;\r\nexport declare type MentionExitHandlerMethod = SuggestExitHandlerMethod<MentionExtensionSuggestCommand>;\r\nexport declare type MentionCharacterEntryMethod = SuggestCharacterEntryMethod<MentionExtensionSuggestCommand>;\r\n",
      "mention-utils.d.ts": "import type { MentionExtensionAttributes, MentionExtensionMatcher } from './mention-types';\r\n/**\r\n * The default matcher to use when none is provided in options\r\n */\r\nexport declare const DEFAULT_MATCHER: any;\r\n/**\r\n * Check that the attributes exist and are valid for the mention update\r\n * command method.\r\n */\r\nexport declare function isValidMentionAttributes(attributes: unknown): attributes is MentionExtensionAttributes;\r\n/**\r\n * Gets the matcher from the list of matchers if it exists.\r\n *\r\n * @param name - the name of the matcher to find\r\n * @param matchers - the list of matchers to search through\r\n */\r\nexport declare function getMatcher(name: string, matchers: MentionExtensionMatcher[]): any;\r\n/**\r\n * Get the append text value which needs to be handled carefully since it can\r\n * also be an empty string.\r\n */\r\nexport declare function getAppendText(preferred: string | undefined, fallback: string | undefined): any;\r\n"
    },
    "@remirror/extension-paragraph": {
      "index.d.ts": "export { ParagraphExtension } from './paragraph-extension';\r\n",
      "paragraph-extension.d.ts": "import { ApplySchemaAttributes, ExtensionTag, NodeExtension, NodeExtensionSpec, ProsemirrorAttributes } from '@remirror/core';\r\n/**\r\n * The paragraph is one of the essential building blocks for a prosemirror\r\n * editor and by default it is provided to all editors.\r\n *\r\n * @core\r\n */\r\nexport declare class ParagraphExtension extends NodeExtension {\r\n    get name(): \"paragraph\";\r\n    readonly extensionTags: readonly [ExtensionTag.LastNodeCompatible];\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    /**\r\n     * Provides the commands that this extension uses.\r\n     */\r\n    createCommands(): {\r\n        createParagraph: (attributes: ProsemirrorAttributes) => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n}\r\n"
    },
    "@remirror/extension-placeholder": {
      "index.d.ts": "export type { PlaceholderOptions, PlaceholderPluginState } from './placeholder-extension';\r\nexport { EMPTY_NODE_CLASS_NAME, EMPTY_NODE_CLASS_SELECTOR, PlaceholderExtension, } from './placeholder-extension';\r\n",
      "placeholder-extension.d.ts": "import { CreatePluginReturn, OnSetOptionsParameter, PlainExtension } from '@remirror/core';\r\n/**\r\n * Used to denote a node is empty.\r\n *\r\n * Currently used by the placeholder extension.\r\n */\r\nexport declare const EMPTY_NODE_CLASS_NAME: string;\r\nexport declare const EMPTY_NODE_CLASS_SELECTOR: string;\r\nexport interface PlaceholderOptions {\r\n    /**\r\n     * The placeholder text to use.\r\n     */\r\n    placeholder?: string;\r\n    /**\r\n     * The class to decorate the empty top level node with. If you change this\r\n     * then you will also need to apply your own styles.\r\n     */\r\n    emptyNodeClass?: string;\r\n}\r\nexport interface PlaceholderPluginState extends Required<PlaceholderOptions> {\r\n    empty: boolean;\r\n}\r\n/**\r\n * An extension for the remirror editor. CHANGE ME.\r\n */\r\nexport declare class PlaceholderExtension extends PlainExtension<PlaceholderOptions> {\r\n    get name(): \"placeholder\";\r\n    createAttributes(): {\r\n        'aria-placeholder': string;\r\n    };\r\n    createPlugin(): CreatePluginReturn;\r\n    onSetOptions(parameter: OnSetOptionsParameter<PlaceholderOptions>): void;\r\n}\r\n"
    },
    "@remirror/extension-position-tracker": {
      "index.d.ts": "export type { PositionTrackerExtensionMeta, PositionTrackerOptions, } from './position-tracker-extension';\r\nexport { PositionTrackerExtension } from './position-tracker-extension';\r\n",
      "position-tracker-extension.d.ts": "import { CommandFunction, CreatePluginReturn, PlainExtension, PosParameter, Static, Transaction } from '@remirror/core';\r\nimport { DecorationSet } from '@remirror/pm/view';\r\nexport interface PositionTrackerOptions {\r\n    /**\r\n     * The className that is added to all tracker positions\r\n     *\r\n     * '@defaultValue 'remirror-tracker-position'\r\n     */\r\n    class?: Static<string>;\r\n    /**\r\n     * The default element that is used for all trackers.\r\n     *\r\n     * @defaultValue 'tracker'\r\n     */\r\n    element?: Static<string>;\r\n}\r\n/**\r\n * An extension for the remirror editor. CHANGE ME.\r\n */\r\nexport declare class PositionTrackerExtension extends PlainExtension<PositionTrackerOptions> {\r\n    #private;\r\n    get name(): \"positionTracker\";\r\n    createHelpers(): any;\r\n    createCommands(): {\r\n        /**\r\n         * Command to dispatch a transaction adding the tracker position to be tracked.\r\n         * If no position parameter is specified it uses the current position.\r\n         */\r\n        addPositionTracker: (parameter: AddPositionTrackerParameter) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * A command to remove the specified tracker position.\r\n         */\r\n        removePositionTracker: (parameter: RemovePositionTrackerParameter) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * A command to remove all active tracker positions.\r\n         */\r\n        clearPositionTrackers: (parameter: void) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createPlugin(): CreatePluginReturn<DecorationSet>;\r\n}\r\nexport interface PositionTrackerExtensionMeta {\r\n    add?: Required<AddPositionTrackerParameter>;\r\n    remove?: RemovePositionTrackerParameter;\r\n    clear?: symbol;\r\n}\r\ninterface RemovePositionTrackerParameter {\r\n    /**\r\n     * The ID by which this position will be uniquely identified.\r\n     */\r\n    id: unknown;\r\n}\r\ninterface AddPositionTrackerParameter extends Partial<PosParameter>, RemovePositionTrackerParameter {\r\n    /**\r\n     * A custom class name to use for the tracker position. All the trackers\r\n     * will automatically be given the class name `remirror-tracker-position`\r\n     *\r\n     * @defaultValue ''\r\n     */\r\n    className?: string;\r\n    /**\r\n     * A custom html element or string for a created element tag name.\r\n     *\r\n     * @defaultValue 'tracker'\r\n     */\r\n    element?: string | HTMLElement;\r\n}\r\nexport {};\r\n"
    },
    "@remirror/extension-positioner": {
      "index.d.ts": "export type { PositionerChangeHandlerMethod, PositionerHandler, PositionerOptions, StringPositioner, } from './positioner-extension';\r\nexport { getPositioner, PositionerExtension } from './positioner-extension';\r\nexport { hasStateChanged, isEmptyBlockNode } from './positioner-utils';\r\nexport { centeredSelectionPositioner, cursorPopupPositioner, emptyCoords, emptyVirtualPosition, floatingSelectionPositioner, } from './positioners';\r\nexport type { GetPositionParameter, VirtualPosition, GetActiveParameter, ElementsAddedParameter, VirtualNode, Coords, BasePositioner, BasePositionerParameter, PositionerUpdateEvent, SetActiveElement, } from './positioner';\r\nexport { Positioner } from './positioner';\r\n",
      "positioner-extension.d.ts": "import { AddCustomHandler, CreatePluginReturn, CustomHandler, PlainExtension, StateUpdateLifecycleParameter, Static } from '@remirror/core';\r\nimport type { Positioner, SetActiveElement } from './positioner';\r\nexport interface PositionerOptions {\r\n    /**\r\n     * An object specifying the positioner and the change handler for responding\r\n     * to changes in the positioner output. This is a custom handler and should be\r\n     * amended with `addCustomHandler`.\r\n     */\r\n    positioner?: CustomHandler<Positioner>;\r\n    /**\r\n     * The `ms` to debounce scroll events.\r\n     *\r\n     * @defaultValue `50`\r\n     */\r\n    scrollDebounce?: Static<number>;\r\n}\r\n/**\r\n * This is the positioner extension which is used to track the positions of\r\n * different parts of your editor.\r\n *\r\n * For example, you can track the cursor or all visible paragraph nodes.\r\n */\r\nexport declare class PositionerExtension extends PlainExtension<PositionerOptions> {\r\n    #private;\r\n    get name(): \"positioner\";\r\n    protected onAddCustomHandler: AddCustomHandler<PositionerOptions>;\r\n    protected init(): void;\r\n    private getParameter;\r\n    onScroll(): void;\r\n    createPlugin(): CreatePluginReturn;\r\n    onStateUpdate(update: StateUpdateLifecycleParameter): void;\r\n    private positioner;\r\n    private triggerPositioner;\r\n}\r\nexport interface PositionerHandler {\r\n    /**\r\n     * The positioner to use for calculating the relative position.\r\n     */\r\n    positioner: Positioner;\r\n    /**\r\n     * Method to call when there is a change in the position.\r\n     */\r\n    onChange: PositionerChangeHandlerMethod;\r\n}\r\n/**\r\n * This type is used for setting elements which are associated with the relevant\r\n * positioner. Once teh\r\n */\r\nexport declare type PositionerChangeHandlerMethod = (elementSetters: SetActiveElement[]) => void;\r\ndeclare const positioners: {\r\n    bubble: Positioner<{\r\n        start: import(\"./positioner\").Coords;\r\n        end: import(\"./positioner\").Coords;\r\n    }>;\r\n    centeredSelection: Positioner<{\r\n        start: import(\"./positioner\").Coords;\r\n        end: import(\"./positioner\").Coords;\r\n    }>;\r\n    floating: Positioner<import(\"./positioner\").Coords>;\r\n    floatingSelection: Positioner<import(\"./positioner\").Coords>;\r\n    popup: Positioner<import(\"./positioner\").Coords>;\r\n    cursor: Positioner<import(\"./positioner\").Coords>;\r\n};\r\n/**\r\n * This is a helper method for getting the positioner. The parameter can either\r\n * be a named positioner or a positioner that you've created for the purpose.\r\n */\r\nexport declare function getPositioner(positioner: StringPositioner | Positioner): Positioner;\r\nexport declare type StringPositioner = keyof typeof positioners;\r\nexport {};\r\n",
      "positioner-utils.d.ts": "import { EditorState, EditorStateParameter, ProsemirrorNode, TransactionParameter } from '@remirror/core';\r\n/**\r\n * Checks if the current node is a block node and empty.\r\n *\r\n * @param node - the prosemirror node\r\n *\r\n * @public\r\n */\r\nexport declare function isEmptyBlockNode(node: ProsemirrorNode | null | undefined): boolean;\r\ninterface HasChangedParameter extends EditorStateParameter, Partial<TransactionParameter> {\r\n    previousState: EditorState;\r\n}\r\n/**\r\n * Checks the transaction for changes or compares the state with the previous\r\n * state.\r\n *\r\n * Return `true` when a change is detected in the document or the selection.\r\n */\r\nexport declare function hasStateChanged(parameter: HasChangedParameter): boolean;\r\nexport {};\r\n",
      "positioner.d.ts": "import { Unsubscribe } from 'nanoevents';\r\nimport { EditorViewParameter, ElementParameter, StateUpdateLifecycleParameter } from '@remirror/core';\r\n/**\r\n * The events that can trigger a positioner update.\r\n */\r\nexport declare type PositionerUpdateEvent = 'scroll' | 'state';\r\nexport interface Coords {\r\n    left: number;\r\n    right: number;\r\n    top: number;\r\n    bottom: number;\r\n}\r\nexport interface VirtualPosition extends Partial<Coords> {\r\n    /**\r\n     * The bounding client of the tracked element. The `DOMRect` is relative to\r\n     * the `viewport` and can be used by libraries like `Tippy.js` and\r\n     * `react-popper`.\r\n     *\r\n     * It should be possible to use this `rect` with tooltip libraries as a\r\n     * virtual element.\r\n     */\r\n    rect: DOMRect;\r\n}\r\nexport interface GetPositionParameter<Data> extends EditorViewParameter, ElementParameter, BasePositionerParameter {\r\n    /**\r\n     * The data that can be transformed into a position.\r\n     */\r\n    data: Data;\r\n}\r\nexport interface GetActiveParameter extends EditorViewParameter, BasePositionerParameter {\r\n}\r\nexport interface BasePositioner<Data> {\r\n    /**\r\n     * Determines whether anything has changed and whether to continue with a\r\n     * recalculation. By default this is only true when the document has or\r\n     * selection has changed.\r\n     *\r\n     * @remarks\r\n     *\r\n     * Sometimes it is useful to recalculate the positioner on every state update.\r\n     * In this case you can set this method to always return true.\r\n     *\r\n     * ```ts\r\n     * const positioner: Positioner = {\r\n     *   hasStateChanged: () => true\r\n     * };\r\n     * ```\r\n     */\r\n    hasChanged: (parameter: BasePositionerParameter) => boolean;\r\n    /**\r\n     * Get a unique id for the data returned from `getActive`.\r\n     *\r\n     * If left undefined, it defaults to use the index.\r\n     */\r\n    getID?: (data: Data, index: number) => string;\r\n    /**\r\n     * Get the active items that will be passed into the `getPosition` method.\r\n     */\r\n    getActive: (parameter: GetActiveParameter) => Data[];\r\n    /**\r\n     * Calculate and return an array of `VirtualPosition`'s which represent the\r\n     * virtual element the positioner represents.\r\n     */\r\n    getPosition: (parameter: GetPositionParameter<Data>) => VirtualPosition;\r\n    /**\r\n     * An array of update listeners to determines when the positioner will update it's position.\r\n     *\r\n     * - `state` - updates when the prosemirror state is updated - default.\r\n     * - `scroll` - updates when the editor is scrolled (debounced)\r\n     *\r\n     * @defaultValue `['state']`\r\n     */\r\n    events?: PositionerUpdateEvent[];\r\n}\r\nexport interface VirtualNode {\r\n    getBoundingClientRect: () => DOMRect;\r\n}\r\nexport interface SetActiveElement {\r\n    /**\r\n     * Set the html element for the active position.\r\n     */\r\n    setElement: (element: HTMLElement) => void;\r\n    /**\r\n     * The unique ide for the active element.\r\n     */\r\n    id: string;\r\n}\r\nexport interface BasePositionerParameter extends StateUpdateLifecycleParameter {\r\n    /**\r\n     * The event that triggered this update.\r\n     */\r\n    event: PositionerUpdateEvent;\r\n    /**\r\n     * The scroll position.\r\n     */\r\n    scrollTop: number;\r\n}\r\nexport interface ElementsAddedParameter {\r\n    position: VirtualPosition;\r\n    element: HTMLElement;\r\n    id: string;\r\n}\r\ninterface PositionerEvents {\r\n    /**\r\n     * Called when the dom elements have all been received. In some frameworks\r\n     * like `React` this may be called asynchronously.\r\n     */\r\n    done: (parameter: ElementsAddedParameter[]) => void;\r\n    /**\r\n     * Called when the active values have been updated.\r\n     */\r\n    update: (elementSetters: SetActiveElement[]) => void;\r\n}\r\n/**\r\n * This is the positioner. It exists to report the position of things in the\r\n * editor. Typically you will use it to get the position of the cursor.\r\n *\r\n * But you can be more ambitious and get the position all the active nodes of a\r\n * certain type. Or all visible nodes of a certain type in the editor, updated\r\n * as it scrolls.\r\n *\r\n * The positions returned have a rect which is the viewport position.\r\n *\r\n * There are also the `top`, `left`, `right`, `bottom` which represent the\r\n * absolute positioned rectangle of the position in questions. For a cursor\r\n * position `left` and `right` are probably the same.\r\n */\r\nexport declare class Positioner<Data = any> {\r\n    #private;\r\n    /**\r\n     * Create a positioner.\r\n     */\r\n    static create<Data>(parameter: BasePositioner<Data>): Positioner<Data>;\r\n    /**\r\n     * Create a positioner from an existing positioner.\r\n     *\r\n     * This is useful when you want to modify parts of the positioner.\r\n     */\r\n    static fromPositioner<Data>(positioner: Positioner, base: Partial<BasePositioner<Data>>): Positioner<any>;\r\n    readonly events: PositionerUpdateEvent[];\r\n    readonly hasChanged: (parameter: BasePositionerParameter) => boolean;\r\n    get basePositioner(): BasePositioner<Data>;\r\n    private constructor();\r\n    /**\r\n     * Get the active element setters.\r\n     */\r\n    onActiveChanged(parameter: GetActiveParameter): void;\r\n    /**\r\n     * Get the id for the active data. Defaults to the index of the data item.\r\n     */\r\n    getID(data: Data, index: number): string;\r\n    /**\r\n     * Create a virtual node from the provided position to use in libraries like `react-poppy`.\r\n     */\r\n    getVirtualNode(position: VirtualPosition): VirtualNode;\r\n    /**\r\n     * Add a listener to the positioner events.\r\n     */\r\n    readonly addListener: <Key extends \"done\" | \"update\">(event: Key, cb: PositionerEvents[Key]) => Unsubscribe;\r\n    private addParameter;\r\n}\r\nexport {};\r\n",
      "positioners.d.ts": "import { Coords, Positioner, VirtualPosition } from './positioner';\r\nexport declare const emptyCoords: Coords;\r\nexport declare const emptyVirtualPosition: VirtualPosition;\r\n/**\r\n * Render a floating selection positioner.\r\n *\r\n * - `rect` provides a viewport position which spans the width of the editor\r\n *   with a height identical to the cursor height.\r\n * - `top` - the top of the cursor.\r\n * - `bottom` - the bottom of the cursor.\r\n * - `left\r\n */\r\nexport declare const floatingSelectionPositioner: Positioner<Coords>;\r\n/**\r\n * Render a positioner which is centered around the selection. This is only\r\n * active for text selections, where the selection spans more than one\r\n * character.\r\n *\r\n * @remarks\r\n *\r\n * The menu will horizontally center itself `from` / `to` bounds of the current\r\n * selection.\r\n *\r\n * - `right` is undefined\r\n * - `left` will center your element based on the width of the current selection\r\n *   .\r\n * - `bottom` absolutely positions the element below the text selection.\r\n * - `top` absolutely positions the element above the text selection\r\n */\r\nexport declare const centeredSelectionPositioner: Positioner<{\r\n    start: Coords;\r\n    end: Coords;\r\n}>;\r\n/**\r\n * Render a menu that is inline with the first character of the selection. This\r\n * is useful for suggestions since they should typically appear while typing\r\n * without a multi character selection.\r\n *\r\n * @remarks\r\n *\r\n * The menu will center itself within the selection.\r\n *\r\n * - `right` should be used to absolutely position away from the right hand edge\r\n *   of the screen.\r\n * - `left` should be used to absolutely position away from the left hand edge\r\n *   of the screen.\r\n * - `bottom` absolutely positions the element above the text selection.\r\n * - `top` absolutely positions the element below the text selection\r\n */\r\nexport declare const cursorPopupPositioner: Positioner<Coords>;\r\n"
    },
    "@remirror/extension-react-component": {
      "index.d.ts": "export type { CreateNodeViewParameter, NodeViewComponentProps, ReactComponentEnvironment, ReactComponentOptions, } from './node-view-types';\r\nexport type { MountedPortal, PortalList, PortalMap, PortalProps, RemirrorPortalsProps, RenderMethodParameter, RenderParameter, } from './portals';\r\nexport { PortalContainer, RemirrorPortals } from './portals';\r\nexport { ReactComponentExtension } from './react-component-extension';\r\n",
      "node-view-types.d.ts": "import type { RefCallback } from 'react';\r\nimport type { AnyExtension, Decoration, EditorViewParameter, GetFixed, NodeWithAttributesParameter, ProsemirrorAttributes, RenderEnvironment, Static, ValidOptions } from '@remirror/core';\r\nimport type { PortalContainer } from './portals';\r\nexport declare type ReactComponentEnvironment = 'ssr' | 'dom' | 'both';\r\nexport interface ReactComponentOptions {\r\n    /**\r\n     * The default main block node.\r\n     *\r\n     * @defaultValue `div`\r\n     *\r\n     * @staticOption\r\n     */\r\n    defaultBlockNode?: keyof HTMLElementTagNameMap;\r\n    /**\r\n     * The default main inline node (for inline content).\r\n     *\r\n     * @defaultValue `span`\r\n     * @staticOption\r\n     */\r\n    defaultInlineNode?: keyof HTMLElementTagNameMap;\r\n    /**\r\n     * The default content node to use.\r\n     *\r\n     * @defaultValue `span`\r\n     * @staticOption\r\n     */\r\n    defaultContentNode?: keyof HTMLElementTagNameMap;\r\n    /**\r\n     * Whether to render as a nodeView, as an ssr component or in both\r\n     * environments.\r\n     */\r\n    defaultEnvironment?: Static<ReactComponentEnvironment>;\r\n}\r\nexport interface NodeViewComponentProps extends EditorViewParameter, NodeWithAttributesParameter {\r\n    /**\r\n     * - `ssr` - when this is not being rendered in the dom.\r\n     * - `dom` - when rendering in the browser\r\n     */\r\n    environment: RenderEnvironment;\r\n    /**\r\n     * Provides the position of the node view in the prosemirror document\r\n     */\r\n    getPosition: GetPosition;\r\n    /**\r\n     * A ref method which should be used by the component to pass the dom\r\n     * reference of the react element back to the node view. This is used as the\r\n     * dom the content will be rendered into.\r\n     *\r\n     * You can use it if you want to `ProseMirror` to manage the rendering of\r\n     * inner content. Otherwise you can ignore it.\r\n     */\r\n    forwardRef: RefCallback<HTMLElement>;\r\n    /**\r\n     * This is true when the component is selected.\r\n     */\r\n    selected: boolean;\r\n    /**\r\n     * Update the attributes for the target node.\r\n     */\r\n    updateAttributes: (attrs: ProsemirrorAttributes) => void;\r\n    /**\r\n     * The decorations which are currently applied to the nodeView.\r\n     */\r\n    decorations: Decoration[];\r\n    /**\r\n     * The current extension options\r\n     */\r\n    options: ValidOptions;\r\n}\r\n/**\r\n * Retrieve the position of the current nodeView\r\n */\r\nexport declare type GetPosition = (() => number) | boolean;\r\nexport interface ReactNodeViewParameter extends EditorViewParameter, NodeWithAttributesParameter, CreateNodeViewParameter {\r\n    /**\r\n     * Method for retrieving the position of the current nodeView\r\n     */\r\n    getPosition: GetPosition;\r\n}\r\nexport interface CreateNodeViewParameter {\r\n    /**\r\n     * A container and event dispatcher which keeps track of all dom elements that\r\n     * hold node views\r\n     */\r\n    portalContainer: PortalContainer;\r\n    /**\r\n     * The extension that this component uses.\r\n     */\r\n    extension: AnyExtension;\r\n    /**\r\n     * The options passed through to the react extension component.\r\n     */\r\n    options: GetFixed<ReactComponentOptions>;\r\n}\r\n",
      "portals/index.d.ts": "export * from './portal-container';\r\nexport * from './react-portals';\r\n",
      "portals/portal-container.d.ts": "import type { FunctionComponent } from 'react';\r\nexport interface RenderParameter {\r\n    /**\r\n     * Renders a JSX element.\r\n     */\r\n    Component: FunctionComponent;\r\n}\r\nexport interface MountedPortal extends RenderParameter {\r\n    key: string;\r\n}\r\nexport interface RenderMethodParameter extends RenderParameter {\r\n    /**\r\n     * The DOM element to contain the react portal.\r\n     */\r\n    container: HTMLElement;\r\n}\r\ninterface Events {\r\n    /**\r\n     * Trigger an update in all subscribers\r\n     */\r\n    update: (portalMap: PortalMap) => void;\r\n}\r\nexport declare type PortalList = ReadonlyArray<[HTMLElement, MountedPortal]>;\r\nexport declare type PortalMap = Map<HTMLElement, MountedPortal>;\r\n/**\r\n * The node view portal container keeps track of all the portals which have been added by react to render\r\n * the node views in the editor.\r\n */\r\nexport declare class PortalContainer {\r\n    /**\r\n     * A map of all the active portals.\r\n     */\r\n    portals: Map<HTMLElement, MountedPortal>;\r\n    /**\r\n     * The event listener which allows consumers to subscribe to when a new portal\r\n     * is added / deleted via the updated event.\r\n     */\r\n    events: import(\"nanoevents\").Emitter<Events>;\r\n    /**\r\n     * Event handler for subscribing to update events from the portalContainer.\r\n     */\r\n    on: (callback: (portalMap: PortalMap) => void) => import(\"nanoevents\").Unsubscribe;\r\n    /**\r\n     * Subscribe to one event before automatically unbinding.\r\n     */\r\n    once: (callback: (portalMap: PortalMap) => void) => import(\"nanoevents\").Unsubscribe;\r\n    /**\r\n     * Trigger an update in all subscribers.\r\n     */\r\n    private update;\r\n    /**\r\n     * Responsible for registering a new portal by rendering the react element into the provided container.\r\n     */\r\n    render({ Component, container }: RenderMethodParameter): void;\r\n    /**\r\n     * Force an update in all the portals by setting new keys for every portal.\r\n     *\r\n     * Delete all orphaned containers (deleted from the DOM). This is useful for\r\n     * Decoration where there is no destroy method.\r\n     */\r\n    forceUpdate(): void;\r\n    /**\r\n     * Deletes the portal within the container.\r\n     */\r\n    remove(container: HTMLElement): void;\r\n}\r\nexport {};\r\n",
      "portals/react-portals.d.ts": "import { FunctionComponent } from 'react';\r\nimport type { PortalContainer } from './portal-container';\r\nexport interface RemirrorPortalsProps {\r\n    /**\r\n     * Holds all the portals currently being rendered by the application.\r\n     */\r\n    portalContainer: PortalContainer;\r\n}\r\n/**\r\n * The component that places all the portals into the DOM.\r\n *\r\n * Portals can be created by NodeView and also the static\r\n * widget method on Decorations.\r\n */\r\nexport declare const RemirrorPortals: ({ portalContainer }: RemirrorPortalsProps) => JSX.Element;\r\nexport interface PortalProps extends RemirrorPortalsProps {\r\n    /**\r\n     * Holds the element that this portal is being rendered into.\r\n     */\r\n    container: HTMLElement;\r\n    /**\r\n     * The plain component to render.\r\n     */\r\n    Component: FunctionComponent<object>;\r\n}\r\n",
      "react-component-extension.d.ts": "import type { ComponentType } from 'react';\r\nimport { AnyCombinedUnion, NodeViewMethod, PlainExtension } from '@remirror/core';\r\nimport type { NodeViewComponentProps, ReactComponentEnvironment, ReactComponentOptions } from './node-view-types';\r\nimport { PortalContainer } from './portals';\r\n/**\r\n * The extension transforms the `Component` property on extensions into a\r\n *\r\n * - Valid nodeView wrapped in a wrapper dom element\r\n * - A valid SSR component.\r\n *\r\n * Currently this only support nodes. Support will be added for marks later.\r\n *\r\n * @remarks\r\n *\r\n * When creating a nodeView using the component property the `toDOM` method\r\n * returned by the `createNodeSpec` methods needs to be in the following format.\r\n *\r\n * - `string` - e.g. `div`. This will be used as the wrapper tag name. .\r\n * - `[string, 0]` - The wrapper tag name and a `0` indicating that this will be\r\n *   accepting content.\r\n * - `[string, object, 0?]` -The wrapper tag name, an object of the attributes\r\n *   that should be applied to the wrapper tag and a 0 when you want the react\r\n *   component to have content inserted into it.\r\n *\r\n * Unfortunately `React Components` currently require a wrapping tag element\r\n * when being used in the DOM. See the following for the reasons.\r\n *\r\n * ### Caveats\r\n *\r\n * It's not possible not to have the nesting in `React` due to this issue\r\n * https://github.com/facebook/react/issues/12227. Also, it's unlikely that any\r\n * changes will be made in ProseMirror, which makes a lot of sense\r\n * https://github.com/ProseMirror/prosemirror/issues/803\r\n *\r\n * NodeViews have a `dom` node which is the top element. For paragraphs this\r\n * would be the `p` tag and for text this is a `TEXT` node. NodeView's  also\r\n * have a `contentDOM` property which is where any content from ProseMirror is\r\n * injected.\r\n *\r\n * The difficulty in integration is that the dom node and the content dom node\r\n * of the `NodeView` are consumed synchronously by ProseMirror. However, react\r\n * requires a ref to determine where the node has been mounted and this is done\r\n * asynchronously. As a result it's not possible provide the `dom` node or\r\n * `contentDOM` to ProseMirror while using react.\r\n *\r\n * The only way around this, is to create both the top level dom node and the\r\n * content dom manually in the NodeView and provide a ref to the component which\r\n * should be attached to the part of the tree where content should be rendered\r\n * to. Once the React ref is available asynchronously the `contentDOM` can be\r\n * appended to it.\r\n *\r\n * I'm currently improving the API in the next branch and I'll update docs on\r\n * how it should be used once done.\r\n */\r\nexport declare class ReactComponentExtension extends PlainExtension<ReactComponentOptions> {\r\n    #private;\r\n    get name(): \"reactNodeView\";\r\n    /**\r\n     * Add the portal container to the manager store. This can be used by the\r\n     * `ReactEditor` to manage the portals.\r\n     */\r\n    onCreate: () => void;\r\n    createNodeViews: () => Record<string, NodeViewMethod>;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * The portal container which keeps track of all the React Portals\r\n             * containing custom ProseMirror node views.\r\n             */\r\n            portalContainer: PortalContainer;\r\n        }\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to exclude the react components.\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            reactComponents?: boolean;\r\n        }\r\n        interface BaseExtension {\r\n            /**\r\n             * Set the supported environments for this component. By default it is set\r\n             * to use `both`.\r\n             */\r\n            reactComponentEnvironment?: ReactComponentEnvironment;\r\n            /**\r\n             * The component that will be rendered as a node view and dom element. Can\r\n             * also be used to render in SSR.\r\n             *\r\n             * Use this if the automatic componentization in ReactSerializer of the\r\n             * `toDOM` method doesn't produce the expected results in SSR.\r\n             *\r\n             * TODO move this into a separate NodeExtension and MarkExtension based\r\n             * merged interface so that the props can be specified as `{ mark: Mark }`\r\n             * or `{ node: ProsemirrorNode }`.\r\n             */\r\n            ReactComponent?: ComponentType<NodeViewComponentProps>;\r\n        }\r\n    }\r\n}\r\n",
      "react-node-view.d.ts": "import { Decoration, EditorView, NodeView, NodeWithAttributes, ProsemirrorNode } from '@remirror/core';\r\nimport type { CreateNodeViewParameter, GetPosition } from './node-view-types';\r\nexport declare class ReactNodeView implements NodeView {\r\n    #private;\r\n    /**\r\n     * A shorthand method for creating the ReactNodeView\r\n     */\r\n    static create(parameter: CreateNodeViewParameter): (node: NodeWithAttributes, view: EditorView, getPosition: GetPosition) => ReactNodeView;\r\n    /**\r\n     * Whether or not the node is currently selected.\r\n     */\r\n    get selected(): boolean;\r\n    /**\r\n     * The DOM node that should hold the node's content. Only meaningful if the\r\n     * node view also defines a `dom` property and if its node type is not a leaf\r\n     * node type. When this is present, ProseMirror will take care of rendering\r\n     * the node's children into it. When it is not present, the node view itself\r\n     * is responsible for rendering (or deciding not to render) its child nodes.\r\n     */\r\n    get contentDOM(): HTMLElement | undefined;\r\n    /**\r\n     * Provides readonly access to the dom element. The dom is automatically for\r\n     * react components.\r\n     */\r\n    get dom(): HTMLElement;\r\n    /**\r\n     * Create the node view for a react component and render it into the dom.\r\n     */\r\n    private constructor();\r\n    /**\r\n     * Render the react component into the dom.\r\n     */\r\n    private renderComponent;\r\n    /**\r\n     * Create the dom element which will hold the react component.\r\n     */\r\n    createDom(): HTMLElement;\r\n    /**\r\n     * The element that will contain the content for this element.\r\n     */\r\n    createContentDom(): HTMLElement | undefined;\r\n    /**\r\n     * Render the provided component.\r\n     *\r\n     * This method is passed into the HTML element.\r\n     */\r\n    private readonly Component;\r\n    /**\r\n     * Passed to the Component to enable updating the attributes from within the component.\r\n     */\r\n    private readonly updateAttributes;\r\n    /**\r\n     * Update the prosemirror node.\r\n     */\r\n    update(node: ProsemirrorNode, decorations: Decoration[]): boolean;\r\n    /**\r\n     * Copies the attributes from a ProseMirror Node to the parent DOM node.\r\n     *\r\n     * @param node The Prosemirror Node from which to source the attributes\r\n     */\r\n    setDomAttributes(node: ProsemirrorNode, element: HTMLElement): void;\r\n    /**\r\n     * Marks the node as being selected.\r\n     */\r\n    selectNode(): void;\r\n    deselectNode(): void;\r\n    /**\r\n     * This is called whenever the node is being destroyed.\r\n     */\r\n    destroy(): void;\r\n    ignoreMutation(mutation: IgnoreMutationParameter): boolean;\r\n}\r\ndeclare type IgnoreMutationParameter = MutationRecord | {\r\n    type: 'selection';\r\n    target: Element;\r\n};\r\nexport {};\r\n"
    },
    "@remirror/extension-react-ssr": {
      "index.d.ts": "export type { ManagerStoreReactComponent, ReactSSROptions, SSRTransformer, } from './react-ssr-extension';\r\nexport { ReactSSRExtension } from './react-ssr-extension';\r\n",
      "react-ssr-extension.d.ts": "import { ComponentType } from 'react';\r\nimport { AnyCombinedUnion, EditorState, PlainExtension, Static } from '@remirror/core';\r\nimport type { NodeViewComponentProps } from '@remirror/extension-react-component';\r\nexport interface ReactSSROptions {\r\n    /**\r\n     * The transformers that will be automatically used in the editor for properly\r\n     * rendering ssr.\r\n     *\r\n     * @defaultValue `DEFAULT_TRANSFORMATIONS`\r\n     */\r\n    transformers?: Static<SSRTransformer[]>;\r\n}\r\n/**\r\n * This extension allows for React based SSR transformations to the editor. It\r\n * adds a parameter option called `createSSRTransformer` which is used to handle\r\n * the differences between how prosemirror renders the dom and how it appears in\r\n * an ssr environment.\r\n *\r\n * @remarks\r\n *\r\n * There are subtle things that prosemirror does when it loads the document that\r\n * can cause things to jump around.\r\n *\r\n * The aim of this extension is to provide a series of helper transformations\r\n * which deal with the typical problems that prosemirror presents when rendering\r\n * on the server. It also allows other extensions to use the\r\n * `createSSRTransformer` option to handle their own ssr discrepancies.\r\n *\r\n * The transformations can also serve as a guideline when creating your own\r\n * SSRTransforms. However in most cases the defaults should be sufficient.\r\n */\r\nexport declare class ReactSSRExtension extends PlainExtension<ReactSSROptions> {\r\n    get name(): \"reactSSR\";\r\n    onCreate(): void;\r\n    /**\r\n     * A function that takes in the initial automatically produced JSX by the\r\n     * ReactSSRSerializer and transforms it into and element that is consistent\r\n     * between the browser and the server.\r\n     */\r\n    createSSRTransformer: () => (initialElement: JSX.Element) => JSX.Element;\r\n}\r\nexport declare type SSRTransformer = (element: JSX.Element, state?: EditorState) => JSX.Element;\r\nexport interface ManagerStoreReactComponent {\r\n    Component: ComponentType<NodeViewComponentProps>;\r\n    props: Omit<NodeViewComponentProps, 'node' | 'view'>;\r\n}\r\ndeclare global {\r\n    namespace Remirror {\r\n        interface ExcludeOptions {\r\n            /**\r\n             * Whether to use the SSR component when not in a DOM environment\r\n             *\r\n             * @defaultValue `undefined`\r\n             */\r\n            reactSSR?: boolean;\r\n        }\r\n        interface ManagerStore<Combined extends AnyCombinedUnion> {\r\n            /**\r\n             * The transformer for updating the SSR rendering of the prosemirror state\r\n             * and allowing it to render without defects.\r\n             */\r\n            ssrTransformer: SSRTransformer;\r\n            /**\r\n             * Components for ssr transformations.\r\n             */\r\n            components: Record<string, ManagerStoreReactComponent>;\r\n        }\r\n        interface ExtensionCreatorMethods {\r\n            /**\r\n             * A method for transforming the original JSX element received by the\r\n             * extension. This is typically for usage in server side rendered\r\n             * environment.\r\n             *\r\n             * @remarks\r\n             *\r\n             * Some extensions add decorations to the ProsemirrorView based on their\r\n             * state. These decorations can touch any node or mark and it would be\r\n             * very difficult to model this without transforming the complete\r\n             * produced JSX element.\r\n             *\r\n             * An example is that all empty paragraphs in prosemirror automatically\r\n             * have a `<br />` tag injected into them during runtime. The\r\n             * ReactSSRSerializer which transform the `toDOM` method output for paragraph\r\n             * tags `[p, 0]` into JSX `<p />` has no way of knowing about this. That\r\n             * is where this creator method can help. We can transform the\r\n             * automatically generated JSX and inject `<br />` tags for the initial\r\n             * server render. That way there is no jump or layout adjustment when the\r\n             * document first loads on the browser.\r\n             */\r\n            createSSRTransformer?: () => SSRTransformer;\r\n        }\r\n    }\r\n}\r\n"
    },
    "@remirror/extension-search": {
      "index.d.ts": "export type { SearchDirection, SearchOptions } from './search-extension';\r\nexport { SearchExtension, rotateHighlightedIndex } from './search-extension';\r\n",
      "search-extension.d.ts": "import { CommandFunction, CreatePluginReturn, Handler, PlainExtension, Static } from '@remirror/core';\r\nexport interface SearchOptions {\r\n    /**\r\n     * @default false\r\n     */\r\n    autoSelectNext?: boolean;\r\n    /**\r\n     * @default 'search'\r\n     */\r\n    searchClass?: Static<string>;\r\n    /**\r\n     * The class to apply to the currently highlighted index.\r\n     *\r\n     * @default 'highlighted-search'\r\n     */\r\n    highlightedClass?: Static<string>;\r\n    /**\r\n     * @default false\r\n     */\r\n    searching?: boolean;\r\n    /**\r\n     * @default false\r\n     */\r\n    caseSensitive?: boolean;\r\n    /**\r\n     * @default true\r\n     */\r\n    disableRegex?: boolean;\r\n    /**\r\n     * @default false\r\n     */\r\n    alwaysSearch?: boolean;\r\n    /**\r\n     * Set to false to disable.\r\n     *\r\n     * @default 'Mod-f'\r\n     */\r\n    searchForwardShortcut?: string | false;\r\n    /**\r\n     * Set to false to disable.\r\n     *\r\n     * @default 'Mod-Shift-f'\r\n     */\r\n    searchBackwardShortcut?: string | false;\r\n    /**\r\n     * Whether to clear the search when the esc key is pressed.\r\n     *\r\n     * @default true\r\n     */\r\n    clearOnEscape?: boolean;\r\n    /**\r\n     * Search handler\r\n     */\r\n    onSearch: Handler<(selectedText: string, direction: SearchDirection) => void>;\r\n}\r\nexport declare type SearchDirection = 'next' | 'previous';\r\n/**\r\n * This extension add search functionality to your editor.\r\n */\r\nexport declare class SearchExtension extends PlainExtension<SearchOptions> {\r\n    #private;\r\n    get name(): \"search\";\r\n    createCommands(): {\r\n        /**\r\n         * Find a search term in the editor. If no search term is provided it\r\n         * defaults to the currently selected text.\r\n         */\r\n        find: (searchTerm?: string, direction?: SearchDirection) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Find the next occurrence of the search term.\r\n         */\r\n        findNext: () => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Find the previous occurrence of the search term.\r\n         */\r\n        findPrevious: () => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Replace the provided\r\n         */\r\n        replace: (replacement: string, index?: number) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Replaces all search results with the replacement text.\r\n         */\r\n        replaceAll: (replacement: string) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Clears the current search.\r\n         */\r\n        clearSearch: () => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    /**\r\n     * This plugin is responsible for adding something decorations to the\r\n     */\r\n    createPlugin(): CreatePluginReturn;\r\n    /**\r\n     * Create the keymap for this extension.\r\n     */\r\n    createKeymap(): Record<string, CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, import(\"@remirror/core\").NextParameter<import(\"@remirror/core\").EditorSchema<string, string>>>>;\r\n    private createSearchKeyBinding;\r\n    private findRegExp;\r\n    private getDecorations;\r\n    private search;\r\n    private replace;\r\n    private rebaseNextResult;\r\n    private replaceAll;\r\n    private find;\r\n    private clear;\r\n    /**\r\n     * Dispatch an empty transaction to trigger an update of the decoration.\r\n     */\r\n    private updateView;\r\n    private createDecoration;\r\n}\r\ninterface RotateHighlightedIndexParameter {\r\n    /**\r\n     * Whether the search is moving forward or backward.\r\n     */\r\n    direction: SearchDirection;\r\n    /**\r\n     * The total number of matches\r\n     */\r\n    resultsLength: number;\r\n    /**\r\n     * The previously matched index\r\n     */\r\n    previousIndex: number;\r\n}\r\nexport declare const rotateHighlightedIndex: (parameter: RotateHighlightedIndexParameter) => number;\r\nexport {};\r\n"
    },
    "@remirror/extension-strike": {
      "index.d.ts": "export { StrikeExtension } from './strike-extension';\r\n",
      "strike-extension.d.ts": "import { ApplySchemaAttributes, InputRule, KeyBindings, MarkExtension, MarkExtensionSpec, Plugin } from '@remirror/core';\r\n/**\r\n * The extension for adding strike-through marks to the editor.\r\n */\r\nexport declare class StrikeExtension extends MarkExtension {\r\n    get name(): \"strike\";\r\n    createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n    createKeymap(): KeyBindings;\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the strike through formatting annotation.\r\n         */\r\n        toggleStrike: () => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createInputRules(): InputRule[];\r\n    createPasteRules(): Plugin[];\r\n}\r\n"
    },
    "@remirror/extension-text": {
      "index.d.ts": "export { TextExtension } from './text-extension';\r\n",
      "text-extension.d.ts": "import { NodeExtension, NodeGroup } from '@remirror/core';\r\n/**\r\n * The default text passed into the prosemirror schema.\r\n *\r\n * Extra attributes are not allowed on the text extension.\r\n *\r\n * @core\r\n */\r\nexport declare class TextExtension extends NodeExtension {\r\n    get name(): \"text\";\r\n    createNodeSpec(): {\r\n        group: NodeGroup;\r\n    };\r\n}\r\n"
    },
    "@remirror/extension-trailing-node": {
      "index.d.ts": "export type { TrailingNodeOptions } from './trailing-node-extension';\r\nexport { TrailingNodeExtension } from './trailing-node-extension';\r\n",
      "trailing-node-extension.d.ts": "import { CreatePluginReturn, OnSetOptionsParameter, PlainExtension } from '@remirror/core';\r\nexport interface TrailingNodeOptions {\r\n    /**\r\n     * The node to create at the end of the document.\r\n     *\r\n     * **Note**: the nodeName will always be added to the ignoredNodes lists to\r\n     * prevent an infinite loop.\r\n     *\r\n     * @defaultValue 'paragraph'\r\n     */\r\n    nodeName?: string;\r\n    /**\r\n     * The nodes for which this rule should not apply.\r\n     */\r\n    ignoredNodes?: string[];\r\n    /**\r\n     * By default this extension will set trailing nodes for all nodes except for\r\n     * the ones that have the tag `Tags.LastNodeCompatible`. Setting this to true\r\n     * means that the only nodes that will be ignored are those passed to the\r\n     * `ignoredNodes` array.\r\n     *\r\n     * @defaultValue false\r\n     */\r\n    disableTags?: boolean;\r\n}\r\n/**\r\n * Ensure that there's always a trailing paragraph at the end of the document.\r\n *\r\n * Why? In some scenarios it is difficult to place a cursor after the last element.\r\n * This ensures there's always space to select the position afterward.\r\n *\r\n */\r\nexport declare class TrailingNodeExtension extends PlainExtension<TrailingNodeOptions> {\r\n    get name(): \"trailingNode\";\r\n    /**\r\n     * Whenever the options are changed make sure to update the plugin with the\r\n     * new values and trigger a state update.\r\n     */\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<TrailingNodeOptions>): void;\r\n    /**\r\n     * Create the paragraph plugin which can check the end of the document and\r\n     * insert a new node.\r\n     */\r\n    createPlugin(): CreatePluginReturn<boolean>;\r\n}\r\n"
    },
    "@remirror/extension-underline": {
      "index.d.ts": "export { UnderlineExtension } from './underline-extension';\r\n",
      "underline-extension.d.ts": "import { ApplySchemaAttributes, MarkExtension, MarkExtensionSpec } from '@remirror/core';\r\nexport declare class UnderlineExtension extends MarkExtension {\r\n    get name(): \"underline\";\r\n    createMarkSpec(extra: ApplySchemaAttributes): MarkExtensionSpec;\r\n    createKeymap(): {\r\n        'Mod-u': import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the underline formatting of the selected text.\r\n         */\r\n        toggleUnderline: () => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n}\r\n"
    },
    "@remirror/extension-yjs": {
      "index.d.ts": "export type { YjsOptions } from './yjs-extension';\r\nexport { YjsExtension } from './yjs-extension';\r\n",
      "yjs-extension.d.ts": "import { Doc } from 'yjs';\r\nimport { CommandFunction, OnSetOptionsParameter, PlainExtension, Static } from '@remirror/core';\r\n/**\r\n * yjs typings are very rough; so we define here the interface that we require\r\n * (y-webrtc and y-websocket providers are both compatible with this interface;\r\n * no other providers have been checked).\r\n */\r\ninterface YjsRealtimeProvider {\r\n    doc: Doc;\r\n    awareness: any;\r\n    destroy: () => void;\r\n    disconnect: () => void;\r\n}\r\nexport interface YjsOptions<Provider extends YjsRealtimeProvider = YjsRealtimeProvider> {\r\n    /**\r\n     * Get the provider for this extension. There is an option to pass in a\r\n     * function for when setting this up in a non dom environment.\r\n     */\r\n    getProvider: Provider | (() => Provider);\r\n    /**\r\n     * Remove the active provider. This should only be set at initial construction\r\n     * of the editor.\r\n     */\r\n    destroyProvider: Static<(provider: Provider) => void>;\r\n}\r\n/**\r\n * The YJS extension is the recommended extension for creating a collaborative\r\n * editor.\r\n */\r\nexport declare class YjsExtension extends PlainExtension<YjsOptions> {\r\n    #private;\r\n    get name(): \"yjs\";\r\n    /**\r\n     * The provider that is being used for the editor.\r\n     */\r\n    get provider(): YjsRealtimeProvider;\r\n    /**\r\n     * Create the custom undo keymaps for the\r\n     */\r\n    createKeymap(): {\r\n        'Mod-z': import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        'Mod-y': import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        'Mod-Shift-z': import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n    };\r\n    /**\r\n     * Create the yjs plugins.\r\n     */\r\n    createExternalPlugins(): any[];\r\n    createCommands(): {\r\n        /**\r\n         * Undo within a collaborative editor.\r\n         */\r\n        yUndo: () => CommandFunction;\r\n        /**\r\n         * Redo, within a collaborative editor.\r\n         */\r\n        yRedo: () => CommandFunction;\r\n    };\r\n    /**\r\n     * This managers the updates of the collaboration provider.\r\n     */\r\n    onSetOptions(parameter: OnSetOptionsParameter<YjsOptions>): void;\r\n    /**\r\n     * Remove the provider from the manager.\r\n     */\r\n    onDestroy(): void;\r\n}\r\n/**\r\n * @remarks\r\n * This magic property is transformed by babel via linaria into CSS that will be\r\n * wrapped by the `.remirror-editor` class; when you edit it you must run `yarn\r\n * fix:css` to regenerate `@remirror/styles/all.css`.\r\n */\r\nexport declare const editorStyles: string;\r\nexport {};\r\n"
    },
    "@remirror/preset-core": {
      "core-preset.d.ts": "import { AddCustomHandler, AnyCombinedUnion, GetStaticAndDynamic, OnSetOptionsParameter, Preset, RemirrorManager, Static } from '@remirror/core';\r\nimport { DocExtension, DocOptions } from '@remirror/extension-doc';\r\nimport { EventsExtension } from '@remirror/extension-events';\r\nimport { GapCursorExtension } from '@remirror/extension-gap-cursor';\r\nimport { HistoryExtension, HistoryOptions } from '@remirror/extension-history';\r\nimport { ParagraphExtension } from '@remirror/extension-paragraph';\r\nimport { PositionerExtension, PositionerOptions } from '@remirror/extension-positioner';\r\nimport { TextExtension } from '@remirror/extension-text';\r\n/**\r\n * The options for the core preset.\r\n */\r\nexport interface CorePresetOptions extends DocOptions, PositionerOptions, HistoryOptions {\r\n    /**\r\n     * You can exclude one or multiple extensions from CorePreset by passing their\r\n     * extension names in `excludeExtensions`.\r\n     *\r\n     * When using the `yjs` extension it is important to exclude the history\r\n     * extension to prevent issues with collaborative editing mode.\r\n     *\r\n     * @defaultValue `[]`\r\n     */\r\n    excludeExtensions?: Static<Array<'doc' | 'paragraph' | 'text' | 'positioner' | 'history' | 'gapCursor' | 'events'>>;\r\n}\r\n/**\r\n * The core preset is included by default in framework code like `remirror/react`.\r\n *\r\n * It comes with the the following extensions.\r\n *\r\n * - `HistoryExtension` - for undo and redo functionality\r\n * - `DocExtension` - provides the top level prosemirror node.\r\n * - `TextExtension` - provides the prosemirror text node\r\n * - `ParagraphExtension` - provides the prosemirror paragraph node\r\n * - `PositionerExtension` - allows for creating  the extension.\r\n */\r\nexport declare class CorePreset extends Preset<CorePresetOptions> {\r\n    get name(): \"core\";\r\n    /**\r\n     * No properties are defined so this can be ignored.\r\n     */\r\n    protected onSetOptions(_: OnSetOptionsParameter<CorePresetOptions>): void;\r\n    protected onAddCustomHandler: AddCustomHandler<CorePresetOptions>;\r\n    createExtensions(): (HistoryExtension | GapCursorExtension | DocExtension | TextExtension | ParagraphExtension | PositionerExtension | EventsExtension)[];\r\n}\r\nexport interface CreateCoreManagerOptions extends Remirror.ManagerSettings {\r\n    /**\r\n     * The core preset options.\r\n     */\r\n    core?: GetStaticAndDynamic<CorePresetOptions>;\r\n}\r\n/**\r\n * Create a manager with the core preset already applied.\r\n */\r\nexport declare function createCoreManager<Combined extends AnyCombinedUnion>(combined: Combined[] | (() => Combined[]), options?: CreateCoreManagerOptions): RemirrorManager<import(\"@remirror/core\").BuiltinPreset | CorePreset | Combined>;\r\n",
      "index.d.ts": "export type { CorePresetOptions, CreateCoreManagerOptions } from './core-preset';\r\nexport { CorePreset, createCoreManager } from './core-preset';\r\n"
    },
    "@remirror/preset-embed": {
      "embed-preset.d.ts": "import { OnSetOptionsParameter, Preset } from '@remirror/core';\r\nimport { IframeExtension, IframeOptions } from './iframe-extension';\r\nexport interface EmbedOptions extends IframeOptions {\r\n}\r\nexport declare class EmbedPreset extends Preset<EmbedOptions> {\r\n    get name(): \"embed\";\r\n    protected onSetOptions(_parameter: OnSetOptionsParameter<EmbedOptions>): void;\r\n    createExtensions(): IframeExtension[];\r\n}\r\n",
      "iframe-extension.d.ts": "import { ApplySchemaAttributes, CommandFunction, NodeExtension, NodeExtensionSpec, ProsemirrorAttributes, Static } from '@remirror/core';\r\nexport interface IframeOptions {\r\n    /**\r\n     * The default source to use for the iframe.\r\n     */\r\n    defaultSource?: Static<string>;\r\n    /**\r\n     * The class to add to the iframe.\r\n     *\r\n     * @defaultValue 'remirror-iframe'\r\n     */\r\n    class?: Static<string>;\r\n}\r\nexport declare type IframeAttributes = ProsemirrorAttributes<{\r\n    src: string;\r\n    frameBorder?: number | string;\r\n    allowFullScreen?: 'true';\r\n    width?: string | number;\r\n    height?: string | number;\r\n    type?: 'custom' | 'youtube';\r\n}>;\r\n/**\r\n * An extension for the remirror editor.\r\n */\r\nexport declare class IframeExtension extends NodeExtension<IframeOptions> {\r\n    get name(): \"iframe\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    /**\r\n     * Provides the commands for the iFrame extension.\r\n     */\r\n    createCommands(): {\r\n        /**\r\n         * Add a custom iFrame to the editor.\r\n         */\r\n        addIframe: (attributes: ProsemirrorAttributes<{\r\n            src: string;\r\n            frameBorder?: string | number;\r\n            allowFullScreen?: \"true\";\r\n            width?: string | number;\r\n            height?: string | number;\r\n            type?: \"custom\" | \"youtube\";\r\n        }>) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Add a YouTube embedded iFrame to the editor.\r\n         */\r\n        addYouTubeVideo: (parameter: CreateYouTubeIframeParameter) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Update the iFrame source for the currently selected video.\r\n         */\r\n        updateIframeSource: (src: string) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n        /**\r\n         * Update the YouTube video iFrame.\r\n         */\r\n        updateYouTubeVideo: (parameter: CreateYouTubeIframeParameter) => CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    /**\r\n     * Creates the command for adding an iFrame to the editor.\r\n     */\r\n    private readonly addIframe;\r\n    /**\r\n     * The command for adding a YouTube iframe.\r\n     */\r\n    private readonly addYouTubeVideo;\r\n    /**\r\n     * Creates the command for updating the iFrame source.\r\n     */\r\n    private readonly updateIframeSource;\r\n    private readonly updateYouTubeVideo;\r\n}\r\ninterface CreateYouTubeIframeParameter {\r\n    /**\r\n     * The video id (dQw4w9WgXcQ) or full link (https://www.youtube.com/watch?v=dQw4w9WgXcQ).\r\n     */\r\n    video: string;\r\n    /**\r\n     * The number os seconds in to start at.\r\n     * @defaultValue `0`\r\n     */\r\n    startAt?: number;\r\n    /**\r\n     * When true will show the player controls.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    showControls?: boolean;\r\n    /**\r\n     * According to YouTube: _When you turn on privacy-enhanced mode, YouTube\r\n     * won't store information about visitors on your website unless they play the\r\n     * video._\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    enhancedPrivacy?: boolean;\r\n}\r\nexport {};\r\n",
      "index.d.ts": "export type { EmbedOptions } from './embed-preset';\r\nexport { EmbedPreset } from './embed-preset';\r\nexport type { IframeAttributes, IframeOptions } from './iframe-extension';\r\nexport { IframeExtension } from './iframe-extension';\r\n"
    },
    "@remirror/preset-list": {
      "bullet-list-extension.d.ts": "import { ApplySchemaAttributes, KeyBindings, NodeExtension, NodeExtensionSpec } from '@remirror/core';\r\n/**\r\n * Creates the node for a bullet list.\r\n */\r\nexport declare class BulletListExtension extends NodeExtension {\r\n    get name(): \"bulletList\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the bullet list.\r\n         */\r\n        toggleBulletList: () => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createKeymap(): KeyBindings;\r\n    createInputRules(): import(\"@remirror/pm/inputrules\").InputRule<any>[];\r\n}\r\n",
      "index.d.ts": "export { ListPreset } from './list-preset';\r\nexport { BulletListExtension } from './bullet-list-extension';\r\nexport { ListItemExtension } from './list-item-extension';\r\nexport { OrderedListExtension } from './ordered-list-extension';\r\n",
      "list-item-extension.d.ts": "import { ApplySchemaAttributes, KeyBindings, NodeExtension, NodeExtensionSpec } from '@remirror/core';\r\n/**\r\n * Creates the node for a list item.\r\n */\r\nexport declare class ListItemExtension extends NodeExtension {\r\n    get name(): \"listItem\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createKeymap(): KeyBindings;\r\n}\r\n",
      "list-preset.d.ts": "import { OnSetOptionsParameter, Preset } from '@remirror/core';\r\nimport { BulletListExtension } from './bullet-list-extension';\r\nimport { ListItemExtension } from './list-item-extension';\r\nimport { OrderedListExtension } from './ordered-list-extension';\r\nexport declare class ListPreset extends Preset {\r\n    get name(): \"list\";\r\n    protected onSetOptions(_: OnSetOptionsParameter<object>): void;\r\n    createExtensions(): (OrderedListExtension | BulletListExtension | ListItemExtension)[];\r\n}\r\n",
      "ordered-list-extension.d.ts": "import { ApplySchemaAttributes, KeyBindings, NodeExtension, NodeExtensionSpec } from '@remirror/core';\r\n/**\r\n * Creates the list for the ordered list.\r\n */\r\nexport declare class OrderedListExtension extends NodeExtension {\r\n    get name(): \"orderedList\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): NodeExtensionSpec;\r\n    createCommands(): {\r\n        /**\r\n         * Toggle the ordered list for the current selection.\r\n         */\r\n        toggleOrderedList: () => import(\"@remirror/core\").CommandFunction<import(\"@remirror/core\").EditorSchema<string, string>, object>;\r\n    };\r\n    createKeymap(): KeyBindings;\r\n    createInputRules(): import(\"@remirror/pm/inputrules\").InputRule<any>[];\r\n}\r\n"
    },
    "@remirror/preset-react": {
      "index.d.ts": "export type { ReactPresetOptions } from './react-preset';\r\nexport { ReactPreset } from './react-preset';\r\n",
      "react-preset.d.ts": "import { OnSetOptionsParameter, Preset } from '@remirror/core';\r\nimport { PlaceholderExtension, PlaceholderOptions } from '@remirror/extension-placeholder';\r\nimport { ReactComponentExtension } from '@remirror/extension-react-component';\r\nimport { ReactSSRExtension, ReactSSROptions } from '@remirror/extension-react-ssr';\r\nexport interface ReactPresetOptions extends ReactSSROptions, PlaceholderOptions {\r\n}\r\nexport declare class ReactPreset extends Preset<ReactPresetOptions> {\r\n    get name(): \"react\";\r\n    /**\r\n     * No properties are defined so this can be ignored.\r\n     */\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<ReactPresetOptions>): void;\r\n    createExtensions(): (ReactSSRExtension | PlaceholderExtension | ReactComponentExtension)[];\r\n    private addSSRToPlaceholder;\r\n}\r\n"
    },
    "@remirror/preset-social": {
      "index.d.ts": "export type { SocialOptions } from './social-preset';\r\nexport { SocialPreset } from './social-preset';\r\n",
      "social-preset.d.ts": "import type { Except } from 'type-fest';\r\nimport { AddCustomHandler, OnSetOptionsParameter, Preset, Static } from '@remirror/core';\r\nimport { AutoLinkExtension, AutoLinkOptions } from '@remirror/extension-auto-link';\r\nimport { EmojiExtension, EmojiOptions } from '@remirror/extension-emoji';\r\nimport { MentionExtension, MentionExtensionMatcher, MentionOptions } from '@remirror/extension-mention';\r\nexport interface SocialOptions extends AutoLinkOptions, Except<EmojiOptions, 'onChange' | 'onExit' | 'keyBindings'>, Partial<MentionOptions> {\r\n    onChangeEmoji?: EmojiOptions['onChange'];\r\n    onExitEmoji?: EmojiOptions['onExit'];\r\n    keyBindingsEmoji?: EmojiOptions['keyBindings'];\r\n    /**\r\n     * The matcher options for the `@` mention character.\r\n     */\r\n    atMatcherOptions?: Static<Except<MentionExtensionMatcher, 'name' | 'char'>>;\r\n    /**\r\n     * The matcher options for the `#` mention character/\r\n     */\r\n    tagMatcherOptions?: Static<Except<MentionExtensionMatcher, 'name' | 'char'>>;\r\n}\r\nexport declare class SocialPreset extends Preset<SocialOptions> {\r\n    get name(): \"social\";\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<SocialOptions>): void;\r\n    onAddCustomHandler: AddCustomHandler<SocialOptions>;\r\n    createExtensions(): (AutoLinkExtension | MentionExtension | EmojiExtension)[];\r\n}\r\n"
    },
    "@remirror/preset-table": {
      "index.d.ts": "export type { TableOptions } from './table-extensions';\r\nexport { TableCellExtension, TableExtension, TableHeaderCellExtension, TableRowExtension, } from './table-extensions';\r\nexport { TablePreset } from './table-preset';\r\n",
      "table-extensions.d.ts": "import { ApplySchemaAttributes, CommandFunction, CommandFunctionParameter, NodeExtension, OnSetOptionsParameter } from '@remirror/core';\r\nimport { CreateTableParameter, TableSchemaSpec } from './table-utils';\r\nexport interface TableOptions {\r\n    /**\r\n     * When true the table will be resizable.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    resizable?: boolean;\r\n}\r\nexport declare class TableExtension extends NodeExtension<TableOptions> {\r\n    get name(): \"table\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): TableSchemaSpec;\r\n    /**\r\n     * Add the table plugins to the editor.\r\n     */\r\n    createExternalPlugins(): import(\"@remirror/pm/state\").Plugin<any, any>[];\r\n    /**\r\n     * Create the commands that can be used for the table.\r\n     */\r\n    createCommands(): {\r\n        /**\r\n         * Create a table in the editor at the current selection point.\r\n         */\r\n        createTable: (parameter: Pick<CreateTableParameter, 'rowsCount' | 'columnsCount' | 'withHeaderRow'>) => CommandFunction;\r\n        /**\r\n         * Delete the table.\r\n         */\r\n        deleteTable: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Command to add a column before the column with the selection.\r\n         */\r\n        addTableColumnBefore: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Command to add a column after the column with the selection.\r\n         */\r\n        addTableColumnAfter: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Remove selected column from the table.\r\n         */\r\n        deleteTableColumn: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Add a table row before the current selection.\r\n         */\r\n        addTableRowBefore: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Add a table row after the current selection.\r\n         */\r\n        addTableRowAfter: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Delete the table row at the current selection.\r\n         */\r\n        deleteTableRow: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Toggles between merging cells.\r\n         */\r\n        toggleTableCellMerge: () => typeof toggleMergeCellCommand;\r\n        /**\r\n         * Merge the table cells.\r\n         */\r\n        mergeTableCells: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Split the merged cells into individual cells.\r\n         */\r\n        splitTableCell: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Toggles a column as the header column.\r\n         */\r\n        toggleTableHeaderColumn: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Toggles a row as a table header row.\r\n         */\r\n        toggleTableHeaderRow: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Toggle a cell as a table header cell.\r\n         */\r\n        toggleTableHeaderCell: () => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Set the attribute for a table cell.\r\n         */\r\n        setTableCellAttribute: (name: string, value: unknown) => import(\"@remirror/core\").Brand<CommandFunction<any, Record<never, never>>, \"non-chainable\">;\r\n        /**\r\n         * Fix all tables within the document.\r\n         */\r\n        fixTables: () => typeof fixTablesCommand;\r\n    };\r\n    createHelpers(): {\r\n        /**\r\n         * Enable table usage within the editor. This depends on the editor.\r\n         */\r\n        enableTableSupport: () => void;\r\n    };\r\n    /**\r\n     * This managers the updates of the collaboration provider.\r\n     */\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<TableOptions>): void;\r\n}\r\n/**\r\n * The extension for a table row node.\r\n */\r\nexport declare class TableRowExtension extends NodeExtension {\r\n    get name(): \"tableRow\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): TableSchemaSpec;\r\n}\r\n/**\r\n * The extension for a table cell node.\r\n */\r\nexport declare class TableCellExtension extends NodeExtension {\r\n    get name(): \"tableCell\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): TableSchemaSpec;\r\n}\r\n/**\r\n * The extension for the table header node.\r\n */\r\nexport declare class TableHeaderCellExtension extends NodeExtension {\r\n    get name(): \"tableHeaderCell\";\r\n    createNodeSpec(extra: ApplySchemaAttributes): TableSchemaSpec;\r\n}\r\ndeclare function fixTablesCommand({ state, dispatch }: CommandFunctionParameter): boolean;\r\ndeclare function toggleMergeCellCommand({ state, dispatch }: CommandFunctionParameter): boolean;\r\nexport {};\r\n",
      "table-preset.d.ts": "import { OnSetOptionsParameter, Preset } from '@remirror/core';\r\nimport { TableCellExtension, TableExtension, TableHeaderCellExtension, TableOptions, TableRowExtension } from './table-extensions';\r\n/**\r\n * The table is packaged up as preset for simpler consumption.\r\n */\r\nexport declare class TablePreset extends Preset<TableOptions> {\r\n    get name(): \"table\";\r\n    /**\r\n     * Create the table extensions. Set the priority to low so that they appear\r\n     * lower down in the node list.\r\n     */\r\n    createExtensions(): (TableExtension | TableRowExtension | TableCellExtension | TableHeaderCellExtension)[];\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<TableOptions>): void;\r\n}\r\n",
      "table-utils.d.ts": "import { ApplySchemaAttributes, NodeExtensionSpec, SchemaParameter } from '@remirror/core';\r\nimport type { Node as ProsemirrorNode } from '@remirror/pm/model';\r\nexport interface TableSchemaSpec extends NodeExtensionSpec {\r\n    tableRole: TableRole;\r\n}\r\nexport interface CreateTableParameter extends SchemaParameter {\r\n    /**\r\n     * Defines the number of rows to create with.\r\n     *\r\n     * @defaultValue 3\r\n     */\r\n    rowsCount?: number;\r\n    /**\r\n     * Defines the number of columns to create with.\r\n     *\r\n     * @defaultValue 3\r\n     */\r\n    columnsCount?: number;\r\n    /**\r\n     * When true the first row of the table will be a header row.\r\n     *\r\n     * @defaultValue true\r\n     */\r\n    withHeaderRow?: boolean;\r\n    /**\r\n     * Defines the content of each cell as a prosemirror node.\r\n     *\r\n     * @defaultValue undefined\r\n     */\r\n    cellContent?: ProsemirrorNode;\r\n}\r\nexport declare function createTableNodeSchema(extra: ApplySchemaAttributes): Record<'table' | 'tableRow' | 'tableCell' | 'tableHeaderCell', TableSchemaSpec>;\r\ndeclare const TABLE_ROLES: readonly [\"table\", \"row\", \"cell\", \"header_cell\"];\r\nexport declare type TableRole = typeof TABLE_ROLES[number];\r\n/**\r\n * Returns a table node of a given size.\r\n *\r\n * @remarks\r\n *\r\n * ```ts\r\n * const table = createTable({ schema: state.schema }); // 3x3 table node\r\n * dispatch(tr.replaceSelectionWith(table).scrollIntoView());\r\n * ```\r\n */\r\nexport declare function createTable(parameter: CreateTableParameter): ProsemirrorNode<any>;\r\nexport {};\r\n"
    },
    "@remirror/preset-wysiwyg": {
      "index.d.ts": "export { EmbedPreset } from '@remirror/preset-embed';\r\nexport type { EmbedOptions } from '@remirror/preset-embed';\r\nexport { ListPreset } from '@remirror/preset-list';\r\nexport { TablePreset } from '@remirror/preset-table';\r\nexport type { TableOptions } from '@remirror/preset-table';\r\nexport type { CreateWysiwygPresetListOptions, WysiwygOptions, WysiwygPresetCombinedUnion, } from './wysiwyg-preset';\r\nexport { WysiwygPreset, createWysiwygPresetList } from './wysiwyg-preset';\r\n",
      "wysiwyg-preset.d.ts": "import { GetStaticAndDynamic, OnSetOptionsParameter, Preset } from '@remirror/core';\r\nimport { BidiExtension, BidiOptions } from '@remirror/extension-bidi';\r\nimport { BlockquoteExtension } from '@remirror/extension-blockquote';\r\nimport { BoldExtension, BoldOptions } from '@remirror/extension-bold';\r\nimport { CodeExtension } from '@remirror/extension-code';\r\nimport { CodeBlockExtension, CodeBlockOptions } from '@remirror/extension-code-block';\r\nimport { DropCursorExtension, DropCursorOptions } from '@remirror/extension-drop-cursor';\r\nimport { EpicModeExtension } from '@remirror/extension-epic-mode';\r\nimport { GapCursorExtension } from '@remirror/extension-gap-cursor';\r\nimport { HardBreakExtension } from '@remirror/extension-hard-break';\r\nimport { HeadingExtension, HeadingOptions } from '@remirror/extension-heading';\r\nimport { HorizontalRuleExtension } from '@remirror/extension-horizontal-rule';\r\nimport { ImageExtension } from '@remirror/extension-image';\r\nimport { ItalicExtension } from '@remirror/extension-italic';\r\nimport { LinkExtension, LinkOptions } from '@remirror/extension-link';\r\nimport { SearchExtension, SearchOptions } from '@remirror/extension-search';\r\nimport { StrikeExtension } from '@remirror/extension-strike';\r\nimport { TrailingNodeExtension, TrailingNodeOptions } from '@remirror/extension-trailing-node';\r\nimport { UnderlineExtension } from '@remirror/extension-underline';\r\nimport { EmbedOptions, EmbedPreset } from '@remirror/preset-embed';\r\nimport { ListPreset } from '@remirror/preset-list';\r\nimport { TableOptions, TablePreset } from '@remirror/preset-table';\r\nexport interface WysiwygOptions extends BidiOptions, BoldOptions, CodeBlockOptions, DropCursorOptions, HeadingOptions, LinkOptions, SearchOptions, TrailingNodeOptions {\r\n}\r\nexport declare class WysiwygPreset extends Preset<WysiwygOptions> {\r\n    get name(): \"wysiwyg\";\r\n    protected onSetOptions(parameter: OnSetOptionsParameter<WysiwygOptions>): void;\r\n    createExtensions(): (GapCursorExtension | BidiExtension | BoldExtension | CodeBlockExtension | DropCursorExtension | SearchExtension | TrailingNodeExtension | HeadingExtension | EpicModeExtension | HardBreakExtension | ImageExtension | HorizontalRuleExtension | BlockquoteExtension | CodeExtension | StrikeExtension | ItalicExtension | LinkExtension | UnderlineExtension)[];\r\n}\r\n/**\r\n * The parameter for creating a list of presets needed to use the wysiwyg preset\r\n * to the full.\r\n */\r\nexport interface CreateWysiwygPresetListOptions {\r\n    /**\r\n     * The options for the wysiwyg preset.\r\n     */\r\n    wysiwyg?: GetStaticAndDynamic<WysiwygOptions>;\r\n    /**\r\n     * The options for the embed preset.\r\n     */\r\n    embed?: GetStaticAndDynamic<EmbedOptions>;\r\n    /**\r\n     * The options for the table preset.\r\n     */\r\n    table?: GetStaticAndDynamic<TableOptions>;\r\n}\r\n/**\r\n * Create the wysiwyg preset and also apply the other presets as well.\r\n */\r\nexport declare function createWysiwygPresetList(options: CreateWysiwygPresetListOptions): WysiwygPresetCombinedUnion[];\r\nexport declare type WysiwygPresetCombinedUnion = WysiwygPreset | ListPreset | EmbedPreset | TablePreset;\r\n"
    },
    "@remirror/react": {
      "components/index.d.ts": "export * from './providers';\r\n",
      "components/providers.d.ts": "import { CSSProperties, ElementType, ReactElement, ReactNode } from 'react';\r\nimport type { AnyCombinedUnion, MakeOptional } from '@remirror/core';\r\nimport { RemirrorType } from '@remirror/react-utils';\r\nimport type { RemirrorThemeType } from '@remirror/theme';\r\nimport type { BaseProps, CreateReactManagerOptions, GetRootPropsConfig, I18nContextProps } from '../react-types';\r\nexport interface RemirrorProviderProps<Combined extends AnyCombinedUnion> extends MakeOptional<BaseProps<Combined>, 'manager'> {\r\n    /**\r\n     * The `RemirrorProvider` only supports **ONE** child element. You can place\r\n     * the child element in a fragment if needed.\r\n     */\r\n    children: ReactElement;\r\n    /**\r\n     * The presets and extensions that you would like to use to automatically\r\n     * create the manager.\r\n     *\r\n     * These extensions and presets can't be updated and are not dynamic. You\r\n     * should not change they during the component lifecycle as they are created\r\n     * once at the very start and never recreated.\r\n     */\r\n    combined?: Combined[];\r\n    /**\r\n     * The settings to provide to the `RemirrorManager`, `ReactPreset` and\r\n     * `CorePreset`. This is only applied when no `manager` is provided.\r\n     */\r\n    settings?: CreateReactManagerOptions;\r\n    /**\r\n     * Sets the first child element as a the root (where the prosemirror editor\r\n     * instance will be rendered).\r\n     *\r\n     * @remarks\r\n     *\r\n     * **Example with directly nested components**\r\n     *\r\n     * When using a remirror provider calling `getRootProps` is mandatory. By\r\n     * setting `childAsRoot` to an object Remirror will inject these props into\r\n     * the first child element.\r\n     *\r\n     * ```tsx\r\n     * import { RemirrorProvider, useManager } from '@remirror/react';\r\n     *\r\n     * const Editor = () => {\r\n     *   const manager = useManager([...myExtensions]);\r\n     *\r\n     *   return (\r\n     *     <RemirrorProvider childAsRoot={{ refKey: 'ref' }}>\r\n     *       <div />\r\n     *     </RemirrorProvider>,\r\n     *   );\r\n     * };\r\n     * ```\r\n     *\r\n     * If this is set to an empty object then the outer element must be able to\r\n     * receive a default ref prop which will mount the editor to it. If left\r\n     * undefined then the children components are responsible for calling\r\n     * `getRootProps`.\r\n     *\r\n     * @defaultValue undefined\r\n     */\r\n    childAsRoot?: GetRootPropsConfig<string> | boolean;\r\n}\r\n/**\r\n * The RemirrorProvider which injects context into it's child component.\r\n *\r\n * @remarks\r\n * This only supports one child. At the moment if that that child is a built in\r\n * html string element then it is also where the prosemirror editor will be\r\n * injected (root element).\r\n *\r\n * These can either be consumed using React Hooks\r\n * - `useRemirror`\r\n * - `usePositioner`\r\n */\r\nexport declare const RemirrorProvider: {\r\n    <Combined extends import(\"@remirror/core\").CombinedUnion<import(\"@remirror/core\").AnyExtension, import(\"@remirror/core\").AnyPreset>>(props: RemirrorProviderProps<Combined>): JSX.Element;\r\n    $$remirrorType: RemirrorType;\r\n};\r\nexport interface I18nProviderProps extends Partial<I18nContextProps> {\r\n    children: ReactNode;\r\n}\r\n/**\r\n * A provider component for the remirror i18n helper library.\r\n *\r\n * This uses `@lingui/core` in the background. So please star and support the\r\n * project when you have a moment.\r\n */\r\nexport declare const I18nProvider: {\r\n    (props: I18nProviderProps): JSX.Element;\r\n    $$remirrorType: RemirrorType;\r\n};\r\nexport interface ThemeProviderProps {\r\n    /**\r\n     * The theme to customise the look and feel of your remirror editor.\r\n     */\r\n    theme: RemirrorThemeType;\r\n    /**\r\n     * The custom component to use for rendering this editor.\r\n     *\r\n     * @defaultValue 'div'\r\n     */\r\n    as?: ElementType<{\r\n        style?: CSSProperties;\r\n        className?: string;\r\n    }>;\r\n    children: ReactNode;\r\n}\r\n/**\r\n * This the `ThemeProvider`. Wrap your editor with it to customise the theming\r\n * of content within your editor.\r\n *\r\n * Please be aware that this wraps your component in an extra dom layer.\r\n */\r\nexport declare const ThemeProvider: {\r\n    (props: ThemeProviderProps): JSX.Element;\r\n    $$remirrorType: RemirrorType;\r\n};\r\n",
      "components/react-editor.d.ts": "/// <reference types=\"react\" />\r\nimport { AnyCombinedUnion } from '@remirror/core';\r\nimport { RemirrorType } from '@remirror/react-utils';\r\nimport type { BaseProps, RemirrorContextProps } from '../react-types';\r\n/**\r\n * The component responsible for rendering your prosemirror editor to the DOM.\r\n *\r\n * @remarks\r\n *\r\n * This is an internal component and should only be used within the `remirror`\r\n * codebase. The `RemirrorProvider` is the only supported way for consuming the\r\n * application.\r\n *\r\n * @internal\r\n */\r\nexport declare const ReactEditor: {\r\n    <Combined extends import(\"@remirror/core\").CombinedUnion<import(\"@remirror/core\").AnyExtension, import(\"@remirror/core\").AnyPreset>>(props: ReactEditorProps<Combined>): JSX.Element;\r\n    /**\r\n     * Sets a flag to be a static remirror\r\n     */\r\n    remirrorType: RemirrorType;\r\n};\r\n/**\r\n * A function that takes the injected remirror params and returns JSX to render.\r\n *\r\n * @param - injected remirror params\r\n */\r\ndeclare type RenderPropFunction<Combined extends AnyCombinedUnion> = (params: RemirrorContextProps<Combined>) => JSX.Element;\r\nexport interface ReactEditorProps<Combined extends AnyCombinedUnion> extends BaseProps<Combined> {\r\n    /**\r\n     * The render prop that takes the injected remirror params and returns an\r\n     * element to render. The editor view is automatically attached to the DOM.\r\n     */\r\n    children: RenderPropFunction<Combined>;\r\n    /**\r\n     * Set to true to ignore the hydration warning for a mismatch between the\r\n     * rendered server and client content.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is a potential solution for those who require server side rendering.\r\n     *\r\n     * While on the server the prosemirror document is transformed into a react\r\n     * component so that it can be rendered. The moment it enters the DOM\r\n     * environment prosemirror takes over control of the root element. The problem\r\n     * is that this will always see this hydration warning on the client:\r\n     *\r\n     * `Warning: Did not expect server HTML to contain a <div> in <div>.`\r\n     *\r\n     * Setting this to true removes the warning at the cost of a slightly slower\r\n     * start up time. It uses the two pass solution mentioned in the react docs.\r\n     * See {@link https://reactjs.org/docs/react-dom.html#hydrate}.\r\n     *\r\n     * For ease of use this prop copies the name used by react for DOM Elements.\r\n     * See {@link\r\n     * https://reactjs.org/docs/dom-elements.html#suppresshydrationwarning}.\r\n     */\r\n    suppressHydrationWarning?: boolean;\r\n}\r\nexport {};\r\n",
      "hooks/core-hooks.d.ts": "import { useEffect } from 'react';\r\nimport useSetState from 'react-use/lib/useSetState';\r\n/**\r\n * Returning a new object reference guarantees that a before-and-after\r\n * equivalence check will always be false, resulting in a re-render, even when\r\n * multiple calls to forceUpdate are batched.\r\n */\r\nexport declare function useForceUpdate(): () => void;\r\n/**\r\n * Preserves the previous version of a provided value.\r\n *\r\n * ```tsx\r\n * const [isOpen, setOpen] = useState<boolean>(false)\r\n * const previous = usePrevious(isOpen)\r\n *\r\n * return <span onClick={() => setOpen(!isOpen)}>{isOpen && previous === isOpen ? 'Stable' : 'Unstable' }</span>\r\n * ```\r\n */\r\nexport declare function usePrevious<Value>(value: Value): Value;\r\nexport interface DOMRectReadOnlyLike {\r\n    readonly x: number;\r\n    readonly y: number;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly top: number;\r\n    readonly right: number;\r\n    readonly bottom: number;\r\n    readonly left: number;\r\n}\r\n/**\r\n * Provides the measurements for a react element at the point of layout.\r\n *\r\n * @remarks\r\n *\r\n * Taken from https://codesandbox.io/embed/lp80n9z7v9\r\n *\r\n * ```tsx\r\n * const [bindRef, { height }] = useMeasure()\r\n *\r\n * return <div {...bindRef}>Height: {height}</div>\r\n * ```\r\n */\r\nexport declare function useMeasure<Ref extends HTMLElement = any>(): readonly [{\r\n    readonly ref: import(\"react\").MutableRefObject<Ref>;\r\n}, DOMRectReadOnlyLike];\r\n/**\r\n * The `setState` type for the `useSetState` hook.\r\n */\r\nexport declare type PartialDispatch<Type extends object> = (patch: Partial<Type> | ((prevState: Type) => Partial<Type>)) => void;\r\n/**\r\n * A `useEffect` function with a warning the provided dependencies are deeply\r\n * equal.\r\n */\r\ndeclare const useEffectWithWarning: typeof useEffect;\r\nexport { useEffectWithWarning, useSetState };\r\n",
      "hooks/editor-hooks.d.ts": "import { DependencyList, RefCallback } from 'react';\r\nimport { AddHandler, AnyCombinedUnion, AnyExtensionConstructor, AnyPresetConstructor, BuiltinPreset, CustomHandlerMethod, Dispose, DynamicOptionsOfConstructor, OptionsOfConstructor, RemirrorEventListener, RemirrorManager } from '@remirror/core';\r\nimport { Positioner, StringPositioner, VirtualPosition } from '@remirror/extension-positioner';\r\nimport type { CorePreset } from '@remirror/preset-core';\r\nimport type { ReactPreset } from '@remirror/preset-react';\r\nimport type { CreateReactManagerOptions, I18nContextProps, ReactCombinedUnion, RemirrorContextProps } from '../react-types';\r\n/**\r\n * This provides access to the Remirror context using hooks.\r\n *\r\n * The first argument which is optional can also be a change handler which is\r\n * called every time the state updates.\r\n *\r\n * @remarks\r\n *\r\n * The following example applies the root props to the div.\r\n * ```ts\r\n * import { RemirrorProvider, useRemirror } from 'remirror';\r\n *\r\n * const HooksComponent = (props) => {\r\n *   // This pulls the remirror props out from the context.\r\n *   const { getRootProps } = useRemirror();\r\n *\r\n *   return <div {...getRootProps()} />;\r\n * }\r\n *\r\n * class App extends Component {\r\n *   render() {\r\n *     return (\r\n *       <RemirrorProvider>\r\n *         <HooksComponent />\r\n *       </RemirrorProvider>\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * For performance reasons `useRemirror` does not automatically trigger a\r\n * rerender on every editor update. This allows for you use it in component\r\n * which don't need to track the latest editor state, without suffering a\r\n * performance penalty.\r\n *\r\n * However if you do want to track whether a command is enabled at the current\r\n * selection or whether a certain formatting mark (bold) is active at the\r\n * current selection you can pass through an optional parameter.\r\n *\r\n * ```\r\n * const { active, commands } = useRemirror({ autoUpdate: true });\r\n *\r\n * return (\r\n *   <button style={{ fontWeight: active.bold() ? 'bold' : undefined }}>\r\n *     B\r\n *   <button>\r\n * )\r\n * ```\r\n *\r\n * The above example keep track of whether the current selection is bold on\r\n * every update to the editor. Updates can be document changes and selection\r\n * changes.\r\n *\r\n * For more control you can also use a handler function as the first parameter\r\n * to selectively rerender as you see fit.\r\n *\r\n * ```\r\n * const { active, commands } = useRemirror(() => {\r\n *   if (active.bold() === boldActive) {\r\n *     return;\r\n *   }\r\n *\r\n *   setBoldActive(active.bold());\r\n * });\r\n *\r\n * const [boldActive, setBoldActive] = useState(active.bold());\r\n *\r\n * return (\r\n *   <button style={{ fontWeight: boldActive ? 'bold' : undefined }}>\r\n *     B\r\n *   <button>\r\n * )\r\n * ```\r\n *\r\n * In this case the component only re-renders when the bold formatting is no\r\n * longer active.\r\n */\r\nexport declare function useRemirror<Combined extends AnyCombinedUnion>(handler?: RemirrorEventListener<Combined> | {\r\n    autoUpdate: boolean;\r\n}): RemirrorContextProps<Combined>;\r\nexport declare function useI18n(): I18nContextProps;\r\n/**\r\n * This is a type alias for creating your own typed version of the remirror\r\n * method.\r\n *\r\n * ```ts\r\n * import { useRemirror, UseRemirrorType } from 'remirror/react';\r\n * import { SocialPreset } from 'remirror/preset/social'\r\n *\r\n * const useSocialRemirror = useRemirror as UseRemirrorType<SocialPreset>;\r\n *\r\n * // With the remirror provider context.\r\n * const Editor = () => {\r\n *   const { commands } = useSocialRemirror();\r\n *\r\n *   // All available commands are shown with intellisense. Command click to goto the implementation.\r\n *   commands.toggleBold();\r\n * }\r\n * ```\r\n */\r\nexport declare type UseRemirrorType<Combined extends AnyCombinedUnion> = <Type extends AnyCombinedUnion>(handler?: RemirrorEventListener<Combined> | {\r\n    autoUpdate: boolean;\r\n}) => RemirrorContextProps<Combined | Type>;\r\n/**\r\n * Dynamically update the properties of your extension via hooks. Provide the\r\n * Extension constructor and the properties you want to update.\r\n *\r\n * @remarks\r\n *\r\n * Please note that every time the properties change your extension is updated.\r\n * You will want to memoize or prevent needless updates somehow to the\r\n * properties passed in.\r\n *\r\n * This is only available within the context of the `RemirrorProvider` it will\r\n * throw an error otherwise.\r\n *\r\n * ```ts\r\n * import React, { useCallback, useState } from 'react';\r\n * import { useExtension } from 'remirror/react';\r\n * import { MentionExtension } from 'remirror/extension/mention';\r\n *\r\n * const FloatingQueryText = () => {\r\n *   const [query, setQuery] = useState('');\r\n *   const onChange = useCallback(({ query }) => setQuery(query.full), [setQuery]);\r\n *\r\n *   useExtension(MentionExtension, { appendText: 'hello' });\r\n *\r\n *   useExtension()\r\n *\r\n *   return <p>{query}</p>\r\n * }\r\n * ```\r\n *\r\n * The above example would add the `onChange` handler property to the extension.\r\n *\r\n * TODO - What about using this multiple times how could the extension handle\r\n * that?\r\n */\r\nexport declare function useExtension<Type extends AnyExtensionConstructor>(Constructor: Type, options: DynamicOptionsOfConstructor<Type>): void;\r\nexport declare function useExtension<Type extends AnyExtensionConstructor>(Constructor: Type, method: UseExtensionCallback<Type>, dependencies: DependencyList): void;\r\ninterface UseExtensionCallbackParameter<Type extends AnyExtensionConstructor> {\r\n    /**\r\n     * Add a handler to the the extension callback.\r\n     *\r\n     * ```ts\r\n     * addHandler('onChange', () => log('changed'));\r\n     * ```\r\n     */\r\n    addHandler: AddHandler<OptionsOfConstructor<Type>>;\r\n    /**\r\n     * Set the value of a custom option which returns a dispose method. The custom\r\n     * value is handled internally by the extension.\r\n     *\r\n     * ```ts\r\n     * addCustomHandler('keybindings', { Enter: () => false });\r\n     * ```\r\n     */\r\n    addCustomHandler: CustomHandlerMethod<OptionsOfConstructor<Type>>;\r\n    /**\r\n     * An instance of the extension. This can be used for more advanced scenarios.\r\n     */\r\n    extension: InstanceType<Type>;\r\n}\r\nexport declare type UseExtensionCallback<Type extends AnyExtensionConstructor> = (parameter: UseExtensionCallbackParameter<Type>) => Dispose | undefined;\r\n/**\r\n * Update preset properties dynamically while the editor is still running.\r\n */\r\nexport declare function usePreset<Type extends AnyPresetConstructor>(Constructor: Type, options: DynamicOptionsOfConstructor<Type>): void;\r\nexport declare function usePreset<Type extends AnyPresetConstructor>(Constructor: Type, method: UsePresetCallback<Type>, dependencies: DependencyList): void;\r\ninterface UsePresetCallbackParameter<Type extends AnyPresetConstructor> {\r\n    /**\r\n     * Add a handler to the the preset callback.\r\n     *\r\n     * ```ts\r\n     * addHandler('onChange', () => log('changed'));\r\n     * ```\r\n     */\r\n    addHandler: AddHandler<OptionsOfConstructor<Type>>;\r\n    /**\r\n     * Set the value of a custom option which returns a dispose method.\r\n     */\r\n    addCustomHandler: CustomHandlerMethod<OptionsOfConstructor<Type>>;\r\n    /**\r\n     * An instance of the preset. This should only be needed in advanced\r\n     * situations.\r\n     */\r\n    preset: InstanceType<Type>;\r\n}\r\ndeclare type UsePresetCallback<Type extends AnyPresetConstructor> = (parameter: UsePresetCallbackParameter<Type>) => Dispose | undefined;\r\n/**\r\n * A hook for creating the editor manager directly in the react component.\r\n *\r\n * @remarks\r\n *\r\n * The manager is a singleton and doesn't rerender until `manager.destroy()` is\r\n * called. You should call this method in a `useEffect`\r\n *\r\n * This is intentional. However, it's something that can be addressed if it\r\n * causes issues.\r\n *\r\n * ```tsx\r\n * import { useExtension } from '@remirror/react';\r\n * import { PresetCore } from '@remirror/preset-core';\r\n * import { BoldExtension } from '@remirror/extension-bold';\r\n *\r\n * const EditorWrapper = () => {\r\n *   const manager = useManager([new BoldExtension(), new CorePreset()]);\r\n *\r\n *   <RemirrorProvider >\r\n *     <MyEditor />\r\n *   </RemirrorProvider>;\r\n * }\r\n * ```\r\n */\r\nexport declare function useManager<Combined extends AnyCombinedUnion>(combined: Combined[] | (() => Combined[]) | RemirrorManager<ReactCombinedUnion<Combined>>, options?: CreateReactManagerOptions): RemirrorManager<ReactCombinedUnion<Combined>>;\r\nexport declare type BaseReactCombinedUnion = ReactPreset | CorePreset | BuiltinPreset;\r\nexport interface UseMultiPositionerReturn extends VirtualPosition {\r\n    /**\r\n     * This ref must be applied to the component that is being positioned in order\r\n     * to correctly obtain the position data.\r\n     */\r\n    ref: RefCallback<HTMLElement>;\r\n    /**\r\n     * The element that that the ref has found.\r\n     */\r\n    element?: HTMLElement;\r\n    /**\r\n     * A key to uniquely identify this positioner.\r\n     */\r\n    key: string;\r\n}\r\nexport interface UsePositionerReturn extends Partial<UseMultiPositionerReturn> {\r\n    /**\r\n     * When `true`, the position is active and the pop should be displayed.\r\n     */\r\n    active: boolean;\r\n}\r\n/**\r\n * A hook for creating a positioner with the `PositionerExtension`. When an\r\n * active position exists for the provided positioner it will return an object\r\n * with the `ref`, `top`, `left`, `bottom`, `right` properties.\r\n *\r\n * @param isActive - Set this to a boolean to override whether the positioner is\r\n * active. `true` leaves the behaviour unchanged.\r\n *\r\n *\r\n * @remarks\r\n *\r\n * Must apply the ref to the component when called.\r\n *\r\n * ```ts\r\n * import { usePositioner } from 'remirror/react';\r\n *\r\n * const MenuComponent: FC = () => {\r\n *   const positions = usePositioner('bubble');\r\n *\r\n *   return (\r\n *     <div style={{ bottom, left }} ref={ref}>\r\n *       <MenuIcon {...options} />\r\n *     </div>\r\n *   );\r\n * }\r\n *\r\n * const Wrapper = () => (\r\n *   <RemirrorProvider extensions={[]}>\r\n *     <MenuComponent />\r\n *   </RemirrorProvider>\r\n * )\r\n * ```\r\n */\r\nexport declare function usePositioner(positioner: Positioner | StringPositioner, isActive?: boolean): UsePositionerReturn;\r\n/**\r\n * A positioner for your editor. This returns an array of active positions and\r\n * is useful for tracking the positions of multiple items in the editor.\r\n *\r\n * ```ts\r\n * import { Positioner } from 'remirror/extension/positioner\r\n * import { useMultiPositioner } from 'remirror/react';\r\n *\r\n * const positioner = Positioner.create({\r\n *   ...config, // custom config\r\n * })\r\n *\r\n * const MenuComponent: FC = () => {\r\n *   const positions = usePositioner(positioner);\r\n *\r\n *   return (\r\n *     <>\r\n *       {\r\n *         positions.map(({ ref, bottom, left, key }) => (\r\n *           <div style={{ bottom, left }} ref={ref} key={key}>\r\n *             <MenuIcon {...options} />\r\n *           </div>\r\n *         )\r\n *       }\r\n *     </>\r\n *   )\r\n * }\r\n * ```\r\n */\r\nexport declare function useMultiPositioner(positioner: Positioner | StringPositioner): UseMultiPositionerReturn[];\r\nexport {};\r\n",
      "hooks/index.d.ts": "export * from './core-hooks';\r\nexport * from './editor-hooks';\r\n",
      "index.d.ts": "export type { I18nProviderProps, RemirrorProviderProps, ThemeProviderProps } from './components';\r\nexport { I18nProvider, RemirrorProvider, ThemeProvider } from './components';\r\nexport type { BaseReactCombinedUnion, DOMRectReadOnlyLike, PartialDispatch, UseExtensionCallback, UsePositionerReturn, UseMultiPositionerReturn, UseRemirrorType, } from './hooks';\r\nexport { useEffectWithWarning, useExtension, useForceUpdate, useI18n, useManager, useMeasure, useMultiPositioner, usePositioner, usePreset, usePrevious, useRemirror, useSetState, } from './hooks';\r\nexport { createReactManager } from './react-helpers';\r\nexport type { BaseProps, CreateReactManagerOptions, DefaultReactCombined, GetRootPropsConfig, I18nContextProps, ReactCombinedUnion, RefKeyRootProps, RefParameter, RemirrorContextProps, } from './react-types';\r\nexport * from './renderers';\r\n",
      "react-contexts.d.ts": "/// <reference types=\"react\" />\r\nimport type { I18nContextProps, RemirrorContextProps } from './react-types';\r\n/**\r\n * Creates a ReactContext for the Remirror editor\r\n */\r\nexport declare const RemirrorContext: import(\"react\").Context<RemirrorContextProps<any>>;\r\n/**\r\n * Create the context for the i18n framework used within remirror.\r\n */\r\nexport declare const I18nContext: import(\"react\").Context<I18nContextProps>;\r\n",
      "react-helpers.d.ts": "import { AnyCombinedUnion, BuiltinPreset, RemirrorManager } from '@remirror/core';\r\nimport { CorePreset } from '@remirror/preset-core';\r\nimport { ReactPreset } from '@remirror/preset-react';\r\nimport type { CreateReactManagerOptions } from './react-types';\r\n/**\r\n * Create a react manager with all the default react presets and extensions.\r\n */\r\nexport declare function createReactManager<Combined extends AnyCombinedUnion>(combined: Combined[] | (() => Combined[]) | RemirrorManager<Combined | BuiltinPreset | ReactPreset | CorePreset>, options?: CreateReactManagerOptions): RemirrorManager<Combined | BuiltinPreset | ReactPreset | CorePreset>;\r\n",
      "react-types.d.ts": "import type { ReactNode, Ref } from 'react';\r\nimport type { AnyCombinedUnion, AnyExtension, AnyPreset, BuiltinPreset, CombinedUnion, EditorState, EditorWrapperOutput, EditorWrapperProps, GetStaticAndDynamic, RemirrorManager, SchemaFromCombined, Shape } from '@remirror/core';\r\nimport type { PortalContainer } from '@remirror/extension-react-component';\r\nimport type { I18n } from '@remirror/i18n';\r\nimport type { CorePreset, CreateCoreManagerOptions } from '@remirror/preset-core';\r\nimport type { ReactPreset, ReactPresetOptions } from '@remirror/preset-react';\r\nexport declare type DefaultReactCombined = CombinedUnion<AnyExtension, CorePreset | ReactPreset | BuiltinPreset | AnyPreset>;\r\n/**\r\n * Use this to build your own combined union type.\r\n */\r\nexport declare type ReactCombinedUnion<Combined extends AnyCombinedUnion> = CorePreset | ReactPreset | BuiltinPreset | Combined;\r\nexport interface BaseProps<Combined extends AnyCombinedUnion> extends EditorWrapperProps<Combined> {\r\n    /**\r\n     * Pass in the extension manager.\r\n     *\r\n     * The manager is responsible for handling all Prosemirror related\r\n     * functionality.\r\n     *\r\n     * TODO - why does this only work as `any`.\r\n     */\r\n    manager: RemirrorManager<any>;\r\n    /**\r\n     * When onStateChange is defined this prop is used to set the next state value\r\n     * of the remirror editor.\r\n     *\r\n     * @remarks\r\n     *\r\n     * If this exists the editor becomes a controlled component. Nothing will be\r\n     * updated unless you explicitly set the value prop to the updated state.\r\n     *\r\n     * Without a deep understanding of Prosemirror this is not recommended.\r\n     */\r\n    value?: EditorState<SchemaFromCombined<Combined>> | null;\r\n    /**\r\n     * Set to true to ignore the hydration warning for a mismatch between the\r\n     * rendered server and client content.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is a potential solution for those who require server side rendering.\r\n     *\r\n     * While on the server the prosemirror document is transformed into a react\r\n     * component so that it can be rendered. The moment it enters the DOM\r\n     * environment prosemirror takes over control of the root element. The problem\r\n     * is that this will always see this hydration warning on the client:\r\n     *\r\n     * `Warning: Did not expect server HTML to contain a <div> in <div>.`\r\n     *\r\n     * Setting this to true removes the warning at the cost of a slightly slower\r\n     * start up time. It uses the two pass solution mentioned in the react docs.\r\n     * See {@link https://reactjs.org/docs/react-dom.html#hydrate}.\r\n     *\r\n     * For ease of use this prop copies the name used by react for DOM Elements.\r\n     * See {@link\r\n     * https://reactjs.org/docs/dom-elements.html#suppresshydrationwarning.\r\n     */\r\n    suppressHydrationWarning?: boolean;\r\n    /**\r\n     * Determine whether the Prosemirror view is inserted at the `start` or `end`\r\n     * of it's container DOM element.\r\n     *\r\n     * @defaultValue 'end'\r\n     */\r\n    insertPosition?: 'start' | 'end';\r\n    /**\r\n     * The placeholder to set for the editor.\r\n     */\r\n    placeholder?: string;\r\n}\r\n/**\r\n * The config options for the `getRootProps` method.\r\n */\r\nexport interface GetRootPropsConfig<RefKey extends string = 'ref'> extends RefParameter<RefKey>, Shape {\r\n}\r\n/**\r\n * The react ref key props for the `getRootProps` method.\r\n */\r\nexport declare type RefKeyRootProps<RefKey extends string = 'ref'> = {\r\n    [P in Exclude<RefKey, 'key'>]: Ref<any>;\r\n} & {\r\n    key: string;\r\n    children: ReactNode;\r\n} & Shape;\r\nexport interface RefParameter<RefKey = 'ref'> {\r\n    /**\r\n     * A custom ref key which allows a reference to be obtained from non standard\r\n     * components.\r\n     *\r\n     * @defaultValue 'ref'\r\n     */\r\n    refKey?: RefKey;\r\n}\r\nexport interface I18nContextProps {\r\n    /**\r\n     * Provide your own i18n with all the locales you need for your app.\r\n     *\r\n     * ```ts\r\n     * import { i18n } from '@remirror/i18n';\r\n     * import esLocale from '@remirror/i18n/es';\r\n     * import { SocialEditor } from '@remirror/react-social-editor';\r\n     * import { es } from 'make-plural/plurals';\r\n     *\r\n     * i18n.loadLocaleData('es', { plurals: es });\r\n     *\r\n     * i18n.load({\r\n     *   es: esLocale.messages,\r\n     * });\r\n     *\r\n     * const Editor = () => {\r\n     *   <SocialEditor i18n={i18n} />\r\n     * }\r\n     * ```\r\n     */\r\n    i18n: I18n;\r\n    /**\r\n     * The current locale for this context.\r\n     *\r\n     * @defaultValue 'en'\r\n     */\r\n    locale: string;\r\n    /**\r\n     * Supported locales. Defaults to including the locale.\r\n     *\r\n     * @defaultValue `[locale]`\r\n     */\r\n    supportedLocales?: string[];\r\n}\r\n/**\r\n * These are the props passed to the render function provided when setting up\r\n * your editor.\r\n */\r\nexport interface RemirrorContextProps<Combined extends AnyCombinedUnion> extends EditorWrapperOutput<Combined> {\r\n    /**\r\n     * A function that returns props which should be spread on a react element and\r\n     * declare it as the editor root (where the editor is injected in the DOM).\r\n     *\r\n     * @remarks\r\n     *\r\n     * By default remirror will add the prosemirror editor instance directly into\r\n     * the first child element it receives. Using this method gives you full\r\n     * control over where the editor should be injected.\r\n     *\r\n     * **IMPORTANT** In order to support SSR pre-rendering this should only be\r\n     * spread on a component with NO children.\r\n     *\r\n     * **Example with indirectly nested components**\r\n     *\r\n     * ```tsx\r\n     * import { RemirrorProvider } from '@remirror/react';\r\n     * import { PresetCore } from '@remirror/preset-core';\r\n     * import { BoldExtension } from '@remirror/extension-bold';\r\n     *\r\n     * const Editor = () => {\r\n     *   const { getRootProps } = useRemirror();\r\n     *   return <div {...getRootProps()} />;\r\n     * }\r\n     *\r\n     * const EditorWrapper = () => {\r\n     *   const corePreset = usePreset(CorePreset);\r\n     *   const boldExtension = useExtension(BoldExtension);\r\n     *   const manager = useManager([corePreset, boldExtension]);\r\n     *\r\n     *   return (\r\n     *     <RemirrorProvider manager={manager}>\r\n     *       <InnerEditor />\r\n     *     </RemirrorProvider>\r\n     *   );\r\n     * }\r\n     * ```\r\n     */\r\n    getRootProps: <RefKey extends string = 'ref'>(options?: GetRootPropsConfig<RefKey>) => RefKeyRootProps<RefKey>;\r\n    /**\r\n     * The portal container.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is the container used to keep track of all the react portals which are\r\n     * being rendered into the prosemirror dom.\r\n     *\r\n     * @internal\r\n     */\r\n    portalContainer: PortalContainer;\r\n}\r\n/**\r\n * The options for the exported `createReactManager` method.\r\n */\r\nexport interface CreateReactManagerOptions extends CreateCoreManagerOptions {\r\n    /**\r\n     * Options for the react preset.\r\n     */\r\n    react?: GetStaticAndDynamic<ReactPresetOptions>;\r\n}\r\n",
      "renderers/index.d.ts": "export { ReactSerializer } from './react-serializer';\r\nexport type { BaseRenderTreeProps, RenderTreeProps, SubRenderTreeProps } from './renderer';\r\nexport { RenderTree } from './renderer';\r\nexport { gatherDomMethods, mapProps } from './renderer-utils';\r\n",
      "renderers/react-serializer.d.ts": "import { ReactNode } from 'react';\r\nimport { AnyCombinedUnion, DOMOutputSpec, Fragment as ProsemirrorFragment, Mark, MarkExtensionSpec, NodeExtensionSpec, ProsemirrorNode, RemirrorManager } from '@remirror/core';\r\ndeclare type NodeToDOM = NodeExtensionSpec['toDOM'];\r\ndeclare type MarkToDOM = MarkExtensionSpec['toDOM'];\r\n/**\r\n * Serialize the extension provided schema into a JSX element that can be displayed node and non-dom environments.\r\n */\r\nexport declare class ReactSerializer<Combined extends AnyCombinedUnion> {\r\n    #private;\r\n    /**\r\n     * Receives the return value from toDOM defined in the node schema and transforms it\r\n     * into JSX\r\n     *\r\n     * @param structure - The DOMOutput spec for the current node\r\n     * @param wraps - passed through any elements that this component should be parent of\r\n     */\r\n    static renderSpec(structure: DOMOutputSpec, wraps?: ReactNode): ReactNode;\r\n    /**\r\n     * Create a serializer from the extension manager\r\n     *\r\n     * @param manager\r\n     */\r\n    static fromManager<Combined extends AnyCombinedUnion>(manager: RemirrorManager<Combined>): ReactSerializer<Combined>;\r\n    /**\r\n     * Pluck nodes from the extension manager\r\n     *\r\n     * @param manager\r\n     */\r\n    private static nodesFromManager;\r\n    /**\r\n     * Pluck marks from the extension manager\r\n     *\r\n     * @param manager\r\n     */\r\n    private static marksFromManager;\r\n    nodes: Record<string, NodeToDOM>;\r\n    marks: Record<string, MarkToDOM>;\r\n    constructor(nodes: Record<string, NodeToDOM>, marks: Record<string, MarkToDOM>, manager: RemirrorManager<Combined>);\r\n    /**\r\n     * The main entry method on this class for traversing through a schema tree and creating JSx.\r\n     *\r\n     * ```ts\r\n     * reactSerializer.serializeFragment(fragment)\r\n     * ```\r\n     *\r\n     * @param fragment\r\n     */\r\n    serializeFragment(fragment: ProsemirrorFragment): JSX.Element;\r\n    /**\r\n     * Transform the passed in node into a JSX Element\r\n     *\r\n     * @param node\r\n     */\r\n    serializeNode(node: ProsemirrorNode): ReactNode;\r\n    /**\r\n     * Transform the provided mark into a JSX Element that wraps the current node\r\n     *\r\n     * @param mark\r\n     * @param inline\r\n     * @param wrappedElement\r\n     */\r\n    serializeMark(mark: Mark, inline: boolean, wrappedElement: ReactNode): ReactNode;\r\n}\r\nexport {};\r\n",
      "renderers/renderer-constants.d.ts": "/**\r\n * Used to map html attributes to their supported react names\r\n * Taken from https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/possibleStandardNames.js#L42\r\n */\r\nexport declare const possibleStandardNames: Record<string, string>;\r\n",
      "renderers/renderer-utils.d.ts": "import { MarkExtensionSpec, NodeExtensionSpec, Shape } from '@remirror/core';\r\n/**\r\n * Map standard html attribute names to their react equivalents.\r\n */\r\nexport declare function mapProps(props: Shape): Shape;\r\n/**\r\n * Gather up all the toDOM methods from the provided spec object\r\n *\r\n * @param specs - the prosemirror schema specs for each node / mark\r\n */\r\nexport declare function gatherDomMethods<Spec extends MarkExtensionSpec | NodeExtensionSpec>(specs: Record<string, Spec>): Record<string, Spec[\"toDOM\"]>;\r\n",
      "renderers/renderer.d.ts": "import { ComponentType, FC } from 'react';\r\nimport { RemirrorJSON } from '@remirror/core';\r\ndeclare type MarkMap = Partial<Record<string, string | ComponentType<any>>>;\r\nexport interface BaseRenderTreeProps {\r\n    skipUnknownTypes: boolean;\r\n    skipUnknownMarks: boolean;\r\n    markMap: MarkMap;\r\n    typeMap: MarkMap;\r\n    children?: never;\r\n}\r\nexport interface SubRenderTreeProps extends BaseRenderTreeProps {\r\n    node: RemirrorJSON;\r\n}\r\nexport interface RenderTreeProps extends Partial<BaseRenderTreeProps> {\r\n    json: RemirrorJSON;\r\n}\r\n/**\r\n * A recursively rendered tree.\r\n */\r\nexport declare const RenderTree: FC<RenderTreeProps>;\r\nexport {};\r\n",
      "ssr/index.d.ts": "export * from './ssr-prosemirror-view';\r\nexport * from './ssr-component';\r\n",
      "ssr/ssr-component.d.ts": "/// <reference types=\"react\" />\r\nimport type { AnyCombinedUnion, EditorStateParameter, RemirrorManager, SchemaFromCombined, Shape } from '@remirror/core';\r\nexport interface RemirrorSSRProps<Combined extends AnyCombinedUnion> extends EditorStateParameter<SchemaFromCombined<Combined>> {\r\n    /**\r\n     * The attributes to pass into the root div element.\r\n     */\r\n    attributes: Shape;\r\n    /**\r\n     * Whether or not the editor is in an editable state\r\n     */\r\n    editable: boolean;\r\n    /**\r\n     * The manager.\r\n     */\r\n    manager: RemirrorManager<Combined>;\r\n}\r\n/**\r\n * Remirror SSR component used for rendering in non dom environments.\r\n */\r\nexport declare const RemirrorSSR: <Combined extends import(\"@remirror/core\").CombinedUnion<import(\"@remirror/core\").AnyExtension, import(\"@remirror/core\").AnyPreset>>({ attributes, manager, state, editable, }: RemirrorSSRProps<Combined>) => JSX.Element;\r\n",
      "ssr/ssr-prosemirror-view.d.ts": "import { EditorSchema, EditorState, RenderEnvironment, Transaction } from '@remirror/core';\r\nimport { DirectEditorProps, EditorView } from '@remirror/pm/view';\r\n/**\r\n * A mock editor view used only when prosemirror is running on the server\r\n */\r\nexport declare class EditorViewSSR<Schema extends EditorSchema = any> {\r\n    state: EditorState;\r\n    dom: Element;\r\n    dragging: any;\r\n    root: Document | DocumentFragment;\r\n    constructor(place: Node | ((p: Node) => void) | {\r\n        mount: Node;\r\n    } | undefined, props: DirectEditorProps<Schema>);\r\n    update(_props: DirectEditorProps<Schema>): void;\r\n    setProps(_props: DirectEditorProps<Schema>): void;\r\n    updateState(_state: EditorState): void;\r\n    someProp(_propName: string, f?: (prop: any) => any): any;\r\n    hasFocus(): boolean;\r\n    focus(): void;\r\n    posAtCoords(_coords: {\r\n        left: number;\r\n        top: number;\r\n    }): {\r\n        pos: number;\r\n        inside: number;\r\n    } | null | undefined;\r\n    coordsAtPos(_pos: number): {\r\n        left: number;\r\n        right: number;\r\n        top: number;\r\n        bottom: number;\r\n    };\r\n    domAtPos(_pos: number): {\r\n        node: Node;\r\n        offset: number;\r\n    };\r\n    nodeDOM(_pos: number): Node | null | undefined;\r\n    posAtDOM(_node: Node, _offset: number, _bias?: number | null): number;\r\n    endOfTextblock(_dir: 'up' | 'down' | 'left' | 'right' | 'forward' | 'backward', _state?: EditorState): boolean;\r\n    /**\r\n     * Removes the editor from the DOM and destroys all [node\r\n     * views](#view.NodeView).\r\n     */\r\n    destroy(): void;\r\n    dispatch(_tr: Transaction): void;\r\n}\r\n/**\r\n * Creates a new editor view\r\n *\r\n * @param place\r\n * @param props\r\n * @param forceEnvironment\r\n */\r\nexport declare const createEditorView: <Schema extends EditorSchema<string, string> = any>(place: Node | {\r\n    mount: Node;\r\n} | ((p: Node) => void), props: DirectEditorProps<Schema>, forceEnvironment?: RenderEnvironment) => EditorView<Schema>;\r\n"
    },
    "@remirror/react-utils": {
      "index.d.ts": "export type { RemirrorComponentStaticProperties, RemirrorComponentType, RemirrorElement, } from './react-utils';\r\nexport { RemirrorType, addKeyToElement, asDefaultProps, getElementProps, isReactDOMElement, isReactFragment, isRemirrorContextProvider, isRemirrorElement, isRemirrorProvider, isValidElement, oneChildOnly, propIsFunction, } from './react-utils';\r\n",
      "react-utils.d.ts": "import { ComponentType, Fragment, ReactElement, ReactNode } from 'react';\r\nimport type { AnyFunction, UnknownShape } from '@remirror/core-types';\r\nexport interface RemirrorComponentStaticProperties {\r\n    /**\r\n     * Identifies this as a remirror specific component\r\n     */\r\n    $$remirrorType: RemirrorType;\r\n}\r\nexport declare type RemirrorComponentType<Props extends object = object> = ComponentType<Props> & RemirrorComponentStaticProperties;\r\nexport declare type RemirrorElement<Options extends object = any> = ReactElement & {\r\n    type: RemirrorComponentType<Options>;\r\n};\r\n/**\r\n * These are the constants used to determine whether an element is a remirror constant.\r\n */\r\nexport declare enum RemirrorType {\r\n    SSR = \"ssr\",\r\n    Editor = \"editor\",\r\n    /**\r\n     * The `RemirrorProvider` component.\r\n     */\r\n    Provider = \"provider\",\r\n    /**\r\n     * Used to identify the ContextProviderWrapper\r\n     */\r\n    ContextProvider = \"context-provider\",\r\n    /**\r\n     * Marks the provider for i18n.\r\n     */\r\n    I18nProvider = \"i18n-provider\",\r\n    /**\r\n     * Marks this as a provider for the remirror theme.\r\n     */\r\n    ThemeProvider = \"theme-provider\"\r\n}\r\n/**\r\n * A drop in replacement for built in React.isValidElement which accepts a test value of any type\r\n *\r\n * @param value - the value to check\r\n */\r\nexport declare function isValidElement<Props extends object = any>(value: unknown): value is ReactElement<Props>;\r\n/**\r\n * Check whether a react node is a built in dom element (i.e. `div`, `span`)\r\n *\r\n * @param value - the value to check\r\n */\r\nexport declare function isReactDOMElement<Props extends object = any>(value: unknown): value is ReactElement<Props> & {\r\n    type: string;\r\n};\r\n/**\r\n * Checks whether the element is a react fragment\r\n *\r\n * @param value - the value to check\r\n */\r\nexport declare function isReactFragment<Props extends object = any>(value: unknown): value is ReactElement<Props> & {\r\n    type: typeof Fragment;\r\n};\r\n/**\r\n * Retrieve the element props for JSX Element\r\n *\r\n * @param element\r\n */\r\nexport declare function getElementProps<Type = UnknownShape>(element: JSX.Element): UnknownShape & Type & {\r\n    children: JSX.Element;\r\n};\r\n/**\r\n * Utility for properly typechecking static defaultProps for a class component in react.\r\n *\r\n * ```ts\r\n * static defaultProps = asDefaultProps<RemirrorProps>()({\r\n *   initialContent: EMPTY_PARAGRAPH_NODE,\r\n * });\r\n * ```\r\n */\r\nexport declare const asDefaultProps: <Props extends object>() => <DefaultProps extends Partial<Props>>(props: DefaultProps) => DefaultProps;\r\n/**\r\n * Checks if this element has a type of any RemirrorComponent\r\n *\r\n * @param value - the value to check\r\n */\r\nexport declare const isRemirrorElement: <Options extends object = any>(value: unknown) => value is RemirrorElement<Options>;\r\n/**\r\n * Checks to see if this is the wrapper we've created around the RemirrorContent.Provider component.\r\n *\r\n * This is used to help determine how the Remirror component will be rendered. `getRootProps` is the main reason\r\n * for this, and I'm not even sure the effort is worth it.\r\n *\r\n * @param value - the value to check\r\n */\r\nexport declare const isRemirrorContextProvider: <Options extends object = any>(value: unknown) => value is RemirrorElement<Options>;\r\n/**\r\n * Finds if this is a RemirrorProvider (which provides the RemirrorInjectedProps into the context);\r\n *\r\n * @param value - the value to check\r\n */\r\nexport declare const isRemirrorProvider: <Options extends object = any>(value: unknown) => value is RemirrorElement<Options>;\r\n/**\r\n * Will throw an error if the child provided is not a function.\r\n *\r\n * @remarks\r\n * This is currently used in the remirror component to throw an error when the element children\r\n * are not a render prop. It should be called outside of render for class Components.\r\n *\r\n * @param prop - the prop to test\r\n */\r\nexport declare const propIsFunction: (value: unknown) => value is AnyFunction<any>;\r\n/**\r\n * A drop in replacement for React.Children.only which provides more readable errors\r\n * when the child is not a react element or undefined.\r\n */\r\nexport declare const oneChildOnly: <Props extends object = any>(value: unknown) => ReactElement<Props, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => import(\"react\").Component<any, any, any>)>) | (new (props: any) => import(\"react\").Component<any, any, any>)>;\r\n/**\r\n * Add the specified key to an element when it is a valid react element.\r\n *\r\n * This is useful when returning an array of components because a fragment isn't sufficient.\r\n */\r\nexport declare const addKeyToElement: (element: ReactNode, key: string | number) => any;\r\n"
    },
    "@remirror/react-social": {
      "components/index.d.ts": "export * from './social-provider';\r\nexport * from './social-editor-emoji';\r\nexport * from './social-editor-mentions';\r\nexport * from './social-character-count';\r\nexport * from './social-editor';\r\n",
      "components/social-character-count.d.ts": "import { FC } from 'react';\r\nexport interface SocialCharacterCountProps {\r\n    /**\r\n     * An object describing the total characters and characters remaining\r\n     */\r\n    characters?: {\r\n        maximum: number;\r\n        used: number;\r\n    };\r\n    size?: number;\r\n    strokeWidth?: number;\r\n    /** The number of characters remaining at which to display a warning */\r\n    warningThreshold?: number;\r\n}\r\nexport declare const SocialCharacterCount: FC<SocialCharacterCountProps>;\r\n/**\r\n * This component is used to wrap the social character count component and\r\n * positions it absolutely relative to the first parent with a `position:\r\n * relative`.\r\n */\r\nexport declare const SocialCharacterCountWrapper: import(\"linaria/lib/StyledMeta\").StyledMeta & import(\"react\").FunctionComponent<import(\"react\").ClassAttributes<HTMLDivElement> & import(\"react\").HTMLAttributes<HTMLDivElement> & {\r\n    as?: import(\"react\").ElementType<any>;\r\n}>;\r\n",
      "components/social-editor-emoji.d.ts": "/// <reference types=\"react\" />\r\n/**\r\n * This component renders the emoji suggestion dropdown for the user.\r\n */\r\nexport declare const SocialEmojiComponent: () => JSX.Element;\r\n",
      "components/social-editor-mentions.d.ts": "/// <reference types=\"react\" />\r\nimport { SocialMentionProps } from '../hooks/use-social-mention';\r\n/**\r\n * The social mention component.\r\n *\r\n * It is responsible to displaying the drop down list of options when you want\r\n * to tag or add a user mention.\r\n */\r\nexport declare const SocialMentionComponent: (props: SocialMentionProps) => JSX.Element;\r\n",
      "components/social-editor.d.ts": "import { FC } from 'react';\r\nimport type { SocialMentionProps } from '../hooks';\r\nimport type { SocialProviderProps } from '../social-types';\r\nexport interface SocialEditorProps extends Partial<SocialProviderProps>, SocialMentionProps {\r\n}\r\n/**\r\n * A prebuilt `SocialEditor` which combines the building blocks for you to\r\n * create an editor with minimal lines of code.\r\n */\r\nexport declare const SocialEditor: FC<SocialEditorProps>;\r\n/**\r\n * The component into which the prosemirror editor will be injected into.\r\n */\r\nexport declare const SocialEditorComponent: import(\"linaria/lib/StyledMeta\").StyledMeta & import(\"react\").FunctionComponent<import(\"react\").ClassAttributes<HTMLDivElement> & import(\"react\").HTMLAttributes<HTMLDivElement> & {\r\n    as?: import(\"react\").ElementType<any>;\r\n}>;\r\nexport declare const SocialEditorWrapperComponent: import(\"linaria/lib/StyledMeta\").StyledMeta & import(\"react\").FunctionComponent<import(\"react\").ClassAttributes<HTMLDivElement> & import(\"react\").HTMLAttributes<HTMLDivElement> & {\r\n    as?: import(\"react\").ElementType<any>;\r\n}>;\r\n",
      "components/social-provider.d.ts": "import { FC } from 'react';\r\nimport type { SocialProviderProps } from '../social-types';\r\n/**\r\n * A social editor provider with provides the required context to get started\r\n * creating your next editor.\r\n */\r\nexport declare const SocialProvider: FC<SocialProviderProps>;\r\n",
      "hooks/index.d.ts": "export { useSocialManager, useSocialRemirror } from './use-social';\r\nexport type { SocialEmojiState } from './use-social-emoji';\r\nexport { useSocialEmoji } from './use-social-emoji';\r\nexport type { SocialMentionProps, SocialMentionState } from './use-social-mention';\r\nexport { useSocialMention } from './use-social-mention';\r\n",
      "hooks/use-editor-events.d.ts": "import type { GetHandler, StringKey } from '@remirror/core';\r\nimport { EventsOptions } from '@remirror/extension-events';\r\n/**\r\n * Add editor specific events.\r\n */\r\nexport declare function useEditorEvents<Key extends StringKey<GetHandler<EventsOptions>>>(event: Key, handler: GetHandler<EventsOptions>[Key]): void;\r\n",
      "hooks/use-social-emoji.d.ts": "import { EmojiObject, EmojiSuggestCommand } from '@remirror/extension-emoji';\r\nexport interface SocialEmojiState {\r\n    /**\r\n     * The list of emoji generated by the query.\r\n     *\r\n     * @default []\r\n     */\r\n    list: EmojiObject[];\r\n    /**\r\n     * The index of the currently matched emoji.\r\n     *\r\n     * @default 0\r\n     */\r\n    index: number;\r\n    /**\r\n     * The command to run to replace the query with the request emoji.\r\n     *\r\n     * @default undefined\r\n     */\r\n    command?: EmojiSuggestCommand;\r\n    /**\r\n     * Whether the mention popup should show if available. This can be used to\r\n     * hide the pop when the editor loses focus.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    show: boolean;\r\n}\r\n/**\r\n * This hook provides the state for setting up an emoji state change handler. It\r\n * applies the keybindings and the required change handlers.\r\n */\r\nexport declare function useSocialEmoji(): SocialEmojiState;\r\n",
      "hooks/use-social-mention.d.ts": "import type { MentionExtensionSuggestCommand } from '@remirror/extension-mention';\r\nimport type { MentionChangeParameter, TagData, UserData } from '../social-types';\r\nexport interface SocialMentionProps {\r\n    /**\r\n     * A list of users.\r\n     */\r\n    users: UserData[];\r\n    /**\r\n     * List of tags\r\n     */\r\n    tags: TagData[];\r\n    /**\r\n     * Called any time there is a change in the mention\r\n     */\r\n    onMentionChange: (params?: MentionChangeParameter) => void;\r\n}\r\nexport interface SocialMentionState {\r\n    /**\r\n     * The name of the current matcher.\r\n     *\r\n     * @default undefined\r\n     */\r\n    matcher: 'at' | 'tag' | undefined;\r\n    /**\r\n     * The index that is matched.\r\n     *\r\n     * @default 0\r\n     */\r\n    index: number;\r\n    /**\r\n     * The command to run to create, update or remove the mention.\r\n     *\r\n     * @default undefined\r\n     */\r\n    command?: MentionExtensionSuggestCommand;\r\n    /**\r\n     * Whether the mention popup should show if available. This can be used to\r\n     * hide the pop when the editor loses focus.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    show: boolean;\r\n}\r\n/**\r\n * A hook that provides the state for social mentions that responds to\r\n * keybindings and key-presses from the user. This is used by the\r\n * `SocialMentionDropdown` component and can be used by you for a customised\r\n * component.\r\n */\r\nexport declare function useSocialMention(props: SocialMentionProps): SocialMentionState;\r\n",
      "hooks/use-social.d.ts": "import type { AnyCombinedUnion, RemirrorManager } from '@remirror/core';\r\nimport { UseRemirrorType } from '@remirror/react';\r\nimport type { CreateSocialManagerOptions, SocialCombinedUnion } from '../social-types';\r\n/**\r\n * A wrapper around the `createSocialManager` function for creating a manager\r\n * within a react context.\r\n *\r\n * @remarks\r\n *\r\n * This can be useful if you want the manager to respond to take in\r\n * configuration from props.\r\n *\r\n * Please note that at the moment the manager returned is a ref. This means that\r\n * it won't be updated for the lifetime of the component. It takes an initial\r\n * configuration and then ignores everything else.\r\n */\r\nexport declare function useSocialManager<Combined extends AnyCombinedUnion>(combined: Combined[] | (() => Combined[]) | RemirrorManager<Combined | SocialCombinedUnion>, options?: CreateSocialManagerOptions): RemirrorManager<SocialCombinedUnion | Combined>;\r\n/**\r\n * A properly typed alternative `useRemirror` hook for the social editor.\r\n */\r\nexport declare const useSocialRemirror: UseRemirrorType<SocialCombinedUnion>;\r\n",
      "index.d.ts": "export type { SocialCharacterCountProps, SocialEditorProps } from './components';\r\nexport { SocialCharacterCount, SocialCharacterCountWrapper, SocialEditor, SocialEditorComponent, SocialEditorWrapperComponent, SocialEmojiComponent, SocialMentionComponent, SocialProvider, } from './components';\r\nexport type { SocialEmojiState, SocialMentionProps, SocialMentionState } from './hooks';\r\nexport { useSocialEmoji, useSocialManager, useSocialMention, useSocialRemirror } from './hooks';\r\nexport { messages } from './social-messages';\r\nexport type { CreateSocialManagerOptions, MatchName, MentionChangeParameter, SocialCombinedUnion, SocialProviderProps, TagData, UserData, } from './social-types';\r\nexport { getMentionLabel, indexFromArrowPress, mapToActiveIndex, socialManagerArgs, } from './social-utils';\r\n",
      "social-messages.d.ts": "/**\r\n * The messages used within the component. They aren't currently being used.\r\n */\r\nexport declare const messages: {\r\n    userMentionAvatarAlt: import(\"@lingui/core\").MessageDescriptor;\r\n};\r\n",
      "social-styles.d.ts": "export declare const emojiSuggestionsItemStyles: string;\r\nexport declare const emojiSuggestionsDropdownWrapperStyles: string;\r\nexport declare const mentionSuggestionsDropdownWrapperStyles: string;\r\nexport declare const mentionSuggestionsItemStyles: string;\r\nexport declare const mentionSuggestionsUserItemImageStyles: string;\r\nexport declare const mentionSuggestionsUserItemDisplayNameStyles: string;\r\nexport declare const mentionSuggestionsUserItemUsernameStyles: string;\r\nexport declare const mentionSuggestionsTagItemTagStyles: string;\r\n",
      "social-types.d.ts": "import type { ElementType, ReactElement } from 'react';\r\nimport type { Except } from 'type-fest';\r\nimport type { AnyCombinedUnion, GetStaticAndDynamic } from '@remirror/core';\r\nimport type { SocialOptions, SocialPreset } from '@remirror/preset-social';\r\nimport type { BaseReactCombinedUnion, CreateReactManagerOptions, I18nContextProps, RemirrorProviderProps } from '@remirror/react';\r\nimport type { RemirrorThemeType } from '@remirror/theme';\r\nexport interface MentionChangeParameter extends BaseMentionState {\r\n    name: MatchName;\r\n    /**\r\n     * The currently active matching index\r\n     */\r\n    index: number;\r\n}\r\nexport interface CreateSocialManagerOptions extends CreateReactManagerOptions {\r\n    /**\r\n     * The social preset options.\r\n     */\r\n    social?: GetStaticAndDynamic<SocialOptions>;\r\n}\r\nexport interface SocialProviderProps<Combined extends AnyCombinedUnion = SocialCombinedUnion> extends Except<Partial<RemirrorProviderProps<Combined>>, 'settings' | 'children'>, Partial<I18nContextProps> {\r\n    /**\r\n     * Unlike the remirror provider you can provide any number of children to this component.\r\n     */\r\n    children: ReactElement | ReactElement[];\r\n    /**\r\n     * Provide a theme to use for the editor. When this is provided your\r\n     * editor will be wrapped in an extra wrapper component depending on the\r\n     * value of the `ThemeComponent`.\r\n     */\r\n    theme?: RemirrorThemeType;\r\n    /**\r\n     * The theme component used to render the `theme`.\r\n     *\r\n     * @defaultValue 'div'\r\n     */\r\n    ThemeComponent?: ElementType;\r\n    /**\r\n     * The social options used to create the initial manager when a manager is not\r\n     * provided.\r\n     */\r\n    settings?: CreateSocialManagerOptions;\r\n    /**\r\n     * Display a typing hint that limits the number of characters to this number.\r\n     * Defaults to 140, set to `null` to disable.\r\n     */\r\n    characterLimit?: number | null;\r\n}\r\ninterface BaseMentionState {\r\n    /**\r\n     * The currently matched query which can be used to search and populate data.\r\n     */\r\n    query: string;\r\n}\r\n/**\r\n * The possible active suggestion names.\r\n */\r\nexport declare type MatchName = 'at' | 'tag';\r\nexport interface UserData {\r\n    id?: string;\r\n    href?: string;\r\n    username: string;\r\n    displayName: string;\r\n    avatarUrl: string;\r\n}\r\nexport interface TagData {\r\n    id?: string;\r\n    href?: string;\r\n    tag: string;\r\n}\r\n/**\r\n * The extensions used by the social editor.\r\n *\r\n * Using this as a generic value allows for better type inference in the editor.\r\n */\r\nexport declare type SocialCombinedUnion = BaseReactCombinedUnion | SocialPreset;\r\nexport {};\r\n",
      "social-utils.d.ts": "import { AnyCombinedUnion, RemirrorManager } from '@remirror/core';\r\nimport { SocialPreset } from '@remirror/preset-social';\r\nimport type { CreateReactManagerOptions } from '@remirror/react';\r\nimport type { CreateSocialManagerOptions, SocialCombinedUnion, TagData, UserData } from './social-types';\r\nexport declare function mapToActiveIndex<Item extends object>(items: Item[], activeIndex: number): Array<Item & {\r\n    active: boolean;\r\n}>;\r\ninterface IndexFromArrowPressParameter {\r\n    /**\r\n     * Whether the arrow key was the up key or the down key\r\n     */\r\n    direction: 'up' | 'down';\r\n    /**\r\n     * The total number of matches\r\n     */\r\n    matchLength: number;\r\n    /**\r\n     * The previously matched index\r\n     */\r\n    previousIndex: number;\r\n}\r\nexport declare const indexFromArrowPress: (parameter: IndexFromArrowPressParameter) => number;\r\n/**\r\n * Create the args which should be passed to the `useManager` hook or the\r\n * `createReactManager` function.\r\n */\r\nexport declare function socialManagerArgs<Combined extends AnyCombinedUnion>(combined: Combined[] | (() => Combined[]) | RemirrorManager<Combined | SocialCombinedUnion>, options?: CreateSocialManagerOptions): [RemirrorManager<Combined | SocialCombinedUnion> | (() => Array<SocialPreset | Combined>), CreateReactManagerOptions?];\r\ninterface GetMentionLabelParameter {\r\n    /**\r\n     * The name of the mention.\r\n     */\r\n    name: string;\r\n    /**\r\n     * The users.\r\n     */\r\n    users: UserData[];\r\n    /**\r\n     * The index for the mention.\r\n     */\r\n    index: number;\r\n    /**\r\n     * The tags in the mention.\r\n     */\r\n    tags: TagData[];\r\n}\r\nexport declare function getMentionLabel(parameter: GetMentionLabelParameter): {\r\n    label: string;\r\n    id: string;\r\n    href: string;\r\n};\r\nexport {};\r\n"
    },
    "@remirror/react-wysiwyg": {
      "components/index.d.ts": "export * from './wysiwyg-editor';\r\nexport * from './wysiwyg-provider';\r\n",
      "components/wysiwyg-editor.d.ts": "import { FC } from 'react';\r\nimport type { WysiwygProviderProps } from '../wysiwyg-types';\r\nexport interface WysiwygEditorProps extends Partial<WysiwygProviderProps> {\r\n}\r\n/**\r\n * A prebuilt `WysiwygEditor` which combines the building blocks for you to\r\n * create an editor with minimal lines of code.\r\n */\r\nexport declare const WysiwygEditor: FC<WysiwygEditorProps>;\r\n/**\r\n * The component into which the prosemirror editor will be injected into.\r\n */\r\nexport declare const WysiwygEditorComponent: any;\r\nexport declare const WysiwygEditorWrapperComponent: any;\r\n",
      "components/wysiwyg-provider.d.ts": "import { FC } from 'react';\r\nimport type { WysiwygProviderProps } from '../wysiwyg-types';\r\n/**\r\n * A wysiwyg editor provider with provides the required context to get started\r\n * creating your next editor.\r\n */\r\nexport declare const WysiwygProvider: FC<WysiwygProviderProps>;\r\n",
      "hooks.d.ts": "import { AnyCombinedUnion, RemirrorManager } from '@remirror/core';\r\nimport { UseRemirrorType } from '@remirror/react';\r\nimport type { CreateWysiwygManagerOptions, WysiwygCombinedUnion } from './wysiwyg-types';\r\n/**\r\n * A wrapper around the `createWysiwygManager` function for creating a manager\r\n * within a react context.\r\n *\r\n * @remarks\r\n *\r\n * This can be useful if you want the manager to respond to take in\r\n * configuration from props.\r\n *\r\n * Please note that at the moment the manager returned is a ref. This means that\r\n * it won't be updated for the lifetime of the component. It takes an initial\r\n * configuration and then ignores everything else.\r\n */\r\nexport declare function useWysiwygManager<Combined extends AnyCombinedUnion>(managerOrCombined: readonly Combined[] | RemirrorManager<Combined | WysiwygCombinedUnion>, options?: CreateWysiwygManagerOptions): RemirrorManager<WysiwygCombinedUnion | Combined>;\r\n/**\r\n * A properly typed alternative `useRemirror` hook for the wysiwyg editor.\r\n */\r\nexport declare const useWysiwygRemirror: UseRemirrorType<WysiwygCombinedUnion>;\r\n",
      "index.d.ts": "export * from './components';\r\nexport * from './wysiwyg-types';\r\n",
      "wysiwyg-types.d.ts": "import type { ElementType, ReactElement } from 'react';\r\nimport type { Except } from 'type-fest';\r\nimport type { AnyCombinedUnion } from '@remirror/core';\r\nimport type { CreateWysiwygPresetListOptions, WysiwygPresetCombinedUnion } from '@remirror/preset-wysiwyg';\r\nimport type { BaseReactCombinedUnion, CreateReactManagerOptions, I18nContextProps, RemirrorProviderProps } from '@remirror/react';\r\nimport type { RemirrorThemeType } from '@remirror/theme';\r\nexport declare type WysiwygCombinedUnion = BaseReactCombinedUnion | WysiwygPresetCombinedUnion;\r\nexport interface CreateWysiwygManagerOptions extends CreateReactManagerOptions, CreateWysiwygPresetListOptions {\r\n}\r\nexport interface WysiwygProviderProps<Combined extends AnyCombinedUnion = WysiwygCombinedUnion> extends Except<Partial<RemirrorProviderProps<Combined>>, 'settings' | 'children'>, Partial<I18nContextProps> {\r\n    /**\r\n     * Unlike the remirror provider you can provide any number of children to this component.\r\n     */\r\n    children: ReactElement | ReactElement[];\r\n    /**\r\n     * Provide a theme to use for the editor. When this is provided your\r\n     * editor will be wrapped in an extra wrapper component depending on the\r\n     * value of the `ThemeComponent`.\r\n     */\r\n    theme?: RemirrorThemeType;\r\n    /**\r\n     * The theme component used to render the `theme`.\r\n     *\r\n     * @defaultValue 'div'\r\n     */\r\n    ThemeComponent?: ElementType;\r\n    /**\r\n     * The wysiwyg options used to create the initial manager when a manager is not\r\n     * provided.\r\n     */\r\n    settings?: CreateWysiwygManagerOptions;\r\n}\r\n",
      "wysiwyg-utils.d.ts": "import type { AnyCombinedUnion, RemirrorManager } from '@remirror/core';\r\nimport type { CreateWysiwygManagerOptions, WysiwygCombinedUnion } from './wysiwyg-types';\r\n/**\r\n * Create a wysiwyg remirror manager with all the default react presets and\r\n * required extensions.\r\n *\r\n * @remarks\r\n *\r\n * This is the recommended way to use the wysiwyg editor.\r\n */\r\nexport declare function createWysiwygManager<Combined extends AnyCombinedUnion>(combined: readonly Combined[], options?: CreateWysiwygManagerOptions): RemirrorManager<WysiwygCombinedUnion | Combined>;\r\n"
    }
  }
}
