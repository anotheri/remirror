/**
 * @module
 *
 * DO NOT EDIT: AUTO-GENERATED FILE
 * @see `@remirror/playground/scripts/import-remirror.ts`
 */

import { useRemirrorPlayground } from '../use-remirror-playground';

export const IMPORT_CACHE: { [moduleName: string]: any } = {
  // Automated unscoped imports.
  'remirror/core/constants': require('remirror/core/constants'),
  'remirror/core/helpers': require('remirror/core/helpers'),
  'remirror/core': require('remirror/core'),
  'remirror/core/types': require('remirror/core/types'),
  'remirror/core/utils': require('remirror/core/utils'),
  'remirror/extension/annotation': require('remirror/extension/annotation'),
  'remirror/extension/auto-link': require('remirror/extension/auto-link'),
  'remirror/extension/bidi': require('remirror/extension/bidi'),
  'remirror/extension/blockquote': require('remirror/extension/blockquote'),
  'remirror/extension/bold': require('remirror/extension/bold'),
  'remirror/extension/code': require('remirror/extension/code'),
  'remirror/extension/code-block': require('remirror/extension/code-block'),
  'remirror/extension/collaboration': require('remirror/extension/collaboration'),
  'remirror/extension/diff': require('remirror/extension/diff'),
  'remirror/extension/doc': require('remirror/extension/doc'),
  'remirror/extension/drop-cursor': require('remirror/extension/drop-cursor'),
  'remirror/extension/emoji': require('remirror/extension/emoji'),
  'remirror/extension/epic-mode': require('remirror/extension/epic-mode'),
  'remirror/extension/events': require('remirror/extension/events'),
  'remirror/extension/gap-cursor': require('remirror/extension/gap-cursor'),
  'remirror/extension/hard-break': require('remirror/extension/hard-break'),
  'remirror/extension/heading': require('remirror/extension/heading'),
  'remirror/extension/history': require('remirror/extension/history'),
  'remirror/extension/horizontal-rule': require('remirror/extension/horizontal-rule'),
  'remirror/extension/image': require('remirror/extension/image'),
  'remirror/extension/italic': require('remirror/extension/italic'),
  'remirror/extension/link': require('remirror/extension/link'),
  'remirror/extension/mention': require('remirror/extension/mention'),
  'remirror/extension/paragraph': require('remirror/extension/paragraph'),
  'remirror/extension/placeholder': require('remirror/extension/placeholder'),
  'remirror/extension/position-tracker': require('remirror/extension/position-tracker'),
  'remirror/extension/positioner': require('remirror/extension/positioner'),
  'remirror/extension/react-component': require('remirror/extension/react-component'),
  'remirror/extension/react-ssr': require('remirror/extension/react-ssr'),
  'remirror/extension/search': require('remirror/extension/search'),
  'remirror/extension/strike': require('remirror/extension/strike'),
  'remirror/extension/text': require('remirror/extension/text'),
  'remirror/extension/trailing-node': require('remirror/extension/trailing-node'),
  'remirror/extension/underline': require('remirror/extension/underline'),
  'remirror/extension/yjs': require('remirror/extension/yjs'),
  'remirror/preset/core': require('remirror/preset/core'),
  'remirror/preset/embed': require('remirror/preset/embed'),
  'remirror/preset/list': require('remirror/preset/list'),
  'remirror/preset/react': require('remirror/preset/react'),
  'remirror/preset/social': require('remirror/preset/social'),
  'remirror/preset/table': require('remirror/preset/table'),
  'remirror/preset/wysiwyg': require('remirror/preset/wysiwyg'),
  'remirror/react': require('remirror/react'),
  'remirror/react/utils': require('remirror/react/utils'),
  'remirror/react/social': require('remirror/react/social'),
  'remirror/react/wysiwyg': require('remirror/react/wysiwyg'),

  // Automated scoped imports.
  '@remirror/core-constants': require('remirror/core/constants'),
  '@remirror/core-helpers': require('remirror/core/helpers'),
  '@remirror/core': require('remirror/core'),
  '@remirror/core-types': require('remirror/core/types'),
  '@remirror/core-utils': require('remirror/core/utils'),
  '@remirror/extension-annotation': require('remirror/extension/annotation'),
  '@remirror/extension-auto-link': require('remirror/extension/auto-link'),
  '@remirror/extension-bidi': require('remirror/extension/bidi'),
  '@remirror/extension-blockquote': require('remirror/extension/blockquote'),
  '@remirror/extension-bold': require('remirror/extension/bold'),
  '@remirror/extension-code': require('remirror/extension/code'),
  '@remirror/extension-code-block': require('remirror/extension/code-block'),
  '@remirror/extension-collaboration': require('remirror/extension/collaboration'),
  '@remirror/extension-diff': require('remirror/extension/diff'),
  '@remirror/extension-doc': require('remirror/extension/doc'),
  '@remirror/extension-drop-cursor': require('remirror/extension/drop-cursor'),
  '@remirror/extension-emoji': require('remirror/extension/emoji'),
  '@remirror/extension-epic-mode': require('remirror/extension/epic-mode'),
  '@remirror/extension-events': require('remirror/extension/events'),
  '@remirror/extension-gap-cursor': require('remirror/extension/gap-cursor'),
  '@remirror/extension-hard-break': require('remirror/extension/hard-break'),
  '@remirror/extension-heading': require('remirror/extension/heading'),
  '@remirror/extension-history': require('remirror/extension/history'),
  '@remirror/extension-horizontal-rule': require('remirror/extension/horizontal-rule'),
  '@remirror/extension-image': require('remirror/extension/image'),
  '@remirror/extension-italic': require('remirror/extension/italic'),
  '@remirror/extension-link': require('remirror/extension/link'),
  '@remirror/extension-mention': require('remirror/extension/mention'),
  '@remirror/extension-paragraph': require('remirror/extension/paragraph'),
  '@remirror/extension-placeholder': require('remirror/extension/placeholder'),
  '@remirror/extension-position-tracker': require('remirror/extension/position-tracker'),
  '@remirror/extension-positioner': require('remirror/extension/positioner'),
  '@remirror/extension-react-component': require('remirror/extension/react-component'),
  '@remirror/extension-react-ssr': require('remirror/extension/react-ssr'),
  '@remirror/extension-search': require('remirror/extension/search'),
  '@remirror/extension-strike': require('remirror/extension/strike'),
  '@remirror/extension-text': require('remirror/extension/text'),
  '@remirror/extension-trailing-node': require('remirror/extension/trailing-node'),
  '@remirror/extension-underline': require('remirror/extension/underline'),
  '@remirror/extension-yjs': require('remirror/extension/yjs'),
  '@remirror/preset-core': require('remirror/preset/core'),
  '@remirror/preset-embed': require('remirror/preset/embed'),
  '@remirror/preset-list': require('remirror/preset/list'),
  '@remirror/preset-react': require('remirror/preset/react'),
  '@remirror/preset-social': require('remirror/preset/social'),
  '@remirror/preset-table': require('remirror/preset/table'),
  '@remirror/preset-wysiwyg': require('remirror/preset/wysiwyg'),
  '@remirror/react': require('remirror/react'),
  '@remirror/react-utils': require('remirror/react/utils'),
  '@remirror/react-social': require('remirror/react/social'),
  '@remirror/react-wysiwyg': require('remirror/react/wysiwyg'),

  // Manually created imports.
  remirror: require('remirror'),
  '@remirror/dev': require('@remirror/dev'),
  '@remirror/playground': { useRemirrorPlayground },
  '@remirror/pm/commands': require('@remirror/pm/commands'),
  '@remirror/pm/dropcursor': require('@remirror/pm/dropcursor'),
  '@remirror/pm/gapcursor': require('@remirror/pm/gapcursor'),
  '@remirror/pm/history': require('@remirror/pm/history'),
  '@remirror/pm/inputrules': require('@remirror/pm/inputrules'),
  '@remirror/pm/keymap': require('@remirror/pm/keymap'),
  '@remirror/pm/model': require('@remirror/pm/model'),
  '@remirror/pm/schema-list': require('@remirror/pm/schema-list'),
  '@remirror/pm/state': require('@remirror/pm/state'),
  '@remirror/pm/suggest': require('@remirror/pm/suggest'),
  '@remirror/pm/tables': require('@remirror/pm/tables'),
  '@remirror/pm/transform': require('@remirror/pm/transform'),
  '@remirror/pm/view': require('@remirror/pm/view'),

  // Manually created external dependencies.
  react: require('react'),
  '@babel/runtime/helpers/interopRequireDefault': require('@babel/runtime/helpers/interopRequireDefault'),
  '@babel/runtime/helpers/interopRequireWildcard': require('@babel/runtime/helpers/interopRequireWildcard'),
  '@babel/runtime/helpers/slicedToArray': require('@babel/runtime/helpers/slicedToArray'),
  '@babel/runtime/helpers/createClass': require('@babel/runtime/helpers/createClass'),
  '@babel/runtime/helpers/possibleConstructorReturn': require('@babel/runtime/helpers/possibleConstructorReturn'),
  '@babel/runtime/helpers/extends': require('@babel/runtime/helpers/extends'),
  '@babel/runtime/helpers/assertThisInitialized': require('@babel/runtime/helpers/assertThisInitialized'),
  '@babel/runtime/helpers/classCallCheck': require('@babel/runtime/helpers/classCallCheck'),
  '@babel/runtime/helpers/inherits': require('@babel/runtime/helpers/inherits'),
  '@babel/runtime/helpers/defineProperty': require('@babel/runtime/helpers/defineProperty'),
};

/**
 * The names and exports of the internally created modules.
 */
export const INTERNAL_MODULES: Array<{ moduleName: string; exports: string[] }> = [
  {
    moduleName: 'remirror/core/constants',
    exports: [
      'MarkGroup',
      'NodeGroup',
      'ExtensionTag',
      'RemirrorIdentifier',
      'ExtensionPriority',
      'ManagerPhase',
      'ErrorConstant',
      'EDITOR_CLASS_NAME',
      'EDITOR_CLASS_SELECTOR',
      'EMPTY_NODE',
      'EMPTY_PARAGRAPH_NODE',
      'LEAF_NODE_REPLACING_CHARACTER',
      'NON_BREAKING_SPACE_CHAR',
      'NULL_CHARACTER',
      'SELECTED_NODE_CLASS_NAME',
      'SELECTED_NODE_CLASS_SELECTOR',
      'ZERO_WIDTH_SPACE_CHAR',
      '__INTERNAL_REMIRROR_IDENTIFIER_KEY__',
    ],
  },
  {
    moduleName: 'remirror/core/helpers',
    exports: [
      'omit',
      'pick',
      'camelCase',
      'capitalCase',
      'constantCase',
      'kebabCase',
      'pascalCase',
      'pathCase',
      'snakeCase',
      'spaceCase',
      'debounce',
      'throttle',
      'Cast',
      'Merge',
      'RemirrorError',
      'bool',
      'callIfDefined',
      'capitalize',
      'clamp',
      'cleanupOS',
      'clone',
      'deepMerge',
      'entries',
      'findMatches',
      'flattenArray',
      'format',
      'freeze',
      'get',
      'getLazyArray',
      'hasOwnProperty',
      'includes',
      'invariant',
      'isAndroidOS',
      'isArray',
      'isBoolean',
      'isClass',
      'isDate',
      'isDirectInstanceOf',
      'isEmptyArray',
      'isEmptyObject',
      'isEqual',
      'isError',
      'isFunction',
      'isIdentifierOfType',
      'isInstanceOf',
      'isInteger',
      'isMap',
      'isNativePromise',
      'isNull',
      'isNullOrUndefined',
      'isNumber',
      'isObject',
      'isPlainObject',
      'isPrimitive',
      'isPromise',
      'isRegExp',
      'isRemirrorType',
      'isSafeInteger',
      'isSet',
      'isString',
      'isSymbol',
      'isUndefined',
      'keys',
      'last',
      'noop',
      'not',
      'object',
      'omitUndefined',
      'randomFloat',
      'randomInt',
      'range',
      'shallowClone',
      'sort',
      'startCase',
      'take',
      'toString',
      'trim',
      'uniqueArray',
      'uniqueBy',
      'uniqueId',
      'values',
      'within',
    ],
  },
  {
    moduleName: 'remirror/core',
    exports: [
      'MarkGroup',
      'NodeGroup',
      'ExtensionTag',
      'RemirrorIdentifier',
      'ExtensionPriority',
      'ManagerPhase',
      'ErrorConstant',
      'EDITOR_CLASS_NAME',
      'EDITOR_CLASS_SELECTOR',
      'EMPTY_NODE',
      'EMPTY_PARAGRAPH_NODE',
      'LEAF_NODE_REPLACING_CHARACTER',
      'NON_BREAKING_SPACE_CHAR',
      'NULL_CHARACTER',
      'SELECTED_NODE_CLASS_NAME',
      'SELECTED_NODE_CLASS_SELECTOR',
      'ZERO_WIDTH_SPACE_CHAR',
      '__INTERNAL_REMIRROR_IDENTIFIER_KEY__',
      'omit',
      'pick',
      'camelCase',
      'capitalCase',
      'constantCase',
      'kebabCase',
      'pascalCase',
      'pathCase',
      'snakeCase',
      'spaceCase',
      'debounce',
      'throttle',
      'Cast',
      'Merge',
      'RemirrorError',
      'bool',
      'callIfDefined',
      'capitalize',
      'clamp',
      'cleanupOS',
      'clone',
      'deepMerge',
      'entries',
      'findMatches',
      'flattenArray',
      'format',
      'freeze',
      'get',
      'getLazyArray',
      'hasOwnProperty',
      'includes',
      'invariant',
      'isAndroidOS',
      'isArray',
      'isBoolean',
      'isClass',
      'isDate',
      'isDirectInstanceOf',
      'isEmptyArray',
      'isEmptyObject',
      'isEqual',
      'isError',
      'isFunction',
      'isIdentifierOfType',
      'isInstanceOf',
      'isInteger',
      'isMap',
      'isNativePromise',
      'isNull',
      'isNullOrUndefined',
      'isNumber',
      'isObject',
      'isPlainObject',
      'isPrimitive',
      'isPromise',
      'isRegExp',
      'isRemirrorType',
      'isSafeInteger',
      'isSet',
      'isString',
      'isSymbol',
      'isUndefined',
      'keys',
      'last',
      'noop',
      'not',
      'object',
      'omitUndefined',
      'randomFloat',
      'randomInt',
      'range',
      'shallowClone',
      'sort',
      'startCase',
      'take',
      'toString',
      'trim',
      'uniqueArray',
      'uniqueBy',
      'uniqueId',
      'values',
      'within',
      'ALT',
      'CAPS_LOCK',
      'COMMAND',
      'CTRL',
      'Modifier',
      'SHIFT',
      'WINDOWS',
      'applyClonedTransaction',
      'areSchemaCompatible',
      'atDocEnd',
      'atDocStart',
      'canInsertNode',
      'chainCommands',
      'chainKeyBindingCommands',
      'cloneTransaction',
      'closestElement',
      'containsNodesOfType',
      'convertCommand',
      'createDocumentNode',
      'emptyCommandFunction',
      'endPositionOfParent',
      'environment',
      'findBlockNodes',
      'findChildren',
      'findChildrenByAttribute',
      'findChildrenByMark',
      'findChildrenByNode',
      'findElementAtPosition',
      'findInlineNodes',
      'findNodeAtPosition',
      'findNodeAtSelection',
      'findParentNode',
      'findParentNodeOfType',
      'findPositionOfNodeAfter',
      'findPositionOfNodeBefore',
      'findSelectedNodeOfType',
      'findTextNodes',
      'flatten',
      'fromHtml',
      'getCursor',
      'getDocument',
      'getLineHeight',
      'getMarkAttributes',
      'getMarkRange',
      'getMatchString',
      'getNearestNonTextNode',
      'getPluginMeta',
      'getPluginState',
      'getRemirrorJSON',
      'getSelectedGroup',
      'getSelectedWord',
      'getTextContentFromSlice',
      'getTextSelection',
      'hasTransactionChanged',
      'isAllSelection',
      'isApple',
      'isChrome',
      'isDocNode',
      'isDocNodeEmpty',
      'isDomNode',
      'isEditorSchema',
      'isEditorState',
      'isElementDomNode',
      'isMarkActive',
      'isMarkType',
      'isNodeActive',
      'isNodeOfType',
      'isNodeSelection',
      'isNodeType',
      'isProsemirrorMark',
      'isProsemirrorNode',
      'isRemirrorJSON',
      'isResolvedPos',
      'isSelection',
      'isSelectionEmpty',
      'isStateEqual',
      'isTextDomNode',
      'isTextSelection',
      'isTransaction',
      'lift',
      'markEqualsType',
      'markInputRule',
      'markPasteRule',
      'mergeKeyBindings',
      'mergeProsemirrorKeyBindings',
      'mod',
      'nodeInputRule',
      'nodeNameMatchesList',
      'nonChainable',
      'plainInputRule',
      'removeMark',
      'removeNodeAfter',
      'removeNodeAtPosition',
      'removeNodeBefore',
      'replaceNodeAtPosition',
      'replaceText',
      'schemaToJSON',
      'setBlockType',
      'setPluginMeta',
      'shouldUseDomEnvironment',
      'startPositionOfParent',
      'toDom',
      'toHtml',
      'toggleBlockItem',
      'toggleList',
      'toggleWrap',
      'updateMark',
      'wrapIn',
      'AttributesExtension',
      'BuiltinPreset',
      'CommandsExtension',
      'EditorWrapper',
      'HelpersExtension',
      'InputRulesExtension',
      'KeymapExtension',
      'MarkExtension',
      'NodeExtension',
      'NodeViewsExtension',
      'PasteRulesExtension',
      'PlainExtension',
      'PluginsExtension',
      'Preset',
      'RemirrorManager',
      'SchemaExtension',
      'SuggestExtension',
      'TagsExtension',
      'editorStyles',
      'extensionDecorator',
      'isExtension',
      'isExtensionConstructor',
      'isMarkExtension',
      'isNodeExtension',
      'isPlainExtension',
      'isPreset',
      'isPresetConstructor',
      'isRemirrorManager',
      'isValidExtensionConstructor',
      'mutateDefaultExtensionOptions',
      'presetDecorator',
      'toggleMark',
    ],
  },
  {
    moduleName: 'remirror/core/types',
    exports: [],
  },
  {
    moduleName: 'remirror/core/utils',
    exports: [
      'ALT',
      'CAPS_LOCK',
      'COMMAND',
      'CTRL',
      'Modifier',
      'SHIFT',
      'WINDOWS',
      'applyClonedTransaction',
      'areSchemaCompatible',
      'atDocEnd',
      'atDocStart',
      'canInsertNode',
      'chainCommands',
      'chainKeyBindingCommands',
      'cloneTransaction',
      'closestElement',
      'containsNodesOfType',
      'convertCommand',
      'createDocumentNode',
      'emptyCommandFunction',
      'endPositionOfParent',
      'environment',
      'findBlockNodes',
      'findChildren',
      'findChildrenByAttribute',
      'findChildrenByMark',
      'findChildrenByNode',
      'findElementAtPosition',
      'findInlineNodes',
      'findNodeAtPosition',
      'findNodeAtSelection',
      'findParentNode',
      'findParentNodeOfType',
      'findPositionOfNodeAfter',
      'findPositionOfNodeBefore',
      'findSelectedNodeOfType',
      'findTextNodes',
      'flatten',
      'fromHtml',
      'getCursor',
      'getDocument',
      'getLineHeight',
      'getMarkAttributes',
      'getMarkRange',
      'getMatchString',
      'getNearestNonTextNode',
      'getPluginMeta',
      'getPluginState',
      'getRemirrorJSON',
      'getSelectedGroup',
      'getSelectedWord',
      'getTextContentFromSlice',
      'getTextSelection',
      'hasTransactionChanged',
      'isAllSelection',
      'isApple',
      'isChrome',
      'isDocNode',
      'isDocNodeEmpty',
      'isDomNode',
      'isEditorSchema',
      'isEditorState',
      'isElementDomNode',
      'isMarkActive',
      'isMarkType',
      'isNodeActive',
      'isNodeOfType',
      'isNodeSelection',
      'isNodeType',
      'isProsemirrorMark',
      'isProsemirrorNode',
      'isRemirrorJSON',
      'isResolvedPos',
      'isSelection',
      'isSelectionEmpty',
      'isStateEqual',
      'isTextDomNode',
      'isTextSelection',
      'isTransaction',
      'lift',
      'markEqualsType',
      'markInputRule',
      'markPasteRule',
      'mergeKeyBindings',
      'mergeProsemirrorKeyBindings',
      'mod',
      'nodeInputRule',
      'nodeNameMatchesList',
      'nonChainable',
      'plainInputRule',
      'removeMark',
      'removeNodeAfter',
      'removeNodeAtPosition',
      'removeNodeBefore',
      'replaceNodeAtPosition',
      'replaceText',
      'schemaToJSON',
      'setBlockType',
      'setPluginMeta',
      'shouldUseDomEnvironment',
      'startPositionOfParent',
      'toDom',
      'toHtml',
      'toggleBlockItem',
      'toggleList',
      'toggleWrap',
      'updateMark',
      'wrapIn',
    ],
  },
  {
    moduleName: 'remirror/extension/annotation',
    exports: ['AnnotationExtension', 'createCenteredAnnotationPositioner'],
  },
  {
    moduleName: 'remirror/extension/auto-link',
    exports: ['AutoLinkExtension'],
  },
  {
    moduleName: 'remirror/extension/bidi',
    exports: ['BidiExtension'],
  },
  {
    moduleName: 'remirror/extension/blockquote',
    exports: ['BlockquoteExtension'],
  },
  {
    moduleName: 'remirror/extension/bold',
    exports: ['BoldExtension'],
  },
  {
    moduleName: 'remirror/extension/code',
    exports: ['CodeExtension'],
  },
  {
    moduleName: 'remirror/extension/code-block',
    exports: ['CodeBlockExtension', 'getLanguage'],
  },
  {
    moduleName: 'remirror/extension/collaboration',
    exports: ['CollaborationExtension'],
  },
  {
    moduleName: 'remirror/extension/diff',
    exports: ['DiffExtension'],
  },
  {
    moduleName: 'remirror/extension/doc',
    exports: ['DocExtension'],
  },
  {
    moduleName: 'remirror/extension/drop-cursor',
    exports: ['DropCursorExtension'],
  },
  {
    moduleName: 'remirror/extension/emoji',
    exports: ['DEFAULT_FREQUENTLY_USED', 'EmojiExtension'],
  },
  {
    moduleName: 'remirror/extension/epic-mode',
    exports: ['COLORS', 'EpicModeExtension', 'defaultEffect', 'heartEffect', 'spawningEffect'],
  },
  {
    moduleName: 'remirror/extension/events',
    exports: ['EventsExtension'],
  },
  {
    moduleName: 'remirror/extension/gap-cursor',
    exports: ['GapCursorExtension', 'isGapCursorSelection'],
  },
  {
    moduleName: 'remirror/extension/hard-break',
    exports: ['HardBreakExtension'],
  },
  {
    moduleName: 'remirror/extension/heading',
    exports: ['HeadingExtension'],
  },
  {
    moduleName: 'remirror/extension/history',
    exports: ['HistoryExtension'],
  },
  {
    moduleName: 'remirror/extension/horizontal-rule',
    exports: ['HorizontalRuleExtension'],
  },
  {
    moduleName: 'remirror/extension/image',
    exports: ['ImageExtension', 'isImageFileType'],
  },
  {
    moduleName: 'remirror/extension/italic',
    exports: ['ItalicExtension'],
  },
  {
    moduleName: 'remirror/extension/link',
    exports: ['LinkExtension'],
  },
  {
    moduleName: 'remirror/extension/mention',
    exports: ['MentionExtension'],
  },
  {
    moduleName: 'remirror/extension/paragraph',
    exports: ['ParagraphExtension'],
  },
  {
    moduleName: 'remirror/extension/placeholder',
    exports: ['EMPTY_NODE_CLASS_NAME', 'EMPTY_NODE_CLASS_SELECTOR', 'PlaceholderExtension'],
  },
  {
    moduleName: 'remirror/extension/position-tracker',
    exports: ['PositionTrackerExtension'],
  },
  {
    moduleName: 'remirror/extension/positioner',
    exports: [
      'Positioner',
      'PositionerExtension',
      'centeredSelectionPositioner',
      'cursorPopupPositioner',
      'emptyCoords',
      'emptyVirtualPosition',
      'floatingSelectionPositioner',
      'getPositioner',
      'hasStateChanged',
      'isEmptyBlockNode',
    ],
  },
  {
    moduleName: 'remirror/extension/react-component',
    exports: ['PortalContainer', 'ReactComponentExtension', 'RemirrorPortals'],
  },
  {
    moduleName: 'remirror/extension/react-ssr',
    exports: ['ReactSSRExtension'],
  },
  {
    moduleName: 'remirror/extension/search',
    exports: ['SearchExtension', 'rotateHighlightedIndex'],
  },
  {
    moduleName: 'remirror/extension/strike',
    exports: ['StrikeExtension'],
  },
  {
    moduleName: 'remirror/extension/text',
    exports: ['TextExtension'],
  },
  {
    moduleName: 'remirror/extension/trailing-node',
    exports: ['TrailingNodeExtension'],
  },
  {
    moduleName: 'remirror/extension/underline',
    exports: ['UnderlineExtension'],
  },
  {
    moduleName: 'remirror/extension/yjs',
    exports: ['YjsExtension'],
  },
  {
    moduleName: 'remirror/preset/core',
    exports: ['CorePreset', 'createCoreManager'],
  },
  {
    moduleName: 'remirror/preset/embed',
    exports: ['EmbedPreset', 'IframeExtension'],
  },
  {
    moduleName: 'remirror/preset/list',
    exports: ['BulletListExtension', 'ListItemExtension', 'ListPreset', 'OrderedListExtension'],
  },
  {
    moduleName: 'remirror/preset/react',
    exports: ['ReactPreset'],
  },
  {
    moduleName: 'remirror/preset/social',
    exports: ['SocialPreset'],
  },
  {
    moduleName: 'remirror/preset/table',
    exports: [
      'TableCellExtension',
      'TableExtension',
      'TableHeaderCellExtension',
      'TablePreset',
      'TableRowExtension',
    ],
  },
  {
    moduleName: 'remirror/preset/wysiwyg',
    exports: [
      'EmbedPreset',
      'ListPreset',
      'TablePreset',
      'WysiwygPreset',
      'createWysiwygPresetList',
    ],
  },
  {
    moduleName: 'remirror/react',
    exports: [
      'useSetState',
      'ReactSerializer',
      'RenderTree',
      'gatherDomMethods',
      'mapProps',
      'I18nProvider',
      'RemirrorProvider',
      'ThemeProvider',
      'createReactManager',
      'useEffectWithWarning',
      'useExtension',
      'useForceUpdate',
      'useI18n',
      'useManager',
      'useMeasure',
      'useMultiPositioner',
      'usePositioner',
      'usePreset',
      'usePrevious',
      'useRemirror',
    ],
  },
  {
    moduleName: 'remirror/react/utils',
    exports: [
      'RemirrorType',
      'addKeyToElement',
      'asDefaultProps',
      'getElementProps',
      'isReactDOMElement',
      'isReactFragment',
      'isRemirrorContextProvider',
      'isRemirrorElement',
      'isRemirrorProvider',
      'isValidElement',
      'oneChildOnly',
      'propIsFunction',
    ],
  },
  {
    moduleName: 'remirror/react/social',
    exports: [
      'SocialCharacterCount',
      'SocialCharacterCountWrapper',
      'SocialEditor',
      'SocialEditorComponent',
      'SocialEditorWrapperComponent',
      'SocialEmojiComponent',
      'SocialMentionComponent',
      'SocialProvider',
      'getMentionLabel',
      'indexFromArrowPress',
      'mapToActiveIndex',
      'messages',
      'socialManagerArgs',
      'useSocialEmoji',
      'useSocialManager',
      'useSocialMention',
      'useSocialRemirror',
    ],
  },
  {
    moduleName: 'remirror/react/wysiwyg',
    exports: [
      'WysiwygEditor',
      'WysiwygEditorComponent',
      'WysiwygEditorWrapperComponent',
      'WysiwygProvider',
    ],
  },
];
